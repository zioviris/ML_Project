{"version":3,"file":"static/js/8618.bf8b88d1.chunk.js","mappings":"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","sources":["common/components/PageContainer.tsx","experiment-tracking/components/run-page/RunViewArtifactTab.tsx","experiment-tracking/components/run-page/useRunViewActiveTab.tsx","experiment-tracking/components/run-page/RunViewModeSwitch.tsx","experiment-tracking/components/run-page/RunViewHeaderRegisterModelButton.tsx","experiment-tracking/components/run-page/RunViewHeader.tsx","experiment-tracking/components/run-page/overview/RunViewStatusBox.tsx","experiment-tracking/components/run-page/overview/RunViewUserLinkBox.tsx","experiment-tracking/components/run-page/overview/RunViewMetricsTable.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBox.tsx","experiment-tracking/components/run-page/overview/RunViewParentRunBox.tsx","experiment-tracking/components/run-page/overview/RunViewTagsBox.tsx","experiment-tracking/components/run-page/overview/RunViewDescriptionBox.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredModelsBox.tsx","experiment-tracking/pages/prompts/hooks/usePromptVersionsForRunQuery.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredPromptsBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewSourceBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsTable.tsx","experiment-tracking/hooks/logged-models/useCombinedRunInputsOutputsModels.tsx","experiment-tracking/components/run-page/RunViewOverview.tsx","experiment-tracking/components/RunNotFoundView.tsx","experiment-tracking/components/run-page/RunViewChartTooltipBody.tsx","experiment-tracking/components/run-page/RunViewMetricCharts.tsx","experiment-tracking/components/run-page/RunViewTracesTab.tsx","experiment-tracking/components/run-page/RunPage.tsx","experiment-tracking/pages/prompts/api.ts","experiment-tracking/pages/prompts/utils.ts"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: 'calc(100% - 60px)', // 60px comes from header height\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewArtifactTab = ({\n  runTags,\n  runOutputs,\n  artifactUri,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  artifactUri?: string;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Use scrollable artifact area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        paddingBottom: theme.spacing.md,\n        position: 'relative',\n      }}\n    >\n      <ArtifactPage\n        runUuid={runUuid}\n        runTags={runTags}\n        runOutputs={runOutputs}\n        useAutoHeight={useFullHeightPage}\n        artifactRootUri={artifactUri}\n      />\n    </div>\n  );\n};\n","import { shouldEnableRunDetailsPageTracesTab } from '../../../common/utils/FeatureUtils';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { RunPageTabName } from '../../constants';\n\n/**\n * Returns the run view's active tab.\n * - Supports multi-slash artifact paths (hence '*' catch-all param)\n * - Supports both new (/artifacts/...) and previous (/artifactPath/...) routes\n */\nexport const useRunViewActiveTab = (): RunPageTabName => {\n  const { '*': tabParam } = useParams<{ '*': string }>();\n  if (tabParam === 'model-metrics') {\n    return RunPageTabName.MODEL_METRIC_CHARTS;\n  }\n  if (tabParam === 'system-metrics') {\n    return RunPageTabName.SYSTEM_METRIC_CHARTS;\n  }\n  if (shouldEnableRunDetailsPageTracesTab() && tabParam === 'traces') {\n    return RunPageTabName.TRACES;\n  }\n  if (tabParam?.match(/^(artifactPath|artifacts)/)) {\n    return RunPageTabName.ARTIFACTS;\n  }\n\n  return RunPageTabName.OVERVIEW;\n};\n","import { LegacyTabs } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { RunPageTabName } from '../../constants';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { useState } from 'react';\nimport { PreviewBadge } from '../../../shared/building_blocks/PreviewBadge';\nimport { shouldEnableRunDetailsPageTracesTab } from '../../../common/utils/FeatureUtils';\n\n// Set of tabs that when active, the margin of the tab selector should be removed for better displaying\nconst TABS_WITHOUT_MARGIN = [RunPageTabName.ARTIFACTS, RunPageTabName.EVALUATIONS];\n\n/**\n * Mode switcher for the run details page.\n */\nexport const RunViewModeSwitch = () => {\n  const { experimentId, runUuid } = useParams<{ runUuid: string; experimentId: string }>();\n  const navigate = useNavigate();\n  const currentTab = useRunViewActiveTab();\n  const [removeTabMargin, setRemoveTabMargin] = useState(TABS_WITHOUT_MARGIN.includes(currentTab));\n\n  const onTabChanged = (newTabKey: string) => {\n    if (!experimentId || !runUuid || currentTab === newTabKey) {\n      return;\n    }\n\n    setRemoveTabMargin(TABS_WITHOUT_MARGIN.includes(newTabKey as RunPageTabName));\n\n    if (newTabKey === RunPageTabName.OVERVIEW) {\n      navigate(Routes.getRunPageRoute(experimentId, runUuid));\n      return;\n    }\n    navigate(Routes.getRunPageTabRoute(experimentId, runUuid, newTabKey));\n  };\n\n  return (\n    // @ts-expect-error TS(2322)\n    <LegacyTabs activeKey={currentTab} onChange={onTabChanged} tabBarStyle={{ margin: removeTabMargin && '0px' }}>\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Overview\" description=\"Run details page > tab selector > overview tab\" />\n        }\n        key={RunPageTabName.OVERVIEW}\n      />\n\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"Model metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.MODEL_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"System metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.SYSTEM_METRIC_CHARTS}\n      />\n      {shouldEnableRunDetailsPageTracesTab() && (\n        <LegacyTabs.TabPane\n          tab={<FormattedMessage defaultMessage=\"Traces\" description=\"Run details page > tab selector > Traces tab\" />}\n          key={RunPageTabName.TRACES}\n        />\n      )}\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Artifacts\" description=\"Run details page > tab selector > artifacts tab\" />\n        }\n        key={RunPageTabName.ARTIFACTS}\n      />\n    </LegacyTabs>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  NewWindowIcon,\n  Tag,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { first, last, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { ModelVersionStatusIcons } from '../../../model-registry/constants';\nimport { ModelRegistryRoutes } from '../../../model-registry/routes';\nimport type { ReduxState } from '../../../redux-types';\nimport Routes from '../../routes';\nimport { KeyValueEntity, ModelVersionInfoEntity } from '../../types';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\nimport { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\ninterface LoggedModelWithRegistrationInfo {\n  path: string;\n  absolutePath: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}\n\nfunction LoggedModelsDropdownContent({\n  models,\n  onRegisterClick,\n  experimentId,\n  runUuid,\n}: {\n  models: LoggedModelWithRegistrationInfo[];\n  onRegisterClick: (model: LoggedModelWithRegistrationInfo) => void;\n  experimentId: string;\n  runUuid: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const renderSection = (title: string, sectionModels: LoggedModelWithRegistrationInfo[]) => {\n    return (\n      <DropdownMenu.Group>\n        <DropdownMenu.Label>{title}</DropdownMenu.Label>\n        {sectionModels.map((model) => {\n          const registeredModelSummary = first(model.registeredModelVersionSummaries);\n          if (!registeredModelSummary) {\n            return (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_50\"\n                onClick={() => onRegisterClick(model)}\n                key={model.absolutePath}\n              >\n                <div css={{ marginRight: theme.spacing.md }}>{last(model.path.split('/'))}</div>\n                <DropdownMenu.HintColumn>\n                  <Link\n                    target=\"_blank\"\n                    to={Routes.getRunPageTabRoute(experimentId, runUuid, 'artifacts/' + model.path)}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_58\"\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      endIcon={<NewWindowIcon />}\n                    >\n                      <FormattedMessage\n                        defaultMessage=\"View model\"\n                        description=\"Run page > Header > Register model dropdown > View model button label\"\n                      />\n                    </Button>\n                  </Link>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            );\n          }\n          const { status, displayedName, version, link } = registeredModelSummary;\n\n          return (\n            <Link target=\"_blank\" to={link} key={model.absolutePath}>\n              <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_80\">\n                <DropdownMenu.IconWrapper css={{ display: 'flex', alignItems: 'center' }}>\n                  {status === 'READY' ? <RegisteredModelOkIcon /> : status ? ModelVersionStatusIcons[status] : null}\n                </DropdownMenu.IconWrapper>\n                <span css={{ marginRight: theme.spacing.md }}>\n                  {displayedName}\n                  <Tag\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_90\"\n                    css={{ marginLeft: 8, marginRight: 4 }}\n                  >\n                    v{version}\n                  </Tag>\n                </span>\n                <DropdownMenu.HintColumn>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_89\"\n                    type=\"link\"\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                    endIcon={<NewWindowIcon />}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Go to model\"\n                      description=\"Run page > Header > Register model dropdown > Go to model button label\"\n                    />\n                  </Button>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            </Link>\n          );\n        })}\n      </DropdownMenu.Group>\n    );\n  };\n  const registeredModels = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n  const unregisteredModels = models.filter((model) => !model.registeredModelVersionSummaries.length);\n  return (\n    <>\n      {unregisteredModels.length ? renderSection('Unregistered models', unregisteredModels) : null}\n      {unregisteredModels.length && registeredModels.length ? <DropdownMenu.Separator /> : null}\n      {registeredModels.length ? renderSection('Registered models', registeredModels) : null}\n    </>\n  );\n}\n\nconst getRegisteredModelVersionLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\nexport const RunViewHeaderRegisterModelButton = ({\n  runUuid,\n  experimentId,\n  runTags,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const loggedModelPaths = useMemo(\n    () => (runTags ? Utils.getLoggedModelsFromTags(runTags).map(({ artifactPath }) => artifactPath) : []),\n    [runTags],\n  );\n\n  const models = useMemo<LoggedModelWithRegistrationInfo[]>(\n    () =>\n      orderBy(\n        loggedModelPaths.map((path) => ({\n          path,\n          absolutePath: `${artifactRootUri}/${path}`,\n          registeredModelVersionSummaries:\n            registeredModelVersionSummaries?.filter(({ source }) => source === `${artifactRootUri}/${path}`) || [],\n        })),\n        (model) => parseInt(model.registeredModelVersionSummaries[0]?.version || '0', 10),\n        'desc',\n      ),\n    [loggedModelPaths, registeredModelVersionSummaries, artifactRootUri],\n  );\n\n  const [selectedModelToRegister, setSelectedModelToRegister] = useState<LoggedModelWithRegistrationInfo | null>(null);\n\n  if (models.length > 1) {\n    const modelsRegistered = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n\n    return (\n      <>\n        {selectedModelToRegister && (\n          <RegisterModel\n            runUuid={runUuid}\n            modelPath={selectedModelToRegister.absolutePath}\n            modelRelativePath={selectedModelToRegister.path}\n            disabled={false}\n            showButton={false}\n            modalVisible\n            onCloseModal={() => setSelectedModelToRegister(null)}\n          />\n        )}\n        <DropdownMenu.Root modal={false}>\n          <LegacyTooltip\n            placement=\"bottom\"\n            title={\n              <FormattedMessage\n                defaultMessage=\"{registeredCount}/{loggedCount} logged models are registered\"\n                description=\"Run page > Header > Register model dropdown > Button tooltip\"\n                values={{ registeredCount: modelsRegistered.length, loggedCount: models.length }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_195\"\n                type=\"primary\"\n                endIcon={<ChevronDownIcon />}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Register model\"\n                  description=\"Run page > Header > Register model dropdown > Button label when some models are not registered\"\n                />\n              </Button>\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"end\">\n            <LoggedModelsDropdownContent\n              models={models}\n              onRegisterClick={setSelectedModelToRegister}\n              experimentId={experimentId}\n              runUuid={runUuid}\n            />\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </>\n    );\n  }\n\n  const singleModel = first(models);\n\n  if (!singleModel) {\n    return null;\n  }\n\n  const registeredModelVersionSummary = first(singleModel.registeredModelVersionSummaries);\n\n  if (registeredModelVersionSummary) {\n    return (\n      <Link to={registeredModelVersionSummary.link} target=\"_blank\" css={{ marginLeft: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_231\"\n          endIcon={<NewWindowIcon />}\n          type=\"link\"\n        >\n          Model registered\n        </Button>\n      </Link>\n    );\n  }\n  return (\n    <RegisterModel\n      disabled={false}\n      runUuid={runUuid}\n      modelPath={singleModel.absolutePath}\n      modelRelativePath={singleModel.path}\n      showButton\n      buttonType=\"primary\"\n    />\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { OverflowMenu, PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport Routes from '../../routes';\nimport type { ExperimentEntity, KeyValueEntity } from '../../types';\nimport { RunViewModeSwitch } from './RunViewModeSwitch';\nimport Utils from '../../../common/utils/Utils';\nimport { RunViewHeaderRegisterModelButton } from './RunViewHeaderRegisterModelButton';\nimport type { UseGetRunQueryResponseExperiment } from './hooks/useGetRunQuery';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Run details page header component, common for all page view modes\n */\nexport const RunViewHeader = ({\n  hasComparedExperimentsBefore,\n  comparedExperimentIds = [],\n  experiment,\n  runDisplayName,\n  runTags,\n  runParams,\n  runUuid,\n  handleRenameRunClick,\n  handleDeleteRunClick,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n  isLoading,\n}: {\n  hasComparedExperimentsBefore?: boolean;\n  comparedExperimentIds?: string[];\n  runDisplayName: string;\n  runUuid: string;\n  runTags: Record<string, KeyValueEntity>;\n  runParams: Record<string, KeyValueEntity>;\n  experiment: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  handleRenameRunClick: () => void;\n  handleDeleteRunClick?: () => void;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  isLoading?: boolean;\n}) => {\n  function getExperimentPageLink() {\n    return hasComparedExperimentsBefore && comparedExperimentIds ? (\n      <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>\n        <FormattedMessage\n          defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n          // eslint-disable-next-line max-len\n          description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n          values={{\n            numExperiments: comparedExperimentIds.length,\n          }}\n        />\n      </Link>\n    ) : (\n      <Link to={Routes.getExperimentPageRoute(experiment?.experimentId ?? '')} data-test-id=\"experiment-runs-link\">\n        {experiment.name}\n      </Link>\n    );\n  }\n\n  const breadcrumbs = [getExperimentPageLink()];\n\n  const renderRegisterModelButton = () => {\n    return (\n      <RunViewHeaderRegisterModelButton\n        runUuid={runUuid}\n        experimentId={experiment?.experimentId ?? ''}\n        runTags={runTags}\n        artifactRootUri={artifactRootUri}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n      />\n    );\n  };\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      <PageHeader\n        title={<span data-test-id=\"runs-header\">{runDisplayName}</span>}\n        breadcrumbs={breadcrumbs}\n        /* prettier-ignore */\n      >\n        <OverflowMenu\n          menu={[\n            {\n              id: 'overflow-rename-button',\n              onClick: handleRenameRunClick,\n              itemName: (\n                <FormattedMessage defaultMessage=\"Rename\" description=\"Menu item to rename an experiment run\" />\n              ),\n            },\n            ...(handleDeleteRunClick\n              ? [\n                  {\n                    id: 'overflow-delete-button',\n                    onClick: handleDeleteRunClick,\n                    itemName: (\n                      <FormattedMessage defaultMessage=\"Delete\" description=\"Menu item to delete an experiment run\" />\n                    ),\n                  },\n                ]\n              : []),\n          ]}\n        />\n\n        {renderRegisterModelButton()}\n      </PageHeader>\n      <RunViewModeSwitch />\n    </div>\n  );\n};\n","import { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunInfoEntity } from '../../../types';\nimport { RunStatusIcon } from '../../RunStatusIcon';\nimport { FormattedMessage } from 'react-intl';\nimport type { MlflowRunStatus } from '../../../../graphql/__generated__/graphql';\n\n/**\n * Displays run status cell in run detail overview.\n */\nexport const RunViewStatusBox = ({ status }: { status: RunInfoEntity['status'] | MlflowRunStatus | null }) => {\n  const { theme } = useDesignSystemTheme();\n  const getTagColor = () => {\n    if (status === 'FINISHED') {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === 'KILLED' || status === 'FAILED') {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === 'SCHEDULED' || status === 'RUNNING') {\n      return theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === 'FINISHED') {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage\n            defaultMessage=\"Finished\"\n            description=\"Run page > Overview > Run status cell > Value for finished state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'KILLED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Killed\"\n            description=\"Run page > Overview > Run status cell > Value for killed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'FAILED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Run page > Overview > Run status cell > Value for failed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'RUNNING') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Running\"\n            description=\"Run page > Overview > Run status cell > Value for running state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'SCHEDULED') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Scheduled\"\n            description=\"Run page > Overview > Run status cell > Value for scheduled state\"\n          />\n        </Typography.Text>\n      );\n    }\n    return status;\n  };\n\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewstatusbox.tsx_81\"\n      css={{ backgroundColor: getTagColor() }}\n    >\n      {status && <RunStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { Link } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport Routes from '../../../routes';\nimport type { KeyValueEntity, RunInfoEntity } from '../../../types';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nexport const RunViewUserLinkBox = ({\n  runInfo,\n  tags,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n}) => {\n  const user = Utils.getUser(runInfo, tags);\n  return <Link to={Routes.searchRunsByUser(runInfo?.experimentId ?? '', user)}>{user}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { MetricEntitiesByName, MetricEntity, RunInfoEntity } from '../../../types';\nimport { sum, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { isSystemMetricKey } from '../../../utils/MetricsUtils';\nimport { Table as TableDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nconst { systemMetricsLabel, modelMetricsLabel } = defineMessages({\n  systemMetricsLabel: {\n    defaultMessage: 'System metrics',\n    description: 'Run page > Overview > Metrics table > System charts section > title',\n  },\n  modelMetricsLabel: {\n    defaultMessage: 'Model metrics',\n    description: 'Run page > Overview > Metrics table > Model charts section > title',\n  },\n});\n\nconst metricKeyMatchesFilter =\n  (filter: string) =>\n  ({ key }: MetricEntity) =>\n    key.toLowerCase().includes(filter.toLowerCase());\n\nconst RunViewMetricsTableSection = ({\n  metricsList,\n  runInfo,\n  header,\n  table,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsList: MetricEntity[];\n  header?: React.ReactNode;\n  table: TableDef<MetricEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [{ column: keyColumn }] = table.getLeafHeaders();\n  return metricsList.length ? (\n    <>\n      {header && (\n        <TableRow>\n          <TableCell css={{ flex: 1, backgroundColor: theme.colors.backgroundSecondary }}>\n            <Typography.Text bold>\n              {header} ({metricsList.length})\n            </Typography.Text>\n          </TableCell>\n        </TableRow>\n      )}\n      {metricsList.map(\n        ({\n          // Get metric key and value to display in table\n          key,\n          value,\n        }) => (\n          <TableRow key={key}>\n            <TableCell\n              style={{\n                flexGrow: 0,\n                flexBasis: keyColumn.getSize(),\n              }}\n            >\n              <Link to={Routes.getMetricPageRoute([runInfo.runUuid ?? ''], key, [runInfo.experimentId ?? ''])}>\n                {key}\n              </Link>\n            </TableCell>\n            <TableCell\n              css={{\n                flexGrow: 1,\n              }}\n            >\n              {value.toString()}\n            </TableCell>\n          </TableRow>\n        ),\n      )}\n    </>\n  ) : null;\n};\n\n/**\n * Displays table with metrics key/values in run detail overview.\n */\nexport const RunViewMetricsTable = ({\n  latestMetrics,\n  runInfo,\n}: {\n  latestMetrics: MetricEntitiesByName;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  const metricValues = useMemo(() => values(latestMetrics), [latestMetrics]);\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Metric\"\n            description=\"Run page > Overview > Metrics table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Metrics table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: false,\n      },\n    ],\n    [],\n  );\n\n  // Break down metric lists into system and model segments. If no system (or model) metrics\n  // are detected, return a single segment.\n  const metricSegments = useMemo(() => {\n    const systemMetrics = metricValues.filter(({ key }) => isSystemMetricKey(key));\n    const modelMetrics = metricValues.filter(({ key }) => !isSystemMetricKey(key));\n    const isSegmented = systemMetrics.length > 0 && modelMetrics.length > 0;\n    if (!isSegmented) {\n      return [{ header: undefined, metrics: metricValues.filter(metricKeyMatchesFilter(filter)) }];\n    }\n    return [\n      {\n        header: intl.formatMessage(systemMetricsLabel),\n        metrics: systemMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n      {\n        header: intl.formatMessage(modelMetricsLabel),\n        metrics: modelMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n    ];\n  }, [filter, metricValues, intl]);\n\n  const table = useReactTable<MetricEntity>({\n    data: metricValues,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!metricValues.length) {\n      return (\n        <div css={{ flex: '1', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Run page > Overview > Metrics table > No metrics recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = sum(metricSegments.map(({ metrics }) => metrics.length)) < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_186\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Run page > Overview > Metrics table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div css={{ marginTop: theme.spacing.md * 4 }}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Run page > Overview > Metrics table > No results after filtering\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_312\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {metricSegments.map((segment, index) => (\n            <RunViewMetricsTableSection\n              key={segment.header || index}\n              metricsList={segment.metrics}\n              runInfo={runInfo}\n              header={segment.header}\n              table={table}\n            />\n          ))}\n        </Table>\n      </>\n    );\n  };\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <Typography.Title level={4} css={{ flexShrink: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Run page > Overview > Metrics table > Section title\"\n          values={{ length: metricValues.filter(metricKeyMatchesFilter(filter)).length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import type { KeyValueEntity, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { Button, DropdownMenu, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport { useState } from 'react';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Renders single dataset, either in overview table cell or within a dropdown\n */\nconst DatasetEntry = ({ dataset, onClick }: { dataset: RunDatasetWithTags; onClick: () => void }) => {\n  return (\n    <Typography.Link\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_16\"\n      role=\"link\"\n      css={{\n        textAlign: 'left',\n      }}\n      onClick={onClick}\n    >\n      <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink css={{ margin: 0 }} />\n    </Typography.Link>\n  );\n};\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBox = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const { theme } = useDesignSystemTheme();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const firstDataset = datasets[0];\n  const remainingDatasets = datasets.slice(1);\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      <DatasetEntry dataset={firstDataset} onClick={() => datasetClicked(firstDataset)} />\n      {remainingDatasets.length ? (\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_70\"\n              size=\"small\"\n            >\n              +{remainingDatasets.length}\n            </Button>\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content>\n            {remainingDatasets.map((datasetWithTags) => {\n              return (\n                <DropdownMenu.Item\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_81\"\n                  key={datasetWithTags.dataset.digest}\n                >\n                  <DatasetEntry dataset={datasetWithTags} onClick={() => datasetClicked(datasetWithTags)} />\n                </DropdownMenu.Item>\n              );\n            })}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      ) : null}\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { useEffect, useMemo } from 'react';\nimport { getRunApi } from '../../../actions';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { useGetRunQuery } from '../hooks/useGetRunQuery';\n\nexport const RunViewParentRunBox = ({ parentRunUuid }: { parentRunUuid: string }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const parentRunInfoRedux = useSelector(({ entities }: ReduxState) => {\n    return entities.runInfosByUuid[parentRunUuid];\n  });\n\n  const parentRunInfoGraphql = useGetRunQuery({\n    runUuid: parentRunUuid,\n    disabled: !shouldEnableGraphQLRunDetailsPage(),\n  });\n\n  const parentRunInfo = useMemo(() => {\n    return shouldEnableGraphQLRunDetailsPage() ? parentRunInfoGraphql?.data?.info : parentRunInfoRedux;\n  }, [parentRunInfoGraphql, parentRunInfoRedux]);\n\n  useEffect(() => {\n    // Don't call REST API if GraphQL is enabled\n    if (shouldEnableGraphQLRunDetailsPage()) {\n      return;\n    }\n    if (!parentRunInfo) {\n      dispatch(getRunApi(parentRunUuid));\n    }\n  }, [dispatch, parentRunUuid, parentRunInfo]);\n\n  if (!parentRunInfo) {\n    return (\n      <ParagraphSkeleton\n        loading\n        label={\n          <FormattedMessage\n            defaultMessage=\"Parent run name loading\"\n            description=\"Run page > Overview > Parent run name loading\"\n          />\n        }\n      />\n    );\n  }\n\n  if (!parentRunInfo.experimentId || !parentRunInfo.runUuid) {\n    return null;\n  }\n\n  return (\n    <Link to={Routes.getRunPageRoute(parentRunInfo.experimentId, parentRunInfo.runUuid)}>{parentRunInfo.runName}</Link>\n  );\n};\n","import { Button, PencilIcon, Spinner, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { KeyValueEntity } from '../../../types';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { keys, values } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setRunTagsBulkApi } from '../../../actions';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../../common/utils/TagUtils';\nimport { useMemo } from 'react';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\n\n/**\n * Displays run tags cell in run detail overview.\n */\nexport const RunViewTagsBox = ({\n  runUuid,\n  tags,\n  onTagsUpdated,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const dispatch = useDispatch<ThunkDispatch>();\n  const intl = useIntl();\n\n  // Get keys and tag entities while excluding system tags\n  const [visibleTagKeys, visibleTagEntities] = useMemo(\n    () => [keys(tags).filter(isUserFacingTag), values(tags).filter(({ key }) => isUserFacingTag(key))],\n    [tags],\n  );\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal({\n    valueRequired: true,\n    allAvailableTags: visibleTagKeys,\n    saveTagsHandler: async (_, existingTags, newTags) =>\n      dispatch(setRunTagsBulkApi(runUuid, existingTags, newTags)).then(onTagsUpdated),\n  });\n\n  const showEditModal = () => {\n    showEditTagsModal({ tags: visibleTagEntities });\n  };\n\n  const editTagsLabel = intl.formatMessage({\n    defaultMessage: 'Edit tags',\n    description: \"Run page > Overview > Tags cell > 'Edit' button label\",\n  });\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagEntities.length < 1 ? (\n        <Button\n          componentId=\"mlflow.run_details.overview.tags.add_button\"\n          size=\"small\"\n          type=\"tertiary\"\n          onClick={showEditModal}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Run page > Overview > Tags cell > 'Add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {visibleTagEntities.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} enableFullViewModal css={{ marginRight: 0 }} />\n          ))}\n          <Tooltip componentId=\"mlflow.run_details.overview.tags.edit_button.tooltip\" content={editTagsLabel}>\n            <Button\n              componentId=\"mlflow.run_details.overview.tags.edit_button\"\n              aria-label={editTagsLabel}\n              size=\"small\"\n              icon={<PencilIcon />}\n              onClick={showEditModal}\n            />\n          </Tooltip>\n        </>\n      )}\n      {isLoading && <Spinner size=\"small\" />}\n      {EditTagsModal}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport { KeyValueEntity } from '../../../types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setTagApi } from '../../../actions';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * Displays editable description section in run detail overview.\n */\nexport const RunViewDescriptionBox = ({\n  runUuid,\n  tags,\n  onDescriptionChanged,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const noteContent = tags[NOTE_CONTENT_TAG]?.value || '';\n\n  const [showNoteEditor, setShowNoteEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = (markdown: string) =>\n    dispatch(setTagApi(runUuid, NOTE_CONTENT_TAG, markdown))\n      .then(onDescriptionChanged)\n      .then(() => setShowNoteEditor(false));\n  const handleCancelEditNote = () => setShowNoteEditor(false);\n\n  const isEmpty = !noteContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Run page > Overview > Description section > Section title\"\n        />\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdescriptionbox.tsx_46\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Run page > Overview > Description section > Edit button label',\n          })}\n          onClick={() => setShowNoteEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Run page > Overview > Description section > Empty value placeholder\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={noteContent}\n          onSubmit={handleSubmitEditNote}\n          onCancel={handleCancelEditNote}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from '../hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Displays list of registered models in run detail overview.\n * TODO: expand with logged models after finalizing design\n */\nexport const RunViewRegisteredModelsBox = ({\n  registeredModelVersionSummaries,\n}: {\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Overflow>\n      {registeredModelVersionSummaries?.map((modelSummary) => (\n        <Link\n          key={modelSummary.displayedName}\n          to={modelSummary.link}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <RegisteredModelOkIcon /> {modelSummary.displayedName}{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewregisteredmodelsbox.tsx_40\"\n            css={{ cursor: 'pointer' }}\n          >\n            v{modelSummary.version}\n          </Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import { QueryFunctionContext, useQuery, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { PromptVersionsForRunResponse, RegisteredPromptDetailsResponse, RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptVersionsForRunQueryKey>) => {\n  const [, { runUuid }] = queryKey;\n  return RegisteredPromptsApi.getPromptVersionsForRun(runUuid);\n};\n\ntype PromptVersionsForRunQueryKey = ['run_uuid', { runUuid: string }];\n\nexport const usePromptVersionsForRunQuery = (\n  { runUuid }: { runUuid: string },\n  options: UseQueryOptions<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  >(['run_uuid', { runUuid }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { usePromptVersionsForRunQuery } from '../../../pages/prompts/hooks/usePromptVersionsForRunQuery';\nimport Routes from '../../../routes';\n\nexport const RunViewRegisteredPromptsBox = ({ runUuid }: { runUuid: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const { data, error, isLoading } = usePromptVersionsForRunQuery({ runUuid });\n  const promptVersions = data?.model_versions;\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error || !promptVersions || promptVersions.length === 0) {\n    return <Typography.Hint>—</Typography.Hint>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n        flexWrap: 'wrap',\n        padding: `${theme.spacing.sm}px 0px`,\n      }}\n    >\n      {promptVersions.map((promptVersion, index) => {\n        const to = Routes.getPromptDetailsPageRoute(encodeURIComponent(promptVersion.name));\n        const displayText = `${promptVersion.name} (v${promptVersion.version})`;\n        return (\n          <Typography.Text key={displayText} css={{ whiteSpace: 'nowrap' }}>\n            <Link to={to}>{displayText}</Link>\n            {index < promptVersions.length - 1 && ','}\n          </Typography.Text>\n        );\n      })}\n    </div>\n  );\n};\n","import { ModelsIcon, Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { RunInfoEntity } from '../../../types';\nimport Routes from '../../../routes';\nimport { first } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useMemo } from 'react';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays list of registered models in run detail overview.\n */\nexport const RunViewLoggedModelsBox = ({\n  loggedModels,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModels: {\n    artifactPath: string;\n    flavors: string[];\n    utcTimeCreated: number;\n  }[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId, runUuid } = runInfo;\n\n  const getModelFlavorName = (flavors: string[]) => {\n    return (\n      first(flavors) || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Run page > Overview > Logged models > Unknown model flavor\"\n        />\n      )\n    );\n  };\n\n  // Check if list has models with same flavor names.\n  // If true, display artifact path in dropdown menu to reduce ambiguity.\n  const shouldDisplayArtifactPaths = useMemo(() => {\n    const flavors = loggedModels.map((model) => getModelFlavorName(model.flavors));\n    const uniqueFlavors = new Set(flavors);\n    return uniqueFlavors.size !== flavors.length;\n  }, [loggedModels]);\n\n  return (\n    <Overflow>\n      {loggedModels.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getRunPageRoute(experimentId ?? '', runUuid ?? '', model.artifactPath)}\n            key={model.artifactPath}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>\n              {getModelFlavorName(model.flavors)}\n              {shouldDisplayArtifactPaths && index > 0 && <Typography.Hint>{model.artifactPath}</Typography.Hint>}\n            </div>\n          </Link>\n        );\n      })}\n    </Overflow>\n  );\n};\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport Utils from '../../../../common/utils/Utils';\nimport type { KeyValueEntity } from '../../../types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../../ExperimentSourceTypeIcon';\n\nexport const RunViewSourceBox = ({\n  runUuid,\n  tags,\n  search,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  search: string;\n}) => {\n  const branchName = tags?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tags?.[Utils.gitCommitTag]?.value;\n  const runSource = Utils.renderSource(tags, search, runUuid, branchName);\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: 'wrap',\n      }}\n    >\n      <ExperimentSourceTypeIcon\n        sourceType={tags[Utils.sourceTypeTag]?.value}\n        css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n      />\n      {runSource}{' '}\n      {branchName && (\n        <LegacyTooltip title={branchName}>\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_48\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n      {commitHash && (\n        <LegacyTooltip\n          dangerouslySetAntdProps={{ overlayStyle: { maxWidth: 'none' } }}\n          title={\n            <div css={{ display: 'flex', gap: 4, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton\n                css={{ flex: '0 0 auto' }}\n                showLabel={false}\n                size=\"small\"\n                type=\"tertiary\"\n                copyText={commitHash}\n                icon={<CopyIcon />}\n              />\n            </div>\n          }\n        >\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_72\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <GitCommitIcon /> {commitHash.slice(0, 7)}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ColumnsIcon,\n  getShadowScrollStyles,\n  Spacer,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useCombinedRunInputsOutputsModels } from '../../../hooks/logged-models/useCombinedRunInputsOutputsModels';\nimport { RunInfoEntity } from '../../../types';\nimport { ExperimentLoggedModelListPageTable } from '../../experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../hooks/useGetRunQuery';\nimport { ExperimentLoggedModelListPageColumnSelector } from '../../experiment-logged-models/ExperimentLoggedModelListPageColumnSelector';\nimport { first, get } from 'lodash';\n\nconst supportedAttributeColumnKeys = [\n  ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\nexport const RunViewLoggedModelsTable = ({\n  inputs,\n  outputs,\n  runInfo,\n}: {\n  inputs?: UseGetRunQueryResponseInputs;\n  outputs?: UseGetRunQueryResponseOutputs;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { models: loggedModels, isLoading, errors } = useCombinedRunInputsOutputsModels(inputs, outputs, runInfo);\n\n  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>({});\n\n  const columnDefs = useExperimentLoggedModelListPageTableColumns({\n    loggedModels: loggedModels,\n    columnVisibility,\n    disablePinnedColumns: true,\n    disableOrderBy: true,\n    isCompactMode: false,\n    supportedAttributeColumnKeys,\n  });\n\n  const modelLoadError = useMemo(() => first(errors), [errors]);\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography.Title level={4} css={{ flexShrink: 0 }}>\n          <FormattedMessage\n            defaultMessage=\"Logged models ({length})\"\n            description=\"A header for a table of logged models displayed on the run page. The 'length' variable is being replaced with the number of displayed logged models.\"\n            values={{ length: loggedModels.length }}\n          />\n        </Typography.Title>\n        <ExperimentLoggedModelListPageColumnSelector\n          columnDefs={columnDefs}\n          onUpdateColumns={setColumnVisibility}\n          columnVisibility={columnVisibility}\n          customTrigger={<Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} />}\n        />\n      </div>\n      <Spacer size=\"sm\" shrinks={false} />\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {modelLoadError instanceof Error && modelLoadError.message && (\n          <>\n            <Alert\n              type=\"error\"\n              message={modelLoadError.message}\n              closable={false}\n              componentId=\"mlflow.run_page.logged_model.list.error\"\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n          <ExperimentLoggedModelListPageTable\n            columnDefs={columnDefs}\n            loggedModels={loggedModels}\n            columnVisibility={columnVisibility}\n            isLoading={isLoading}\n            isLoadingMore={false}\n            error={null}\n            moreResultsAvailable={false}\n            disableLoadMore\n            css={getTableTheme(theme)}\n            displayShowExampleButton={false}\n          />\n        </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      </div>\n    </div>\n  );\n};\n\nconst getTableTheme = (theme: Theme) => ({\n  '&.ag-theme-balham': {\n    '--ag-border-color': theme.colors.border,\n    '--ag-row-border-color': theme.colors.border,\n    '--ag-foreground-color': theme.colors.textPrimary,\n    '--ag-background-color': 'transparent',\n    '--ag-odd-row-background-color': 'transparent',\n    '--ag-row-hover-color': theme.colors.actionDefaultBackgroundHover,\n    '--ag-selected-row-background-color': theme.colors.actionDefaultBackgroundPress,\n    '--ag-header-foreground-color': theme.colors.textPrimary,\n    '--ag-header-background-color': theme.colors.backgroundPrimary,\n    '--ag-modal-overlay-background-color': theme.colors.overlayOverlay,\n    '.ag-header-row.ag-header-row-column-group': {\n      '--ag-header-foreground-color': theme.colors.textPrimary,\n    },\n    borderTop: 0,\n    fontSize: theme.typography.fontSizeBase,\n    '.ag-center-cols-viewport': {\n      ...getShadowScrollStyles(theme, {\n        orientation: 'horizontal',\n      }),\n    },\n  },\n});\n","import { compact, uniq, uniqBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../../components/run-page/hooks/useGetRunQuery';\nimport type { LoggedModelProto, RunInfoEntity } from '../../types';\nimport { useGetLoggedModelQueries } from './useGetLoggedModelQuery';\n\ntype LoggedModelProtoWithRunDirection = LoggedModelProto & { direction: 'input' | 'output' };\n\nconst filterMetricsByMatchingRunId = (runUuid?: string | null) => (loggedModel: LoggedModelProtoWithRunDirection) => {\n  if (loggedModel.data?.metrics) {\n    return {\n      ...loggedModel,\n      data: {\n        ...loggedModel.data,\n        metrics: loggedModel.data.metrics.filter((metric) => !runUuid || metric.run_id === runUuid),\n      },\n    };\n  }\n  return loggedModel;\n};\n\nexport const useCombinedRunInputsOutputsModels = (\n  inputs?: UseGetRunQueryResponseInputs,\n  outputs?: UseGetRunQueryResponseOutputs,\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo,\n) => {\n  const inputModelIds = compact(uniq(inputs?.modelInputs?.map((modelInput) => modelInput.modelId)));\n  const outputModelIds = compact(uniq(outputs?.modelOutputs?.map((modelOutput) => modelOutput.modelId)));\n  const inputModelQueries = useGetLoggedModelQueries(inputModelIds);\n  const outputModelQueries = useGetLoggedModelQueries(outputModelIds);\n\n  const inputLoggedModels = useMemo(() => {\n    return inputModelQueries.map<LoggedModelProtoWithRunDirection | undefined>((query) => {\n      if (!query.data?.model) return undefined;\n      return { ...query.data?.model, direction: 'input' as const };\n    });\n  }, [inputModelQueries]);\n\n  const outputLoggedModels = useMemo(() => {\n    return outputModelQueries.map<LoggedModelProtoWithRunDirection | undefined>((query) => {\n      if (!query.data?.model) return undefined;\n      return { ...query.data?.model, direction: 'output' as const };\n    });\n  }, [outputModelQueries]);\n\n  const models = useMemo(() => {\n    return (\n      uniqBy(\n        compact([...inputLoggedModels, ...outputLoggedModels]).map(filterMetricsByMatchingRunId(runInfo?.runUuid)),\n        (modelData) => modelData.info?.model_id,\n      ) ?? []\n    );\n  }, [inputLoggedModels, outputLoggedModels, runInfo]);\n\n  const errors = [...inputModelQueries, ...outputModelQueries].map((query) => query.error).filter(Boolean);\n\n  const isLoading = [...inputModelQueries, ...outputModelQueries].some((query) => query.isLoading);\n\n  return { models, errors, isLoading };\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nimport { Button, FileIcon, Spacer, Spinner, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\nimport type { ReduxState } from '../../../redux-types';\nimport { useLocation } from '../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\nimport { RunViewStatusBox } from './overview/RunViewStatusBox';\nimport { RunViewUserLinkBox } from './overview/RunViewUserLinkBox';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { RunViewMetricsTable } from './overview/RunViewMetricsTable';\nimport { RunViewDatasetBox } from './overview/RunViewDatasetBox';\nimport { RunViewParentRunBox } from './overview/RunViewParentRunBox';\nimport { RunViewTagsBox } from './overview/RunViewTagsBox';\nimport { RunViewDescriptionBox } from './overview/RunViewDescriptionBox';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { RunViewRegisteredModelsBox } from './overview/RunViewRegisteredModelsBox';\nimport { RunViewRegisteredPromptsBox } from './overview/RunViewRegisteredPromptsBox';\nimport { RunViewLoggedModelsBox } from './overview/RunViewLoggedModelsBox';\nimport { RunViewSourceBox } from './overview/RunViewSourceBox';\nimport { DetailsOverviewMetadataTable } from '@mlflow/mlflow/src/experiment-tracking/components/DetailsOverviewMetadataTable';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport type { RunInfoEntity } from '../../types';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from './hooks/useGetRunQuery';\nimport type { KeyValueEntity, MetricEntitiesByName, RunDatasetWithTags } from '../../types';\nimport { type RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { isEmpty, uniqBy } from 'lodash';\nimport { RunViewLoggedModelsTable } from './overview/RunViewLoggedModelsTable';\nimport { isRunPageLoggedModelsTableEnabled } from '../../../common/utils/FeatureUtils';\n\nconst EmptyValue = () => <Typography.Hint>—</Typography.Hint>;\n\nexport const RunViewOverview = ({\n  runUuid,\n  onRunDataUpdated,\n  tags,\n  runInfo,\n  datasets,\n  params,\n  latestMetrics,\n  runInputs,\n  runOutputs,\n  registeredModelVersionSummaries: registeredModelVersionSummariesForRun,\n  isLoadingLoggedModels = false,\n}: {\n  runUuid: string;\n  onRunDataUpdated: () => void | Promise<any>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  latestMetrics: MetricEntitiesByName;\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  datasets?: RunDatasetWithTags[];\n  params: Record<string, KeyValueEntity>;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  isLoadingLoggedModels?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const intl = useIntl();\n\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n  const containsLoggedModelsFromInputsOutputs = !isEmpty(runInputs?.modelInputs) || !isEmpty(runOutputs?.modelOutputs);\n  const shouldRenderLoggedModelsBox = !isRunPageLoggedModelsTableEnabled() || !containsLoggedModelsFromInputsOutputs;\n\n  const registeredModelVersionSummaries = registeredModelVersionSummariesForRun;\n  const shouldDisplayContentsOfLoggedModelsBox = loggedModelsFromTags?.length > 0;\n\n  const renderPromptMetadataRow = () => (\n    <DetailsOverviewMetadataRow\n      title={\n        <FormattedMessage\n          defaultMessage=\"Registered prompts\"\n          description=\"Run page > Overview > Run prompts section label\"\n        />\n      }\n      value={<RunViewRegisteredPromptsBox runUuid={runUuid} />}\n    />\n  );\n\n  const renderDetails = () => {\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Run page > Overview > Run start time section label\"\n            />\n          }\n          value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <EmptyValue />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Run page > Overview > Run author section label\"\n            />\n          }\n          value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Experiment ID\"\n              description=\"Run page > Overview > experiment ID section label\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={runInfo?.experimentId ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Status\" description=\"Run page > Overview > Run status section label\" />\n          }\n          value={<RunViewStatusBox status={runInfo.status} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Run ID\" description=\"Run page > Overview > Run ID section label\" />}\n          value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Duration\"\n              description=\"Run page > Overview > Run duration section label\"\n            />\n          }\n          value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n        />\n        {parentRunIdTag && (\n          <DetailsOverviewMetadataRow\n            title={<FormattedMessage defaultMessage=\"Parent run\" description=\"Run page > Overview > Parent run\" />}\n            value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Run page > Overview > Run datasets section label\"\n            />\n          }\n          value={\n            datasets?.length ? <RunViewDatasetBox tags={tags} runInfo={runInfo} datasets={datasets} /> : <EmptyValue />\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Tags\" description=\"Run page > Overview > Run tags section label\" />}\n          value={<RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onRunDataUpdated} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Source\" description=\"Run page > Overview > Run source section label\" />\n          }\n          value={<RunViewSourceBox tags={tags} search={search} runUuid={runUuid} />}\n        />\n        {shouldRenderLoggedModelsBox && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Logged models\"\n                description=\"Run page > Overview > Run models section label\"\n              />\n            }\n            value={\n              isLoadingLoggedModels ? (\n                <Spinner />\n              ) : shouldDisplayContentsOfLoggedModelsBox ? (\n                <RunViewLoggedModelsBox\n                  // Pass the run info and logged models\n                  runInfo={runInfo}\n                  loggedModels={loggedModelsFromTags}\n                />\n              ) : (\n                <EmptyValue />\n              )\n            }\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Registered models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            registeredModelVersionSummaries?.length > 0 ? (\n              <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n        {renderPromptMetadataRow()}\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const renderParams = () => {\n    return <DetailsOverviewParamsTable params={params} />;\n  };\n\n  return (\n    <div css={{ flex: '1' }}>\n      <RunViewDescriptionBox runUuid={runUuid} tags={tags} onDescriptionChanged={onRunDataUpdated} />\n      <Typography.Title level={4}>\n        <FormattedMessage defaultMessage=\"Details\" description=\"Run page > Overview > Details section title\" />\n      </Typography.Title>\n      {renderDetails()}\n      <div css={{ display: 'flex', gap: theme.spacing.lg, minHeight: 360, maxHeight: 760, overflow: 'hidden' }}>\n        {renderParams()}\n        <RunViewMetricsTable latestMetrics={latestMetrics} runInfo={runInfo} />\n      </div>\n      {isRunPageLoggedModelsTableEnabled() && containsLoggedModelsFromInputsOutputs && (\n        <>\n          <Spacer />\n          <div css={{ minHeight: 360, maxHeight: 760, overflow: 'hidden', display: 'flex' }}>\n            <RunViewLoggedModelsTable inputs={runInputs} outputs={runOutputs} runInfo={runInfo} />\n          </div>\n        </>\n      )}\n      <Spacer />\n    </div>\n  );\n};\n","import Routes from '../routes';\nimport { ErrorView } from '../../common/components/ErrorView';\n\ntype Props = {\n  runId: string;\n};\n\nexport function RunNotFoundView({ runId }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Run ID ${runId} does not exist`}\n      fallbackHomePageReactRoute={Routes.rootRoute}\n    />\n  );\n}\n","import type { MetricHistoryByName, RunInfoEntity } from '../../types';\nimport {\n  containsMultipleRunsTooltipData,\n  RunsChartsTooltipMode,\n  type RunsChartsTooltipBodyProps,\n} from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUndefined } from 'lodash';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../runs-charts/components/RunsMetricsLinePlot';\nimport type { RunsMetricsBarPlotHoverData } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { RunsMultipleTracesTooltipBody } from '../runs-charts/components/RunsMultipleTracesTooltipBody';\nimport { Spacer, Typography } from '@databricks/design-system';\n\n/**\n * Tooltip body displayed when hovering over run view metric charts\n */\nexport const RunViewChartTooltipBody = ({\n  contextData: { metricsForRun },\n  hoverData,\n  chartData: { metricKey },\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  { metricsForRun: MetricHistoryByName },\n  { metricKey: string },\n  RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n  const intl = useIntl();\n\n  if (\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    containsMultipleRunsTooltipData(hoverData) &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  if (!singleTraceHoverData?.metricEntity) {\n    return null;\n  }\n\n  const { timestamp, step, value } = singleTraceHoverData.metricEntity;\n\n  const metricContainsHistory = metricsForRun?.[metricKey]?.length > 1;\n  const isSystemMetric = isSystemMetricKey(metricKey);\n  const displayTimestamp = metricContainsHistory && isSystemMetric && !isUndefined(timestamp);\n  const displayStep = metricContainsHistory && !isSystemMetric && !isUndefined(step);\n\n  return (\n    <div>\n      {displayStep && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage defaultMessage=\"Step\" description=\"Run page > Charts tab > Chart tooltip > Step label\" />:\n          </strong>{' '}\n          {step}\n        </div>\n      )}\n      {displayTimestamp && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage\n              defaultMessage=\"Timestamp\"\n              description=\"Run page > Charts tab > Chart tooltip > Timestamp label\"\n            />\n            :\n          </strong>{' '}\n          {Utils.formatTimestamp(timestamp, intl)}\n        </div>\n      )}\n      {value && (\n        <div>\n          <Typography.Text bold>{metricKey}</Typography.Text>\n          <Spacer size=\"xs\" />\n          <Typography.Text>{value}</Typography.Text>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  valueField: {\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n};\n","import { TableSkeleton, ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../redux-types';\nimport type { KeyValueEntity, MetricEntitiesByName, RunInfoEntity } from '../../types';\n\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunsChartType, RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport {\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_MODEL_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_PREFIX,\n} from '../../constants';\nimport LocalStorageUtils from '../../../common/utils/LocalStorageUtils';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { useIsTabActive } from '../../../common/hooks/useIsTabActive';\nimport { shouldEnableRunDetailsPageAutoRefresh } from '../../../common/utils/FeatureUtils';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\n\ninterface RunViewMetricChartsProps {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n\n  latestMetrics?: MetricEntitiesByName;\n  tags?: Record<string, KeyValueEntity>;\n  params?: Record<string, KeyValueEntity>;\n}\n\n/**\n * Component displaying metric charts for a single run\n */\nconst RunViewMetricChartsImpl = ({\n  runInfo,\n  metricKeys,\n  mode,\n  chartUIState,\n  updateChartsUIState,\n  latestMetrics = {},\n  params = {},\n  tags = {},\n}: RunViewMetricChartsProps & {\n  chartUIState: ExperimentRunsChartsUIConfiguration;\n  updateChartsUIState: (\n    stateSetter: (state: ExperimentRunsChartsUIConfiguration) => ExperimentRunsChartsUIConfiguration,\n  ) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { compareRunCharts, compareRunSections, chartsSearchFilter } = chartUIState;\n\n  // For the draggable grid layout, we filter visible cards on this level\n  const visibleChartCards = useMemo(() => {\n    return compareRunCharts?.filter((chart) => !chart.deleted) ?? [];\n  }, [compareRunCharts]);\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined\n  >(undefined);\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const tooltipContextValue = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const { imagesByRunUuid } = useSelector((state: ReduxState) => ({\n    imagesByRunUuid: state.entities.imagesByRunUuid,\n  }));\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const reorderCharts = useReorderRunsChartsFn();\n\n  const addNewChartCard = (metricSectionId: string) => (type: RunsChartType) =>\n    setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n\n  const insertCharts = useInsertRunsChartsFn();\n\n  const startEditChart = (chartCard: RunsChartsCardConfig) => setConfiguredCardConfig(chartCard);\n\n  const removeChart = useRemoveRunsChartFn();\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  // Create a single run data object to be used in charts\n  const chartData: RunsChartsRunData[] = useMemo(\n    () => [\n      {\n        displayName: runInfo.runName ?? '',\n        metrics: latestMetrics,\n        params,\n        tags,\n        images: imagesByRunUuid[runInfo.runUuid ?? ''] || {},\n        metricHistory: {},\n        uuid: runInfo.runUuid ?? '',\n        color: theme.colors.primary,\n        runInfo,\n      },\n    ],\n    [runInfo, latestMetrics, params, tags, imagesByRunUuid, theme],\n  );\n\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        runsData: chartData,\n        enabledSectionNames: [mode === 'model' ? MLFLOW_MODEL_METRIC_NAME : MLFLOW_SYSTEM_METRIC_NAME],\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, chartData, mode, updateChartsUIState]);\n\n  /**\n   * Update charts with the latest metrics if new are found\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState, mode]);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = chartUIState.autoRefreshEnabled && shouldEnableRunDetailsPageAutoRefresh() && isTabActive;\n\n  // Determine if run contains images logged by `mlflow.log_image()`\n  const containsLoggedImages = Boolean(tags[LOG_IMAGE_TAG_INDICATOR]);\n\n  usePopulateImagesByRunUuid({\n    runUuids: [runInfo.runUuid ?? ''],\n    runUuidsIsActive: [runInfo.status === 'RUNNING'],\n    autoRefreshEnabled,\n    enabled: containsLoggedImages,\n  });\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingBottom: theme.spacing.md,\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flex: '0 0 auto',\n        }}\n      >\n        <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        {shouldEnableRunDetailsPageAutoRefresh() && (\n          <ToggleButton\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_244\"\n            pressed={chartUIState.autoRefreshEnabled}\n            onPressedChange={(pressed) => {\n              updateChartsUIState((current) => ({ ...current, autoRefreshEnabled: pressed }));\n            }}\n          >\n            {formatMessage({\n              defaultMessage: 'Auto-refresh',\n              description: 'Run page > Charts tab > Auto-refresh toggle button',\n            })}\n          </ToggleButton>\n        )}\n        <RunsChartsGlobalChartSettingsDropdown\n          metricKeyList={metricKeys}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n          updateUIState={updateChartsUIState}\n        />\n      </div>\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunViewChartTooltipBody}>\n          <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n            <RunsChartsSectionAccordion\n              compareRunSections={compareRunSections}\n              compareRunCharts={visibleChartCards}\n              reorderCharts={reorderCharts}\n              insertCharts={insertCharts}\n              chartData={chartData}\n              startEditChart={startEditChart}\n              removeChart={removeChart}\n              addNewChartCard={addNewChartCard}\n              search={chartsSearchFilter ?? ''}\n              supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n              setFullScreenChart={setFullScreenChart}\n              autoRefreshEnabled={autoRefreshEnabled}\n              globalLineChartConfig={chartUIState.globalLineChartConfig}\n              groupBy={null}\n            />\n          </RunsChartsDraggableCardsGridContextProvider>\n        </RunsChartsTooltipWrapper>\n      </div>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeys}\n          paramKeyList={[]}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={null}\n          supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunViewChartTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        groupBy={null}\n      />\n    </div>\n  );\n};\n\nexport const RunViewMetricCharts = (props: RunViewMetricChartsProps) => {\n  const persistenceIdentifier = `${props.runInfo.runUuid}-${props.mode}`;\n\n  const localStore = useMemo(\n    () => LocalStorageUtils.getStoreForComponent('RunPage', persistenceIdentifier),\n    [persistenceIdentifier],\n  );\n\n  const [chartUIState, updateChartsUIState] = useState<ExperimentRunsChartsUIConfiguration>(() => {\n    const defaultChartState: ExperimentRunsChartsUIConfiguration = {\n      isAccordionReordered: false,\n      compareRunCharts: undefined,\n      compareRunSections: undefined,\n      // Auto-refresh is enabled by default only if the flag is set\n      autoRefreshEnabled: shouldEnableRunDetailsPageAutoRefresh(),\n      globalLineChartConfig: {\n        xAxisKey: RunsChartsLineChartXAxisType.STEP,\n        lineSmoothness: 0,\n        selectedXAxisMetricKey: '',\n      },\n    };\n    try {\n      const persistedChartState = localStore.getItem('chartUIState');\n\n      if (!persistedChartState) {\n        return defaultChartState;\n      }\n      return JSON.parse(persistedChartState);\n    } catch {\n      return defaultChartState;\n    }\n  });\n\n  useEffect(() => {\n    localStore.setItem('chartUIState', JSON.stringify(chartUIState));\n  }, [chartUIState, localStore]);\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunViewMetricChartsImpl {...props} chartUIState={chartUIState} updateChartsUIState={updateChartsUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n\nconst RunViewMetricChartsSkeleton = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '200px',\n        gap: theme.spacing.md,\n      }}\n      className={className}\n    >\n      {new Array(6).fill(null).map((_, index) => (\n        <TableSkeleton key={index} lines={5} seed={index.toString()} />\n      ))}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { TracesView } from '../traces/TracesView';\nimport { useMemo } from 'react';\nimport { ExperimentViewTracesTableColumns } from '../traces/TracesView.utils';\n\nconst disabledColumns = [ExperimentViewTracesTableColumns.runName];\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewTracesTab = ({\n  experimentId,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const stableExperimentId = useMemo(() => [experimentId], [experimentId]);\n\n  return (\n    <div css={{ flex: 1, minWidth: 0 }}>\n      <TracesView experimentIds={stableExperimentId} runUuid={runUuid} disabledColumns={disabledColumns} />\n    </div>\n  );\n};\n","import { DangerIcon, Empty, ParagraphSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport { useMemo, useState } from 'react';\n\nimport { PageContainer } from '../../../common/components/PageContainer';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RunPageTabName } from '../../constants';\nimport { RenameRunModal } from '../modals/RenameRunModal';\nimport { RunViewArtifactTab } from './RunViewArtifactTab';\nimport { RunViewHeader } from './RunViewHeader';\nimport { RunViewOverview } from './RunViewOverview';\nimport { useRunDetailsPageData } from './hooks/useRunDetailsPageData';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { ReduxState } from '../../../redux-types';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { RunNotFoundView } from '../RunNotFoundView';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { FormattedMessage } from 'react-intl';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport DeleteRunModal from '../modals/DeleteRunModal';\nimport Routes from '../../routes';\nimport { RunViewMetricCharts } from './RunViewMetricCharts';\nimport {\n  shouldEnableRunDetailsPageTracesTab,\n  shouldEnableGraphQLRunDetailsPage,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { RunViewTracesTab } from './RunViewTracesTab';\nimport { getGraphQLErrorMessage } from '../../../graphql/get-graphql-error';\n\nconst RunPageLoadingState = () => (\n  <PageContainer>\n    <TitleSkeleton\n      loading\n      label={<FormattedMessage defaultMessage=\"Run page loading\" description=\"Run page > Loading state\" />}\n    />\n    {[...Array(3).keys()].map((i) => (\n      <ParagraphSkeleton key={i} seed={`s-${i}`} />\n    ))}\n  </PageContainer>\n);\n\nexport const RunPage = () => {\n  const { runUuid, experimentId } = useParams<{\n    runUuid: string;\n    experimentId: string;\n  }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const [renameModalVisible, setRenameModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  invariant(runUuid, '[RunPage] Run UUID route param not provided');\n  invariant(experimentId, '[RunPage] Experiment ID route param not provided');\n\n  const {\n    experiment,\n    error,\n    latestMetrics,\n    loading,\n    params,\n    refetchRun,\n    runInfo,\n    tags,\n    experimentFetchError,\n    runFetchError,\n    apiError,\n    datasets,\n    runInputs,\n    runOutputs,\n    registeredModelVersionSummaries,\n  } = useRunDetailsPageData({\n    experimentId,\n    runUuid,\n  });\n\n  const [modelMetricKeys, systemMetricKeys] = useMemo<[string[], string[]]>(() => {\n    if (!latestMetrics) {\n      return [[], []];\n    }\n\n    return [\n      Object.keys(latestMetrics).filter((metricKey) => !isSystemMetricKey(metricKey)),\n      Object.keys(latestMetrics).filter((metricKey) => isSystemMetricKey(metricKey)),\n    ];\n  }, [latestMetrics]);\n\n  const { comparedExperimentIds = [], hasComparedExperimentsBefore = false } = useSelector(\n    (state: ReduxState) => state.comparedExperiments || {},\n  );\n\n  const activeTab = useRunViewActiveTab();\n\n  const isLoadingLoggedModels = false;\n\n  const renderActiveTab = () => {\n    if (!runInfo) {\n      return null;\n    }\n    switch (activeTab) {\n      case RunPageTabName.MODEL_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"model\"\n            mode=\"model\"\n            metricKeys={modelMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n\n      case RunPageTabName.SYSTEM_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"system\"\n            mode=\"system\"\n            metricKeys={systemMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n      case RunPageTabName.ARTIFACTS:\n        return (\n          <RunViewArtifactTab\n            runUuid={runUuid}\n            runTags={tags}\n            runOutputs={runOutputs}\n            experimentId={experimentId}\n            artifactUri={runInfo.artifactUri ?? undefined}\n          />\n        );\n      case RunPageTabName.TRACES:\n        if (shouldEnableRunDetailsPageTracesTab()) {\n          return <RunViewTracesTab runUuid={runUuid} runTags={tags} experimentId={experimentId} />;\n        }\n    }\n\n    return (\n      <RunViewOverview\n        runInfo={runInfo}\n        tags={tags}\n        params={params}\n        latestMetrics={latestMetrics}\n        runUuid={runUuid}\n        onRunDataUpdated={refetchRun}\n        runInputs={runInputs}\n        runOutputs={runOutputs}\n        datasets={datasets}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n        isLoadingLoggedModels={isLoadingLoggedModels}\n      />\n    );\n  };\n\n  // Use full height page with scrollable tab area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const initialLoading = loading && (!runInfo || !experiment);\n\n  // Handle \"run not found\" error\n  if (\n    // For REST API:\n    (runFetchError instanceof ErrorWrapper && runFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) ||\n    // For GraphQL:\n    apiError?.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST ||\n    (error && getGraphQLErrorMessage(error).match(/not found$/))\n  ) {\n    return <RunNotFoundView runId={runUuid} />;\n  }\n\n  // Handle experiment not found error\n  if (\n    experimentFetchError instanceof ErrorWrapper &&\n    experimentFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n  ) {\n    return <NotFoundPage />;\n  }\n\n  // Catch-all for legacy REST API errors\n  if (runFetchError || experimentFetchError) {\n    return null;\n  }\n\n  // Catch-all for GraphQL errors\n  if (shouldEnableGraphQLRunDetailsPage() && (error || apiError)) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Can't load run details\"\n              description=\"Run page > error loading page title\"\n            />\n          }\n          description={getGraphQLErrorMessage(apiError ?? error)}\n          image={<DangerIcon />}\n        />\n      </div>\n    );\n  }\n\n  // Display spinner/skeleton for the initial data load\n  if (initialLoading || !runInfo || !experiment) {\n    return <RunPageLoadingState />;\n  }\n\n  return (\n    <>\n      <PageContainer usesFullHeight={useFullHeightPage}>\n        {/* Header fixed on top */}\n        <RunViewHeader\n          comparedExperimentIds={comparedExperimentIds}\n          experiment={experiment}\n          handleRenameRunClick={() => setRenameModalVisible(true)}\n          handleDeleteRunClick={() => setDeleteModalVisible(true)}\n          hasComparedExperimentsBefore={hasComparedExperimentsBefore}\n          runDisplayName={Utils.getRunDisplayName(runInfo, runUuid)}\n          runTags={tags}\n          runParams={params}\n          runUuid={runUuid}\n          artifactRootUri={runInfo?.artifactUri ?? undefined}\n          registeredModelVersionSummaries={registeredModelVersionSummaries}\n          isLoading={loading || isLoadingLoggedModels}\n        />\n        {/* Scroll tab contents independently within own container */}\n        <div css={{ flex: 1, overflow: 'auto', marginBottom: theme.spacing.sm, display: 'flex' }}>\n          {renderActiveTab()}\n        </div>\n      </PageContainer>\n      <RenameRunModal\n        runUuid={runUuid}\n        onClose={() => setRenameModalVisible(false)}\n        runName={runInfo.runName ?? ''}\n        isOpen={renameModalVisible}\n        onSuccess={refetchRun}\n      />\n      <DeleteRunModal\n        selectedRunIds={[runUuid]}\n        onClose={() => setDeleteModalVisible(false)}\n        isOpen={deleteModalVisible}\n        onSuccess={() => {\n          navigate(Routes.getExperimentPageRoute(experimentId));\n        }}\n      />\n    </>\n  );\n};\n\nexport default RunPage;\n","import { matchPredefinedError, UnknownError } from '@databricks/web-shared/errors';\nimport { fetchEndpoint } from '../../../common/utils/FetchUtils';\nimport { RegisteredPrompt, RegisteredPromptsListResponse, RegisteredPromptVersion } from './types';\nimport { IS_PROMPT_TAG_NAME, IS_PROMPT_TAG_VALUE, REGISTERED_PROMPT_SOURCE_RUN_IDS } from './utils';\n\nconst defaultErrorHandler = async ({\n  reject,\n  response,\n  err: originalError,\n}: {\n  reject: (cause: any) => void;\n  response: Response;\n  err: Error;\n}) => {\n  // Try to match the error to one of the predefined errors\n  const predefinedError = matchPredefinedError(response);\n  const error = predefinedError instanceof UnknownError ? originalError : predefinedError;\n  if (response) {\n    try {\n      // Try to extract exact error message from the response\n      const messageFromResponse = (await response.json())?.message;\n      if (messageFromResponse) {\n        error.message = messageFromResponse;\n      }\n    } catch {\n      // If we fail to extract the message, we will keep the original error message\n    }\n  }\n\n  reject(error);\n};\n\nexport const RegisteredPromptsApi = {\n  listRegisteredPrompts: (searchFilter?: string, pageToken?: string) => {\n    const params = new URLSearchParams();\n    let filter = `tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}'`;\n\n    if (searchFilter) {\n      filter = `${filter} AND name ILIKE '%${searchFilter}%'`;\n    }\n\n    if (pageToken) {\n      params.append('page_token', pageToken);\n    }\n\n    params.append('filter', filter);\n\n    const relativeUrl = ['ajax-api/2.0/mlflow/registered-models/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<RegisteredPromptsListResponse>;\n  },\n  setRegisteredPromptTag: (promptName: string, key: string, value: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/set-tag',\n      method: 'POST',\n      body: JSON.stringify({ key, value, name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptTag: (promptName: string, key: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/delete-tag',\n      method: 'DELETE',\n      body: JSON.stringify({ key, name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  createRegisteredPrompt: (promptName: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/create',\n      method: 'POST',\n      body: JSON.stringify({\n        name: promptName,\n        tags: [\n          {\n            key: IS_PROMPT_TAG_NAME,\n            value: IS_PROMPT_TAG_VALUE,\n          },\n        ],\n      }),\n      error: defaultErrorHandler,\n    }) as Promise<{\n      registered_model?: RegisteredPrompt;\n    }>;\n  },\n  createRegisteredPromptVersion: (\n    promptName: string,\n    tags: { key: string; value: string }[] = [],\n    description?: string,\n  ) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/create',\n      method: 'POST',\n      body: JSON.stringify({\n        name: promptName,\n        description,\n        // Put a placeholder source here for now to satisfy the API validation\n        // TODO: remove source after it's no longer needed\n        source: 'dummy-source',\n        tags: [\n          {\n            key: IS_PROMPT_TAG_NAME,\n            value: IS_PROMPT_TAG_VALUE,\n          },\n          ...tags,\n        ],\n      }),\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_version?: RegisteredPromptVersion;\n    }>;\n  },\n  setRegisteredPromptVersionTag: (promptName: string, promptVersion: string, key: string, value: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/set-tag',\n      method: 'POST',\n      body: JSON.stringify({ key, value, name: promptName, version: promptVersion }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptVersionTag: (promptName: string, promptVersion: string, key: string) => {\n    fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/delete-tag',\n      method: 'DELETE',\n      body: JSON.stringify({ key, name: promptName, version: promptVersion }),\n      error: defaultErrorHandler,\n    });\n  },\n  getPromptDetails: (promptName: string) => {\n    const params = new URLSearchParams();\n    params.append('name', promptName);\n    const relativeUrl = ['ajax-api/2.0/mlflow/registered-models/get', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      registered_model: RegisteredPrompt;\n    }>;\n  },\n  getPromptVersions: (promptName: string) => {\n    const params = new URLSearchParams();\n    params.append('filter', `name='${promptName}' AND tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}'`);\n    const relativeUrl = ['ajax-api/2.0/mlflow/model-versions/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_versions?: RegisteredPromptVersion[];\n    }>;\n  },\n  getPromptVersionsForRun: (runUuid: string) => {\n    const params = new URLSearchParams();\n    params.append(\n      'filter',\n      `tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}' AND tags.\\`${REGISTERED_PROMPT_SOURCE_RUN_IDS}\\` ILIKE \"%${runUuid}%\"`,\n    );\n    const relativeUrl = ['ajax-api/2.0/mlflow/model-versions/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_versions?: RegisteredPromptVersion[];\n    }>;\n  },\n  deleteRegisteredPrompt: (promptName: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/delete',\n      method: 'DELETE',\n      body: JSON.stringify({ name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptVersion: (promptName: string, version: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/delete',\n      method: 'DELETE',\n      body: JSON.stringify({ name: promptName, version }),\n      error: defaultErrorHandler,\n    });\n  },\n};\n","import type { RegisteredPrompt, RegisteredPromptVersion } from './types';\n\nexport const REGISTERED_PROMPT_CONTENT_TAG_KEY = 'mlflow.prompt.text';\n// Tag key used to store the run ID associated with a single prompt version\nexport const REGISTERED_PROMPT_SOURCE_RUN_ID = 'mlflow.prompt.run_id';\n// Tak key used to store comma-separated run IDs associated with a prompt\nexport const REGISTERED_PROMPT_SOURCE_RUN_IDS = 'mlflow.prompt.run_ids';\nexport const IS_PROMPT_TAG_NAME = 'mlflow.prompt.is_prompt';\nexport const IS_PROMPT_TAG_VALUE = 'true';\n\nexport type PromptsTableMetadata = { onEditTags: (editedEntity: RegisteredPrompt) => void };\nexport type PromptsVersionsTableMetadata = {\n  showEditAliasesModal: (versionNumber: string) => void;\n  aliasesByVersion: Record<string, string[]>;\n  registeredPrompt: RegisteredPrompt;\n};\n\nexport enum PromptVersionsTableMode {\n  TABLE = 'table',\n  PREVIEW = 'preview',\n  COMPARE = 'compare',\n}\n\nexport const getPromptContentTagValue = (promptVersion: RegisteredPromptVersion) => {\n  return promptVersion?.tags?.find((tag) => tag.key === REGISTERED_PROMPT_CONTENT_TAG_KEY)?.value;\n};\n"],"names":["PageContainer","props","usesFullHeight","restProps","_jsxs","PageWrapper","css","styles","useFullHeightLayout","wrapper","children","_jsx","Spacer","fixedSpacer","container","defaultProps","height","display","flexDirection","flexGrow","flex","flexShrink","width","paddingBottom","RunViewArtifactTab","_ref","runTags","runOutputs","artifactUri","runUuid","theme","useDesignSystemTheme","useFullHeightPage","useMediaQuery","responsive","breakpoints","sm","_css","overflow","spacing","md","position","ArtifactPage","useAutoHeight","artifactRootUri","useRunViewActiveTab","tabParam","useParams","RunPageTabName","MODEL_METRIC_CHARTS","SYSTEM_METRIC_CHARTS","shouldEnableRunDetailsPageTracesTab","TRACES","match","ARTIFACTS","OVERVIEW","TABS_WITHOUT_MARGIN","EVALUATIONS","RunViewModeSwitch","experimentId","navigate","useNavigate","currentTab","removeTabMargin","setRemoveTabMargin","useState","includes","LegacyTabs","activeKey","onChange","newTabKey","Routes","getRunPageTabRoute","getRunPageRoute","tabBarStyle","margin","TabPane","tab","FormattedMessage","id","defaultMessage","_ref2","name","_ref3","LoggedModelsDropdownContent","models","onRegisterClick","renderSection","title","sectionModels","DropdownMenu","Group","Label","map","model","registeredModelSummary","first","registeredModelVersionSummaries","Item","componentId","onClick","marginRight","last","path","split","HintColumn","Link","target","to","Button","type","size","e","stopPropagation","endIcon","NewWindowIcon","absolutePath","status","displayedName","version","link","IconWrapper","RegisteredModelOkIcon","ModelVersionStatusIcons","Tag","registeredModels","filter","length","unregisteredModels","_Fragment","Separator","RunViewHeaderRegisterModelButton","_ref4","loggedModelPaths","useMemo","Utils","getLoggedModelsFromTags","_ref5","artifactPath","orderBy","_ref6","source","_model$registeredMode","parseInt","selectedModelToRegister","setSelectedModelToRegister","modelsRegistered","RegisterModel","modelPath","modelRelativePath","disabled","showButton","modalVisible","onCloseModal","Root","modal","LegacyTooltip","placement","values","registeredCount","loggedCount","Trigger","asChild","ChevronDownIcon","Content","align","singleModel","registeredModelVersionSummary","marginLeft","buttonType","RunViewHeader","hasComparedExperimentsBefore","comparedExperimentIds","experiment","runDisplayName","runParams","handleRenameRunClick","handleDeleteRunClick","isLoading","breadcrumbs","_experiment$experimen","getCompareExperimentsPageRoute","numExperiments","getExperimentPageRoute","getExperimentPageLink","PageHeader","OverflowMenu","menu","itemName","renderRegisterModelButton","_experiment$experimen2","RunViewStatusBox","backgroundColor","isDarkMode","colors","green800","green100","red800","red100","blue800","blue100","RunStatusIcon","Typography","Text","color","RunViewUserLinkBox","_runInfo$experimentId","runInfo","tags","user","getUser","searchRunsByUser","systemMetricsLabel","modelMetricsLabel","defineMessages","metricKeyMatchesFilter","key","toLowerCase","RunViewMetricsTableSection","metricsList","header","table","column","keyColumn","getLeafHeaders","TableRow","TableCell","backgroundSecondary","bold","_runInfo$runUuid","value","style","flexBasis","getSize","getMetricPageRoute","toString","_ref8","_ref10","_ref11","RunViewMetricsTable","latestMetrics","intl","useIntl","setFilter","metricValues","columns","accessorKey","enableResizing","metricSegments","systemMetrics","isSystemMetricKey","modelMetrics","_ref7","formatMessage","metrics","undefined","useReactTable","data","getCoreRowModel","getRowId","row","enableColumnResizing","columnResizeMode","Title","level","padding","border","borderDecorative","borderRadius","general","borderRadiusBase","renderTableContent","Empty","description","areAllResultsFiltered","sum","_ref9","marginBottom","Input","prefix","SearchIcon","placeholder","allowClear","Table","scrollable","empty","marginTop","isHeader","TableHeader","setColumnSizing","isResizing","getIsResizing","getCanResize","flexRender","columnDef","getContext","segment","index","DatasetEntry","dataset","role","ExperimentViewDatasetWithContext","datasetWithTags","displayTextAsLink","RunViewDatasetBox","datasets","selectedDatasetWithRun","setSelectedDatasetWithRun","isDrawerOpen","setIsDrawerOpen","firstDataset","remainingDatasets","slice","datasetClicked","_runInfo$runName","runData","runName","gap","alignItems","digest","ExperimentViewDatasetDrawer","isOpen","setIsOpen","RunViewParentRunBox","parentRunUuid","dispatch","useDispatch","parentRunInfoRedux","useSelector","entities","runInfosByUuid","parentRunInfoGraphql","useGetRunQuery","shouldEnableGraphQLRunDetailsPage","parentRunInfo","_parentRunInfoGraphql","info","useEffect","getRunApi","ParagraphSkeleton","loading","label","RunViewTagsBox","onTagsUpdated","visibleTagKeys","visibleTagEntities","keys","isUserFacingTag","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","allAvailableTags","saveTagsHandler","async","_","existingTags","newTags","setRunTagsBulkApi","then","showEditModal","editTagsLabel","paddingTop","xs","flexWrap","tag","KeyValueTag","enableFullViewModal","Tooltip","content","icon","PencilIcon","Spinner","RunViewDescriptionBox","_tags$NOTE_CONTENT_TA","onDescriptionChanged","noteContent","NOTE_CONTENT_TAG","showNoteEditor","setShowNoteEditor","isEmpty","Hint","EditableNote","defaultMarkdown","onSubmit","markdown","setTagApi","onCancel","handleCancelEditNote","showEditor","RunViewRegisteredModelsBox","Overflow","modelSummary","queryFn","queryKey","RegisteredPromptsApi","getPromptVersionsForRun","RunViewRegisteredPromptsBox","error","_queryResult$error","options","arguments","queryResult","useQuery","retry","refetch","usePromptVersionsForRunQuery","promptVersions","model_versions","promptVersion","getPromptDetailsPageRoute","encodeURIComponent","displayText","RunViewLoggedModelsBox","loggedModels","getModelFlavorName","flavors","shouldDisplayArtifactPaths","Set","cursor","heightBase","heightSm","ModelsIcon","RunViewSourceBox","_tags$MLFLOW_RUN_GIT_","_tags$Utils$gitCommit","_tags$Utils$sourceTyp","search","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","ExperimentSourceTypeIcon","sourceType","sourceTypeTag","actionPrimaryBackgroundDefault","BranchIcon","dangerouslySetAntdProps","overlayStyle","maxWidth","CopyButton","showLabel","copyText","CopyIcon","GitCommitIcon","supportedAttributeColumnKeys","ExperimentLoggedModelListPageKnownColumns","RelationshipType","Name","Status","CreationTime","Dataset","RunViewLoggedModelsTable","inputs","outputs","errors","useCombinedRunInputsOutputsModels","_inputs$modelInputs","_outputs$modelOutputs","inputModelIds","compact","uniq","modelInputs","modelInput","modelId","outputModelIds","modelOutputs","modelOutput","inputModelQueries","useGetLoggedModelQueries","outputModelQueries","inputLoggedModels","query","_query$data","_query$data2","direction","outputLoggedModels","_query$data3","_query$data4","_uniqBy","uniqBy","loggedModel","_loggedModel$data","metric","run_id","modelData","_modelData$info","model_id","Boolean","some","columnVisibility","setColumnVisibility","columnDefs","useExperimentLoggedModelListPageTableColumns","disablePinnedColumns","disableOrderBy","isCompactMode","modelLoadError","ExperimentLoggedModelListPageColumnSelector","onUpdateColumns","customTrigger","ColumnsIcon","shrinks","Error","message","Alert","closable","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","disableLoadMore","getTableTheme","displayShowExampleButton","textPrimary","actionDefaultBackgroundHover","actionDefaultBackgroundPress","backgroundPrimary","overlayOverlay","borderTop","fontSize","typography","fontSizeBase","getShadowScrollStyles","orientation","EmptyValue","RunViewOverview","onRunDataUpdated","params","runInputs","registeredModelVersionSummariesForRun","isLoadingLoggedModels","useLocation","loggedModelsFromTags","parentRunIdTag","EXPERIMENT_PARENT_ID_TAG","containsLoggedModelsFromInputsOutputs","shouldRenderLoggedModelsBox","isRunPageLoggedModelsTableEnabled","shouldDisplayContentsOfLoggedModelsBox","renderDetails","_runInfo$runUuid2","DetailsOverviewMetadataTable","DetailsOverviewMetadataRow","startTime","formatTimestamp","DetailsOverviewCopyableIdBox","getDuration","endTime","lg","minHeight","maxHeight","DetailsOverviewParamsTable","RunNotFoundView","runId","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","rootRoute","RunViewChartTooltipBody","_metricsForRun$metric","contextData","metricsForRun","hoverData","chartData","metricKey","isHovering","mode","singleTraceHoverData","containsMultipleRunsTooltipData","hoveredDataPoint","RunsChartsTooltipMode","MultipleTracesWithScanline","RunsMultipleTracesTooltipBody","metricEntity","timestamp","step","metricContainsHistory","isSystemMetric","displayTimestamp","isUndefined","displayStep","valueField","whiteSpace","textOverflow","RunViewMetricChartsImpl","_runInfo$runUuid4","metricKeys","chartUIState","updateChartsUIState","setSearch","compareRunCharts","compareRunSections","chartsSearchFilter","visibleChartCards","_compareRunCharts$fil","chart","deleted","fullScreenChart","setFullScreenChart","mapValues","sampledMetricsByRunUuid","metricsByRange","metricsHistory","flat","tooltipContextValue","imagesByRunUuid","state","configuredCardConfig","setConfiguredCardConfig","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","removeChart","useRemoveRunsChartFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","_runInfo$runUuid3","displayName","images","metricHistory","uuid","primary","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","runsData","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","startsWith","MLFLOW_SYSTEM_METRIC_PREFIX","current","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","isTabActive","useIsTabActive","autoRefreshEnabled","shouldEnableRunDetailsPageAutoRefresh","containsLoggedImages","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","enabled","RunsChartsFilterInput","ToggleButton","pressed","onPressedChange","RunsChartsGlobalChartSettingsDropdown","metricKeyList","globalLineChartConfig","updateUIState","RunsChartsTooltipWrapper","component","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","startEditChart","chartCard","addNewChartCard","metricSectionId","getEmptyChartCardByType","supportedChartTypes","RunsChartType","LINE","BAR","IMAGE","groupBy","RunsChartsConfigureModal","chartRunData","paramKeyList","config","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunViewMetricCharts","persistenceIdentifier","localStore","LocalStorageUtils","getStoreForComponent","defaultChartState","xAxisKey","RunsChartsLineChartXAxisType","STEP","lineSmoothness","selectedXAxisMetricKey","persistedChartState","getItem","JSON","parse","setItem","stringify","RunsChartsUIConfigurationContextProvider","disabledColumns","ExperimentViewTracesTableColumns","RunViewTracesTab","stableExperimentId","TracesView","experimentIds","RunPageLoadingState","TitleSkeleton","Array","i","seed","RunPage","_runInfo$artifactUri2","renameModalVisible","setRenameModalVisible","deleteModalVisible","setDeleteModalVisible","invariant","refetchRun","experimentFetchError","runFetchError","apiError","useRunDetailsPageData","modelMetricKeys","systemMetricKeys","Object","comparedExperiments","activeTab","initialLoading","ErrorWrapper","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","code","getGraphQLErrorMessage","NotFoundPage","image","DangerIcon","getRunDisplayName","renderActiveTab","_runInfo$artifactUri","RenameRunModal","onClose","onSuccess","DeleteRunModal","selectedRunIds","defaultErrorHandler","reject","response","err","originalError","predefinedError","matchPredefinedError","UnknownError","_await$response$json","messageFromResponse","json","listRegisteredPrompts","searchFilter","pageToken","URLSearchParams","IS_PROMPT_TAG_NAME","IS_PROMPT_TAG_VALUE","append","relativeUrl","join","fetchEndpoint","setRegisteredPromptTag","promptName","method","body","deleteRegisteredPromptTag","createRegisteredPrompt","createRegisteredPromptVersion","setRegisteredPromptVersionTag","deleteRegisteredPromptVersionTag","getPromptDetails","getPromptVersions","REGISTERED_PROMPT_SOURCE_RUN_IDS","deleteRegisteredPrompt","deleteRegisteredPromptVersion","REGISTERED_PROMPT_CONTENT_TAG_KEY","PromptVersionsTableMode","getPromptContentTagValue","_promptVersion$tags","_promptVersion$tags$f","find"],"sourceRoot":""}