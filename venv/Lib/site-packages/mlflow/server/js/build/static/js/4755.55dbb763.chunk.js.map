{"version":3,"file":"static/js/4755.55dbb763.chunk.js","mappings":"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","sources":["experiment-tracking/components/CompareRunBox.tsx","common/components/CollapsibleSection.tsx","common/utils/withErrorBoundary.tsx","experiment-tracking/components/CompareRunUtil.ts","common/utils/withRouterNext.tsx","common/components/error-boundaries/SectionErrorBoundary.tsx","../node_modules/react-error-boundary/dist/src/ErrorBoundaryContext.ts","../node_modules/react-error-boundary/dist/src/ErrorBoundary.ts","../node_modules/react-error-boundary/dist/src/assertErrorBoundaryContext.ts","../node_modules/react-error-boundary/dist/src/useErrorBoundary.ts","../node_modules/react-error-boundary/dist/src/withErrorBoundary.ts","shared/building_blocks/PreviewBadge.tsx","experiment-tracking/components/CompareRunPlotContainer.tsx","common/components/PageContainer.tsx","experiment-tracking/components/CompareRunScatter.tsx","common/components/RequestStateWrapper.tsx","experiment-tracking/components/ParallelCoordinatesPlotView.tsx","experiment-tracking/components/ParallelCoordinatesPlotControls.tsx","experiment-tracking/components/ParallelCoordinatesPlotPanel.tsx","common/utils/ErrorUtils.tsx","shared/building_blocks/PageHeader.tsx","experiment-tracking/components/LazyPlot.tsx","experiment-tracking/components/CompareRunContour.tsx","common/components/Spinner.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport {\n  Typography,\n  Row,\n  Col,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { LazyPlot } from './LazyPlot';\nimport { RunInfoEntity } from '../types';\n\ntype Props = {\n  runUuids: string[];\n  runInfos: RunInfoEntity[];\n  metricLists: any[][];\n  paramLists: any[][];\n};\n\ntype Axis = {\n  key?: string;\n  isParam?: boolean;\n};\n\nconst paramOptionPrefix = 'param-';\nconst metricOptionPrefix = 'metric-';\n\n// Note: This component does not pass the value of the parent component to the child component.\n// Doing so will cause weird rendering issues with the label and updating of the value.\nconst Selector = ({\n  id,\n  onChange,\n  paramKeys,\n  metricKeys,\n}: {\n  id: string;\n  onChange: (axis: Axis) => void;\n  paramKeys: string[];\n  metricKeys: string[];\n}) => {\n  const intl = useIntl();\n  return (\n    <SimpleSelect\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunbox.tsx_46\"\n      id={id}\n      css={{ width: '100%', marginBottom: '16px' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Select parameter or metric',\n        description: 'Placeholder text for parameter/metric selector in box plot comparison in MLflow',\n      })}\n      onChange={({ target }) => {\n        const { value } = target;\n        const [_prefix, key] = value.split('-');\n        const isParam = value.startsWith(paramOptionPrefix);\n        onChange({ key, isParam });\n      }}\n    >\n      <SimpleSelectOptionGroup label=\"Parameters\">\n        {paramKeys.map((key) => (\n          <SimpleSelectOption key={key} value={paramOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n      <SimpleSelectOptionGroup label=\"Metrics\">\n        {metricKeys.map((key) => (\n          <SimpleSelectOption key={key} value={metricOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n    </SimpleSelect>\n  );\n};\n\nexport const CompareRunBox = ({ runInfos, metricLists, paramLists }: Props) => {\n  const [xAxis, setXAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n  const [yAxis, setYAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n\n  const paramKeys = Array.from(new Set(paramLists.flat().map(({ key }) => key))).sort();\n  const metricKeys = Array.from(new Set(metricLists.flat().map(({ key }) => key))).sort();\n\n  const getBoxPlotData = () => {\n    const data = {};\n    runInfos.forEach((_, index) => {\n      const params = paramLists[index];\n      const metrics = metricLists[index];\n      const x = (xAxis.isParam ? params : metrics).find(({ key }) => key === xAxis.key);\n      const y = (yAxis.isParam ? params : metrics).find(({ key }) => key === yAxis.key);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n\n      if (x.value in data) {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value].push(y.value);\n      } else {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value] = [y.value];\n      }\n    });\n\n    return Object.entries(data).map(([key, values]) => ({\n      y: values,\n      type: 'box',\n      name: key,\n      jitter: 0.3,\n      pointpos: -1.5,\n      boxpoints: 'all',\n    }));\n  };\n\n  const renderPlot = () => {\n    if (!(xAxis.key && yAxis.key)) {\n      return (\n        <div\n          css={{\n            display: 'flex',\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text size=\"xl\">\n            <FormattedMessage\n              defaultMessage=\"Select parameters/metrics to plot.\"\n              description=\"Text to show when x or y axis is not selected on box plot\"\n            />\n          </Typography.Text>\n        </div>\n      );\n    }\n\n    return (\n      <LazyPlot\n        css={{\n          width: '100%',\n          height: '100%',\n          minHeight: '35vw',\n        }}\n        data={getBoxPlotData()}\n        layout={{\n          margin: {\n            t: 30,\n          },\n          hovermode: 'closest',\n          xaxis: {\n            title: xAxis.key,\n          },\n          yaxis: {\n            title: yAxis.key,\n          },\n        }}\n        config={{\n          responsive: true,\n          displaylogo: false,\n          scrollZoom: true,\n          modeBarButtonsToRemove: [\n            'sendDataToCloud',\n            'select2d',\n            'lasso2d',\n            'resetScale2d',\n            'hoverClosestCartesian',\n            'hoverCompareCartesian',\n          ],\n        }}\n        useResizeHandler\n      />\n    );\n  };\n\n  return (\n    <Row>\n      <Col span={6}>\n        <div css={styles.borderSpacer}>\n          <div>\n            <FormUI.Label htmlFor=\"x-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"X-axis:\"\n                description=\"Label text for X-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"x-axis-selector\" onChange={setXAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n\n          <div>\n            <FormUI.Label htmlFor=\"y-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"Y-axis:\"\n                description=\"Label text for Y-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"y-axis-selector\" onChange={setYAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n        </div>\n      </Col>\n      <Col span={18}>{renderPlot()}</Col>\n    </Row>\n  );\n};\n\nconst styles = {\n  borderSpacer: (theme: any) => ({\n    paddingLeft: theme.spacing.xs,\n  }),\n};\n","import React, { useCallback } from 'react';\nimport { SectionErrorBoundary } from './error-boundaries/SectionErrorBoundary';\nimport {\n  ChevronRightIcon,\n  useDesignSystemTheme,\n  Accordion,\n  DesignSystemThemeInterface,\n  importantify,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\ninterface CollapsibleSectionProps {\n  title: string | any;\n  forceOpen?: boolean;\n  children: React.ReactNode;\n  showServerError?: boolean;\n  defaultCollapsed?: boolean;\n  onChange?: (key: string | string[]) => void;\n  className?: string;\n  componentId?: string;\n}\n\n// Custom styles to make <Accordion> look like previously used <Collapse> from antd\nconst getAccordionStyles = ({\n  theme,\n  getPrefixedClassName,\n}: Pick<DesignSystemThemeInterface, 'theme' | 'getPrefixedClassName'>) => {\n  const clsPrefix = getPrefixedClassName('collapse');\n\n  const classItem = `.${clsPrefix}-item`;\n  const classHeader = `.${clsPrefix}-header`;\n  const classContentBox = `.${clsPrefix}-content-box`;\n\n  return {\n    fontSize: 14,\n    [`& > ${classItem} > ${classHeader}`]: {\n      paddingLeft: 0,\n      paddingTop: 12,\n      paddingBottom: 12,\n      display: 'flex',\n      alignItems: 'center',\n      fontSize: 16,\n      fontWeight: 'normal',\n      lineHeight: theme.typography.lineHeightLg,\n    },\n    [classContentBox]: {\n      padding: `${theme.spacing.xs}px 0 ${theme.spacing.md}px 0`,\n    },\n  };\n};\n\nexport function CollapsibleSection(props: CollapsibleSectionProps) {\n  const {\n    title,\n    forceOpen,\n    showServerError,\n    defaultCollapsed,\n    onChange,\n    className,\n    componentId = 'mlflow.common.generic_collapsible_section',\n  } = props;\n\n  // We need to spread `activeKey` into <Collapse/> as an optional prop because its enumerability\n  // affects rendering, i.e. passing `activeKey={undefined}` is different from not passing activeKey\n  const activeKeyProp = forceOpen && { activeKey: ['1'] };\n  const defaultActiveKey = defaultCollapsed ? null : ['1'];\n\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n  const { formatMessage } = useIntl();\n\n  const getExpandIcon = useCallback(\n    ({ isActive }: { isActive?: boolean }) => (\n      <div\n        css={importantify({ width: theme.general.heightBase / 2, transform: isActive ? 'rotate(90deg)' : undefined })}\n      >\n        <ChevronRightIcon\n          css={{\n            svg: { width: theme.general.heightBase / 2, height: theme.general.heightBase / 2 },\n          }}\n          aria-label={\n            isActive\n              ? formatMessage(\n                  {\n                    defaultMessage: 'collapse {title}',\n                    description: 'Common component > collapsible section > alternative label when expand',\n                  },\n                  { title },\n                )\n              : formatMessage(\n                  {\n                    defaultMessage: 'expand {title}',\n                    description: 'Common component > collapsible section > alternative label when collapsed',\n                  },\n                  { title },\n                )\n          }\n        />\n      </div>\n    ),\n    [theme, title, formatMessage],\n  );\n\n  return (\n    <Accordion\n      componentId={componentId}\n      {...activeKeyProp}\n      dangerouslyAppendEmotionCSS={getAccordionStyles({ theme, getPrefixedClassName })}\n      dangerouslySetAntdProps={{\n        className,\n        expandIconPosition: 'left',\n        expandIcon: getExpandIcon,\n      }}\n      defaultActiveKey={defaultActiveKey ?? undefined}\n      onChange={onChange}\n    >\n      <Accordion.Panel header={title} key=\"1\">\n        <SectionErrorBoundary showServerError={showServerError}>{props.children}</SectionErrorBoundary>\n      </Accordion.Panel>\n    </Accordion>\n  );\n}\n","import React from 'react';\nimport { ErrorBoundary, ErrorBoundaryPropsWithComponent, FallbackProps } from 'react-error-boundary';\nimport ErrorUtils from './ErrorUtils';\nimport { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport type ErrorBoundaryProps = {\n  children: React.Component;\n  customFallbackComponent?: ErrorBoundaryPropsWithComponent['FallbackComponent'];\n};\n\nfunction ErrorFallback() {\n  return (\n    <Empty\n      data-testid=\"fallback\"\n      title={<FormattedMessage defaultMessage=\"Error\" description=\"Title of editor error fallback component\" />}\n      description={\n        <FormattedMessage\n          defaultMessage=\"An error occurred while rendering this component.\"\n          description=\"Description of error fallback component\"\n        />\n      }\n      image={<DangerIcon />}\n    />\n  );\n}\n\nfunction CustomErrorBoundary({ children, customFallbackComponent }: React.PropsWithChildren<ErrorBoundaryProps>) {\n  function logErrorToConsole(error: Error, info: { componentStack: string }) {\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error('Caught Unexpected Error: ', error, info.componentStack);\n  }\n\n  if (customFallbackComponent) {\n    return (\n      <ErrorBoundary onError={logErrorToConsole} FallbackComponent={customFallbackComponent}>\n        {children}\n      </ErrorBoundary>\n    );\n  }\n\n  return (\n    <ErrorBoundary onError={logErrorToConsole} fallback={<ErrorFallback />}>\n      {children}\n    </ErrorBoundary>\n  );\n}\n\nexport function withErrorBoundary<P>(\n  service: string,\n  Component: React.ComponentType<P>,\n  errorMessage?: React.ReactNode,\n  customFallbackComponent?: React.ComponentType<FallbackProps>,\n): React.ComponentType<P> {\n  return function CustomErrorBoundaryWrapper(props: P) {\n    return (\n      <CustomErrorBoundary customFallbackComponent={customFallbackComponent}>\n        {/* @ts-expect-error Generics don't play well with WithConditionalCSSProp type coming @emotion/react jsx typing to validate css= prop values typing. More details here: emotion-js/emotion#2169 */}\n        <Component {...props} />\n      </CustomErrorBoundary>\n    );\n  };\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nexport default class CompareRunUtil {\n  /**\n   * Find in a list of metrics/params a certain key\n   */\n  static findInList(data: any, key: any) {\n    let found = undefined;\n    data.forEach((value: any) => {\n      if (value.key === key) {\n        found = value;\n      }\n    });\n    return found;\n  }\n\n  /**\n   * Get all keys present in the data in ParamLists or MetricLists or Schema input and outputs lists\n   */\n  static getKeys(lists: any, numeric: any) {\n    const keys = {};\n    lists.forEach((list: any) =>\n      list.forEach((item: any) => {\n        if (!(item.key in keys)) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = true;\n        }\n        if (numeric && isNaN(parseFloat(item.value))) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = false;\n        }\n      }),\n    );\n    return (\n      Object.keys(keys)\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        .filter((k) => keys[k])\n        .sort()\n    );\n  }\n}\n","import React from 'react';\n\nimport {\n  type Location,\n  type Params as RouterDOMParams,\n  type NavigateOptions,\n  type To,\n  useLocation,\n  useNavigate,\n  useParams,\n} from './RoutingUtils';\n\nexport interface WithRouterNextProps<Params extends RouterDOMParams = RouterDOMParams> {\n  navigate: ReturnType<typeof useNavigate>;\n  location: Location;\n  params: Params;\n}\n\n/**\n * This HoC serves as a retrofit for class components enabling them to use\n * react-router v6's location, navigate and params being injected via props.\n */\nexport const withRouterNext =\n  <\n    T,\n    Props extends JSX.IntrinsicAttributes &\n      JSX.LibraryManagedAttributes<React.ComponentType<T>, React.PropsWithChildren<T>>,\n    Params extends RouterDOMParams = RouterDOMParams,\n  >(\n    Component: React.ComponentType<T>,\n  ) =>\n  (\n    props: Omit<\n      Props,\n      | 'location'\n      | 'navigate'\n      | 'params'\n      | 'navigationType'\n      /* prettier-ignore*/\n    >,\n  ) => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const params = useParams<Params>();\n\n    return (\n      <Component\n        /* prettier-ignore */\n        params={params as Params}\n        location={location}\n        navigate={navigate}\n        {...(props as Props)}\n      />\n    );\n  };\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i data-testid=\"icon-fail\" className=\"fa fa-exclamation-triangle icon-fail\" css={classNames.wrapper} />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import { createContext } from \"react\";\n\nexport type ErrorBoundaryContextType = {\n  didCatch: boolean;\n  error: any;\n  resetErrorBoundary: (...args: any[]) => void;\n};\n\nexport const ErrorBoundaryContext =\n  createContext<ErrorBoundaryContextType | null>(null);\n","import {\n  Component,\n  createElement,\n  ErrorInfo,\n  isValidElement,\n  PropsWithChildren,\n  PropsWithRef,\n  ReactElement,\n} from \"react\";\nimport { ErrorBoundaryContext } from \"./ErrorBoundaryContext\";\nimport { ErrorBoundaryProps, FallbackProps } from \"./types\";\n\ntype ErrorBoundaryState = { didCatch: boolean; error: any };\n\nconst initialState: ErrorBoundaryState = {\n  didCatch: false,\n  error: null,\n};\n\nexport class ErrorBoundary extends Component<\n  PropsWithRef<PropsWithChildren<ErrorBoundaryProps>>,\n  ErrorBoundaryState\n> {\n  state = initialState;\n\n  static getDerivedStateFromError(error: Error) {\n    return { didCatch: true, error };\n  }\n\n  resetErrorBoundary = (...args: any[]) => {\n    const { error } = this.state;\n\n    if (error !== null) {\n      this.props.onReset?.({\n        args,\n        reason: \"imperative-api\",\n      });\n\n      this.setState(initialState);\n    }\n  };\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    this.props.onError?.(error, info);\n  }\n\n  componentDidUpdate(\n    prevProps: ErrorBoundaryProps,\n    prevState: ErrorBoundaryState\n  ) {\n    const { didCatch } = this.state;\n    const { resetKeys } = this.props;\n\n    // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n    // we'd end up resetting the error boundary immediately.\n    // This would likely trigger a second error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n\n    if (\n      didCatch &&\n      prevState.error !== null &&\n      hasArrayChanged(prevProps.resetKeys, resetKeys)\n    ) {\n      this.props.onReset?.({\n        next: resetKeys,\n        prev: prevProps.resetKeys,\n        reason: \"keys\",\n      });\n\n      this.setState(initialState);\n    }\n  }\n\n  render() {\n    const { children, fallbackRender, FallbackComponent, fallback } =\n      this.props;\n    const { didCatch, error } = this.state;\n\n    let childToRender = children;\n\n    if (didCatch) {\n      const props: FallbackProps = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary,\n      };\n\n      if (isValidElement(fallback)) {\n        childToRender = fallback;\n      } else if (typeof fallbackRender === \"function\") {\n        childToRender = fallbackRender(props);\n      } else if (FallbackComponent) {\n        childToRender = createElement(FallbackComponent, props);\n      } else {\n        throw new Error(\n          \"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\"\n        );\n      }\n    }\n\n    return createElement(\n      ErrorBoundaryContext.Provider,\n      {\n        value: {\n          didCatch,\n          error,\n          resetErrorBoundary: this.resetErrorBoundary,\n        },\n      },\n      childToRender\n    ) as ReactElement;\n  }\n}\n\nfunction hasArrayChanged(a: any[] = [], b: any[] = []) {\n  return (\n    a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]))\n  );\n}\n","import { ErrorBoundaryContextType } from \"./ErrorBoundaryContext\";\n\nexport function assertErrorBoundaryContext(\n  value: any\n): value is ErrorBoundaryContextType {\n  if (\n    value == null ||\n    typeof value.didCatch !== \"boolean\" ||\n    typeof value.resetErrorBoundary !== \"function\"\n  ) {\n    throw new Error(\"ErrorBoundaryContext not found\");\n  }\n\n  return true;\n}\n","import { useContext, useMemo, useState } from \"react\";\nimport { assertErrorBoundaryContext } from \"./assertErrorBoundaryContext\";\nimport { ErrorBoundaryContext } from \"./ErrorBoundaryContext\";\n\nexport type UseErrorBoundaryApi<Error> = {\n  resetBoundary: () => void;\n  showBoundary: (error: Error) => void;\n};\n\nexport function useErrorBoundary<Error = any>(): UseErrorBoundaryApi<Error> {\n  const context = useContext(ErrorBoundaryContext);\n\n  assertErrorBoundaryContext(context);\n\n  const [state, setState] = useState<{\n    error: Error | null;\n    hasError: boolean;\n  }>({\n    error: null,\n    hasError: false,\n  });\n\n  const memoized = useMemo(\n    () => ({\n      resetBoundary: () => {\n        context?.resetErrorBoundary();\n        setState({ error: null, hasError: false });\n      },\n      showBoundary: (error: Error) =>\n        setState({\n          error,\n          hasError: true,\n        }),\n    }),\n    [context?.resetErrorBoundary]\n  );\n\n  if (state.hasError) {\n    throw state.error;\n  }\n\n  return memoized;\n}\n","import { ComponentType, createElement } from \"react\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport { ErrorBoundaryProps } from \"./types\";\n\nexport function withErrorBoundary<Props extends Object>(\n  Component: ComponentType<Props>,\n  errorBoundaryProps: ErrorBoundaryProps\n): ComponentType<Props> {\n  const Wrapped: ComponentType<Props> = (props: Props) => {\n    return createElement(\n      ErrorBoundary,\n      errorBoundaryProps,\n      createElement(Component, props)\n    );\n  };\n\n  // Format for display in DevTools\n  const name = Component.displayName || Component.name || \"Unknown\";\n  Wrapped.displayName = `withErrorBoundary(${name})`;\n\n  return Wrapped;\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","import { Theme } from '@emotion/react';\n\ninterface CompareRunPlotContainerProps {\n  controls: React.ReactNode;\n}\n\nexport const CompareRunPlotContainer = (props: React.PropsWithChildren<CompareRunPlotContainerProps>) => (\n  <div css={styles.wrapper}>\n    <div css={styles.controls}>{props.controls}</div>\n    <div css={styles.plotWrapper}>{props.children}</div>\n  </div>\n);\n\nconst styles = {\n  plotWrapper: {\n    overflow: 'hidden',\n    width: '100%',\n    height: '100%',\n    minHeight: 450,\n  },\n  wrapper: {\n    display: 'grid',\n    gridTemplateColumns: 'minmax(300px, 1fr) 3fr',\n  },\n  controls: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: 'calc(100% - 60px)', // 60px comes from header height\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport { FormUI, SimpleSelect, SimpleSelectOption, SimpleSelectOptionGroup, Spacer } from '@databricks/design-system';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunScatterImplProps = {\n  runUuids: string[];\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunScatterImplState = any;\n\nexport class CompareRunScatterImpl extends Component<CompareRunScatterImplProps, CompareRunScatterImplState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunScatterImplProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, false);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, false);\n\n    if (this.paramKeys.length + this.metricKeys.length < 2) {\n      this.state = { disabled: true };\n    } else {\n      this.state = {\n        disabled: false,\n        x:\n          this.paramKeys.length > 0\n            ? {\n                key: this.paramKeys[0],\n                isMetric: false,\n              }\n            : {\n                key: this.metricKeys[1],\n                isMetric: true,\n              },\n        y:\n          this.metricKeys.length > 0\n            ? {\n                key: this.metricKeys[0],\n                isMetric: true,\n              }\n            : {\n                key: this.paramKeys[1],\n                isMetric: false,\n              },\n      };\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return <div />;\n    }\n\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'x' comes from an index signature, so it ... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.x);\n      // @ts-expect-error TS(4111): Property 'y' comes from an index signature, so it ... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.y);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n      xs.push(x);\n      ys.push(y);\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"x-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('x')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"y-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('y')}\n            </div>\n          </>\n        }\n      >\n        <LazyPlot\n          data={[\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['x'].key, keyLength)),\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['y'].key, keyLength)),\n            },\n          }}\n          css={styles.plot}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: any) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunscatter.tsx_182\"\n        css={styles.select}\n        id={axis + '-axis-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunScatterImpl.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  select: {\n    width: '100%',\n  },\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport const CompareRunScatter = connect(mapStateToProps)(CompareRunScatterImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport './RequestStateWrapper.css';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\nimport { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { LazyPlot } from './LazyPlot';\n\nconst AXIS_LABEL_CLS = '.pcp-plot .parcoords .y-axis .axis-heading .axis-title';\nexport const UNKNOWN_TERM = 'unknown';\n\ntype ParallelCoordinatesPlotViewProps = {\n  runUuids: string[];\n  paramKeys: string[];\n  metricKeys: string[];\n  paramDimensions: any[];\n  metricDimensions: any[];\n};\n\ntype ParallelCoordinatesPlotViewState = any;\n\nexport class ParallelCoordinatesPlotView extends React.Component<\n  ParallelCoordinatesPlotViewProps,\n  ParallelCoordinatesPlotViewState\n> {\n  state = {\n    // Current sequence of all axes, both parameters and metrics.\n    sequence: [...this.props.paramKeys, ...this.props.metricKeys],\n  };\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    const keysFromProps = [...props.paramKeys, ...props.metricKeys];\n    const keysFromState = state.sequence;\n    if (!_.isEqual(_.sortBy(keysFromProps), _.sortBy(keysFromState))) {\n      return { sequence: keysFromProps };\n    }\n    return null;\n  }\n\n  getData() {\n    const { sequence } = this.state;\n    const { paramDimensions, metricDimensions, metricKeys } = this.props;\n    const lastMetricKey = this.findLastKeyFromState(metricKeys);\n    const lastMetricDimension = this.props.metricDimensions.find((d) => d.label === lastMetricKey);\n    const colorScaleConfigs = ParallelCoordinatesPlotView.getColorScaleConfigsForDimension(lastMetricDimension);\n    // This make sure axis order consistency across renders.\n    const orderedDimensions = ParallelCoordinatesPlotView.getDimensionsOrderedBySequence(\n      [...paramDimensions, ...metricDimensions],\n      sequence,\n    );\n    return [\n      {\n        type: 'parcoords',\n        line: { ...colorScaleConfigs },\n        dimensions: orderedDimensions,\n      },\n    ];\n  }\n\n  static getDimensionsOrderedBySequence(dimensions: any, sequence: any) {\n    return _.sortBy(dimensions, [(dimension) => sequence.indexOf(dimension.label)]);\n  }\n\n  static getLabelElementsFromDom = () => Array.from(document.querySelectorAll(AXIS_LABEL_CLS));\n\n  findLastKeyFromState(keys: any) {\n    const { sequence } = this.state;\n    const keySet = new Set(keys);\n    return _.findLast(sequence, (key) => keySet.has(key));\n  }\n\n  static getColorScaleConfigsForDimension(dimension: any) {\n    if (!dimension) return null;\n    const cmin = _.min(dimension.values);\n    const cmax = _.max(dimension.values);\n    return {\n      showscale: true,\n      colorscale: 'Jet',\n      cmin,\n      cmax,\n      color: dimension.values,\n    };\n  }\n\n  // Update styles(green & bold) for metric axes.\n  // Note(Zangr) 2019-6-25 this is needed because there is no per axis label setting available. This\n  // needs to be called every time chart updates. More information about currently available label\n  // setting here: https://plot.ly/javascript/reference/#parcoords-labelfont\n  updateMetricAxisLabelStyle = () => {\n    /* eslint-disable no-param-reassign */\n    const metricsKeySet = new Set(this.props.metricKeys);\n    // TODO(Zangr) 2019-06-20 This assumes name uniqueness across params & metrics. Find a way to\n    // make it more deterministic. Ex. Add add different data attributes to indicate axis kind.\n    ParallelCoordinatesPlotView.getLabelElementsFromDom()\n      .filter((el) => metricsKeySet.has(el.innerHTML))\n      .forEach((el) => {\n        (el as any).style.fill = 'green';\n        (el as any).style.fontWeight = 'bold';\n      });\n  };\n\n  maybeUpdateStateForColorScale = (currentSequenceFromPlotly: any) => {\n    const rightmostMetricKeyFromState = this.findLastKeyFromState(this.props.metricKeys);\n    const metricsKeySet = new Set(this.props.metricKeys);\n    const rightmostMetricKeyFromPlotly = _.findLast(currentSequenceFromPlotly, (key) => metricsKeySet.has(key));\n    // Currently we always render color scale based on the rightmost metric axis, so if that changes\n    // we need to setState with the new axes sequence to trigger a rerender.\n    if (rightmostMetricKeyFromState !== rightmostMetricKeyFromPlotly) {\n      this.setState({ sequence: currentSequenceFromPlotly });\n    }\n  };\n\n  handlePlotUpdate = ({ data: [{ dimensions }] }: any) => {\n    this.updateMetricAxisLabelStyle();\n    this.maybeUpdateStateForColorScale(dimensions.map((d: any) => d.label));\n  };\n\n  render() {\n    return (\n      <LazyPlot\n        layout={{ autosize: true, margin: { t: 50 } }}\n        useResizeHandler\n        css={styles.plot}\n        data={this.getData()}\n        onUpdate={this.handlePlotUpdate}\n        className=\"pcp-plot\"\n        config={{ displayModeBar: false }}\n      />\n    );\n  }\n}\n\nexport const generateAttributesForCategoricalDimension = (labels: any) => {\n  // Create a lookup from label to its own alphabetical sorted order.\n  // Ex. ['A', 'B', 'C'] => { 'A': '0', 'B': '1', 'C': '2' }\n  const sortedUniqLabels = _.uniq(labels).sort();\n\n  // We always want the UNKNOWN_TERM to be at the top\n  // of the chart which is end of the sorted label array\n  // Ex. ['A', 'UNKNOWN_TERM', 'B'] => { 'A': '0', 'B': '1', 'UNKNOWN_TERM': '2' }\n  let addUnknownTerm = false;\n  const filteredSortedUniqLabels = sortedUniqLabels.filter((label) => {\n    if (label === UNKNOWN_TERM) addUnknownTerm = true;\n    return label !== UNKNOWN_TERM;\n  });\n  if (addUnknownTerm) {\n    filteredSortedUniqLabels.push(UNKNOWN_TERM);\n  }\n  const labelToIndexStr = _.invert(filteredSortedUniqLabels);\n  const attributes = {};\n\n  // Values are assigned to their alphabetical sorted index number\n  (attributes as any).values = labels.map((label: any) => Number(labelToIndexStr[label]));\n\n  // Default to alphabetical order for categorical axis here. Ex. [0, 1, 2, 3 ...]\n  (attributes as any).tickvals = _.range(filteredSortedUniqLabels.length);\n\n  // Default to alphabetical order for categorical axis here. Ex. ['A', 'B', 'C', 'D' ...]\n  (attributes as any).ticktext = filteredSortedUniqLabels.map((sortedUniqLabel) =>\n    (sortedUniqLabel as any).substring(0, 10),\n  );\n\n  return attributes;\n};\n\n/**\n * Infer the type of data in a run. If all the values are numbers or castable to numbers, then\n * treat it as a number column.\n */\nexport const inferType = (key: any, runUuids: any, entryByRunUuid: any) => {\n  for (let i = 0; i < runUuids.length; i++) {\n    if (entryByRunUuid[runUuids[i]][key]) {\n      const { value } = entryByRunUuid[runUuids[i]][key];\n      if (typeof value === 'string' && isNaN(Number(value)) && value !== 'NaN') {\n        return 'string';\n      }\n    }\n  }\n  return 'number';\n};\n\nexport const createDimension = (key: any, runUuids: any, entryByRunUuid: any) => {\n  let attributes = {};\n  const dataType = inferType(key, runUuids, entryByRunUuid);\n  if (dataType === 'string') {\n    attributes = generateAttributesForCategoricalDimension(\n      runUuids.map((runUuid: any) =>\n        entryByRunUuid[runUuid][key] ? entryByRunUuid[runUuid][key].value : UNKNOWN_TERM,\n      ),\n    );\n  } else {\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const values = runUuids.map((runUuid: any) => {\n      if (entryByRunUuid[runUuid][key]) {\n        const { value } = entryByRunUuid[runUuid][key];\n        const numericValue = Number(value);\n        if (maxValue < numericValue) maxValue = numericValue;\n        return numericValue;\n      }\n      return UNKNOWN_TERM;\n    });\n\n    // For Numerical values, we take the max value of all the attribute\n    // values and 0.01 to it so it is always at top of the graph.\n    (attributes as any).values = values.map((value: any) => {\n      if (value === UNKNOWN_TERM) return maxValue + 0.01;\n      return value;\n    });\n\n    // For some reason, Plotly tries to plot these values with SI prefixes by default\n    // Explicitly set to 5 fixed digits float here\n    (attributes as any).tickformat = '.5f';\n  }\n  return {\n    label: key,\n    ...attributes,\n  };\n};\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids, paramKeys, metricKeys } = ownProps;\n  const { latestMetricsByRunUuid, paramsByRunUuid } = state.entities;\n  const paramDimensions = paramKeys.map((paramKey: any) => createDimension(paramKey, runUuids, paramsByRunUuid));\n  const metricDimensions = metricKeys.map((metricKey: any) =>\n    createDimension(metricKey, runUuids, latestMetricsByRunUuid),\n  );\n  return { paramDimensions, metricDimensions };\n};\n\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotView);\n","import { Button, LegacySelect } from '@databricks/design-system';\nimport { type Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ntype Props = {\n  paramKeys: string[];\n  metricKeys: string[];\n  selectedParamKeys: string[];\n  selectedMetricKeys: string[];\n  handleParamsSelectChange: (paramValues: string[]) => void;\n  handleMetricsSelectChange: (metricValues: string[]) => void;\n  onClearAllSelect: () => void;\n};\n\nexport function ParallelCoordinatesPlotControls({\n  paramKeys,\n  metricKeys,\n  selectedParamKeys,\n  selectedMetricKeys,\n  handleParamsSelectChange,\n  handleMetricsSelectChange,\n  onClearAllSelect,\n}: Props) {\n  return (\n    <div css={styles.wrapper}>\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Parameters:\"\n          description=\"Label text for parameters in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select parameters\"\n            description=\"Placeholder text for parameters in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedParamKeys}\n        onChange={handleParamsSelectChange}\n      >\n        {paramKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics:\"\n          description=\"Label text for metrics in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select metrics\"\n            description=\"Placeholder text for metrics in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedMetricKeys}\n        onChange={handleMetricsSelectChange}\n      >\n        {metricKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_parallelcoordinatesplotcontrols.tsx_84\"\n          data-test-id=\"clear-button\"\n          onClick={onClearAllSelect}\n        >\n          <FormattedMessage\n            defaultMessage=\"Clear All\"\n            description=\"String for the clear button to clear any selected parameters and metrics\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  wrapper: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n  select: { width: '100%' },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ParallelCoordinatesPlotView from './ParallelCoordinatesPlotView';\nimport { ParallelCoordinatesPlotControls } from './ParallelCoordinatesPlotControls';\nimport {\n  getAllParamKeysByRunUuids,\n  getAllMetricKeysByRunUuids,\n  getSharedMetricKeysByRunUuids,\n  getRunInfo,\n} from '../reducers/Reducers';\nimport _ from 'lodash';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\nimport { FormattedMessage } from 'react-intl';\nimport { Typography } from '@databricks/design-system';\n\ntype ParallelCoordinatesPlotPanelProps = {\n  runUuids: string[];\n  allParamKeys: string[];\n  allMetricKeys: string[];\n  sharedMetricKeys: string[];\n  diffParamKeys: string[];\n};\n\ntype ParallelCoordinatesPlotPanelState = any;\n\nexport class ParallelCoordinatesPlotPanel extends React.Component<\n  ParallelCoordinatesPlotPanelProps,\n  ParallelCoordinatesPlotPanelState\n> {\n  state = {\n    // Default to select differing parameters. Sort alphabetically (to match\n    // highlighted params in param table), then cap at first 3\n    selectedParamKeys: this.props.diffParamKeys.sort().slice(0, 3),\n    // Default to select the first metric key.\n    // Note that there will be no color scaling if no metric is selected.\n    selectedMetricKeys: this.props.sharedMetricKeys.slice(0, 1),\n  };\n\n  handleParamsSelectChange = (paramValues: any) => {\n    this.setState({ selectedParamKeys: paramValues });\n  };\n\n  handleMetricsSelectChange = (metricValues: any) => {\n    this.setState({ selectedMetricKeys: metricValues });\n  };\n\n  onClearAllSelect = () => {\n    this.setState({ selectedParamKeys: [], selectedMetricKeys: [] });\n  };\n\n  render() {\n    const { runUuids, allParamKeys, allMetricKeys } = this.props;\n    const { selectedParamKeys, selectedMetricKeys } = this.state;\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <ParallelCoordinatesPlotControls\n            paramKeys={allParamKeys}\n            metricKeys={allMetricKeys}\n            selectedParamKeys={selectedParamKeys}\n            selectedMetricKeys={selectedMetricKeys}\n            handleMetricsSelectChange={this.handleMetricsSelectChange}\n            handleParamsSelectChange={this.handleParamsSelectChange}\n            onClearAllSelect={this.onClearAllSelect}\n          />\n        }\n      >\n        {!_.isEmpty(selectedParamKeys) || !_.isEmpty(selectedMetricKeys) ? (\n          <ParallelCoordinatesPlotView\n            runUuids={runUuids}\n            paramKeys={selectedParamKeys}\n            metricKeys={selectedMetricKeys}\n          />\n        ) : (\n          // @ts-expect-error TS(2322): Type '(theme: any) => { padding: any; textAlign: s... Remove this comment to see the full error message\n          <div css={styles.noValuesSelected} data-testid=\"no-values-selected\">\n            <Typography.Title level={2}>\n              <FormattedMessage\n                defaultMessage=\"Nothing to compare!\"\n                // eslint-disable-next-line max-len\n                description=\"Header displayed in the metrics and params compare plot when no values are selected\"\n              />\n            </Typography.Title>\n            <FormattedMessage\n              defaultMessage=\"Please select parameters and/or metrics to display the comparison.\"\n              // eslint-disable-next-line max-len\n              description=\"Explanation displayed in the metrics and params compare plot when no values are selected\"\n            />\n          </div>\n        )}\n      </CompareRunPlotContainer>\n    );\n  }\n}\n\nexport const getDiffParams = (allParamKeys: any, runUuids: any, paramsByRunUuid: any) => {\n  const diffParamKeys: any = [];\n  allParamKeys.forEach((param: any) => {\n    // collect all values for this param\n    const paramVals = runUuids.map(\n      (runUuid: any) => paramsByRunUuid[runUuid][param] && paramsByRunUuid[runUuid][param].value,\n    );\n    if (!paramVals.every((x: any, i: any, arr: any) => x === arr[0])) diffParamKeys.push(param);\n  });\n  return diffParamKeys;\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids: allRunUuids } = ownProps;\n\n  // Filter out runUuids that do not have corresponding runInfos\n  const runUuids = (allRunUuids ?? []).filter((uuid: string) => getRunInfo(uuid, state));\n  const allParamKeys = getAllParamKeysByRunUuids(runUuids, state);\n  const allMetricKeys = getAllMetricKeysByRunUuids(runUuids, state);\n  const sharedMetricKeys = getSharedMetricKeysByRunUuids(runUuids, state);\n  const { paramsByRunUuid } = state.entities;\n  const diffParamKeys = getDiffParams(allParamKeys, runUuids, paramsByRunUuid);\n\n  return {\n    allParamKeys,\n    allMetricKeys,\n    sharedMetricKeys,\n    diffParamKeys,\n  };\n};\n\nconst styles = {\n  noValuesSelected: (theme: any) => ({\n    padding: theme.spacing.md,\n    textAlign: 'center',\n  }),\n};\n\n// @ts-expect-error TS(2345): Argument of type 'typeof ParallelCoordinatesPlotPa... Remove this comment to see the full error message\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotPanel);\n","import React from 'react';\n\nclass ErrorUtils {\n  static mlflowServices = {\n    MODEL_REGISTRY: 'Model Registry',\n    EXPERIMENTS: 'Experiments',\n    MODEL_SERVING: 'Model Serving',\n    RUN_TRACKING: 'Run Tracking',\n  };\n}\n\nexport default ErrorUtils;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-test-id={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-test-id=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport { SectionErrorBoundary } from '../../common/components/error-boundaries/SectionErrorBoundary';\n\nconst Plot = React.lazy(() => import('react-plotly.js'));\n\nexport const LazyPlot = ({ fallback, ...props }: any) => (\n  <SectionErrorBoundary>\n    <React.Suspense fallback={fallback ?? <LegacySkeleton active />}>\n      <Plot {...props} />\n    </React.Suspense>\n  </SectionErrorBoundary>\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Switch,\n  Spacer,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunContourProps = {\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunContourState = any;\n\nexport class CompareRunContour extends Component<CompareRunContourProps, CompareRunContourState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunContourProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, true);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, true);\n\n    if (this.paramKeys.length + this.metricKeys.length < 3) {\n      this.state = { disabled: true };\n    } else {\n      const common = { disabled: false, reverseColor: false };\n      if (this.metricKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.paramKeys[2], isMetric: false },\n        };\n      } else if (this.paramKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.metricKeys[0], isMetric: true },\n          yaxis: { key: this.metricKeys[1], isMetric: true },\n          zaxis: { key: this.metricKeys[2], isMetric: true },\n        };\n      } else if (this.paramKeys.length === 1) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.metricKeys[0], isMetric: true },\n          zaxis: { key: this.metricKeys[1], isMetric: true },\n        };\n      } else {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.metricKeys[0], isMetric: true },\n        };\n      }\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  getColorscale() {\n    /*\n     * contour plot has an option named \"reversescale\" which\n     * reverses the color mapping if True, but it doesn't work properly now.\n     *\n     * https://github.com/plotly/plotly.js/issues/4430\n     *\n     * This function is a temporary workaround for the issue.\n     */\n    const colorscale = [\n      [0, 'rgb(5,10,172)'],\n      [0.35, 'rgb(40,60,190)'],\n      [0.5, 'rgb(70,100,245)'],\n      [0.6, 'rgb(90,120,245)'],\n      [0.7, 'rgb(106,137,247)'],\n      [1, 'rgb(220,220,220)'],\n    ];\n\n    // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n    if (this.state.reverseColor) {\n      return colorscale;\n    } else {\n      // reverse only RGB values\n      return colorscale.map(([val], index) => [val, colorscale[colorscale.length - 1 - index][1]]);\n    }\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return (\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Contour plots can only be rendered when comparing a group of runs\n              with three or more unique metrics or params. Log more metrics or params to your\n              runs to visualize them using the contour plot.\"\n            description=\"Text explanation when contour plot is disabled in comparison pages\n              in MLflow\"\n          />\n        </div>\n      );\n    }\n\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const zs: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'xaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.xaxis);\n      // @ts-expect-error TS(4111): Property 'yaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.yaxis);\n      // @ts-expect-error TS(4111): Property 'zaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const z = this.getValue(index, this.state.zaxis);\n      if (x === undefined || y === undefined || z === undefined) {\n        return;\n      }\n      xs.push(parseFloat(x));\n      ys.push(parseFloat(y));\n      zs.push(parseFloat(z));\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    const maybeRenderPlot = () => {\n      const invalidAxes = [];\n      if (new Set(xs).size < 2) {\n        invalidAxes.push('X');\n      }\n      if (new Set(ys).size < 2) {\n        invalidAxes.push('Y');\n      }\n      if (invalidAxes.length > 0) {\n        const messageHead =\n          invalidAxes.length > 1 ? `The ${invalidAxes.join(' and ')} axes don't` : `The ${invalidAxes[0]} axis doesn't`;\n        return (\n          <div\n            css={styles.noDataMessage}\n          >{`${messageHead} have enough unique data points to render the contour plot.`}</div>\n        );\n      }\n\n      return (\n        <LazyPlot\n          css={styles.plot}\n          data={[\n            // contour plot\n            {\n              z: zs,\n              x: xs,\n              y: ys,\n              type: 'contour',\n              hoverinfo: 'none',\n              colorscale: this.getColorscale(),\n              connectgaps: true,\n              contours: {\n                coloring: 'heatmap',\n              },\n            },\n            // scatter plot\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['xaxis'].key, keyLength)),\n              range: [Math.min(...xs), Math.max(...xs)],\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['yaxis'].key, keyLength)),\n              range: [Math.min(...ys), Math.max(...ys)],\n            },\n          }}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      );\n    };\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"xaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('xaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"yaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('yaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"zaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Z-axis:\"\n                  description=\"Label text for z-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('zaxis')}\n            </div>\n            <Spacer />\n            <div className=\"inline-control\">\n              <FormattedMessage\n                defaultMessage=\"Reverse color:\"\n                description=\"Label text for reverse color toggle in contour plot comparison\n                      in MLflow\"\n              />{' '}\n              <Switch\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_282\"\n                className=\"show-point-toggle\"\n                // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n                checked={this.state.reverseColor}\n                onChange={(checked) => this.setState({ reverseColor: checked })}\n              />\n            </div>\n          </>\n        }\n      >\n        {maybeRenderPlot()}\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: string) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_299\"\n        css={{ width: '100%' }}\n        id={axis + '-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunContour.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n  noDataMessage: (theme: any) => ({\n    padding: theme.spacing.sm,\n    display: 'flex',\n    justifyContent: 'center',\n  }),\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport default connect(mapStateToProps)(CompareRunContour);\n","import spinner from '../static/mlflow-spinner.png';\nimport { Interpolation, keyframes, Theme } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n"],"names":["paramOptionPrefix","_ref2","name","styles","Selector","_ref","id","onChange","paramKeys","metricKeys","intl","useIntl","_jsxs","SimpleSelect","componentId","css","placeholder","formatMessage","defaultMessage","_ref3","target","value","_prefix","key","split","isParam","startsWith","children","_jsx","SimpleSelectOptionGroup","label","map","SimpleSelectOption","_ref10","_ref11","CompareRunBox","_ref4","runInfos","metricLists","paramLists","xAxis","setXAxis","useState","undefined","yAxis","setYAxis","Array","from","Set","flat","_ref5","sort","_ref6","getBoxPlotData","data","forEach","_","index","params","metrics","x","find","_ref7","y","_ref8","push","Object","entries","_ref9","values","type","jitter","pointpos","boxpoints","Row","Col","span","borderSpacer","FormUI","Label","htmlFor","FormattedMessage","LazyPlot","layout","margin","t","hovermode","xaxis","title","yaxis","config","responsive","displaylogo","scrollZoom","modeBarButtonsToRemove","useResizeHandler","Typography","Text","size","theme","paddingLeft","spacing","xs","getAccordionStyles","getPrefixedClassName","clsPrefix","classItem","classHeader","classContentBox","fontSize","paddingTop","paddingBottom","display","alignItems","fontWeight","lineHeight","typography","lineHeightLg","padding","md","CollapsibleSection","props","forceOpen","showServerError","defaultCollapsed","className","activeKeyProp","activeKey","defaultActiveKey","useDesignSystemTheme","getExpandIcon","useCallback","isActive","importantify","width","general","heightBase","transform","ChevronRightIcon","_css","svg","height","Accordion","dangerouslyAppendEmotionCSS","dangerouslySetAntdProps","expandIconPosition","expandIcon","Panel","header","SectionErrorBoundary","ErrorFallback","Empty","description","image","DangerIcon","CustomErrorBoundary","customFallbackComponent","logErrorToConsole","error","info","console","componentStack","ErrorBoundary","onError","FallbackComponent","fallback","withErrorBoundary","service","Component","errorMessage","CompareRunUtil","findInList","found","getKeys","lists","numeric","keys","list","item","isNaN","parseFloat","filter","k","withRouterNext","location","useLocation","navigate","useNavigate","useParams","React","constructor","arguments","state","componentDidCatch","errorInfo","this","setState","renderErrorMessage","message","render","classNames","wrapper","href","Utils","getSupportPageUrl","marginLeft","$ebb31c7feaa4405e$export$b16d9fb1a22de840","$hgUW1$createContext","$44d7e150ebc754d2$var$initialState","didCatch","$44d7e150ebc754d2$export$e926676385687eaf","$hgUW1$Component","getDerivedStateFromError","resetErrorBoundary","_this","_len","length","args","_key","onReset","reason","componentDidUpdate","prevProps","prevState","resetKeys","a","b","some","is","$44d7e150ebc754d2$var$hasArrayChanged","next","prev","fallbackRender","childToRender","$hgUW1$isValidElement","Error","$hgUW1$createElement","Provider","$75c9d331f9c1ed1a$export$f20aa86254872370","$7c3c25b3f398a9d6$export$c052f6604b7d51fe","context","$hgUW1$useContext","$hgUW1$useState","hasError","memoized","$hgUW1$useMemo","resetBoundary","showBoundary","$62ff477d53f02a5b$export$f0c7a449e0cfaec7","errorBoundaryProps","Wrapped","displayName","PreviewBadge","Tag","color","CompareRunPlotContainer","controls","plotWrapper","overflow","minHeight","gridTemplateColumns","PageContainer","usesFullHeight","restProps","PageWrapper","useFullHeightLayout","Spacer","fixedSpacer","container","defaultProps","flexDirection","flexGrow","flex","flexShrink","CompareRunScatterImpl","super","disabled","isMetric","getValue","i","keyLength","MAX_PLOT_KEY_LENGTH","ys","tooltips","getPlotlyTooltip","_Fragment","renderSelect","text","hoverinfo","mode","marker","escape","truncateString","plot","axis","select","prefix","keyParts","join","p","m","valueLength","MAX_PLOT_VALUE_LENGTH","runName","runDisplayNames","result","paramList","metricList","formatMetric","CompareRunScatter","connect","mapStateToProps","ownProps","runUuids","runUuid","getRunInfo","getLatestMetrics","getParams","RequestStateWrapper","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","r","includes","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","every","active","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","Spinner","getApis","requestIds","UNKNOWN_TERM","ParallelCoordinatesPlotView","sequence","updateMetricAxisLabelStyle","metricsKeySet","getLabelElementsFromDom","el","has","innerHTML","style","fill","maybeUpdateStateForColorScale","currentSequenceFromPlotly","rightmostMetricKeyFromState","findLastKeyFromState","handlePlotUpdate","dimensions","d","keysFromProps","keysFromState","getData","paramDimensions","metricDimensions","lastMetricKey","lastMetricDimension","line","getColorScaleConfigsForDimension","getDimensionsOrderedBySequence","dimension","indexOf","keySet","showscale","colorscale","cmin","cmax","autosize","onUpdate","displayModeBar","document","querySelectorAll","createDimension","entryByRunUuid","attributes","dataType","inferType","Number","labels","sortedUniqLabels","addUnknownTerm","filteredSortedUniqLabels","labelToIndexStr","tickvals","ticktext","sortedUniqLabel","substring","generateAttributesForCategoricalDimension","maxValue","MIN_SAFE_INTEGER","numericValue","tickformat","latestMetricsByRunUuid","paramsByRunUuid","entities","paramKey","metricKey","ParallelCoordinatesPlotControls","selectedParamKeys","selectedMetricKeys","handleParamsSelectChange","handleMetricsSelectChange","onClearAllSelect","LegacySelect","Option","marginTop","Button","onClick","ParallelCoordinatesPlotPanel","diffParamKeys","slice","sharedMetricKeys","paramValues","metricValues","allParamKeys","allMetricKeys","noValuesSelected","Title","level","textAlign","allRunUuids","uuid","getAllParamKeysByRunUuids","getAllMetricKeysByRunUuids","getSharedMetricKeysByRunUuids","getDiffParams","param","arr","ErrorUtils","mlflowServices","MODEL_REGISTRY","EXPERIMENTS","MODEL_SERVING","RUN_TRACKING","OverflowMenu","menu","overflowMenu","Menu","itemName","otherProps","Item","Dropdown","overlay","trigger","placement","arrow","icon","OverflowIcon","PageHeader","breadcrumbs","titleAddOns","preview","spacerSize","hideSpacer","Header","Breadcrumb","includeTrailingCaret","buttons","Plot","LegacySkeleton","CompareRunContour","common","reverseColor","zaxis","getColorscale","val","zs","z","Switch","checked","maybeRenderPlot","invalidAxes","messageHead","noDataMessage","connectgaps","contours","coloring","range","Math","min","max","sm","justifyContent","showImmediately","spinner","alt","src","immediate","marginRight","img","position","opacity","top","left","animation","keyframes","animationDelay"],"sourceRoot":""}