{"version":3,"file":"static/js/252.3e82649e.chunk.js","mappings":"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","sources":["model-registry/components/PromoteModelButton.tsx","model-registry/components/ModelStageTransitionFormModal.tsx","model-registry/components/ModelStageTransitionDropdown.tsx","model-registry/components/aliases/ModelVersionViewAliasEditor.tsx","model-registry/components/ModelVersionView.tsx","model-registry/utils/VersionUtils.ts","model-registry/components/ModelVersionPage.tsx","model-registry/components/RegisterModelForm.tsx","model-registry/components/SchemaTable.tsx","model-registry/utils/SearchUtils.ts"],"sourcesContent":["import { Button, Modal, Typography } from '@databricks/design-system';\nimport { debounce } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { useNavigate } from '../../common/utils/RoutingUtils';\nimport Utils from '../../common/utils/Utils';\nimport { getModelNameFilter } from '../utils/SearchUtils';\nimport { ReduxState, ThunkDispatch } from '../../redux-types';\nimport { createModelVersionApi, createRegisteredModelApi, searchRegisteredModelsApi } from '../actions';\nimport { ModelRegistryRoutes } from '../routes';\nimport {\n  CREATE_NEW_MODEL_OPTION_VALUE,\n  MODEL_NAME_FIELD,\n  RegisterModelForm,\n  SELECTED_MODEL_FIELD,\n} from './RegisterModelForm';\nimport { ModelVersionInfoEntity } from '../../experiment-tracking/types';\n\nconst MAX_SEARCH_REGISTERED_MODELS = 5;\n\ntype PromoteModelButtonImplProps = {\n  modelVersion: ModelVersionInfoEntity;\n};\n\nexport const PromoteModelButton = (props: PromoteModelButtonImplProps) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n\n  const createRegisteredModelRequestId = useRef(getUUID());\n  const createModelVersionRequestId = useRef(getUUID());\n\n  const { modelVersion } = props;\n  const [visible, setVisible] = useState(false);\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const modelByName = useSelector((state: ReduxState) => state.entities.modelByName);\n\n  const form = useRef<any>();\n  const showRegisterModal = () => {\n    setVisible(true);\n  };\n\n  const hideRegisterModal = () => {\n    setVisible(false);\n  };\n\n  const resetAndClearModalForm = () => {\n    setVisible(false);\n    setConfirmLoading(false);\n  };\n\n  const handleRegistrationFailure = (e: any) => {\n    setConfirmLoading(false);\n    Utils.logErrorAndNotifyUser(e);\n  };\n\n  const handleSearchRegisteredModels = useCallback(\n    (input: any) => {\n      dispatch(searchRegisteredModelsApi(getModelNameFilter(input), MAX_SEARCH_REGISTERED_MODELS));\n    },\n    [dispatch],\n  );\n\n  const debouncedHandleSearchRegisteredModels = useMemo(\n    () => debounce(handleSearchRegisteredModels, 300),\n    [handleSearchRegisteredModels],\n  );\n\n  const handleCopyModel = () => {\n    form.current.validateFields().then((values: any) => {\n      setConfirmLoading(true);\n      const selectedModelName = values[SELECTED_MODEL_FIELD];\n      const copySource = 'models:/' + modelVersion.name + '/' + modelVersion.version;\n      if (selectedModelName === CREATE_NEW_MODEL_OPTION_VALUE) {\n        const newModelName = values[MODEL_NAME_FIELD];\n        dispatch(createRegisteredModelApi(newModelName, createRegisteredModelRequestId.current))\n          .then(() =>\n            dispatch(\n              createModelVersionApi(\n                newModelName,\n                copySource,\n                modelVersion.run_id,\n                modelVersion.tags,\n                createModelVersionRequestId.current,\n              ),\n            ),\n          )\n          .then((mvResult: any) => {\n            resetAndClearModalForm();\n            const { version } = mvResult.value['model_version'];\n            navigate(ModelRegistryRoutes.getModelVersionPageRoute(newModelName, version));\n          })\n          .catch(handleRegistrationFailure);\n      } else {\n        dispatch(\n          createModelVersionApi(\n            selectedModelName,\n            copySource,\n            modelVersion.run_id,\n            modelVersion.tags,\n            createModelVersionRequestId.current,\n          ),\n        )\n          .then((mvResult: any) => {\n            resetAndClearModalForm();\n            const { version } = mvResult.value['model_version'];\n            navigate(ModelRegistryRoutes.getModelVersionPageRoute(selectedModelName, version));\n          })\n          .catch(handleRegistrationFailure);\n      }\n    });\n  };\n\n  useEffect(() => {\n    dispatch(searchRegisteredModelsApi());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (visible) {\n      dispatch(searchRegisteredModelsApi());\n    }\n  }, [dispatch, visible]);\n\n  const renderRegisterModelForm = () => {\n    return (\n      <>\n        <Typography.Paragraph css={{ marginTop: '-12px' }}>\n          <FormattedMessage\n            defaultMessage=\"Copy your MLflow models to another registered model for\n            simple model promotion across environments. For more mature production-grade setups, we\n            recommend setting up automated model training workflows to produce models in controlled\n            environments. <link>Learn more</link>\"\n            description=\"Model registry > OSS Promote model modal > description paragraph body\"\n            values={{\n              link: (chunks) => (\n                <Typography.Link\n                  componentId=\"codegen_mlflow_app_src_model-registry_components_promotemodelbutton.tsx_140\"\n                  href={\n                    'https://mlflow.org/docs/latest/model-registry.html' +\n                    '#promoting-an-mlflow-model-across-environments'\n                  }\n                  openInNewTab\n                >\n                  {chunks}\n                </Typography.Link>\n              ),\n            }}\n          />\n        </Typography.Paragraph>\n        <RegisterModelForm\n          modelByName={modelByName}\n          innerRef={form}\n          onSearchRegisteredModels={debouncedHandleSearchRegisteredModels}\n          isCopy\n        />\n      </>\n    );\n  };\n\n  return (\n    <div className=\"promote-model-btn-wrapper\">\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_promotemodelbutton.tsx_165\"\n        className=\"promote-model-btn\"\n        type=\"primary\"\n        onClick={showRegisterModal}\n      >\n        <FormattedMessage\n          defaultMessage=\"Promote model\"\n          description=\"Button text to pomote the model to a different registered model\"\n        />\n      </Button>\n      <Modal\n        title={\n          <FormattedMessage\n            defaultMessage=\"Promote {sourceModelName} version {sourceModelVersion}\"\n            description=\"Modal title to pomote the model to a different registered model\"\n            values={{ sourceModelName: modelVersion.name, sourceModelVersion: modelVersion.version }}\n          />\n        }\n        // @ts-expect-error TS(2322): Type '{ children: Element; title: any; width: numb... Remove this comment to see the full error message\n        width={640}\n        visible={visible}\n        onOk={handleCopyModel}\n        okText={intl.formatMessage({\n          defaultMessage: 'Promote',\n          description: 'Confirmation text to promote the model',\n        })}\n        cancelText={intl.formatMessage({\n          defaultMessage: 'Cancel',\n          description: 'Cancel text to cancel the flow to copy the model',\n        })}\n        confirmLoading={confirmLoading}\n        onCancel={hideRegisterModal}\n        centered\n      >\n        {renderRegisterModelForm()}\n      </Modal>\n    </div>\n  );\n};\n","import {\n  FormUI,\n  Modal,\n  ModalProps,\n  RHFControlledComponents,\n  Spacer,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { archiveExistingVersionToolTipText, Stages, StageTagComponents } from '../constants';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { useEffect } from 'react';\n\nexport interface ModelStageTransitionFormModalValues {\n  comment: string;\n  archiveExistingVersions: boolean;\n}\n\nexport enum ModelStageTransitionFormModalMode {\n  RequestOrDirect,\n  Approve,\n  Reject,\n  Cancel,\n}\n\nexport const ModelStageTransitionFormModal = ({\n  visible,\n  onCancel,\n  toStage,\n  allowArchivingExistingVersions,\n  transitionDescription,\n  onConfirm,\n  mode = ModelStageTransitionFormModalMode.RequestOrDirect,\n}: {\n  toStage?: string;\n  transitionDescription: React.ReactNode;\n  allowArchivingExistingVersions?: boolean;\n  onConfirm?: (values: ModelStageTransitionFormModalValues) => void;\n  mode?: ModelStageTransitionFormModalMode;\n} & Pick<ModalProps, 'visible' | 'onCancel'>) => {\n  const { theme } = useDesignSystemTheme();\n  const form = useForm<ModelStageTransitionFormModalValues>({\n    defaultValues: {\n      comment: '',\n      archiveExistingVersions: false,\n    },\n  });\n\n  const getModalTitle = () => {\n    if (mode === ModelStageTransitionFormModalMode.Approve) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Approve pending request\"\n          description=\"Title for a model version stage transition modal when approving a pending request\"\n        />\n      );\n    }\n    if (mode === ModelStageTransitionFormModalMode.Reject) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Reject pending request\"\n          description=\"Title for a model version stage transition modal when rejecting a pending request\"\n        />\n      );\n    }\n    if (mode === ModelStageTransitionFormModalMode.Cancel) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Cancel pending request\"\n          description=\"Title for a model version stage transition modal when cancelling a pending request\"\n        />\n      );\n    }\n    return (\n      <FormattedMessage\n        defaultMessage=\"Stage transition\"\n        description=\"Title for a model version stage transition modal\"\n      />\n    );\n  };\n\n  // Reset form values when modal is reopened\n  useEffect(() => {\n    if (visible) {\n      form.reset();\n    }\n  }, [form, visible]);\n\n  return (\n    <Modal\n      title={getModalTitle()}\n      componentId=\"mlflow.model_registry.stage_transition_modal_v2\"\n      visible={visible}\n      onCancel={onCancel}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"OK\"\n          description=\"Confirmation button text on the model version stage transition request/approval modal\"\n        />\n      }\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"Cancellation button text on the model version stage transition request/approval modal\"\n        />\n      }\n      onOk={onConfirm && form.handleSubmit(onConfirm)}\n    >\n      {transitionDescription}\n      <Spacer size=\"sm\" />\n      <FormUI.Label htmlFor=\"mlflow.model_registry.stage_transition_modal_v2.comment\">Comment</FormUI.Label>\n      <RHFControlledComponents.TextArea\n        name=\"comment\"\n        id=\"mlflow.model_registry.stage_transition_modal_v2.comment\"\n        componentId=\"mlflow.model_registry.stage_transition_modal_v2.comment\"\n        control={form.control}\n        rows={4}\n      />\n      <Spacer size=\"sm\" />\n\n      {allowArchivingExistingVersions && toStage && (\n        <RHFControlledComponents.Checkbox\n          name=\"archiveExistingVersions\"\n          componentId=\"mlflow.model_registry.stage_transition_modal_v2.archive_existing_versions\"\n          control={form.control}\n        >\n          <Tooltip\n            componentId=\"mlflow.model_registry.stage_transition_modal_v2.archive_existing_versions.tooltip\"\n            content={archiveExistingVersionToolTipText(toStage)}\n          >\n            <span css={{ '[role=status]': { marginRight: theme.spacing.xs } }}>\n              <FormattedMessage\n                defaultMessage=\"Transition existing {currentStage} model version to {archivedStage}\"\n                description=\"Description text for checkbox for archiving existing model versions\n                  in the toStage for model version stage transition request\"\n                values={{\n                  currentStage: <span css={{ marginLeft: theme.spacing.xs }}>{StageTagComponents[toStage]}</span>,\n                  archivedStage: (\n                    <span css={{ marginLeft: theme.spacing.xs }}>{StageTagComponents[Stages.ARCHIVED]}</span>\n                  ),\n                }}\n              />\n            </span>\n          </Tooltip>\n        </RHFControlledComponents.Checkbox>\n      )}\n    </Modal>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Dropdown, Menu, ChevronDownIcon, ArrowRightIcon } from '@databricks/design-system';\nimport {\n  Stages,\n  StageTagComponents,\n  ActivityTypes,\n  type PendingModelVersionActivity,\n  ACTIVE_STAGES,\n} from '../constants';\nimport _ from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { ModelStageTransitionFormModal, ModelStageTransitionFormModalValues } from './ModelStageTransitionFormModal';\n\ntype ModelStageTransitionDropdownProps = {\n  currentStage?: string;\n  permissionLevel?: string;\n  onSelect?: (activity: PendingModelVersionActivity, comment?: string, archiveExistingVersions?: boolean) => void;\n};\n\ntype ModelStageTransitionDropdownState = {\n  confirmModalVisible: boolean;\n  confirmingActivity: PendingModelVersionActivity | null;\n  handleConfirm: ((values: ModelStageTransitionFormModalValues) => void) | undefined;\n};\n\nexport class ModelStageTransitionDropdown extends React.Component<\n  ModelStageTransitionDropdownProps,\n  ModelStageTransitionDropdownState\n> {\n  static defaultProps = {\n    currentStage: Stages.NONE,\n  };\n\n  state: ModelStageTransitionDropdownState = {\n    confirmModalVisible: false,\n    confirmingActivity: null,\n    handleConfirm: undefined,\n  };\n\n  handleMenuItemClick = (activity: PendingModelVersionActivity) => {\n    const { onSelect } = this.props;\n    this.setState({\n      confirmModalVisible: true,\n      confirmingActivity: activity,\n      handleConfirm:\n        onSelect &&\n        ((values: ModelStageTransitionFormModalValues) => {\n          this.setState({ confirmModalVisible: false });\n\n          if (values) {\n            const { archiveExistingVersions = false } = values;\n            // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n            onSelect(activity, archiveExistingVersions);\n            return;\n          }\n        }),\n    });\n  };\n\n  handleConfirmModalCancel = () => {\n    this.setState({ confirmModalVisible: false });\n  };\n\n  getNoneCurrentStages = (currentStage: any) => {\n    const stages = Object.values(Stages);\n    _.remove(stages, (s) => s === currentStage);\n    return stages;\n  };\n\n  getMenu() {\n    const { currentStage } = this.props;\n    const nonCurrentStages = this.getNoneCurrentStages(currentStage);\n    return (\n      <Menu>\n        {nonCurrentStages.map((stage) => (\n          <Menu.Item\n            key={`transition-to-${stage}`}\n            onClick={() =>\n              this.handleMenuItemClick({\n                type: ActivityTypes.APPLIED_TRANSITION,\n                to_stage: stage,\n              })\n            }\n          >\n            <FormattedMessage\n              defaultMessage=\"Transition to\"\n              description=\"Text for transitioning a model version to a different stage under\n                 dropdown menu in model version page\"\n            />\n            &nbsp;&nbsp;&nbsp;\n            <ArrowRightIcon />\n            &nbsp;&nbsp;&nbsp;\n            {StageTagComponents[stage]}\n          </Menu.Item>\n        ))}\n      </Menu>\n    );\n  }\n\n  renderConfirmModal() {\n    const { confirmModalVisible, confirmingActivity, handleConfirm } = this.state;\n\n    if (!confirmingActivity) {\n      return null;\n    }\n\n    const allowArchivingExistingVersions =\n      confirmingActivity.type === ActivityTypes.APPLIED_TRANSITION &&\n      ACTIVE_STAGES.includes(confirmingActivity.to_stage);\n\n    return (\n      <ModelStageTransitionFormModal\n        visible={confirmModalVisible}\n        toStage={confirmingActivity.to_stage}\n        onConfirm={handleConfirm}\n        onCancel={this.handleConfirmModalCancel}\n        transitionDescription={renderActivityDescription(confirmingActivity)}\n        allowArchivingExistingVersions={allowArchivingExistingVersions}\n      />\n    );\n  }\n\n  render() {\n    const { currentStage } = this.props;\n    return (\n      <span>\n        <Dropdown overlay={this.getMenu()} trigger={['click']} className=\"stage-transition-dropdown\">\n          <span>\n            {StageTagComponents[currentStage ?? Stages.NONE]}\n            <ChevronDownIcon css={{ cursor: 'pointer', marginLeft: -4 }} />\n          </span>\n        </Dropdown>\n        {this.renderConfirmModal()}\n      </span>\n    );\n  }\n}\n\nexport const renderActivityDescription = (activity: PendingModelVersionActivity) => {\n  if (activity) {\n    return (\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Transition to\"\n          description=\"Text for activity description under confirmation modal for model\n             version stage transition\"\n        />\n        &nbsp;&nbsp;&nbsp;\n        <ArrowRightIcon />\n        &nbsp;&nbsp;&nbsp;\n        {StageTagComponents[activity.to_stage]}\n      </div>\n    );\n  }\n  return null;\n};\n","import { Button, PencilIcon } from '@databricks/design-system';\nimport type { ModelEntity } from '../../../experiment-tracking/types';\nimport { useEditRegisteredModelAliasesModal } from '../../hooks/useEditRegisteredModelAliasesModal';\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { useCallback } from 'react';\n\nexport const ModelVersionViewAliasEditor = ({\n  aliases = [],\n  modelEntity,\n  version,\n  onAliasesModified,\n}: {\n  modelEntity?: ModelEntity;\n  aliases?: string[];\n  version: string;\n  onAliasesModified?: () => void;\n}) => {\n  const { EditAliasesModal, showEditAliasesModal } = useEditRegisteredModelAliasesModal({\n    model: modelEntity || null,\n    onSuccess: onAliasesModified,\n  });\n  const onAddEdit = useCallback(() => {\n    showEditAliasesModal(version);\n  }, [showEditAliasesModal, version]);\n  return (\n    <>\n      {EditAliasesModal}\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionviewaliaseditor.tsx_29\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n          title=\"Add aliases\"\n        >\n          Add\n        </Button>\n      ) : (\n        <div css={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>\n          {aliases.map((alias) => (\n            <ModelVersionAliasTag compact value={alias} key={alias} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionviewaliaseditor.tsx_37\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n            title=\"Edit aliases\"\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Link, NavigateFunction } from '../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport { PromoteModelButton } from './PromoteModelButton';\nimport { SchemaTable } from './SchemaTable';\nimport Utils from '../../common/utils/Utils';\nimport { ModelStageTransitionDropdown } from './ModelStageTransitionDropdown';\nimport { Descriptions } from '../../common/components/Descriptions';\nimport { modelStagesMigrationGuideLink } from '../../common/constants';\nimport { Alert, Modal, Button, InfoIcon, LegacyTooltip, Typography } from '@databricks/design-system';\nimport {\n  ModelVersionStatus,\n  StageLabels,\n  StageTagComponents,\n  ModelVersionStatusIcons,\n  DefaultModelVersionStatusMessages,\n  ACTIVE_STAGES,\n  type ModelVersionActivity,\n  type PendingModelVersionActivity,\n} from '../constants';\nimport Routers from '../../experiment-tracking/routes';\nimport { CollapsibleSection } from '../../common/components/CollapsibleSection';\nimport { EditableNote } from '../../common/components/EditableNote';\nimport { EditableTagsTableView } from '../../common/components/EditableTagsTableView';\nimport { getModelVersionTags } from '../reducers';\nimport { setModelVersionTagApi, deleteModelVersionTagApi } from '../actions';\nimport { connect } from 'react-redux';\nimport { OverflowMenu, PageHeader } from '../../shared/building_blocks/PageHeader';\nimport { FormattedMessage, type IntlShape, injectIntl } from 'react-intl';\nimport { extractArtifactPathFromModelSource } from '../utils/VersionUtils';\nimport { withNextModelsUIContext } from '../hooks/useNextModelsUI';\nimport { ModelsNextUIToggleSwitch } from './ModelsNextUIToggleSwitch';\nimport { shouldShowModelsNextUI } from '../../common/utils/FeatureUtils';\nimport { ModelVersionViewAliasEditor } from './aliases/ModelVersionViewAliasEditor';\nimport type { ModelEntity, RunInfoEntity } from '../../experiment-tracking/types';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\n\ntype ModelVersionViewImplProps = {\n  modelName?: string;\n  modelVersion?: any;\n  modelEntity?: ModelEntity;\n  schema?: any;\n  activities?: ModelVersionActivity[];\n  transitionRequests?: Record<string, unknown>[];\n  onCreateComment: (...args: any[]) => any;\n  onEditComment: (...args: any[]) => any;\n  onDeleteComment: (...args: any[]) => any;\n  runInfo?: RunInfoEntity;\n  runDisplayName?: string;\n  handleStageTransitionDropdownSelect: (\n    activity: PendingModelVersionActivity,\n    comment?: string,\n    archiveExistingVersions?: boolean,\n  ) => void;\n  deleteModelVersionApi: (...args: any[]) => any;\n  handleEditDescription: (...args: any[]) => any;\n  onAliasesModified: () => void;\n  navigate: NavigateFunction;\n  tags: any;\n  setModelVersionTagApi: (...args: any[]) => any;\n  deleteModelVersionTagApi: (...args: any[]) => any;\n  intl: IntlShape;\n  usingNextModelsUI: boolean;\n};\n\ntype ModelVersionViewImplState = any;\n\nexport class ModelVersionViewImpl extends React.Component<ModelVersionViewImplProps, ModelVersionViewImplState> {\n  state = {\n    isDeleteModalVisible: false,\n    isDeleteModalConfirmLoading: false,\n    showDescriptionEditor: false,\n    isTagsRequestPending: false,\n  };\n\n  formRef = React.createRef();\n\n  componentDidMount() {\n    const pageTitle = `${this.props.modelName} v${this.props.modelVersion.version} - MLflow Model`;\n    Utils.updatePageTitle(pageTitle);\n  }\n\n  handleDeleteConfirm = () => {\n    const { modelName = '', modelVersion, navigate } = this.props;\n    const { version } = modelVersion;\n    this.showConfirmLoading();\n    this.props\n      .deleteModelVersionApi(modelName, version)\n      .then(() => {\n        navigate(ModelRegistryRoutes.getModelPageRoute(modelName));\n      })\n      .catch((e: any) => {\n        this.hideConfirmLoading();\n        Utils.logErrorAndNotifyUser(e);\n      });\n  };\n\n  showDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: true });\n  };\n\n  hideDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: false });\n  };\n\n  showConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: true });\n  };\n\n  hideConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: false });\n  };\n\n  handleCancelEditDescription = () => {\n    this.setState({ showDescriptionEditor: false });\n  };\n\n  handleSubmitEditDescription = (description: any) => {\n    return this.props.handleEditDescription(description).then(() => {\n      this.setState({ showDescriptionEditor: false });\n    });\n  };\n\n  startEditingDescription = (e: any) => {\n    e.stopPropagation();\n    this.setState({ showDescriptionEditor: true });\n  };\n\n  handleAddTag = (values: any) => {\n    const form = this.formRef.current;\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    this.setState({ isTagsRequestPending: true });\n    this.props\n      .setModelVersionTagApi(modelName, version, values.name, values.value)\n      .then(() => {\n        this.setState({ isTagsRequestPending: false });\n        (form as any).resetFields();\n      })\n      .catch((ex: ErrorWrapper | Error) => {\n        this.setState({ isTagsRequestPending: false });\n        // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n        console.error(ex);\n\n        const userVisibleError = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n\n        Utils.displayGlobalErrorNotification(\n          this.props.intl.formatMessage(\n            {\n              defaultMessage: 'Failed to add tag. Error: {userVisibleError}',\n              description: 'Text for user visible error when adding tag in model version view',\n            },\n            {\n              userVisibleError,\n            },\n          ),\n        );\n      });\n  };\n\n  handleSaveEdit = ({ name, value }: any) => {\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    return this.props.setModelVersionTagApi(modelName, version, name, value).catch((ex: ErrorWrapper | Error) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n\n      const userVisibleError = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n\n      Utils.displayGlobalErrorNotification(\n        this.props.intl.formatMessage(\n          {\n            defaultMessage: 'Failed to set tag. Error: {userVisibleError}',\n            description: 'Text for user visible error when setting tag in model version view',\n          },\n          {\n            userVisibleError,\n          },\n        ),\n      );\n    });\n  };\n\n  handleDeleteTag = ({ name }: any) => {\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    return this.props.deleteModelVersionTagApi(modelName, version, name).catch((ex: ErrorWrapper | Error) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n\n      const userVisibleError = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n\n      Utils.displayGlobalErrorNotification(\n        this.props.intl.formatMessage(\n          {\n            defaultMessage: 'Failed to delete tag. Error: {userVisibleError}',\n            description: 'Text for user visible error when deleting tag in model version view',\n          },\n          {\n            userVisibleError,\n          },\n        ),\n      );\n    });\n  };\n\n  shouldHideDeleteOption() {\n    return false;\n  }\n\n  renderStageDropdown(modelVersion: any) {\n    const { handleStageTransitionDropdownSelect } = this.props;\n    return (\n      <Descriptions.Item\n        key=\"description-key-stage\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Stage',\n          description: 'Label name for stage metadata in model version page',\n        })}\n      >\n        {modelVersion.status === ModelVersionStatus.READY ? (\n          <ModelStageTransitionDropdown\n            currentStage={modelVersion.current_stage}\n            permissionLevel={modelVersion.permission_level}\n            onSelect={handleStageTransitionDropdownSelect}\n          />\n        ) : (\n          StageTagComponents[modelVersion.current_stage]\n        )}\n      </Descriptions.Item>\n    );\n  }\n\n  renderDisabledStage(modelVersion: any) {\n    const tooltipContent = (\n      <FormattedMessage\n        defaultMessage=\"Stages have been deprecated in the new Model Registry UI. Learn how to\n      migrate models <link>here</link>.\"\n        description=\"Tooltip content for the disabled stage metadata in model version page\"\n        values={{\n          link: (chunks: any) => (\n            <Typography.Link\n              componentId=\"codegen_mlflow_app_src_model-registry_components_modelversionview.tsx_301\"\n              href={modelStagesMigrationGuideLink}\n              openInNewTab\n            >\n              {chunks}\n            </Typography.Link>\n          ),\n        }}\n      />\n    );\n    return (\n      <Descriptions.Item\n        key=\"description-key-stage-disabled\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Stage (deprecated)',\n          description: 'Label name for the deprecated stage metadata in model version page',\n        })}\n      >\n        <div css={{ display: 'flex', alignItems: 'center' }}>\n          {StageLabels[modelVersion.current_stage]}\n          <LegacyTooltip title={tooltipContent} placement=\"bottom\">\n            <InfoIcon css={{ paddingLeft: '4px' }} />\n          </LegacyTooltip>\n        </div>\n      </Descriptions.Item>\n    );\n  }\n\n  renderRegisteredTimestampDescription(creation_timestamp: any) {\n    return (\n      <Descriptions.Item\n        key=\"description-key-register\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Registered At',\n          description: 'Label name for registered timestamp metadata in model version page',\n        })}\n      >\n        {Utils.formatTimestamp(creation_timestamp, this.props.intl)}\n      </Descriptions.Item>\n    );\n  }\n\n  renderCreatorDescription(user_id: any) {\n    return (\n      user_id && (\n        <Descriptions.Item\n          key=\"description-key-creator\"\n          label={this.props.intl.formatMessage({\n            defaultMessage: 'Creator',\n            description: 'Label name for creator metadata in model version page',\n          })}\n        >\n          {user_id}\n        </Descriptions.Item>\n      )\n    );\n  }\n\n  renderLastModifiedDescription(last_updated_timestamp: any) {\n    return (\n      <Descriptions.Item\n        key=\"description-key-modified\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Last Modified',\n          description: 'Label name for last modified timestamp metadata in model version page',\n        })}\n      >\n        {Utils.formatTimestamp(last_updated_timestamp, this.props.intl)}\n      </Descriptions.Item>\n    );\n  }\n\n  renderSourceRunDescription() {\n    return (\n      <Descriptions.Item\n        key=\"description-key-source-run\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Source Run',\n          description: 'Label name for source run metadata in model version page',\n        })}\n        // @ts-expect-error TS(2322): Type '{ children: Element | null; key: string; lab... Remove this comment to see the full error message\n        className=\"linked-run\"\n      >\n        {this.resolveRunLink()}\n      </Descriptions.Item>\n    );\n  }\n\n  renderCopiedFromLink() {\n    const { source } = this.props.modelVersion;\n    const modelUriRegex = /^models:\\/[^/]+\\/[^/]+$/;\n    if (!source || !modelUriRegex.test(source)) {\n      return null;\n    }\n    const sourceParts = source.split('/');\n    const sourceModelName = sourceParts[1];\n    const sourceModelVersion = sourceParts[2];\n    const link = (\n      <>\n        <Link\n          data-test-id=\"copied-from-link\"\n          to={ModelRegistryRoutes.getModelVersionPageRoute(sourceModelName, sourceModelVersion)}\n        >\n          {sourceModelName}\n        </Link>\n        &nbsp;\n        <FormattedMessage\n          defaultMessage=\"(Version {sourceModelVersion})\"\n          description=\"Version number of the source model version\"\n          values={{ sourceModelVersion }}\n        />\n      </>\n    );\n    return (\n      <Descriptions.Item\n        key=\"description-key-copied-from\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Copied from',\n          description: 'Label name for source model version metadata in model version page',\n        })}\n      >\n        {link}\n      </Descriptions.Item>\n    );\n  }\n\n  renderAliasEditor = () => {\n    // Extract aliases for the currently displayed model version from the model entity object\n    const currentVersion = this.props.modelVersion.version;\n    const currentVersionAliases =\n      this.props.modelEntity?.aliases?.filter(({ version }) => version === currentVersion).map(({ alias }) => alias) ||\n      [];\n    return (\n      <Descriptions.Item\n        key=\"description-key-aliases\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Aliases',\n          description: 'Aliases section in the metadata on model version page',\n        })}\n      >\n        <ModelVersionViewAliasEditor\n          aliases={currentVersionAliases}\n          version={this.props.modelVersion.version}\n          modelEntity={this.props.modelEntity}\n          onAliasesModified={this.props.onAliasesModified}\n        />\n      </Descriptions.Item>\n    );\n  };\n\n  getDescriptions(modelVersion: any) {\n    const { usingNextModelsUI } = this.props;\n\n    const defaultOrder = [\n      this.renderRegisteredTimestampDescription(modelVersion.creation_timestamp),\n      this.renderCreatorDescription(modelVersion.user_id),\n      this.renderLastModifiedDescription(modelVersion.last_updated_timestamp),\n      this.renderSourceRunDescription(),\n      this.renderCopiedFromLink(),\n      usingNextModelsUI ? this.renderAliasEditor() : this.renderStageDropdown(modelVersion),\n      usingNextModelsUI ? this.renderDisabledStage(modelVersion) : null,\n    ];\n    return defaultOrder.filter((item) => item !== null);\n  }\n\n  renderMetadata(modelVersion: any) {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: any[]; className: string; }' is ... Remove this comment to see the full error message\n      <Descriptions className=\"metadata-list\">{this.getDescriptions(modelVersion)}</Descriptions>\n    );\n  }\n\n  renderStatusAlert() {\n    const { status, status_message } = this.props.modelVersion;\n    if (status !== ModelVersionStatus.READY) {\n      const defaultMessage = DefaultModelVersionStatusMessages[status];\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - OSS specific ignore\n      const type = status === ModelVersionStatus.FAILED_REGISTRATION ? 'error' : 'info';\n      return (\n        <Alert\n          type={type}\n          className={`status-alert status-alert-${type}`}\n          message={status_message || defaultMessage}\n          // @ts-expect-error TS(2322): Type '{ type: \"error\" | \"info\"; className: string;... Remove this comment to see the full error message\n          icon={ModelVersionStatusIcons[status]}\n          banner\n        />\n      );\n    }\n    return null;\n  }\n\n  renderDescriptionEditIcon() {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_modelversionview.tsx_516\"\n        data-test-id=\"descriptionEditButton\"\n        type=\"link\"\n        onClick={this.startEditingDescription}\n      >\n        <FormattedMessage\n          defaultMessage=\"Edit\"\n          description=\"Text for the edit button next to the description section title on\n             the model version view page\"\n        />{' '}\n      </Button>\n    );\n  }\n\n  resolveRunLink() {\n    const { modelVersion, runInfo } = this.props;\n    if (modelVersion.run_link) {\n      return (\n        // Reported during ESLint upgrade\n        // eslint-disable-next-line react/jsx-no-target-blank\n        <a target=\"_blank\" href={modelVersion.run_link}>\n          {this.resolveRunName()}\n        </a>\n      );\n    } else if (runInfo) {\n      let artifactPath = null;\n      const modelSource = this.props.modelVersion?.source;\n      if (modelSource) {\n        artifactPath = extractArtifactPathFromModelSource(modelSource, runInfo.runUuid);\n      }\n      return (\n        <Link to={Routers.getRunPageRoute(runInfo.experimentId, runInfo.runUuid, artifactPath)}>\n          {this.resolveRunName()}\n        </Link>\n      );\n    }\n    return null;\n  }\n\n  resolveRunName() {\n    const { modelVersion, runInfo, runDisplayName } = this.props;\n    if (modelVersion.run_link) {\n      // We use the first 37 chars to stay consistent with runDisplayName, which is typically:\n      // Run: [ID]\n      return modelVersion.run_link.substr(0, 37) + '...';\n    } else if (runInfo) {\n      return runDisplayName || runInfo.runUuid;\n    } else {\n      return null;\n    }\n  }\n\n  renderPomoteModelButton() {\n    const { modelVersion, usingNextModelsUI, navigate } = this.props;\n    return usingNextModelsUI ? <PromoteModelButton modelVersion={modelVersion} /> : null;\n  }\n\n  getPageHeader(title: any, breadcrumbs: any) {\n    const menu = [\n      {\n        id: 'delete',\n        itemName: (\n          <FormattedMessage\n            defaultMessage=\"Delete\"\n            description=\"Text for delete button on model version view page header\"\n          />\n        ),\n        onClick: this.showDeleteModal,\n        disabled: ACTIVE_STAGES.includes(this.props.modelVersion.current_stage),\n      },\n    ];\n    return (\n      <PageHeader title={title} breadcrumbs={breadcrumbs}>\n        {!this.shouldHideDeleteOption() && <OverflowMenu menu={menu} />}\n        {this.renderPomoteModelButton()}\n      </PageHeader>\n    );\n  }\n\n  render() {\n    const { modelName = '', modelVersion, tags, schema } = this.props;\n    const { description } = modelVersion;\n    const { isDeleteModalVisible, isDeleteModalConfirmLoading, showDescriptionEditor, isTagsRequestPending } =\n      this.state;\n    const title = (\n      <FormattedMessage\n        defaultMessage=\"Version {versionNum}\"\n        description=\"Title text for model version page\"\n        values={{ versionNum: modelVersion.version }}\n      />\n    );\n    const breadcrumbs = [\n      <Link to={ModelRegistryRoutes.modelListPageRoute}>\n        <FormattedMessage\n          defaultMessage=\"Registered Models\"\n          description=\"Text for link back to models page under the header on the model version\n             view page\"\n        />\n      </Link>,\n      <Link data-test-id=\"breadcrumbRegisteredModel\" to={ModelRegistryRoutes.getModelPageRoute(modelName)}>\n        {modelName}\n      </Link>,\n    ];\n    return (\n      <div>\n        {this.getPageHeader(title, breadcrumbs)}\n        {this.renderStatusAlert()}\n\n        {/* Metadata List */}\n        {this.renderMetadata(modelVersion)}\n\n        {/* New models UI switch */}\n        {shouldShowModelsNextUI() && (\n          <div css={{ marginTop: 8, display: 'flex', justifyContent: 'flex-end' }}>\n            <ModelsNextUIToggleSwitch />\n          </div>\n        )}\n\n        {/* Page Sections */}\n        <CollapsibleSection\n          title={\n            <span>\n              <FormattedMessage\n                defaultMessage=\"Description\"\n                description=\"Title text for the description section on the model version view page\"\n              />{' '}\n              {!showDescriptionEditor ? this.renderDescriptionEditIcon() : null}\n            </span>\n          }\n          forceOpen={showDescriptionEditor}\n          defaultCollapsed={!description}\n          data-test-id=\"model-version-description-section\"\n        >\n          <EditableNote\n            defaultMarkdown={description}\n            onSubmit={this.handleSubmitEditDescription}\n            onCancel={this.handleCancelEditDescription}\n            showEditor={showDescriptionEditor}\n          />\n        </CollapsibleSection>\n        <div data-test-id=\"tags-section\">\n          <CollapsibleSection\n            title={\n              <FormattedMessage\n                defaultMessage=\"Tags\"\n                description=\"Title text for the tags section on the model versions view page\"\n              />\n            }\n            defaultCollapsed={Utils.getVisibleTagValues(tags).length === 0}\n            data-test-id=\"model-version-tags-section\"\n          >\n            <EditableTagsTableView\n              // @ts-expect-error TS(2322): Type '{ innerRef: RefObject<unknown>; handleAddTag... Remove this comment to see the full error message\n              innerRef={this.formRef}\n              handleAddTag={this.handleAddTag}\n              handleDeleteTag={this.handleDeleteTag}\n              handleSaveEdit={this.handleSaveEdit}\n              tags={tags}\n              isRequestPending={isTagsRequestPending}\n            />\n          </CollapsibleSection>\n        </div>\n        <CollapsibleSection\n          title={\n            <FormattedMessage\n              defaultMessage=\"Schema\"\n              description=\"Title text for the schema section on the model versions view page\"\n            />\n          }\n          data-test-id=\"model-version-schema-section\"\n        >\n          <SchemaTable schema={schema} />\n        </CollapsibleSection>\n        <Modal\n          title={this.props.intl.formatMessage({\n            defaultMessage: 'Delete Model Version',\n            description: 'Title text for model version deletion modal in model versions view page',\n          })}\n          visible={isDeleteModalVisible}\n          confirmLoading={isDeleteModalConfirmLoading}\n          onOk={this.handleDeleteConfirm}\n          okText={this.props.intl.formatMessage({\n            defaultMessage: 'Delete',\n            description: 'OK button text for model version deletion modal in model versions view page',\n          })}\n          // @ts-expect-error TS(2322): Type '{ children: Element; title: any; visible: bo... Remove this comment to see the full error message\n          okType=\"danger\"\n          onCancel={this.hideDeleteModal}\n          cancelText={this.props.intl.formatMessage({\n            defaultMessage: 'Cancel',\n            description: 'Cancel button text for model version deletion modal in model versions view page',\n          })}\n        >\n          <span>\n            <FormattedMessage\n              defaultMessage=\"Are you sure you want to delete model version {versionNum}? This\n                 cannot be undone.\"\n              description=\"Comment text for model version deletion modal in model versions view\n                 page\"\n              values={{ versionNum: modelVersion.version }}\n            />\n          </span>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { modelName } = ownProps;\n  const { version } = ownProps.modelVersion;\n  const tags = getModelVersionTags(modelName, version, state);\n  return { tags };\n};\nconst mapDispatchToProps = { setModelVersionTagApi, deleteModelVersionTagApi };\n\nexport const ModelVersionView = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withNextModelsUIContext(injectIntl<'intl', ModelVersionViewImplProps>(ModelVersionViewImpl)));\n","/**\n * Extract artifact path from provided `modelSource` string\n */\nexport function extractArtifactPathFromModelSource(modelSource: string, runId: string) {\n  return modelSource.match(new RegExp(`/${runId}/artifacts/(.+)`))?.[1];\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  getModelVersionApi,\n  getRegisteredModelApi,\n  updateModelVersionApi,\n  deleteModelVersionApi,\n  transitionModelVersionStageApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n} from '../actions';\nimport { getRunApi } from '../../experiment-tracking/actions';\nimport { getModelVersion, getModelVersionSchemas } from '../reducers';\nimport { ModelVersionView } from './ModelVersionView';\nimport {\n  ActivityTypes,\n  PendingModelVersionActivity,\n  MODEL_VERSION_STATUS_POLL_INTERVAL as POLL_INTERVAL,\n} from '../constants';\nimport Utils from '../../common/utils/Utils';\nimport { getRunInfo, getRunTags } from '../../experiment-tracking/reducers/Reducers';\nimport RequestStateWrapper, { triggerError } from '../../common/components/RequestStateWrapper';\nimport { ErrorView } from '../../common/components/ErrorView';\nimport { Spinner } from '../../common/components/Spinner';\nimport { ModelRegistryRoutes } from '../routes';\nimport { getProtoField } from '../utils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport _ from 'lodash';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport type { ModelEntity, RunInfoEntity } from '../../experiment-tracking/types';\nimport { ReduxState } from '../../redux-types';\nimport { ErrorCodes } from '../../common/constants';\nimport { injectIntl } from 'react-intl';\n\ntype ModelVersionPageImplProps = WithRouterNextProps & {\n  modelName: string;\n  version: string;\n  modelVersion?: any;\n  runInfo?: any;\n  runDisplayName?: string;\n  modelEntity?: ModelEntity;\n  getModelVersionApi: (...args: any[]) => any;\n  getRegisteredModelApi: typeof getRegisteredModelApi;\n  updateModelVersionApi: (...args: any[]) => any;\n  transitionModelVersionStageApi: (...args: any[]) => any;\n  deleteModelVersionApi: (...args: any[]) => any;\n  getRunApi: (...args: any[]) => any;\n  apis: any;\n  getModelVersionArtifactApi: (...args: any[]) => any;\n  parseMlModelFile: (...args: any[]) => any;\n  schema?: any;\n  activities?: Record<string, unknown>[];\n  intl?: any;\n};\n\ntype ModelVersionPageImplState = any;\n\nexport class ModelVersionPageImpl extends React.Component<ModelVersionPageImplProps, ModelVersionPageImplState> {\n  listTransitionRequestId: any;\n  pollIntervalId: any;\n\n  initGetModelVersionDetailsRequestId = getUUID();\n  getRunRequestId = getUUID();\n  updateModelVersionRequestId = getUUID();\n  transitionModelVersionStageRequestId = getUUID();\n  getModelVersionDetailsRequestId = getUUID();\n  initGetMlModelFileRequestId = getUUID();\n  state = {\n    criticalInitialRequestIds: [this.initGetModelVersionDetailsRequestId, this.initGetMlModelFileRequestId],\n  };\n\n  pollingRelatedRequestIds = [this.getModelVersionDetailsRequestId, this.getRunRequestId];\n\n  hasPendingPollingRequest = () =>\n    this.pollingRelatedRequestIds.every((requestId) => {\n      const request = this.props.apis[requestId];\n      return Boolean(request && request.active);\n    });\n\n  loadData = (isInitialLoading: any) => {\n    const promises = [this.getModelVersionDetailAndRunInfo(isInitialLoading)];\n    return Promise.all(promises);\n  };\n\n  pollData = () => {\n    const { modelName, version, navigate } = this.props;\n    if (!this.hasPendingPollingRequest() && Utils.isBrowserTabVisible()) {\n      // @ts-expect-error TS(2554): Expected 1 arguments, but got 0.\n      return this.loadData().catch((e) => {\n        if (e.getErrorCode() === 'RESOURCE_DOES_NOT_EXIST') {\n          Utils.logErrorAndNotifyUser(e);\n          this.props.deleteModelVersionApi(modelName, version, undefined, true);\n          navigate(ModelRegistryRoutes.getModelPageRoute(modelName));\n        } else {\n          // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n          console.error(e);\n        }\n      });\n    }\n    return Promise.resolve();\n  };\n\n  // We need to do this because currently the ModelVersionDetailed we got does not contain\n  // experimentId. We need experimentId to construct a link to the source run. This workaround can\n  // be removed after the availability of experimentId.\n  getModelVersionDetailAndRunInfo(isInitialLoading: any) {\n    const { modelName, version } = this.props;\n    return this.props\n      .getModelVersionApi(\n        modelName,\n        version,\n        isInitialLoading === true ? this.initGetModelVersionDetailsRequestId : this.getModelVersionDetailsRequestId,\n      )\n      .then(({ value }: any) => {\n        if (value && !value[getProtoField('model_version')].run_link) {\n          this.props.getRunApi(value[getProtoField('model_version')].run_id, this.getRunRequestId);\n        }\n      });\n  }\n  // We need this for getting mlModel artifact file,\n  // this will be replaced with a single backend call in the future when supported\n  getModelVersionMlModelFile() {\n    const { modelName, version } = this.props;\n    this.props\n      .getModelVersionArtifactApi(modelName, version)\n      .then((content: any) =>\n        this.props.parseMlModelFile(modelName, version, content.value, this.initGetMlModelFileRequestId),\n      )\n      .catch(() => {\n        // Failure of this call chain should not block the page. Here we remove\n        // `initGetMlModelFileRequestId` from `criticalInitialRequestIds`\n        // to unblock RequestStateWrapper from rendering its content\n        this.setState((prevState: any) => ({\n          criticalInitialRequestIds: _.without(prevState.criticalInitialRequestIds, this.initGetMlModelFileRequestId),\n        }));\n      });\n  }\n\n  // prettier-ignore\n  handleStageTransitionDropdownSelect = (\n    activity: PendingModelVersionActivity,\n    archiveExistingVersions?: boolean,\n  ) => {\n    const { modelName, version } = this.props;\n    const toStage = activity.to_stage;\n    if (activity.type === ActivityTypes.APPLIED_TRANSITION) {\n      this.props\n        .transitionModelVersionStageApi(\n          modelName,\n          version.toString(),\n          toStage,\n          archiveExistingVersions,\n          this.transitionModelVersionStageRequestId,\n        )\n        .then(this.loadData)\n        .catch(Utils.logErrorAndNotifyUser);\n    }\n  };\n\n  handleEditDescription = (description: any) => {\n    const { modelName, version } = this.props;\n    return (\n      this.props\n        .updateModelVersionApi(modelName, version, description, this.updateModelVersionRequestId)\n        .then(this.loadData)\n        // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n        .catch(console.error)\n    );\n  };\n\n  componentDidMount() {\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    this.loadData(true).catch(console.error);\n    this.loadModelDataWithAliases();\n    this.pollIntervalId = setInterval(this.pollData, POLL_INTERVAL);\n    this.getModelVersionMlModelFile();\n  }\n\n  loadModelDataWithAliases = () => {\n    this.props.getRegisteredModelApi(this.props.modelName);\n  };\n\n  // Make a new initial load if model version or name has changed\n  componentDidUpdate(prevProps: ModelVersionPageImplProps) {\n    if (this.props.version !== prevProps.version || this.props.modelName !== prevProps.modelName) {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      this.loadData(true).catch(console.error);\n      this.getModelVersionMlModelFile();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.pollIntervalId);\n  }\n\n  render() {\n    const { modelName, version, modelVersion, runInfo, runDisplayName, navigate, schema, modelEntity } = this.props;\n\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.state.criticalInitialRequestIds}\n          // eslint-disable-next-line no-trailing-spaces\n        >\n          {(loading: any, hasError: any, requests: any) => {\n            if (hasError) {\n              clearInterval(this.pollIntervalId);\n              const resourceConflictError = Utils.getResourceConflictError(\n                requests,\n                this.state.criticalInitialRequestIds,\n              );\n              if (resourceConflictError) {\n                return (\n                  <ErrorView\n                    statusCode={409}\n                    subMessage={resourceConflictError.error.getMessageField()}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              if (Utils.shouldRender404(requests, this.state.criticalInitialRequestIds)) {\n                return (\n                  <ErrorView\n                    statusCode={404}\n                    subMessage={`Model ${modelName} v${version} does not exist`}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              // TODO(Zangr) Have a more generic boundary to handle all errors, not just 404.\n              const permissionDeniedErrors = requests.filter((request: any) => {\n                return (\n                  this.state.criticalInitialRequestIds.includes(request.id) &&\n                  request.error?.getErrorCode() === ErrorCodes.PERMISSION_DENIED\n                );\n              });\n              if (permissionDeniedErrors && permissionDeniedErrors[0]) {\n                return (\n                  <ErrorView\n                    statusCode={403}\n                    subMessage={this.props.intl.formatMessage(\n                      {\n                        defaultMessage: 'Permission denied for {modelName} version {version}. Error: \"{errorMsg}\"',\n                        description: 'Permission denied error message on model version detail page',\n                      },\n                      {\n                        modelName: modelName,\n                        version: version,\n                        errorMsg: permissionDeniedErrors[0].error?.getMessageField(),\n                      },\n                    )}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              triggerError(requests);\n            } else if (loading) {\n              return <Spinner />;\n            } else if (modelVersion) {\n              // Null check to prevent NPE after delete operation\n              return (\n                <ModelVersionView\n                  modelName={modelName}\n                  modelVersion={modelVersion}\n                  modelEntity={modelEntity}\n                  runInfo={runInfo}\n                  runDisplayName={runDisplayName}\n                  handleEditDescription={this.handleEditDescription}\n                  deleteModelVersionApi={this.props.deleteModelVersionApi}\n                  navigate={navigate}\n                  handleStageTransitionDropdownSelect={this.handleStageTransitionDropdownSelect}\n                  schema={schema}\n                  onAliasesModified={this.loadModelDataWithAliases}\n                />\n              );\n            }\n            return null;\n          }}\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: WithRouterNextProps<{ modelName: string; version: string }>) => {\n  const modelName = decodeURIComponent(ownProps.params.modelName);\n  const { version } = ownProps.params;\n  const modelVersion = getModelVersion(state, modelName, version);\n  const schema = getModelVersionSchemas(state, modelName, version);\n  let runInfo: RunInfoEntity | null = null;\n  if (modelVersion && !modelVersion.run_link) {\n    runInfo = getRunInfo(modelVersion && modelVersion.run_id, state);\n  }\n  const tags = runInfo && getRunTags(runInfo.runUuid, state);\n  const runDisplayName = tags && runInfo && Utils.getRunDisplayName(runInfo, runInfo.runUuid);\n  const modelEntity = state.entities.modelByName[modelName];\n  const { apis } = state;\n  return {\n    modelName,\n    version,\n    modelVersion,\n    schema,\n    runInfo,\n    runDisplayName,\n    apis,\n    modelEntity,\n  };\n};\n\nconst mapDispatchToProps = {\n  getModelVersionApi,\n  getRegisteredModelApi,\n  updateModelVersionApi,\n  transitionModelVersionStageApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n  deleteModelVersionApi,\n  getRunApi,\n};\n\nconst ModelVersionPageWithRouter = withRouterNext(\n  // @ts-expect-error TS(2769): No overload matches this call.\n  connect(mapStateToProps, mapDispatchToProps)(injectIntl(ModelVersionPageImpl)),\n);\n\nexport const ModelVersionPage = withErrorBoundary(ErrorUtils.mlflowServices.MODEL_REGISTRY, ModelVersionPageWithRouter);\n\nexport default ModelVersionPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacyForm, Input, LegacySelect } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nimport './RegisterModelForm.css';\n\nconst { Option, OptGroup } = LegacySelect;\n\nconst CREATE_NEW_MODEL_LABEL = 'Create New Model';\n// Include 'CREATE_NEW_MODEL_LABEL' as part of the value for filtering to work properly. Also added\n// prefix and postfix to avoid value conflict with actual model names.\nexport const CREATE_NEW_MODEL_OPTION_VALUE = `$$$__${CREATE_NEW_MODEL_LABEL}__$$$`;\nexport const SELECTED_MODEL_FIELD = 'selectedModel';\nexport const MODEL_NAME_FIELD = 'modelName';\nconst DESCRIPTION_FIELD = 'description';\n\ntype Props = {\n  modelByName?: any;\n  isCopy?: boolean;\n  onSearchRegisteredModels: (...args: any[]) => any;\n  innerRef: any;\n};\n\ntype State = any;\n\nexport class RegisterModelForm extends React.Component<Props, State> {\n  state = {\n    selectedModel: null,\n  };\n\n  handleModelSelectChange = (selectedModel: any) => {\n    this.setState({ selectedModel });\n  };\n\n  modelNameValidator = (rule: any, value: any, callback: any) => {\n    const { modelByName } = this.props;\n    callback(modelByName[value] ? `Model \"${value}\" already exists.` : undefined);\n  };\n\n  handleFilterOption = (input: any, option: any) => {\n    const value = (option && option.value) || '';\n    return value.toLowerCase().indexOf(input.toLowerCase()) !== -1;\n  };\n\n  renderExplanatoryText() {\n    const { isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n\n    if (!selectedModel || creatingNewModel) {\n      return null;\n    }\n\n    const explanation = isCopy ? (\n      <FormattedMessage\n        defaultMessage=\"The model version will be copied to {selectedModel} as a new version.\"\n        description=\"Model registry > OSS Promote model modal > copy explanatory text\"\n        values={{ selectedModel: selectedModel }}\n      />\n    ) : (\n      <FormattedMessage\n        defaultMessage=\"The model will be registered as a new version of {selectedModel}.\"\n        description=\"Explantory text for registering a model\"\n        values={{ selectedModel: selectedModel }}\n      />\n    );\n\n    return <p className=\"modal-explanatory-text\">{explanation}</p>;\n  }\n\n  renderModel(model: any) {\n    return (\n      <Option value={model.name} key={model.name}>\n        {model.name}\n      </Option>\n    );\n  }\n  render() {\n    const { modelByName, innerRef, isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: (Element | null)[]; ref: any; la... Remove this comment to see the full error message\n      <LegacyForm ref={innerRef} layout=\"vertical\" className=\"register-model-form\">\n        {/* \"+ Create new model\" OR \"Select existing model\" */}\n        <LegacyForm.Item\n          label={isCopy ? <b>Copy to model</b> : 'Model'}\n          name={SELECTED_MODEL_FIELD}\n          rules={[{ required: true, message: 'Please select a model or create a new one.' }]}\n        >\n          <LegacySelect\n            dropdownClassName=\"model-select-dropdown\"\n            onChange={this.handleModelSelectChange}\n            placeholder=\"Select a model\"\n            filterOption={this.handleFilterOption}\n            onSearch={this.props.onSearchRegisteredModels}\n            // @ts-expect-error TS(2769): No overload matches this call.\n            showSearch\n          >\n            <Option value={CREATE_NEW_MODEL_OPTION_VALUE} className=\"create-new-model-option\">\n              <i className=\"fa fa-plus fa-fw\" style={{ fontSize: 13 }} /> {CREATE_NEW_MODEL_LABEL}\n            </Option>\n            <OptGroup label=\"Models\">{Object.values(modelByName).map((model) => this.renderModel(model))}</OptGroup>\n          </LegacySelect>\n        </LegacyForm.Item>\n\n        {/* Name the new model when \"+ Create new model\" is selected */}\n        {creatingNewModel ? (\n          <LegacyForm.Item\n            label=\"Model Name\"\n            name={MODEL_NAME_FIELD}\n            rules={[\n              { required: true, message: 'Please input a name for the new model.' },\n              { validator: this.modelNameValidator },\n            ]}\n          >\n            <Input\n              componentId=\"codegen_mlflow_app_src_model-registry_components_registermodelform.tsx_132\"\n              placeholder=\"Input a model name\"\n            />\n          </LegacyForm.Item>\n        ) : null}\n\n        {/* Explanatory text shown when existing model is selected */}\n        {this.renderExplanatoryText()}\n      </LegacyForm>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport {\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n  MinusSquareIcon,\n  PlusSquareIcon,\n} from '@databricks/design-system';\nimport { LogModelWithSignatureUrl } from '../../common/constants';\nimport { ColumnSpec, TensorSpec, ColumnType } from '../types/model-schema';\nimport { FormattedMessage } from 'react-intl';\nimport { Interpolation, Theme } from '@emotion/react';\nimport { isEmpty } from 'lodash';\n\nconst { Text } = Typography;\nconst INDENTATION_SPACES = 2;\n\ntype Props = {\n  schema?: any;\n  defaultExpandAllRows?: boolean;\n};\n\nfunction getTensorTypeRepr(tensorType: TensorSpec): string {\n  return `Tensor (dtype: ${tensorType['tensor-spec'].dtype}, shape: [${tensorType['tensor-spec'].shape}])`;\n}\n\n// return a formatted string representation of the column type\nfunction getColumnTypeRepr(columnType: ColumnType, indentationLevel: number): string {\n  const { type } = columnType;\n\n  const indentation = ' '.repeat(indentationLevel * INDENTATION_SPACES);\n  if (type === 'object') {\n    const propertyReprs = Object.keys(columnType.properties).map((propertyName) => {\n      const property = columnType.properties[propertyName];\n      const requiredRepr = property.required ? '' : ' (optional)';\n      const propertyRepr = getColumnTypeRepr(property, indentationLevel + 1);\n      const indentOffset = (indentationLevel + 1) * INDENTATION_SPACES;\n\n      return `${' '.repeat(indentOffset)}${propertyName}: ${propertyRepr.slice(indentOffset) + requiredRepr}`;\n    });\n\n    return `${indentation}{\\n${propertyReprs.join(',\\n')}\\n${indentation}}`;\n  }\n\n  if (type === 'array') {\n    const indentOffset = indentationLevel * INDENTATION_SPACES;\n    const itemsTypeRepr = getColumnTypeRepr(columnType.items, indentationLevel).slice(indentOffset);\n    return `${indentation}Array(${itemsTypeRepr})`;\n  }\n\n  return `${indentation}${type}`;\n}\n\nfunction ColumnName({ spec }: { spec: ColumnSpec | TensorSpec }): React.ReactElement {\n  let required = true;\n  if (spec.required !== undefined) {\n    ({ required } = spec);\n  } else if (spec.optional !== undefined && spec.optional) {\n    required = false;\n  }\n  const requiredTag = required ? <Text bold>(required)</Text> : <Text color=\"secondary\">(optional)</Text>;\n\n  const name = 'name' in spec ? spec.name : '-';\n\n  return (\n    <Text css={{ marginLeft: 32 }}>\n      {name} {requiredTag}\n    </Text>\n  );\n}\n\nfunction ColumnSchema({ spec }: { spec: ColumnSpec | TensorSpec }): React.ReactElement {\n  const { theme } = useDesignSystemTheme();\n  const repr = spec.type === 'tensor' ? getTensorTypeRepr(spec) : getColumnTypeRepr(spec, 0);\n\n  return (\n    <pre\n      css={{\n        whiteSpace: 'pre-wrap',\n        padding: theme.spacing.sm,\n        marginTop: theme.spacing.sm,\n        marginBottom: theme.spacing.sm,\n      }}\n    >\n      {repr}\n    </pre>\n  );\n}\n\nconst SchemaTableRow = ({ schemaData }: { schemaData?: (ColumnSpec | TensorSpec)[] }) => {\n  if (isEmpty(schemaData)) {\n    return (\n      <TableRow>\n        <TableCell>\n          <FormattedMessage\n            defaultMessage=\"No schema. See <link>MLflow docs</link> for how to include\n                     input and output schema with your model.\"\n            description=\"Text for schema table when no schema exists in the model version\n                     page\"\n            values={{\n              link: (chunks: any) => (\n                <a href={LogModelWithSignatureUrl} target=\"_blank\" rel=\"noreferrer\">\n                  {chunks}\n                </a>\n              ),\n            }}\n          />\n        </TableCell>\n      </TableRow>\n    );\n  }\n  return (\n    <>\n      {schemaData?.map((schemaRow, index) => (\n        <TableRow key={index}>\n          <TableCell css={{ flex: 2, alignItems: 'center' }}>\n            <ColumnName spec={schemaRow} />\n          </TableCell>\n          <TableCell css={{ flex: 3, alignItems: 'center' }}>\n            <ColumnSchema spec={schemaRow} />\n          </TableCell>\n        </TableRow>\n      ))}\n    </>\n  );\n};\n\nexport const SchemaTable = ({ schema, defaultExpandAllRows }: Props) => {\n  const { theme } = useDesignSystemTheme();\n  const [inputsExpanded, setInputsExpanded] = useState(defaultExpandAllRows);\n  const [outputsExpanded, setOutputsExpanded] = useState(defaultExpandAllRows);\n\n  return (\n    <Table css={{ maxWidth: 800 }}>\n      <TableRow isHeader>\n        <TableHeader componentId=\"mlflow.schema_table.header.name\" css={{ flex: 2 }}>\n          <Text bold css={{ paddingLeft: theme.spacing.lg + theme.spacing.xs }}>\n            <FormattedMessage\n              defaultMessage=\"Name\"\n              description=\"Text for name column in schema table in model version page\"\n            />\n          </Text>\n        </TableHeader>\n        <TableHeader componentId=\"mlflow.schema_table.header.type\" css={{ flex: 3 }}>\n          <Text bold>\n            <FormattedMessage\n              defaultMessage=\"Type\"\n              description=\"Text for type column in schema table in model version page\"\n            />\n          </Text>\n        </TableHeader>\n      </TableRow>\n      <>\n        <TableRow onClick={() => setInputsExpanded(!inputsExpanded)} css={{ cursor: 'pointer' }}>\n          <TableCell>\n            <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n              <div\n                css={{\n                  width: theme.spacing.lg,\n                  height: theme.spacing.lg,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  svg: {\n                    color: theme.colors.textSecondary,\n                  },\n                }}\n              >\n                {inputsExpanded ? <MinusSquareIcon /> : <PlusSquareIcon />}\n              </div>\n              <FormattedMessage\n                defaultMessage=\"Inputs ({numInputs})\"\n                description=\"Input section header for schema table in model version page\"\n                values={{\n                  numInputs: schema.inputs.length,\n                }}\n              />\n            </div>\n          </TableCell>\n        </TableRow>\n        {inputsExpanded && <SchemaTableRow schemaData={schema.inputs} />}\n        <TableRow onClick={() => setOutputsExpanded(!outputsExpanded)} css={{ cursor: 'pointer' }}>\n          <TableCell>\n            <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n              <div\n                css={{\n                  width: theme.spacing.lg,\n                  height: theme.spacing.lg,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  svg: {\n                    color: theme.colors.textSecondary,\n                  },\n                }}\n              >\n                {outputsExpanded ? <MinusSquareIcon /> : <PlusSquareIcon />}\n              </div>\n              <FormattedMessage\n                defaultMessage=\"Outputs ({numOutputs})\"\n                description=\"Input section header for schema table in model version page\"\n                values={{\n                  numOutputs: schema.outputs.length,\n                }}\n              />\n            </div>\n          </TableCell>\n        </TableRow>\n        {outputsExpanded && <SchemaTableRow schemaData={schema.outputs} />}\n      </>\n    </Table>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { REGISTERED_MODELS_SEARCH_NAME_FIELD } from '../constants';\nimport { resolveFilterValue } from '../actions';\n\nexport function getModelNameFilter(query: any) {\n  if (query) {\n    return `${REGISTERED_MODELS_SEARCH_NAME_FIELD} ilike ${resolveFilterValue(query, true)}`;\n  } else {\n    return '';\n  }\n}\n\nexport function getCombinedSearchFilter({\n  query = '',\n}: {\n  query?: string;\n} = {}) {\n  const filters = [];\n  const initialFilter = query.includes('tags.') ? query : getModelNameFilter(query);\n  if (initialFilter) filters.push(initialFilter);\n  return filters.join(' AND ');\n}\n\nexport function constructSearchInputFromURLState(urlState: any) {\n  if ('searchInput' in urlState) {\n    return urlState['searchInput'];\n  }\n  if ('nameSearchInput' in urlState && 'tagSearchInput' in urlState) {\n    return getModelNameFilter(urlState['nameSearchInput']) + ` AND ` + urlState['tagSearchInput'];\n  }\n  if ('tagSearchInput' in urlState) {\n    return urlState['tagSearchInput'];\n  }\n  if ('nameSearchInput' in urlState) {\n    return urlState['nameSearchInput'];\n  }\n  return '';\n}\n"],"names":["_ref","name","styles","PromoteModelButton","props","intl","useIntl","navigate","useNavigate","createRegisteredModelRequestId","useRef","getUUID","createModelVersionRequestId","modelVersion","visible","setVisible","useState","confirmLoading","setConfirmLoading","dispatch","useDispatch","modelByName","useSelector","state","entities","form","resetAndClearModalForm","handleRegistrationFailure","e","Utils","logErrorAndNotifyUser","handleSearchRegisteredModels","useCallback","input","searchRegisteredModelsApi","getModelNameFilter","debouncedHandleSearchRegisteredModels","useMemo","debounce","useEffect","_jsxs","className","children","_jsx","Button","componentId","type","onClick","showRegisterModal","FormattedMessage","id","defaultMessage","Modal","title","values","sourceModelName","sourceModelVersion","version","width","onOk","handleCopyModel","current","validateFields","then","selectedModelName","SELECTED_MODEL_FIELD","copySource","CREATE_NEW_MODEL_OPTION_VALUE","newModelName","MODEL_NAME_FIELD","createRegisteredModelApi","createModelVersionApi","run_id","tags","mvResult","value","ModelRegistryRoutes","getModelVersionPageRoute","catch","okText","formatMessage","cancelText","onCancel","hideRegisterModal","centered","_Fragment","Typography","Paragraph","css","link","chunks","Link","href","openInNewTab","RegisterModelForm","innerRef","onSearchRegisteredModels","isCopy","ModelStageTransitionFormModalMode","ModelStageTransitionFormModal","toStage","allowArchivingExistingVersions","transitionDescription","onConfirm","mode","RequestOrDirect","theme","useDesignSystemTheme","useForm","defaultValues","comment","archiveExistingVersions","reset","Approve","Reject","Cancel","handleSubmit","Spacer","size","FormUI","Label","htmlFor","RHFControlledComponents","TextArea","control","rows","Checkbox","Tooltip","content","archiveExistingVersionToolTipText","_css","marginRight","spacing","xs","currentStage","marginLeft","StageTagComponents","archivedStage","Stages","ARCHIVED","ModelStageTransitionDropdown","React","constructor","arguments","confirmModalVisible","confirmingActivity","handleConfirm","undefined","handleMenuItemClick","activity","onSelect","this","setState","handleConfirmModalCancel","getNoneCurrentStages","stages","Object","_","s","getMenu","nonCurrentStages","Menu","map","stage","Item","ActivityTypes","APPLIED_TRANSITION","to_stage","ArrowRightIcon","renderConfirmModal","ACTIVE_STAGES","includes","renderActivityDescription","render","Dropdown","overlay","trigger","NONE","ChevronDownIcon","cursor","defaultProps","_ref2","ModelVersionViewAliasEditor","aliases","modelEntity","onAliasesModified","EditAliasesModal","showEditAliasesModal","useEditRegisteredModelAliasesModal","model","onSuccess","onAddEdit","length","alias","ModelVersionAliasTag","compact","icon","PencilIcon","_ref5","_ref6","_ref7","ModelVersionViewImpl","isDeleteModalVisible","isDeleteModalConfirmLoading","showDescriptionEditor","isTagsRequestPending","formRef","handleDeleteConfirm","modelName","showConfirmLoading","deleteModelVersionApi","getModelPageRoute","hideConfirmLoading","showDeleteModal","hideDeleteModal","handleCancelEditDescription","handleSubmitEditDescription","description","handleEditDescription","startEditingDescription","stopPropagation","handleAddTag","setModelVersionTagApi","resetFields","ex","console","error","userVisibleError","ErrorWrapper","getMessageField","message","displayGlobalErrorNotification","handleSaveEdit","handleDeleteTag","deleteModelVersionTagApi","renderAliasEditor","_this$props$modelEnti","_this$props$modelEnti2","currentVersion","currentVersionAliases","filter","_ref3","_ref4","Descriptions","label","componentDidMount","pageTitle","updatePageTitle","shouldHideDeleteOption","renderStageDropdown","handleStageTransitionDropdownSelect","status","ModelVersionStatus","READY","current_stage","permissionLevel","permission_level","renderDisabledStage","tooltipContent","modelStagesMigrationGuideLink","StageLabels","LegacyTooltip","placement","InfoIcon","renderRegisteredTimestampDescription","creation_timestamp","formatTimestamp","renderCreatorDescription","user_id","renderLastModifiedDescription","last_updated_timestamp","renderSourceRunDescription","resolveRunLink","renderCopiedFromLink","source","test","sourceParts","split","to","getDescriptions","usingNextModelsUI","item","renderMetadata","renderStatusAlert","status_message","DefaultModelVersionStatusMessages","FAILED_REGISTRATION","Alert","ModelVersionStatusIcons","banner","renderDescriptionEditIcon","runInfo","run_link","target","resolveRunName","_this$props$modelVers","artifactPath","modelSource","runId","_modelSource$match","match","RegExp","extractArtifactPathFromModelSource","runUuid","Routers","getRunPageRoute","experimentId","runDisplayName","substr","renderPomoteModelButton","getPageHeader","breadcrumbs","menu","itemName","disabled","PageHeader","OverflowMenu","schema","versionNum","modelListPageRoute","shouldShowModelsNextUI","ModelsNextUIToggleSwitch","CollapsibleSection","forceOpen","defaultCollapsed","EditableNote","defaultMarkdown","onSubmit","showEditor","getVisibleTagValues","EditableTagsTableView","isRequestPending","SchemaTable","okType","mapDispatchToProps","ModelVersionView","connect","mapStateToProps","ownProps","getModelVersionTags","withNextModelsUIContext","injectIntl","ModelVersionPageImpl","listTransitionRequestId","pollIntervalId","initGetModelVersionDetailsRequestId","getRunRequestId","updateModelVersionRequestId","transitionModelVersionStageRequestId","getModelVersionDetailsRequestId","initGetMlModelFileRequestId","criticalInitialRequestIds","pollingRelatedRequestIds","hasPendingPollingRequest","every","requestId","request","apis","Boolean","active","loadData","isInitialLoading","promises","getModelVersionDetailAndRunInfo","Promise","all","pollData","isBrowserTabVisible","getErrorCode","resolve","transitionModelVersionStageApi","toString","updateModelVersionApi","loadModelDataWithAliases","getRegisteredModelApi","getModelVersionApi","getProtoField","getRunApi","getModelVersionMlModelFile","getModelVersionArtifactApi","parseMlModelFile","prevState","setInterval","POLL_INTERVAL","componentDidUpdate","prevProps","componentWillUnmount","clearInterval","PageContainer","RequestStateWrapper","requestIds","loading","hasError","requests","resourceConflictError","getResourceConflictError","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","shouldRender404","permissionDeniedErrors","_request$error","ErrorCodes","PERMISSION_DENIED","_permissionDeniedErro","errorMsg","triggerError","Spinner","ModelVersionPageWithRouter","withRouterNext","decodeURIComponent","params","getModelVersion","getModelVersionSchemas","getRunInfo","getRunTags","getRunDisplayName","ModelVersionPage","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY","Option","OptGroup","LegacySelect","CREATE_NEW_MODEL_LABEL","selectedModel","handleModelSelectChange","modelNameValidator","rule","callback","handleFilterOption","option","toLowerCase","indexOf","renderExplanatoryText","explanation","renderModel","creatingNewModel","LegacyForm","ref","layout","rules","required","dropdownClassName","onChange","placeholder","filterOption","onSearch","showSearch","style","fontSize","validator","Input","Text","getColumnTypeRepr","columnType","indentationLevel","indentation","repeat","keys","properties","propertyName","property","requiredRepr","propertyRepr","indentOffset","slice","join","items","ColumnName","spec","optional","requiredTag","bold","color","ColumnSchema","repr","tensorType","dtype","shape","whiteSpace","padding","sm","marginTop","marginBottom","SchemaTableRow","schemaData","isEmpty","TableRow","TableCell","LogModelWithSignatureUrl","rel","schemaRow","index","_ref8","_ref9","_ref10","_ref11","_ref12","defaultExpandAllRows","inputsExpanded","setInputsExpanded","outputsExpanded","setOutputsExpanded","Table","isHeader","TableHeader","paddingLeft","lg","display","alignItems","gap","height","justifyContent","svg","colors","textSecondary","MinusSquareIcon","PlusSquareIcon","numInputs","inputs","numOutputs","outputs","query","REGISTERED_MODELS_SEARCH_NAME_FIELD","resolveFilterValue","getCombinedSearchFilter","filters","initialFilter","push","constructSearchInputFromURLState","urlState"],"sourceRoot":""}