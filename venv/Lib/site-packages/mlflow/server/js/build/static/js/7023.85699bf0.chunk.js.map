{"version":3,"file":"static/js/7023.85699bf0.chunk.js","mappings":"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","sources":["model-registry/components/CompareModelVersionsView.tsx","model-registry/components/CompareModelVersionsPage.tsx"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport _ from 'lodash';\nimport { FormattedMessage, injectIntl, IntlShape } from 'react-intl';\nimport {\n  Switch,\n  LegacyTabs,\n  useDesignSystemTheme,\n  TableRow,\n  TableCell,\n  Table,\n  Spacer,\n} from '@databricks/design-system';\n\nimport { getParams, getRunInfo } from '../../experiment-tracking/reducers/Reducers';\nimport './CompareModelVersionsView.css';\nimport { CompareRunScatter } from '../../experiment-tracking/components/CompareRunScatter';\nimport { CompareRunBox } from '../../experiment-tracking/components/CompareRunBox';\nimport CompareRunContour from '../../experiment-tracking/components/CompareRunContour';\nimport Routes from '../../experiment-tracking/routes';\nimport { getLatestMetrics } from '../../experiment-tracking/reducers/MetricReducer';\nimport CompareRunUtil from '../../experiment-tracking/components/CompareRunUtil';\nimport Utils from '../../common/utils/Utils';\nimport ParallelCoordinatesPlotPanel from '../../experiment-tracking/components/ParallelCoordinatesPlotPanel';\nimport { ModelRegistryRoutes } from '../routes';\nimport { getModelVersionSchemas } from '../reducers';\nimport { PageHeader } from '../../shared/building_blocks/PageHeader';\nimport type { RunInfoEntity } from '../../experiment-tracking/types';\nimport { CollapsibleSection } from '../../common/components/CollapsibleSection';\n\nconst { TabPane } = LegacyTabs;\n\nconst DEFAULT_TABLE_COLUMN_WIDTH = 200;\n\nfunction CenteredText(props: any) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        textAlign: 'center',\n        color: theme.colors.textSecondary,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype CompareModelVersionsViewImplProps = {\n  runInfos: RunInfoEntity[];\n  runInfosValid: boolean[];\n  runUuids: string[];\n  metricLists: any[][];\n  paramLists: any[][];\n  runNames: string[];\n  runDisplayNames: string[];\n  modelName: string;\n  versionsToRuns: any;\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  inputsListByName: Array[];\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  inputsListByIndex: Array[];\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  outputsListByName: Array[];\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  outputsListByIndex: Array[];\n  intl: IntlShape;\n};\n\ntype CompareModelVersionsViewImplState = any;\n\nexport class CompareModelVersionsViewImpl extends Component<\n  CompareModelVersionsViewImplProps,\n  CompareModelVersionsViewImplState\n> {\n  compareModelVersionViewRef: any;\n\n  constructor(props: CompareModelVersionsViewImplProps) {\n    super(props);\n    this.compareModelVersionViewRef = React.createRef();\n    this.onCompareModelTableScrollHandler = this.onCompareModelTableScrollHandler.bind(this);\n  }\n\n  state = {\n    inputActive: true,\n    outputActive: true,\n    onlyShowParameterDiff: true,\n    onlyShowSchemaDiff: true,\n    onlyShowMetricDiff: true,\n    compareByColumnNameToggle: false,\n  };\n\n  icons = {\n    plusIcon: <i className=\"far fa-plus-square-o\" />,\n    minusIcon: <i className=\"far fa-minus-square-o\" />,\n    downIcon: <i className=\"fas fa-caret-down\" />,\n    rightIcon: <i className=\"fas fa-caret-right\" />,\n    chartIcon: <i className=\"fas fa-line-chart padding-left-text\" />,\n  };\n\n  onToggleClick = (active: any) => {\n    this.setState((state: any) => ({\n      [active]: !state[active],\n    }));\n  };\n\n  onCompareModelTableScrollHandler(e: React.ChangeEvent<HTMLDivElement>) {\n    const blocks = this.compareModelVersionViewRef.current?.querySelectorAll('.compare-model-table');\n    blocks.forEach((_: any, index: any) => {\n      const block = blocks[index];\n      if (block !== e.target) {\n        block.scrollLeft = e.target.scrollLeft;\n      }\n    });\n  }\n\n  getTableHeaderColumnWidth() {\n    return {\n      width: `${DEFAULT_TABLE_COLUMN_WIDTH}px`,\n      minWidth: `${DEFAULT_TABLE_COLUMN_WIDTH}px`,\n      maxWidth: `${DEFAULT_TABLE_COLUMN_WIDTH}px`,\n    };\n  }\n\n  getTableBodyColumnWidth() {\n    const runInfoLength = this.props.runInfos.length;\n    const widthStyle = `max(${DEFAULT_TABLE_COLUMN_WIDTH}px, calc(100vw / ${runInfoLength}))`;\n    return { width: widthStyle, minWidth: widthStyle, maxWidth: widthStyle };\n  }\n\n  render() {\n    const {\n      inputsListByIndex,\n      inputsListByName,\n      modelName,\n      outputsListByIndex,\n      outputsListByName,\n      runInfos,\n      runUuids,\n      runDisplayNames,\n      paramLists,\n      metricLists,\n      intl,\n    } = this.props;\n    const title = (\n      <FormattedMessage\n        defaultMessage=\"Comparing {numVersions} Versions\"\n        description=\"Text for main title for the model comparison page\"\n        values={{ numVersions: this.props.runInfos.length }}\n      />\n    );\n    const breadcrumbs = [\n      <Link to={ModelRegistryRoutes.modelListPageRoute}>\n        <FormattedMessage\n          defaultMessage=\"Registered Models\"\n          description=\"Text for registered model link in the title for model comparison page\"\n        />\n      </Link>,\n      <Link to={ModelRegistryRoutes.getModelPageRoute(modelName)}>{modelName}</Link>,\n    ];\n\n    const showdiffIntlMessage = intl.formatMessage({\n      defaultMessage: 'Show diff only',\n      description: 'Toggle text that determines whether to show diff only in the model comparison page',\n    });\n\n    return (\n      <div>\n        <PageHeader title={title} breadcrumbs={breadcrumbs} />\n        <div ref={this.compareModelVersionViewRef}>\n          {this.renderTable(\n            <>\n              {this.renderTableHeader()}\n              {this.renderModelVersionInfo()}\n            </>,\n          )}\n          <CollapsibleSection\n            title={intl.formatMessage({\n              defaultMessage: 'Parameters',\n              description: 'Table title text for parameters table in the model comparison page',\n            })}\n          >\n            <Switch\n              componentId=\"mlflow.model-registry.compare-model-versions-parameters-diff-switch\"\n              label={showdiffIntlMessage}\n              checked={this.state.onlyShowParameterDiff}\n              onChange={(checked, e) => this.setState({ onlyShowParameterDiff: checked })}\n            />\n            <Spacer size=\"sm\" />\n            {this.renderTable(this.renderParams())}\n          </CollapsibleSection>\n          <CollapsibleSection\n            title={intl.formatMessage({\n              defaultMessage: 'Schema',\n              description: 'Table title text for schema table in the model comparison page',\n            })}\n          >\n            <Switch\n              componentId=\"mlflow.model-registry.compare-model-versions-schema-ignore-column-order-switch\"\n              label={intl.formatMessage({\n                defaultMessage: 'Ignore column ordering',\n                description:\n                  'Toggle text that determines whether to ignore column order in the\\n                      model comparison page',\n              })}\n              checked={this.state.compareByColumnNameToggle}\n              onChange={(checked, e) => this.setState({ compareByColumnNameToggle: checked })}\n            />\n            <Spacer size=\"sm\" />\n            <Switch\n              componentId=\"mlflow.model-registry.compare-model-versions-schema-diff-switch\"\n              label={showdiffIntlMessage}\n              checked={this.state.onlyShowSchemaDiff}\n              onChange={(checked, e) => this.setState({ onlyShowSchemaDiff: checked })}\n            />\n            <Spacer size=\"sm\" />\n            <div>\n              {this.renderSchemaSectionHeader(\n                'inputActive',\n                <FormattedMessage\n                  defaultMessage=\"Inputs\"\n                  description=\"Table subtitle for schema inputs in the model comparison page\"\n                />,\n              )}\n              {this.state.inputActive && (\n                <>\n                  {this.renderTable(\n                    this.renderSchema(\n                      'inputActive',\n                      <FormattedMessage\n                        defaultMessage=\"Inputs\"\n                        description=\"Table section name for schema inputs in the model comparison page\"\n                      />,\n                      inputsListByIndex,\n                      inputsListByName,\n                    ),\n                  )}\n                </>\n              )}\n            </div>\n            <Spacer size=\"sm\" />\n            <div>\n              {this.renderSchemaSectionHeader(\n                'outputActive',\n                <FormattedMessage\n                  defaultMessage=\"Outputs\"\n                  description=\"Table subtitle for schema outputs in the model comparison page\"\n                />,\n              )}\n              {this.state.outputActive && (\n                <>\n                  {this.renderTable(\n                    this.renderSchema(\n                      'outputActive',\n                      <FormattedMessage\n                        defaultMessage=\"Outputs\"\n                        description=\"Table section name for schema outputs in the model comparison page\"\n                      />,\n                      outputsListByIndex,\n                      outputsListByName,\n                    ),\n                  )}\n                </>\n              )}\n            </div>\n          </CollapsibleSection>\n          <CollapsibleSection\n            title={intl.formatMessage({\n              defaultMessage: 'Metrics',\n              description: 'Table title text for metrics table in the model comparison page',\n            })}\n          >\n            <Switch\n              componentId=\"mlflow.model-registry.compare-model-versions-metrics-diff-switch\"\n              label={showdiffIntlMessage}\n              checked={this.state.onlyShowMetricDiff}\n              onChange={(checked, e) => this.setState({ onlyShowMetricDiff: checked })}\n            />\n            <Spacer size=\"sm\" />\n            {this.renderTable(this.renderMetrics())}\n          </CollapsibleSection>\n        </div>\n        <LegacyTabs>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Parallel Coordinates Plot\"\n                description=\"Tab text for parallel coordinates plot on the model comparison page\"\n              />\n            }\n            key=\"parallel-coordinates-plot\"\n          >\n            <ParallelCoordinatesPlotPanel runUuids={runUuids} />\n          </TabPane>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Scatter Plot\"\n                description=\"Tab text for scatter plot on the model comparison page\"\n              />\n            }\n            key=\"scatter-plot\"\n          >\n            <CompareRunScatter runUuids={runUuids} runDisplayNames={runDisplayNames} />\n          </TabPane>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Box Plot\"\n                description=\"Tab pane title for box plot on the compare runs page\"\n              />\n            }\n            key=\"box-plot\"\n          >\n            <CompareRunBox runUuids={runUuids} runInfos={runInfos} paramLists={paramLists} metricLists={metricLists} />\n          </TabPane>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Contour Plot\"\n                description=\"Tab text for contour plot on the model comparison page\"\n              />\n            }\n            key=\"contour-plot\"\n          >\n            <CompareRunContour runUuids={runUuids} runDisplayNames={runDisplayNames} />\n          </TabPane>\n        </LegacyTabs>\n      </div>\n    );\n  }\n\n  renderTable(children: React.ReactNode): React.ReactNode {\n    return (\n      // @ts-expect-error TS(2322): Property 'onScroll' does not exist... Remove this comment to see the full error message\n      <Table className=\"table compare-table compare-model-table\" onScroll={this.onCompareModelTableScrollHandler}>\n        {children}\n      </Table>\n    );\n  }\n\n  renderTableHeader() {\n    const { runInfos, runInfosValid } = this.props;\n    return (\n      <TableRow className=\"compare-table-row\">\n        <TableCell\n          className=\"head-value sticky-header\"\n          css={{\n            backgroundColor: 'var(--table-header-background-color)',\n            ...this.getTableHeaderColumnWidth(),\n          }}\n        >\n          <FormattedMessage\n            defaultMessage=\"Run ID:\"\n            description=\"Text for run ID header in the main table in the model comparison page\"\n          />\n        </TableCell>\n        {runInfos.map((r, idx) => (\n          <TableCell className=\"data-value\" css={{ ...this.getTableBodyColumnWidth() }} key={r.runUuid}>\n            {/* Do not show links for invalid run IDs */}\n            {runInfosValid[idx] ? (\n              <Link to={Routes.getRunPageRoute(r.experimentId ?? '0', r.runUuid ?? '')}>{r.runUuid}</Link>\n            ) : (\n              r.runUuid\n            )}\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n\n  renderModelVersionInfo() {\n    const { runInfos, runInfosValid, versionsToRuns, runNames, modelName } = this.props;\n    return (\n      <>\n        <TableRow className=\"compare-table-row\">\n          <TableCell\n            className=\"head-value sticky-header\"\n            css={{\n              backgroundColor: 'var(--table-header-background-color)',\n              ...this.getTableHeaderColumnWidth(),\n            }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Model Version:\"\n              description=\"Text for model version row header in the main table in the model\n                comparison page\"\n            />\n          </TableCell>\n          {Object.keys(versionsToRuns).map((modelVersion) => {\n            const run = versionsToRuns[modelVersion];\n            return (\n              <TableCell className=\"data-value\" key={run} css={{ ...this.getTableBodyColumnWidth() }}>\n                <Link to={ModelRegistryRoutes.getModelVersionPageRoute(modelName, modelVersion)}>{modelVersion}</Link>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n        <TableRow className=\"compare-table-row\">\n          <TableCell\n            className=\"head-value sticky-header\"\n            css={{\n              backgroundColor: 'var(--table-header-background-color)',\n              ...this.getTableHeaderColumnWidth(),\n            }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Run Name:\"\n              description=\"Text for run name row header in the main table in the model comparison\n                page\"\n            />\n          </TableCell>\n          {runNames.map((runName, i) => {\n            return (\n              <TableCell className=\"data-value\" key={runInfos[i].runUuid} css={{ ...this.getTableBodyColumnWidth() }}>\n                <div className=\"truncate-text single-line cell-content\">{runName}</div>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n        <TableRow className=\"compare-table-row\">\n          <TableCell\n            className=\"head-value sticky-header\"\n            css={{\n              backgroundColor: 'var(--table-header-background-color)',\n              ...this.getTableHeaderColumnWidth(),\n            }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Start Time:\"\n              description=\"Text for start time row header in the main table in the model comparison\n                page\"\n            />\n          </TableCell>\n          {runInfos.map((run, idx) => {\n            /* Do not attempt to get timestamps for invalid run IDs */\n            const startTime =\n              run.startTime && runInfosValid[idx] ? Utils.formatTimestamp(run.startTime, this.props.intl) : '(unknown)';\n            return (\n              <TableCell className=\"data-value\" key={run.runUuid} css={{ ...this.getTableBodyColumnWidth() }}>\n                {startTime}\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      </>\n    );\n  }\n\n  renderParams() {\n    return (\n      <>\n        {this.renderDataRows(\n          this.props.paramLists,\n          <FormattedMessage\n            defaultMessage=\"Parameters\"\n            description=\"Field name text for parameters table in the model comparison page\"\n          />,\n          true,\n          this.state.onlyShowParameterDiff,\n        )}\n      </>\n    );\n  }\n\n  renderSchemaSectionHeader(activeSection: string, sectionName: React.ReactNode) {\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const isActive = this.state[activeSection];\n    const { minusIcon, plusIcon } = this.icons;\n    return (\n      <button onClick={() => this.onToggleClick(activeSection)}>\n        {isActive ? minusIcon : plusIcon}\n        <strong style={{ paddingLeft: 4 }}>{sectionName}</strong>\n      </button>\n    );\n  }\n\n  renderSchema(activeSection: any, sectionName: any, listByIndex: any, listByName: any) {\n    const { compareByColumnNameToggle } = this.state;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const isActive = this.state[activeSection];\n    const showSchemaSection = isActive;\n    const showListByIndex = !compareByColumnNameToggle && !_.isEmpty(listByIndex);\n    const showListByName = compareByColumnNameToggle && !_.isEmpty(listByName);\n    const listByIndexHeaderMap = (key: any, data: any) => (\n      <>\n        {sectionName} [{key}]\n      </>\n    );\n    const listByNameHeaderMap = (key: any, data: any) => key;\n    const schemaFormatter = (value: any) => value;\n    const schemaFieldName = (\n      <FormattedMessage\n        defaultMessage=\"Schema {sectionName}\"\n        description=\"Field name text for schema table in the model comparison page\"\n        values={{ sectionName: sectionName }}\n      />\n    );\n    return (\n      <>\n        {this.renderDataRows(\n          listByIndex,\n          schemaFieldName,\n          showSchemaSection && showListByIndex,\n          this.state.onlyShowSchemaDiff,\n          listByIndexHeaderMap,\n          schemaFormatter,\n        )}\n        {this.renderDataRows(\n          listByName,\n          schemaFieldName,\n          showSchemaSection && showListByName,\n          this.state.onlyShowSchemaDiff,\n          listByNameHeaderMap,\n          schemaFormatter,\n        )}\n      </>\n    );\n  }\n\n  renderMetrics() {\n    const { runInfos, metricLists } = this.props;\n    const { chartIcon } = this.icons;\n    const metricsHeaderMap = (key: any, data: any) => {\n      return (\n        <Link\n          to={Routes.getMetricPageRoute(\n            runInfos.map((info) => info.runUuid).filter((uuid, idx) => data[idx] !== undefined),\n            key,\n            // TODO: Refactor so that the breadcrumb\n            // on the linked page is for model registry\n            [runInfos[0].experimentId],\n          )}\n          target=\"_blank\"\n          title=\"Plot chart\"\n        >\n          {key}\n          {chartIcon}\n        </Link>\n      );\n    };\n    return (\n      <>\n        {this.renderDataRows(\n          metricLists,\n          <FormattedMessage\n            defaultMessage=\"Metrics\"\n            description=\"Field name text for metrics table in the model comparison page\"\n          />,\n          true,\n          this.state.onlyShowMetricDiff,\n          metricsHeaderMap,\n          Utils.formatMetric,\n        )}\n      </>\n    );\n  }\n\n  renderDataRows(\n    list: any,\n    fieldName: any,\n    show = true,\n    onlyShowDiff = false,\n    headerMap = (key: any, data: any) => key,\n    formatter = (value: any) => (isNaN(value) ? `\"${value}\"` : value),\n  ): React.ReactNode {\n    // @ts-expect-error TS(2554): Expected 2 arguments, but got 1.\n    const keys = CompareRunUtil.getKeys(list);\n    const data = {};\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    keys.forEach((k) => (data[k] = []));\n    list.forEach((records: any, i: any) => {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      keys.forEach((k) => data[k].push(undefined));\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      records.forEach((r: any) => (data[r.key][i] = r.value));\n    });\n    if (_.isEmpty(keys) || _.isEmpty(list)) {\n      return (\n        <TableRow className=\"compare-table-row\">\n          <TableCell\n            className=\"head-value sticky-header\"\n            css={{\n              backgroundColor: 'var(--table-header-background-color)',\n              ...this.getTableHeaderColumnWidth(),\n            }}\n          >\n            <CenteredText>\n              <FormattedMessage\n                defaultMessage=\"{fieldName} are empty\"\n                description=\"Default text in data table where items are empty in the model\n                  comparison page\"\n                values={{ fieldName: fieldName }}\n              />\n            </CenteredText>\n          </TableCell>\n        </TableRow>\n      );\n    }\n    // @ts-expect-error TS(2345): Argument of type 'string' is not assignable to par... Remove this comment to see the full error message\n    const isAllNumeric = _.every(keys, (key) => !isNaN(key));\n    if (isAllNumeric) {\n      keys.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));\n    } else {\n      keys.sort();\n    }\n    let identical = true;\n    const resultRows = keys.map((k) => {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      const isDifferent = data[k].length > 1 && _.uniq(data[k]).length > 1;\n      if (onlyShowDiff && !isDifferent) {\n        return null;\n      }\n      identical = !isDifferent && identical;\n      return (\n        <TableRow\n          key={k}\n          style={{ display: `${(onlyShowDiff && !isDifferent) || !show ? 'none' : ''}` }}\n          className={`compare-table-row ${isDifferent ? 'diff-row' : ''}`}\n        >\n          <TableCell\n            className=\"head-value sticky-header\"\n            css={{\n              backgroundColor: 'var(--table-header-background-color)',\n              ...this.getTableHeaderColumnWidth(),\n            }}\n          >\n            {/* @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message */}\n            {headerMap(k, data[k])}\n          </TableCell>\n          {/* @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message */}\n          {data[k].map((value: any, i: any) => (\n            <TableCell\n              className={`data-value`}\n              css={{ ...this.getTableBodyColumnWidth() }}\n              key={this.props.runInfos[i].runUuid}\n            >\n              <span className=\"truncate-text single-line cell-content\">\n                {value === undefined ? '-' : formatter(value)}\n              </span>\n            </TableCell>\n          ))}\n        </TableRow>\n      );\n    });\n    if (identical && onlyShowDiff) {\n      return (\n        <TableRow className={`compare-table-row`} style={{ display: `${show ? '' : 'none'}` }}>\n          <TableCell className=\"data-value\" css={{ ...this.getTableBodyColumnWidth() }}>\n            <CenteredText>\n              <FormattedMessage\n                defaultMessage=\"{fieldName} are identical\"\n                description=\"Default text in data table where items are identical in the model comparison page\"\n                values={{ fieldName: fieldName }}\n              />\n            </CenteredText>\n          </TableCell>\n        </TableRow>\n      );\n    }\n    return resultRows;\n  }\n}\n\nconst getModelVersionSchemaColumnsByIndex = (columns: any) => {\n  const columnsByIndex = {};\n  columns.forEach((column: any, index: any) => {\n    const name = column.name ? column.name : '';\n    const type = column.type ? column.type : '';\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    columnsByIndex[index] = {\n      key: index,\n      value: name !== '' && type !== '' ? `${name}: ${type}` : `${name}${type}`,\n    };\n  });\n  return columnsByIndex;\n};\n\nconst getModelVersionSchemaColumnsByName = (columns: any) => {\n  const columnsByName: Record<string, { key: string; value: string }> = {};\n  columns.forEach((column: any) => {\n    const name = column.name ? column.name : '-';\n    const type = column.type ? column.type : '-';\n    columnsByName[name] = {\n      key: name,\n      value: type,\n    };\n  });\n  return columnsByName;\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos = [];\n  const runInfosValid = [];\n  const metricLists = [];\n  const paramLists = [];\n  const runNames = [];\n  const runDisplayNames = [];\n  const runUuids = [];\n  const { modelName, versionsToRuns } = ownProps;\n  const inputsListByName = [];\n  const inputsListByIndex = [];\n  const outputsListByName = [];\n  const outputsListByIndex = [];\n  for (const modelVersion in versionsToRuns) {\n    if (versionsToRuns && modelVersion in versionsToRuns) {\n      const runUuid = versionsToRuns[modelVersion];\n      const runInfo = getRunInfo(runUuid, state);\n      if (runInfo) {\n        runInfos.push(runInfo);\n        runInfosValid.push(true);\n        metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n        paramLists.push(Object.values(getParams(runUuid, state)));\n        runNames.push(Utils.getRunName(runInfo));\n        // the following are used to render plots - we only include valid run IDs here\n        runDisplayNames.push(Utils.getRunDisplayName(runInfo, runUuid));\n        runUuids.push(runUuid);\n      } else {\n        if (runUuid) {\n          runInfos.push({ runUuid });\n        } else {\n          runInfos.push({ runUuid: 'None' });\n        }\n        runInfosValid.push(false);\n        metricLists.push([]);\n        paramLists.push([]);\n        runNames.push('Invalid Run');\n      }\n      const schema = getModelVersionSchemas(state, modelName, modelVersion);\n      inputsListByIndex.push(Object.values(getModelVersionSchemaColumnsByIndex((schema as any).inputs)));\n      inputsListByName.push(Object.values(getModelVersionSchemaColumnsByName((schema as any).inputs)));\n      outputsListByIndex.push(Object.values(getModelVersionSchemaColumnsByIndex((schema as any).outputs)));\n      outputsListByName.push(Object.values(getModelVersionSchemaColumnsByName((schema as any).outputs)));\n    }\n  }\n\n  return {\n    runInfos,\n    runInfosValid,\n    metricLists,\n    paramLists,\n    runNames,\n    runDisplayNames,\n    runUuids,\n    modelName,\n    inputsListByName,\n    inputsListByIndex,\n    outputsListByName,\n    outputsListByIndex,\n  };\n};\n\nexport const CompareModelVersionsView = connect(mapStateToProps)(injectIntl(CompareModelVersionsViewImpl));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport qs from 'qs';\nimport { connect } from 'react-redux';\nimport { getRunApi } from '../../experiment-tracking/actions';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { getRegisteredModelApi, getModelVersionApi, getModelVersionArtifactApi, parseMlModelFile } from '../actions';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport { CompareModelVersionsView } from './CompareModelVersionsView';\nimport _ from 'lodash';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\n\ntype CompareModelVersionsPageImplProps = {\n  modelName: string;\n  versionsToRuns: any;\n  getRunApi: (...args: any[]) => any;\n  getRegisteredModelApi: (...args: any[]) => any;\n  getModelVersionApi: (...args: any[]) => any;\n  getModelVersionArtifactApi: (...args: any[]) => any;\n  parseMlModelFile: (...args: any[]) => any;\n};\n\ntype CompareModelVersionsPageImplState = any;\n\n// TODO: Write integration tests for this component\nexport class CompareModelVersionsPageImpl extends Component<\n  CompareModelVersionsPageImplProps,\n  CompareModelVersionsPageImplState\n> {\n  registeredModelRequestId = getUUID();\n  versionRequestId = getUUID();\n  runRequestId = getUUID();\n  getMlModelFileRequestId = getUUID();\n\n  state = {\n    requestIds: [\n      // requests that must be fulfilled before rendering\n      this.registeredModelRequestId,\n      this.runRequestId,\n      this.versionRequestId,\n      this.getMlModelFileRequestId,\n    ],\n    requestIdsWith404ErrorsToIgnore: [this.runRequestId, this.getMlModelFileRequestId],\n  };\n\n  removeRunRequestId() {\n    this.setState((prevState: any) => ({\n      requestIds: _.without(prevState.requestIds, this.runRequestId),\n    }));\n  }\n\n  componentDidMount() {\n    this.props.getRegisteredModelApi(this.props.modelName, this.registeredModelRequestId);\n    for (const modelVersion in this.props.versionsToRuns) {\n      if ({}.hasOwnProperty.call(this.props.versionsToRuns, modelVersion)) {\n        const runID = this.props.versionsToRuns[modelVersion];\n        if (runID) {\n          this.props.getRunApi(runID, this.runRequestId).catch(() => {\n            // Failure of this call should not block the page. Here we remove\n            // `runRequestId` from `requestIds` to unblock RequestStateWrapper\n            // from rendering its content\n            this.removeRunRequestId();\n          });\n        } else {\n          this.removeRunRequestId();\n        }\n        const { modelName } = this.props;\n        this.props.getModelVersionApi(modelName, modelVersion, this.versionRequestId);\n        this.props\n          .getModelVersionArtifactApi(modelName, modelVersion)\n          .then((content: any) =>\n            this.props.parseMlModelFile(modelName, modelVersion, content.value, this.getMlModelFileRequestId),\n          )\n          .catch(() => {\n            // Failure of this call chain should not block the page. Here we remove\n            // `getMlModelFileRequestId` from `requestIds` to unblock RequestStateWrapper\n            // from rendering its content\n            this.setState((prevState: any) => ({\n              requestIds: _.without(prevState.requestIds, this.getMlModelFileRequestId),\n            }));\n          });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.state.requestIds}\n          requestIdsWith404sToIgnore={this.state.requestIdsWith404ErrorsToIgnore}\n        >\n          <CompareModelVersionsView modelName={this.props.modelName} versionsToRuns={this.props.versionsToRuns} />\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: WithRouterNextProps) => {\n  const { location } = ownProps;\n  const searchValues = qs.parse(location.search);\n  // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n  const modelName = decodeURIComponent(JSON.parse(searchValues['?name']));\n  // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n  const versionsToRuns = JSON.parse(searchValues['runs']);\n  return { modelName, versionsToRuns };\n};\n\nconst mapDispatchToProps = {\n  getRunApi,\n  getRegisteredModelApi,\n  getModelVersionApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n};\n\nconst CompareModelVersionsPageWithRouter = withRouterNext(\n  connect(mapStateToProps, mapDispatchToProps)(CompareModelVersionsPageImpl),\n);\n\nexport const CompareModelVersionsPage = withErrorBoundary(\n  ErrorUtils.mlflowServices.MODEL_REGISTRY,\n  CompareModelVersionsPageWithRouter,\n);\n\nexport default CompareModelVersionsPage;\n"],"names":["TabPane","LegacyTabs","CenteredText","props","theme","useDesignSystemTheme","_jsx","css","_css","textAlign","color","colors","textSecondary","CompareModelVersionsViewImpl","Component","constructor","super","compareModelVersionViewRef","state","inputActive","outputActive","onlyShowParameterDiff","onlyShowSchemaDiff","onlyShowMetricDiff","compareByColumnNameToggle","icons","plusIcon","className","minusIcon","downIcon","rightIcon","chartIcon","onToggleClick","active","this","setState","React","onCompareModelTableScrollHandler","bind","e","_this$compareModelVer","blocks","current","querySelectorAll","forEach","_","index","block","target","scrollLeft","getTableHeaderColumnWidth","width","minWidth","maxWidth","getTableBodyColumnWidth","widthStyle","runInfos","length","render","inputsListByIndex","inputsListByName","modelName","outputsListByIndex","outputsListByName","runUuids","runDisplayNames","paramLists","metricLists","intl","title","FormattedMessage","id","defaultMessage","values","numVersions","breadcrumbs","Link","to","ModelRegistryRoutes","modelListPageRoute","children","getModelPageRoute","showdiffIntlMessage","formatMessage","_jsxs","PageHeader","ref","renderTable","_Fragment","renderTableHeader","renderModelVersionInfo","CollapsibleSection","Switch","componentId","label","checked","onChange","Spacer","size","renderParams","renderSchemaSectionHeader","renderSchema","renderMetrics","tab","ParallelCoordinatesPlotPanel","CompareRunScatter","CompareRunBox","CompareRunContour","Table","onScroll","runInfosValid","TableRow","TableCell","backgroundColor","map","r","idx","_r$experimentId","_r$runUuid","Routes","getRunPageRoute","experimentId","runUuid","versionsToRuns","runNames","Object","keys","modelVersion","run","getModelVersionPageRoute","runName","i","startTime","Utils","formatTimestamp","renderDataRows","activeSection","sectionName","isActive","onClick","style","paddingLeft","listByIndex","listByName","showSchemaSection","showListByIndex","showListByName","schemaFormatter","value","schemaFieldName","listByIndexHeaderMap","key","data","listByNameHeaderMap","metricsHeaderMap","getMetricPageRoute","info","filter","uuid","undefined","formatMetric","list","fieldName","show","arguments","onlyShowDiff","headerMap","formatter","isNaN","CompareRunUtil","getKeys","k","records","push","sort","a","b","parseInt","identical","resultRows","isDifferent","display","getModelVersionSchemaColumnsByIndex","columns","columnsByIndex","column","name","type","getModelVersionSchemaColumnsByName","columnsByName","CompareModelVersionsView","connect","mapStateToProps","ownProps","runInfo","getRunInfo","getLatestMetrics","getParams","getRunName","getRunDisplayName","schema","getModelVersionSchemas","inputs","outputs","injectIntl","CompareModelVersionsPageImpl","registeredModelRequestId","getUUID","versionRequestId","runRequestId","getMlModelFileRequestId","requestIds","requestIdsWith404ErrorsToIgnore","removeRunRequestId","prevState","componentDidMount","getRegisteredModelApi","hasOwnProperty","call","runID","getRunApi","catch","getModelVersionApi","getModelVersionArtifactApi","then","content","parseMlModelFile","PageContainer","RequestStateWrapper","requestIdsWith404sToIgnore","mapDispatchToProps","CompareModelVersionsPageWithRouter","withRouterNext","location","searchValues","qs","search","decodeURIComponent","JSON","parse","CompareModelVersionsPage","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY"],"sourceRoot":""}