{"version":3,"file":"static/js/563.09f75ef8.chunk.js","mappings":"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","sources":["common/components/RequestStateWrapper.tsx","common/components/Spinner.tsx","common/components/error-boundaries/SectionErrorBoundary.tsx","common/utils/ErrorUtils.tsx","common/utils/withErrorBoundary.tsx","common/utils/withRouterNext.tsx","experiment-tracking/components/CompareRunBox.tsx","experiment-tracking/components/CompareRunContour.tsx","experiment-tracking/components/CompareRunPlotContainer.tsx","experiment-tracking/components/CompareRunScatter.tsx","experiment-tracking/components/CompareRunUtil.ts","experiment-tracking/components/LazyPlot.tsx","experiment-tracking/components/ParallelCoordinatesPlotView.tsx","experiment-tracking/components/ParallelCoordinatesPlotControls.tsx","experiment-tracking/components/ParallelCoordinatesPlotPanel.tsx","shared/building_blocks/PageHeader.tsx","shared/building_blocks/PreviewBadge.tsx","../node_modules/react-error-boundary/dist/src/ErrorBoundaryContext.ts","../node_modules/react-error-boundary/dist/src/ErrorBoundary.ts","../node_modules/react-error-boundary/dist/src/assertErrorBoundaryContext.ts","../node_modules/react-error-boundary/dist/src/useErrorBoundary.ts","../node_modules/react-error-boundary/dist/src/withErrorBoundary.ts"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport './RequestStateWrapper.css';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype OwnRequestStateWrapperProps = {\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n};\n\ntype RequestStateWrapperState = any;\n\ntype RequestStateWrapperProps = OwnRequestStateWrapperProps & typeof RequestStateWrapper.defaultProps;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow } = this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\n// @ts-expect-error TS(7006): Parameter 'state' implicitly has an 'any' type.\nconst mapStateToProps = (state, ownProps) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport spinner from '../static/mlflow-spinner.png';\nimport { keyframes } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport class Spinner extends Component<Props> {\n  render() {\n    return (\n      // @ts-expect-error TS(2322): Type '(theme: Theme) => { width: number; marginTop... Remove this comment to see the full error message\n      <div css={(theme) => styles.spinner(theme, this.props.showImmediately)}>\n        <img alt=\"Page loading...\" src={spinner} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  // @ts-expect-error TS(7006): Parameter 'theme' implicitly has an 'any' type.\n  spinner: (theme, immediate) => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? 0 : '0.5s',\n    },\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i data-testid=\"icon-fail\" className=\"fa fa-exclamation-triangle icon-fail\" css={classNames.wrapper} />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import React from 'react';\n\nclass ErrorUtils {\n  static mlflowServices = {\n    MODEL_REGISTRY: 'Model Registry',\n    EXPERIMENTS: 'Experiments',\n    MODEL_SERVING: 'Model Serving',\n    RUN_TRACKING: 'Run Tracking',\n  };\n}\n\nexport default ErrorUtils;\n","import React from 'react';\nimport { ErrorBoundary, ErrorBoundaryPropsWithComponent, FallbackProps } from 'react-error-boundary';\nimport ErrorUtils from './ErrorUtils';\nimport { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport type ErrorBoundaryProps = {\n  children: React.Component;\n  customFallbackComponent?: ErrorBoundaryPropsWithComponent['FallbackComponent'];\n};\n\nfunction ErrorFallback() {\n  return (\n    <Empty\n      data-testid=\"fallback\"\n      title={<FormattedMessage defaultMessage=\"Error\" description=\"Title of editor error fallback component\" />}\n      description={\n        <FormattedMessage\n          defaultMessage=\"An error occurred while rendering this component.\"\n          description=\"Description of error fallback component\"\n        />\n      }\n      image={<DangerIcon />}\n    />\n  );\n}\n\nfunction CustomErrorBoundary({ children, customFallbackComponent }: React.PropsWithChildren<ErrorBoundaryProps>) {\n  function logErrorToConsole(error: Error, info: { componentStack: string }) {\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error('Caught Unexpected Error: ', error, info.componentStack);\n  }\n\n  if (customFallbackComponent) {\n    return (\n      <ErrorBoundary onError={logErrorToConsole} FallbackComponent={customFallbackComponent}>\n        {children}\n      </ErrorBoundary>\n    );\n  }\n\n  return (\n    <ErrorBoundary onError={logErrorToConsole} fallback={<ErrorFallback />}>\n      {children}\n    </ErrorBoundary>\n  );\n}\n\nexport function withErrorBoundary<P>(\n  service: string,\n  Component: React.ComponentType<P>,\n  errorMessage?: React.ReactNode,\n  customFallbackComponent?: React.ComponentType<FallbackProps>,\n): React.ComponentType<P> {\n  return function CustomErrorBoundaryWrapper(props: P) {\n    return (\n      <CustomErrorBoundary customFallbackComponent={customFallbackComponent}>\n        {/* @ts-expect-error Generics don't play well with WithConditionalCSSProp type coming @emotion/react jsx typing to validate css= prop values typing. More details here: emotion-js/emotion#2169 */}\n        <Component {...props} />\n      </CustomErrorBoundary>\n    );\n  };\n}\n","import React from 'react';\n\nimport {\n  type Location,\n  type Params as RouterDOMParams,\n  type NavigateOptions,\n  type To,\n  useLocation,\n  useNavigate,\n  useParams,\n} from './RoutingUtils';\n\nexport interface WithRouterNextProps<Params extends RouterDOMParams = RouterDOMParams> {\n  navigate: ReturnType<typeof useNavigate>;\n  location: Location;\n  params: Params;\n}\n\n/**\n * This HoC serves as a retrofit for class components enabling them to use\n * react-router v6's location, navigate and params being injected via props.\n */\nexport const withRouterNext =\n  <\n    T,\n    Props extends JSX.IntrinsicAttributes &\n      JSX.LibraryManagedAttributes<React.ComponentType<T>, React.PropsWithChildren<T>>,\n    Params extends RouterDOMParams = RouterDOMParams,\n  >(\n    Component: React.ComponentType<T>,\n  ) =>\n  (\n    props: Omit<\n      Props,\n      | 'location'\n      | 'navigate'\n      | 'params'\n      | 'navigationType'\n      /* prettier-ignore*/\n    >,\n  ) => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const params = useParams<Params>();\n\n    return (\n      <Component\n        /* prettier-ignore */\n        params={params as Params}\n        location={location}\n        navigate={navigate}\n        {...(props as Props)}\n      />\n    );\n  };\n","import React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport {\n  Typography,\n  Row,\n  Col,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { LazyPlot } from './LazyPlot';\nimport { RunInfoEntity } from '../types';\n\ntype Props = {\n  runUuids: string[];\n  runInfos: RunInfoEntity[];\n  metricLists: any[][];\n  paramLists: any[][];\n};\n\ntype Axis = {\n  key?: string;\n  isParam?: boolean;\n};\n\nconst paramOptionPrefix = 'param-';\nconst metricOptionPrefix = 'metric-';\n\n// Note: This component does not pass the value of the parent component to the child component.\n// Doing so will cause weird rendering issues with the label and updating of the value.\nconst Selector = ({\n  id,\n  onChange,\n  paramKeys,\n  metricKeys,\n}: {\n  id: string;\n  onChange: (axis: Axis) => void;\n  paramKeys: string[];\n  metricKeys: string[];\n}) => {\n  const intl = useIntl();\n  return (\n    <SimpleSelect\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunbox.tsx_46\"\n      id={id}\n      css={{ width: '100%', marginBottom: '16px' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Select parameter or metric',\n        description: 'Placeholder text for parameter/metric selector in box plot comparison in MLflow',\n      })}\n      onChange={({ target }) => {\n        const { value } = target;\n        const [_prefix, key] = value.split('-');\n        const isParam = value.startsWith(paramOptionPrefix);\n        onChange({ key, isParam });\n      }}\n    >\n      <SimpleSelectOptionGroup label=\"Parameters\">\n        {paramKeys.map((key) => (\n          <SimpleSelectOption key={key} value={paramOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n      <SimpleSelectOptionGroup label=\"Metrics\">\n        {metricKeys.map((key) => (\n          <SimpleSelectOption key={key} value={metricOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n    </SimpleSelect>\n  );\n};\n\nexport const CompareRunBox = ({ runInfos, metricLists, paramLists }: Props) => {\n  const [xAxis, setXAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n  const [yAxis, setYAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n\n  const paramKeys = Array.from(new Set(paramLists.flat().map(({ key }) => key))).sort();\n  const metricKeys = Array.from(new Set(metricLists.flat().map(({ key }) => key))).sort();\n\n  const getBoxPlotData = () => {\n    const data = {};\n    runInfos.forEach((_, index) => {\n      const params = paramLists[index];\n      const metrics = metricLists[index];\n      const x = (xAxis.isParam ? params : metrics).find(({ key }) => key === xAxis.key);\n      const y = (yAxis.isParam ? params : metrics).find(({ key }) => key === yAxis.key);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n\n      if (x.value in data) {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value].push(y.value);\n      } else {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value] = [y.value];\n      }\n    });\n\n    return Object.entries(data).map(([key, values]) => ({\n      y: values,\n      type: 'box',\n      name: key,\n      jitter: 0.3,\n      pointpos: -1.5,\n      boxpoints: 'all',\n    }));\n  };\n\n  const renderPlot = () => {\n    if (!(xAxis.key && yAxis.key)) {\n      return (\n        <div\n          css={{\n            display: 'flex',\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text size=\"xl\">\n            <FormattedMessage\n              defaultMessage=\"Select parameters/metrics to plot.\"\n              description=\"Text to show when x or y axis is not selected on box plot\"\n            />\n          </Typography.Text>\n        </div>\n      );\n    }\n\n    return (\n      <LazyPlot\n        css={{\n          width: '100%',\n          height: '100%',\n          minHeight: '35vw',\n        }}\n        data={getBoxPlotData()}\n        layout={{\n          margin: {\n            t: 30,\n          },\n          hovermode: 'closest',\n          xaxis: {\n            title: xAxis.key,\n          },\n          yaxis: {\n            title: yAxis.key,\n          },\n        }}\n        config={{\n          responsive: true,\n          displaylogo: false,\n          scrollZoom: true,\n          modeBarButtonsToRemove: [\n            'sendDataToCloud',\n            'select2d',\n            'lasso2d',\n            'resetScale2d',\n            'hoverClosestCartesian',\n            'hoverCompareCartesian',\n          ],\n        }}\n        useResizeHandler\n      />\n    );\n  };\n\n  return (\n    <Row>\n      <Col span={6}>\n        <div css={styles.borderSpacer}>\n          <div>\n            <FormUI.Label htmlFor=\"x-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"X-axis:\"\n                description=\"Label text for X-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"x-axis-selector\" onChange={setXAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n\n          <div>\n            <FormUI.Label htmlFor=\"y-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"Y-axis:\"\n                description=\"Label text for Y-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"y-axis-selector\" onChange={setYAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n        </div>\n      </Col>\n      <Col span={18}>{renderPlot()}</Col>\n    </Row>\n  );\n};\n\nconst styles = {\n  borderSpacer: (theme: any) => ({\n    paddingLeft: theme.spacing.xs,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Switch,\n  Spacer,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunContourProps = {\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunContourState = any;\n\nexport class CompareRunContour extends Component<CompareRunContourProps, CompareRunContourState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunContourProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, true);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, true);\n\n    if (this.paramKeys.length + this.metricKeys.length < 3) {\n      this.state = { disabled: true };\n    } else {\n      const common = { disabled: false, reverseColor: false };\n      if (this.metricKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.paramKeys[2], isMetric: false },\n        };\n      } else if (this.paramKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.metricKeys[0], isMetric: true },\n          yaxis: { key: this.metricKeys[1], isMetric: true },\n          zaxis: { key: this.metricKeys[2], isMetric: true },\n        };\n      } else if (this.paramKeys.length === 1) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.metricKeys[0], isMetric: true },\n          zaxis: { key: this.metricKeys[1], isMetric: true },\n        };\n      } else {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.metricKeys[0], isMetric: true },\n        };\n      }\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  getColorscale() {\n    /*\n     * contour plot has an option named \"reversescale\" which\n     * reverses the color mapping if True, but it doesn't work properly now.\n     *\n     * https://github.com/plotly/plotly.js/issues/4430\n     *\n     * This function is a temporary workaround for the issue.\n     */\n    const colorscale = [\n      [0, 'rgb(5,10,172)'],\n      [0.35, 'rgb(40,60,190)'],\n      [0.5, 'rgb(70,100,245)'],\n      [0.6, 'rgb(90,120,245)'],\n      [0.7, 'rgb(106,137,247)'],\n      [1, 'rgb(220,220,220)'],\n    ];\n\n    // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n    if (this.state.reverseColor) {\n      return colorscale;\n    } else {\n      // reverse only RGB values\n      return colorscale.map(([val], index) => [val, colorscale[colorscale.length - 1 - index][1]]);\n    }\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return (\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Contour plots can only be rendered when comparing a group of runs\n              with three or more unique metrics or params. Log more metrics or params to your\n              runs to visualize them using the contour plot.\"\n            description=\"Text explanation when contour plot is disabled in comparison pages\n              in MLflow\"\n          />\n        </div>\n      );\n    }\n\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const zs: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'xaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.xaxis);\n      // @ts-expect-error TS(4111): Property 'yaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.yaxis);\n      // @ts-expect-error TS(4111): Property 'zaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const z = this.getValue(index, this.state.zaxis);\n      if (x === undefined || y === undefined || z === undefined) {\n        return;\n      }\n      xs.push(parseFloat(x));\n      ys.push(parseFloat(y));\n      zs.push(parseFloat(z));\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    const maybeRenderPlot = () => {\n      const invalidAxes = [];\n      if (new Set(xs).size < 2) {\n        invalidAxes.push('X');\n      }\n      if (new Set(ys).size < 2) {\n        invalidAxes.push('Y');\n      }\n      if (invalidAxes.length > 0) {\n        const messageHead =\n          invalidAxes.length > 1 ? `The ${invalidAxes.join(' and ')} axes don't` : `The ${invalidAxes[0]} axis doesn't`;\n        return (\n          <div\n            css={styles.noDataMessage}\n          >{`${messageHead} have enough unique data points to render the contour plot.`}</div>\n        );\n      }\n\n      return (\n        <LazyPlot\n          css={styles.plot}\n          data={[\n            // contour plot\n            {\n              z: zs,\n              x: xs,\n              y: ys,\n              type: 'contour',\n              hoverinfo: 'none',\n              colorscale: this.getColorscale(),\n              connectgaps: true,\n              contours: {\n                coloring: 'heatmap',\n              },\n            },\n            // scatter plot\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['xaxis'].key, keyLength)),\n              range: [Math.min(...xs), Math.max(...xs)],\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['yaxis'].key, keyLength)),\n              range: [Math.min(...ys), Math.max(...ys)],\n            },\n          }}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      );\n    };\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"xaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('xaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"yaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('yaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"zaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Z-axis:\"\n                  description=\"Label text for z-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('zaxis')}\n            </div>\n            <Spacer />\n            <div className=\"inline-control\">\n              <FormattedMessage\n                defaultMessage=\"Reverse color:\"\n                description=\"Label text for reverse color toggle in contour plot comparison\n                      in MLflow\"\n              />{' '}\n              <Switch\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_282\"\n                className=\"show-point-toggle\"\n                // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n                checked={this.state.reverseColor}\n                onChange={(checked) => this.setState({ reverseColor: checked })}\n              />\n            </div>\n          </>\n        }\n      >\n        {maybeRenderPlot()}\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: string) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_299\"\n        css={{ width: '100%' }}\n        id={axis + '-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunContour.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n  noDataMessage: (theme: any) => ({\n    padding: theme.spacing.sm,\n    display: 'flex',\n    justifyContent: 'center',\n  }),\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport default connect(mapStateToProps)(CompareRunContour);\n","import { Theme } from '@emotion/react';\n\ninterface CompareRunPlotContainerProps {\n  controls: React.ReactNode;\n}\n\nexport const CompareRunPlotContainer = (props: React.PropsWithChildren<CompareRunPlotContainerProps>) => (\n  <div css={styles.wrapper}>\n    <div css={styles.controls}>{props.controls}</div>\n    <div css={styles.plotWrapper}>{props.children}</div>\n  </div>\n);\n\nconst styles = {\n  plotWrapper: {\n    overflow: 'hidden',\n    width: '100%',\n    height: '100%',\n    minHeight: 450,\n  },\n  wrapper: {\n    display: 'grid',\n    gridTemplateColumns: 'minmax(300px, 1fr) 3fr',\n  },\n  controls: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport { FormUI, SimpleSelect, SimpleSelectOption, SimpleSelectOptionGroup, Spacer } from '@databricks/design-system';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunScatterImplProps = {\n  runUuids: string[];\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunScatterImplState = any;\n\nexport class CompareRunScatterImpl extends Component<CompareRunScatterImplProps, CompareRunScatterImplState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunScatterImplProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, false);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, false);\n\n    if (this.paramKeys.length + this.metricKeys.length < 2) {\n      this.state = { disabled: true };\n    } else {\n      this.state = {\n        disabled: false,\n        x:\n          this.paramKeys.length > 0\n            ? {\n                key: this.paramKeys[0],\n                isMetric: false,\n              }\n            : {\n                key: this.metricKeys[1],\n                isMetric: true,\n              },\n        y:\n          this.metricKeys.length > 0\n            ? {\n                key: this.metricKeys[0],\n                isMetric: true,\n              }\n            : {\n                key: this.paramKeys[1],\n                isMetric: false,\n              },\n      };\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return <div />;\n    }\n\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'x' comes from an index signature, so it ... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.x);\n      // @ts-expect-error TS(4111): Property 'y' comes from an index signature, so it ... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.y);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n      xs.push(x);\n      ys.push(y);\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"x-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('x')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"y-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('y')}\n            </div>\n          </>\n        }\n      >\n        <LazyPlot\n          data={[\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['x'].key, keyLength)),\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['y'].key, keyLength)),\n            },\n          }}\n          css={styles.plot}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: any) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunscatter.tsx_182\"\n        css={styles.select}\n        id={axis + '-axis-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunScatterImpl.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  select: {\n    width: '100%',\n  },\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport const CompareRunScatter = connect(mapStateToProps)(CompareRunScatterImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nexport default class CompareRunUtil {\n  /**\n   * Find in a list of metrics/params a certain key\n   */\n  static findInList(data: any, key: any) {\n    let found = undefined;\n    data.forEach((value: any) => {\n      if (value.key === key) {\n        found = value;\n      }\n    });\n    return found;\n  }\n\n  /**\n   * Get all keys present in the data in ParamLists or MetricLists or Schema input and outputs lists\n   */\n  static getKeys(lists: any, numeric: any) {\n    const keys = {};\n    lists.forEach((list: any) =>\n      list.forEach((item: any) => {\n        if (!(item.key in keys)) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = true;\n        }\n        if (numeric && isNaN(parseFloat(item.value))) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = false;\n        }\n      }),\n    );\n    return (\n      Object.keys(keys)\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        .filter((k) => keys[k])\n        .sort()\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport { SectionErrorBoundary } from '../../common/components/error-boundaries/SectionErrorBoundary';\n\nconst Plot = React.lazy(() => import('react-plotly.js'));\n\nexport const LazyPlot = ({ fallback, ...props }: any) => (\n  <SectionErrorBoundary>\n    <React.Suspense fallback={fallback ?? <LegacySkeleton active />}>\n      <Plot {...props} />\n    </React.Suspense>\n  </SectionErrorBoundary>\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { LazyPlot } from './LazyPlot';\n\nconst AXIS_LABEL_CLS = '.pcp-plot .parcoords .y-axis .axis-heading .axis-title';\nexport const UNKNOWN_TERM = 'unknown';\n\ntype ParallelCoordinatesPlotViewProps = {\n  runUuids: string[];\n  paramKeys: string[];\n  metricKeys: string[];\n  paramDimensions: any[];\n  metricDimensions: any[];\n};\n\ntype ParallelCoordinatesPlotViewState = any;\n\nexport class ParallelCoordinatesPlotView extends React.Component<\n  ParallelCoordinatesPlotViewProps,\n  ParallelCoordinatesPlotViewState\n> {\n  state = {\n    // Current sequence of all axes, both parameters and metrics.\n    sequence: [...this.props.paramKeys, ...this.props.metricKeys],\n  };\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    const keysFromProps = [...props.paramKeys, ...props.metricKeys];\n    const keysFromState = state.sequence;\n    if (!_.isEqual(_.sortBy(keysFromProps), _.sortBy(keysFromState))) {\n      return { sequence: keysFromProps };\n    }\n    return null;\n  }\n\n  getData() {\n    const { sequence } = this.state;\n    const { paramDimensions, metricDimensions, metricKeys } = this.props;\n    const lastMetricKey = this.findLastKeyFromState(metricKeys);\n    const lastMetricDimension = this.props.metricDimensions.find((d) => d.label === lastMetricKey);\n    const colorScaleConfigs = ParallelCoordinatesPlotView.getColorScaleConfigsForDimension(lastMetricDimension);\n    // This make sure axis order consistency across renders.\n    const orderedDimensions = ParallelCoordinatesPlotView.getDimensionsOrderedBySequence(\n      [...paramDimensions, ...metricDimensions],\n      sequence,\n    );\n    return [\n      {\n        type: 'parcoords',\n        line: { ...colorScaleConfigs },\n        dimensions: orderedDimensions,\n      },\n    ];\n  }\n\n  static getDimensionsOrderedBySequence(dimensions: any, sequence: any) {\n    return _.sortBy(dimensions, [(dimension) => sequence.indexOf(dimension.label)]);\n  }\n\n  static getLabelElementsFromDom = () => Array.from(document.querySelectorAll(AXIS_LABEL_CLS));\n\n  findLastKeyFromState(keys: any) {\n    const { sequence } = this.state;\n    const keySet = new Set(keys);\n    return _.findLast(sequence, (key) => keySet.has(key));\n  }\n\n  static getColorScaleConfigsForDimension(dimension: any) {\n    if (!dimension) return null;\n    const cmin = _.min(dimension.values);\n    const cmax = _.max(dimension.values);\n    return {\n      showscale: true,\n      colorscale: 'Jet',\n      cmin,\n      cmax,\n      color: dimension.values,\n    };\n  }\n\n  // Update styles(green & bold) for metric axes.\n  // Note(Zangr) 2019-6-25 this is needed because there is no per axis label setting available. This\n  // needs to be called every time chart updates. More information about currently available label\n  // setting here: https://plot.ly/javascript/reference/#parcoords-labelfont\n  updateMetricAxisLabelStyle = () => {\n    /* eslint-disable no-param-reassign */\n    const metricsKeySet = new Set(this.props.metricKeys);\n    // TODO(Zangr) 2019-06-20 This assumes name uniqueness across params & metrics. Find a way to\n    // make it more deterministic. Ex. Add add different data attributes to indicate axis kind.\n    ParallelCoordinatesPlotView.getLabelElementsFromDom()\n      .filter((el) => metricsKeySet.has(el.innerHTML))\n      .forEach((el) => {\n        (el as any).style.fill = 'green';\n        (el as any).style.fontWeight = 'bold';\n      });\n  };\n\n  maybeUpdateStateForColorScale = (currentSequenceFromPlotly: any) => {\n    const rightmostMetricKeyFromState = this.findLastKeyFromState(this.props.metricKeys);\n    const metricsKeySet = new Set(this.props.metricKeys);\n    const rightmostMetricKeyFromPlotly = _.findLast(currentSequenceFromPlotly, (key) => metricsKeySet.has(key));\n    // Currently we always render color scale based on the rightmost metric axis, so if that changes\n    // we need to setState with the new axes sequence to trigger a rerender.\n    if (rightmostMetricKeyFromState !== rightmostMetricKeyFromPlotly) {\n      this.setState({ sequence: currentSequenceFromPlotly });\n    }\n  };\n\n  handlePlotUpdate = ({ data: [{ dimensions }] }: any) => {\n    this.updateMetricAxisLabelStyle();\n    this.maybeUpdateStateForColorScale(dimensions.map((d: any) => d.label));\n  };\n\n  render() {\n    return (\n      <LazyPlot\n        layout={{ autosize: true, margin: { t: 50 } }}\n        useResizeHandler\n        css={styles.plot}\n        data={this.getData()}\n        onUpdate={this.handlePlotUpdate}\n        className=\"pcp-plot\"\n        config={{ displayModeBar: false }}\n      />\n    );\n  }\n}\n\nexport const generateAttributesForCategoricalDimension = (labels: any) => {\n  // Create a lookup from label to its own alphabetical sorted order.\n  // Ex. ['A', 'B', 'C'] => { 'A': '0', 'B': '1', 'C': '2' }\n  const sortedUniqLabels = _.uniq(labels).sort();\n\n  // We always want the UNKNOWN_TERM to be at the top\n  // of the chart which is end of the sorted label array\n  // Ex. ['A', 'UNKNOWN_TERM', 'B'] => { 'A': '0', 'B': '1', 'UNKNOWN_TERM': '2' }\n  let addUnknownTerm = false;\n  const filteredSortedUniqLabels = sortedUniqLabels.filter((label) => {\n    if (label === UNKNOWN_TERM) addUnknownTerm = true;\n    return label !== UNKNOWN_TERM;\n  });\n  if (addUnknownTerm) {\n    filteredSortedUniqLabels.push(UNKNOWN_TERM);\n  }\n  const labelToIndexStr = _.invert(filteredSortedUniqLabels);\n  const attributes = {};\n\n  // Values are assigned to their alphabetical sorted index number\n  (attributes as any).values = labels.map((label: any) => Number(labelToIndexStr[label]));\n\n  // Default to alphabetical order for categorical axis here. Ex. [0, 1, 2, 3 ...]\n  (attributes as any).tickvals = _.range(filteredSortedUniqLabels.length);\n\n  // Default to alphabetical order for categorical axis here. Ex. ['A', 'B', 'C', 'D' ...]\n  (attributes as any).ticktext = filteredSortedUniqLabels.map((sortedUniqLabel) =>\n    (sortedUniqLabel as any).substring(0, 10),\n  );\n\n  return attributes;\n};\n\n/**\n * Infer the type of data in a run. If all the values are numbers or castable to numbers, then\n * treat it as a number column.\n */\nexport const inferType = (key: any, runUuids: any, entryByRunUuid: any) => {\n  for (let i = 0; i < runUuids.length; i++) {\n    if (entryByRunUuid[runUuids[i]][key]) {\n      const { value } = entryByRunUuid[runUuids[i]][key];\n      if (typeof value === 'string' && isNaN(Number(value)) && value !== 'NaN') {\n        return 'string';\n      }\n    }\n  }\n  return 'number';\n};\n\nexport const createDimension = (key: any, runUuids: any, entryByRunUuid: any) => {\n  let attributes = {};\n  const dataType = inferType(key, runUuids, entryByRunUuid);\n  if (dataType === 'string') {\n    attributes = generateAttributesForCategoricalDimension(\n      runUuids.map((runUuid: any) =>\n        entryByRunUuid[runUuid][key] ? entryByRunUuid[runUuid][key].value : UNKNOWN_TERM,\n      ),\n    );\n  } else {\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const values = runUuids.map((runUuid: any) => {\n      if (entryByRunUuid[runUuid][key]) {\n        const { value } = entryByRunUuid[runUuid][key];\n        const numericValue = Number(value);\n        if (maxValue < numericValue) maxValue = numericValue;\n        return numericValue;\n      }\n      return UNKNOWN_TERM;\n    });\n\n    // For Numerical values, we take the max value of all the attribute\n    // values and 0.01 to it so it is always at top of the graph.\n    (attributes as any).values = values.map((value: any) => {\n      if (value === UNKNOWN_TERM) return maxValue + 0.01;\n      return value;\n    });\n\n    // For some reason, Plotly tries to plot these values with SI prefixes by default\n    // Explicitly set to 5 fixed digits float here\n    (attributes as any).tickformat = '.5f';\n  }\n  return {\n    label: key,\n    ...attributes,\n  };\n};\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids, paramKeys, metricKeys } = ownProps;\n  const { latestMetricsByRunUuid, paramsByRunUuid } = state.entities;\n  const paramDimensions = paramKeys.map((paramKey: any) => createDimension(paramKey, runUuids, paramsByRunUuid));\n  const metricDimensions = metricKeys.map((metricKey: any) =>\n    createDimension(metricKey, runUuids, latestMetricsByRunUuid),\n  );\n  return { paramDimensions, metricDimensions };\n};\n\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotView);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Button, LegacySelect } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\ntype Props = {\n  paramKeys: string[];\n  metricKeys: string[];\n  selectedParamKeys: string[];\n  selectedMetricKeys: string[];\n  handleParamsSelectChange: (...args: any[]) => any;\n  handleMetricsSelectChange: (...args: any[]) => any;\n  onClearAllSelect: (...args: any[]) => any;\n};\n\nexport class ParallelCoordinatesPlotControls extends React.Component<Props> {\n  render() {\n    const {\n      paramKeys,\n      metricKeys,\n      selectedParamKeys,\n      selectedMetricKeys,\n      handleParamsSelectChange,\n      handleMetricsSelectChange,\n      onClearAllSelect,\n    } = this.props;\n    return (\n      <div css={styles.wrapper}>\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Parameters:\"\n            description=\"Label text for parameters in parallel coordinates plot in MLflow\"\n          />\n        </div>\n        <LegacySelect\n          mode=\"multiple\"\n          css={styles.select}\n          placeholder={\n            <FormattedMessage\n              defaultMessage=\"Please select parameters\"\n              description=\"Placeholder text for parameters in parallel coordinates plot in MLflow\"\n            />\n          }\n          value={selectedParamKeys}\n          onChange={handleParamsSelectChange}\n        >\n          {paramKeys.map((key) => (\n            <LegacySelect.Option value={key} key={key}>\n              {key}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect>\n        <div style={{ marginTop: 20 }}>\n          <FormattedMessage\n            defaultMessage=\"Metrics:\"\n            description=\"Label text for metrics in parallel coordinates plot in MLflow\"\n          />\n        </div>\n        <LegacySelect\n          mode=\"multiple\"\n          css={styles.select}\n          placeholder={\n            <FormattedMessage\n              defaultMessage=\"Please select metrics\"\n              description=\"Placeholder text for metrics in parallel coordinates plot in MLflow\"\n            />\n          }\n          value={selectedMetricKeys}\n          onChange={handleMetricsSelectChange}\n        >\n          {metricKeys.map((key) => (\n            <LegacySelect.Option value={key} key={key}>\n              {key}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect>\n        <div style={{ marginTop: 20 }}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_parallelcoordinatesplotcontrols.tsx_84\"\n            data-test-id=\"clear-button\"\n            onClick={onClearAllSelect}\n          >\n            <FormattedMessage\n              defaultMessage=\"Clear All\"\n              description=\"String for the clear button to clear any selected parameters and metrics\"\n            />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  wrapper: (theme: any) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n  select: { width: '100%' },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ParallelCoordinatesPlotView from './ParallelCoordinatesPlotView';\nimport { ParallelCoordinatesPlotControls } from './ParallelCoordinatesPlotControls';\nimport {\n  getAllParamKeysByRunUuids,\n  getAllMetricKeysByRunUuids,\n  getSharedMetricKeysByRunUuids,\n  getRunInfo,\n} from '../reducers/Reducers';\nimport _ from 'lodash';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\nimport { FormattedMessage } from 'react-intl';\nimport { Typography } from '@databricks/design-system';\n\ntype ParallelCoordinatesPlotPanelProps = {\n  runUuids: string[];\n  allParamKeys: string[];\n  allMetricKeys: string[];\n  sharedMetricKeys: string[];\n  diffParamKeys: string[];\n};\n\ntype ParallelCoordinatesPlotPanelState = any;\n\nexport class ParallelCoordinatesPlotPanel extends React.Component<\n  ParallelCoordinatesPlotPanelProps,\n  ParallelCoordinatesPlotPanelState\n> {\n  state = {\n    // Default to select differing parameters. Sort alphabetically (to match\n    // highlighted params in param table), then cap at first 3\n    selectedParamKeys: this.props.diffParamKeys.sort().slice(0, 3),\n    // Default to select the first metric key.\n    // Note that there will be no color scaling if no metric is selected.\n    selectedMetricKeys: this.props.sharedMetricKeys.slice(0, 1),\n  };\n\n  handleParamsSelectChange = (paramValues: any) => {\n    this.setState({ selectedParamKeys: paramValues });\n  };\n\n  handleMetricsSelectChange = (metricValues: any) => {\n    this.setState({ selectedMetricKeys: metricValues });\n  };\n\n  onClearAllSelect = () => {\n    this.setState({ selectedParamKeys: [], selectedMetricKeys: [] });\n  };\n\n  render() {\n    const { runUuids, allParamKeys, allMetricKeys } = this.props;\n    const { selectedParamKeys, selectedMetricKeys } = this.state;\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <ParallelCoordinatesPlotControls\n            paramKeys={allParamKeys}\n            metricKeys={allMetricKeys}\n            selectedParamKeys={selectedParamKeys}\n            selectedMetricKeys={selectedMetricKeys}\n            handleMetricsSelectChange={this.handleMetricsSelectChange}\n            handleParamsSelectChange={this.handleParamsSelectChange}\n            onClearAllSelect={this.onClearAllSelect}\n          />\n        }\n      >\n        {!_.isEmpty(selectedParamKeys) || !_.isEmpty(selectedMetricKeys) ? (\n          <ParallelCoordinatesPlotView\n            runUuids={runUuids}\n            paramKeys={selectedParamKeys}\n            metricKeys={selectedMetricKeys}\n          />\n        ) : (\n          // @ts-expect-error TS(2322): Type '(theme: any) => { padding: any; textAlign: s... Remove this comment to see the full error message\n          <div css={styles.noValuesSelected} data-testid=\"no-values-selected\">\n            <Typography.Title level={2}>\n              <FormattedMessage\n                defaultMessage=\"Nothing to compare!\"\n                // eslint-disable-next-line max-len\n                description=\"Header displayed in the metrics and params compare plot when no values are selected\"\n              />\n            </Typography.Title>\n            <FormattedMessage\n              defaultMessage=\"Please select parameters and/or metrics to display the comparison.\"\n              // eslint-disable-next-line max-len\n              description=\"Explanation displayed in the metrics and params compare plot when no values are selected\"\n            />\n          </div>\n        )}\n      </CompareRunPlotContainer>\n    );\n  }\n}\n\nexport const getDiffParams = (allParamKeys: any, runUuids: any, paramsByRunUuid: any) => {\n  const diffParamKeys: any = [];\n  allParamKeys.forEach((param: any) => {\n    // collect all values for this param\n    const paramVals = runUuids.map(\n      (runUuid: any) => paramsByRunUuid[runUuid][param] && paramsByRunUuid[runUuid][param].value,\n    );\n    if (!paramVals.every((x: any, i: any, arr: any) => x === arr[0])) diffParamKeys.push(param);\n  });\n  return diffParamKeys;\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids: allRunUuids } = ownProps;\n\n  // Filter out runUuids that do not have corresponding runInfos\n  const runUuids = (allRunUuids ?? []).filter((uuid: string) => getRunInfo(uuid, state));\n  const allParamKeys = getAllParamKeysByRunUuids(runUuids, state);\n  const allMetricKeys = getAllMetricKeysByRunUuids(runUuids, state);\n  const sharedMetricKeys = getSharedMetricKeysByRunUuids(runUuids, state);\n  const { paramsByRunUuid } = state.entities;\n  const diffParamKeys = getDiffParams(allParamKeys, runUuids, paramsByRunUuid);\n\n  return {\n    allParamKeys,\n    allMetricKeys,\n    sharedMetricKeys,\n    diffParamKeys,\n  };\n};\n\nconst styles = {\n  noValuesSelected: (theme: any) => ({\n    padding: theme.spacing.md,\n    textAlign: 'center',\n  }),\n};\n\n// @ts-expect-error TS(2345): Argument of type 'typeof ParallelCoordinatesPlotPa... Remove this comment to see the full error message\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotPanel);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-test-id={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-test-id=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","import { createContext } from \"react\";\n\nexport type ErrorBoundaryContextType = {\n  didCatch: boolean;\n  error: any;\n  resetErrorBoundary: (...args: any[]) => void;\n};\n\nexport const ErrorBoundaryContext =\n  createContext<ErrorBoundaryContextType | null>(null);\n","import {\n  Component,\n  createElement,\n  ErrorInfo,\n  isValidElement,\n  PropsWithChildren,\n  PropsWithRef,\n  ReactElement,\n} from \"react\";\nimport { ErrorBoundaryContext } from \"./ErrorBoundaryContext\";\nimport { ErrorBoundaryProps, FallbackProps } from \"./types\";\n\ntype ErrorBoundaryState = { didCatch: boolean; error: any };\n\nconst initialState: ErrorBoundaryState = {\n  didCatch: false,\n  error: null,\n};\n\nexport class ErrorBoundary extends Component<\n  PropsWithRef<PropsWithChildren<ErrorBoundaryProps>>,\n  ErrorBoundaryState\n> {\n  state = initialState;\n\n  static getDerivedStateFromError(error: Error) {\n    return { didCatch: true, error };\n  }\n\n  resetErrorBoundary = (...args: any[]) => {\n    const { error } = this.state;\n\n    if (error !== null) {\n      this.props.onReset?.({\n        args,\n        reason: \"imperative-api\",\n      });\n\n      this.setState(initialState);\n    }\n  };\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    this.props.onError?.(error, info);\n  }\n\n  componentDidUpdate(\n    prevProps: ErrorBoundaryProps,\n    prevState: ErrorBoundaryState\n  ) {\n    const { didCatch } = this.state;\n    const { resetKeys } = this.props;\n\n    // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n    // we'd end up resetting the error boundary immediately.\n    // This would likely trigger a second error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n\n    if (\n      didCatch &&\n      prevState.error !== null &&\n      hasArrayChanged(prevProps.resetKeys, resetKeys)\n    ) {\n      this.props.onReset?.({\n        next: resetKeys,\n        prev: prevProps.resetKeys,\n        reason: \"keys\",\n      });\n\n      this.setState(initialState);\n    }\n  }\n\n  render() {\n    const { children, fallbackRender, FallbackComponent, fallback } =\n      this.props;\n    const { didCatch, error } = this.state;\n\n    let childToRender = children;\n\n    if (didCatch) {\n      const props: FallbackProps = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary,\n      };\n\n      if (isValidElement(fallback)) {\n        childToRender = fallback;\n      } else if (typeof fallbackRender === \"function\") {\n        childToRender = fallbackRender(props);\n      } else if (FallbackComponent) {\n        childToRender = createElement(FallbackComponent, props);\n      } else {\n        throw new Error(\n          \"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\"\n        );\n      }\n    }\n\n    return createElement(\n      ErrorBoundaryContext.Provider,\n      {\n        value: {\n          didCatch,\n          error,\n          resetErrorBoundary: this.resetErrorBoundary,\n        },\n      },\n      childToRender\n    ) as ReactElement;\n  }\n}\n\nfunction hasArrayChanged(a: any[] = [], b: any[] = []) {\n  return (\n    a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]))\n  );\n}\n","import { ErrorBoundaryContextType } from \"./ErrorBoundaryContext\";\n\nexport function assertErrorBoundaryContext(\n  value: any\n): value is ErrorBoundaryContextType {\n  if (\n    value == null ||\n    typeof value.didCatch !== \"boolean\" ||\n    typeof value.resetErrorBoundary !== \"function\"\n  ) {\n    throw new Error(\"ErrorBoundaryContext not found\");\n  }\n\n  return true;\n}\n","import { useContext, useMemo, useState } from \"react\";\nimport { assertErrorBoundaryContext } from \"./assertErrorBoundaryContext\";\nimport { ErrorBoundaryContext } from \"./ErrorBoundaryContext\";\n\nexport type UseErrorBoundaryApi<Error> = {\n  resetBoundary: () => void;\n  showBoundary: (error: Error) => void;\n};\n\nexport function useErrorBoundary<Error = any>(): UseErrorBoundaryApi<Error> {\n  const context = useContext(ErrorBoundaryContext);\n\n  assertErrorBoundaryContext(context);\n\n  const [state, setState] = useState<{\n    error: Error | null;\n    hasError: boolean;\n  }>({\n    error: null,\n    hasError: false,\n  });\n\n  const memoized = useMemo(\n    () => ({\n      resetBoundary: () => {\n        context?.resetErrorBoundary();\n        setState({ error: null, hasError: false });\n      },\n      showBoundary: (error: Error) =>\n        setState({\n          error,\n          hasError: true,\n        }),\n    }),\n    [context?.resetErrorBoundary]\n  );\n\n  if (state.hasError) {\n    throw state.error;\n  }\n\n  return memoized;\n}\n","import { ComponentType, createElement } from \"react\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport { ErrorBoundaryProps } from \"./types\";\n\nexport function withErrorBoundary<Props extends Object>(\n  Component: ComponentType<Props>,\n  errorBoundaryProps: ErrorBoundaryProps\n): ComponentType<Props> {\n  const Wrapped: ComponentType<Props> = (props: Props) => {\n    return createElement(\n      ErrorBoundary,\n      errorBoundaryProps,\n      createElement(Component, props)\n    );\n  };\n\n  // Format for display in DevTools\n  const name = Component.displayName || Component.name || \"Unknown\";\n  Wrapped.displayName = `withErrorBoundary(${name})`;\n\n  return Wrapped;\n}\n"],"names":["RequestStateWrapper","Component","constructor","arguments","state","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","filter","r","undefined","error","includes","id","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","length","every","active","requestErrors","getRenderedContent","children","customSpinner","permissionDeniedView","suppressErrorThrow","this","props","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","_jsx","Spinner","render","defaultProps","console","Error","connect","mapStateToProps","ownProps","getApis","requestIds","css","theme","styles","spinner","showImmediately","alt","src","immediate","width","marginTop","marginLeft","marginRight","img","position","opacity","top","left","general","heightBase","height","animation","keyframes","animationDelay","SectionErrorBoundary","React","componentDidCatch","errorInfo","setState","renderErrorMessage","showServerError","_jsxs","message","className","classNames","wrapper","href","Utils","getSupportPageUrl","target","ErrorUtils","mlflowServices","MODEL_REGISTRY","EXPERIMENTS","MODEL_SERVING","RUN_TRACKING","ErrorFallback","Empty","title","FormattedMessage","defaultMessage","description","image","DangerIcon","CustomErrorBoundary","_ref","customFallbackComponent","logErrorToConsole","info","componentStack","ErrorBoundary","onError","FallbackComponent","fallback","withErrorBoundary","service","errorMessage","withRouterNext","location","useLocation","navigate","useNavigate","params","useParams","paramOptionPrefix","_ref2","name","Selector","onChange","paramKeys","metricKeys","intl","useIntl","SimpleSelect","componentId","placeholder","formatMessage","_ref3","value","_prefix","key","split","isParam","startsWith","SimpleSelectOptionGroup","label","map","SimpleSelectOption","_ref10","_ref11","CompareRunBox","_ref4","runInfos","metricLists","paramLists","xAxis","setXAxis","useState","yAxis","setYAxis","Array","from","Set","flat","_ref5","sort","_ref6","getBoxPlotData","data","forEach","_","index","metrics","x","find","_ref7","y","_ref8","push","Object","entries","_ref9","values","type","jitter","pointpos","boxpoints","Row","Col","span","borderSpacer","FormUI","Label","htmlFor","LazyPlot","layout","margin","t","hovermode","xaxis","yaxis","config","responsive","displaylogo","scrollZoom","modeBarButtonsToRemove","useResizeHandler","Typography","Text","size","paddingLeft","spacing","xs","CompareRunContour","super","CompareRunUtil","getKeys","disabled","common","reverseColor","isMetric","zaxis","getValue","i","findInList","getColorscale","colorscale","val","keyLength","MAX_PLOT_KEY_LENGTH","ys","zs","tooltips","z","parseFloat","getPlotlyTooltip","CompareRunPlotContainer","controls","_Fragment","renderSelect","Spacer","Switch","checked","maybeRenderPlot","invalidAxes","messageHead","join","noDataMessage","plot","hoverinfo","connectgaps","contours","coloring","text","mode","marker","color","escape","truncateString","range","Math","min","max","axis","prefix","keyParts","p","m","valueLength","MAX_PLOT_VALUE_LENGTH","runName","runDisplayNames","result","paramList","metricList","formatMetric","padding","sm","display","justifyContent","runUuids","runUuid","getRunInfo","getLatestMetrics","getParams","plotWrapper","overflow","minHeight","gridTemplateColumns","CompareRunScatterImpl","select","CompareRunScatter","found","lists","numeric","keys","list","item","isNaN","k","Plot","LegacySkeleton","UNKNOWN_TERM","ParallelCoordinatesPlotView","sequence","updateMetricAxisLabelStyle","metricsKeySet","getLabelElementsFromDom","el","has","innerHTML","style","fill","fontWeight","maybeUpdateStateForColorScale","currentSequenceFromPlotly","rightmostMetricKeyFromState","findLastKeyFromState","handlePlotUpdate","dimensions","d","keysFromProps","keysFromState","getData","paramDimensions","metricDimensions","lastMetricKey","lastMetricDimension","line","getColorScaleConfigsForDimension","getDimensionsOrderedBySequence","dimension","indexOf","keySet","showscale","cmin","cmax","autosize","onUpdate","displayModeBar","document","querySelectorAll","createDimension","entryByRunUuid","attributes","dataType","inferType","Number","labels","sortedUniqLabels","addUnknownTerm","filteredSortedUniqLabels","labelToIndexStr","tickvals","ticktext","sortedUniqLabel","substring","generateAttributesForCategoricalDimension","maxValue","MIN_SAFE_INTEGER","numericValue","tickformat","latestMetricsByRunUuid","paramsByRunUuid","entities","paramKey","metricKey","ParallelCoordinatesPlotControls","selectedParamKeys","selectedMetricKeys","handleParamsSelectChange","handleMetricsSelectChange","onClearAllSelect","LegacySelect","Option","Button","onClick","ParallelCoordinatesPlotPanel","diffParamKeys","slice","sharedMetricKeys","paramValues","metricValues","allParamKeys","allMetricKeys","noValuesSelected","Title","level","md","textAlign","allRunUuids","uuid","getAllParamKeysByRunUuids","getAllMetricKeysByRunUuids","getSharedMetricKeysByRunUuids","getDiffParams","param","arr","OverflowMenu","menu","overflowMenu","Menu","itemName","otherProps","Item","Dropdown","overlay","trigger","placement","arrow","icon","OverflowIcon","PageHeader","breadcrumbs","titleAddOns","preview","spacerSize","hideSpacer","dangerouslyAppendEmotionCSS","useDesignSystemTheme","Header","Breadcrumb","includeTrailingCaret","b","buttons","PreviewBadge","_css","flexShrink","Tag","$ebb31c7feaa4405e$export$b16d9fb1a22de840","$hgUW1$createContext","$44d7e150ebc754d2$var$initialState","didCatch","$44d7e150ebc754d2$export$e926676385687eaf","$hgUW1$Component","getDerivedStateFromError","resetErrorBoundary","_this","_len","args","_key","onReset","reason","componentDidUpdate","prevProps","prevState","resetKeys","a","some","is","$44d7e150ebc754d2$var$hasArrayChanged","next","prev","fallbackRender","childToRender","$hgUW1$isValidElement","$hgUW1$createElement","Provider","$75c9d331f9c1ed1a$export$f20aa86254872370","$7c3c25b3f398a9d6$export$c052f6604b7d51fe","context","$hgUW1$useContext","$hgUW1$useState","hasError","memoized","$hgUW1$useMemo","resetBoundary","showBoundary","$62ff477d53f02a5b$export$f0c7a449e0cfaec7","errorBoundaryProps","Wrapped","displayName"],"sourceRoot":""}