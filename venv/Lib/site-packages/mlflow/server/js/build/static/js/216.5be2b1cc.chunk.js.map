{"version":3,"file":"static/js/216.5be2b1cc.chunk.js","mappings":"iPAEA,MAAM,UAAEA,GAAcC,EAAAA,EAC4D,IAAAC,EAAA,CAAAC,KAAA,QAAAC,OAAA,gBAAAC,EAAA,CAAAF,KAAA,UAAAC,OAAA,eAS3E,MAAME,EAA2BC,EAAAA,MAAYC,IAClD,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,KAElB,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAK,CACJC,YAAY,2EACZC,MAAO,QAAUN,EAAMO,OACvBC,QAASR,EAAMS,kCACfC,SAAUA,IAAMV,EAAMW,sCAAqC,GAAOC,UAElEC,EAAAA,EAAAA,IAAA,OAAKC,IAAGpB,EAAsBkB,SAAA,EAC5BT,EAAAA,EAAAA,GAACX,EAAS,CAACsB,IAAGjB,EAAkBe,UAC9BT,EAAAA,EAAAA,GAAA,OACEW,KAAGC,EAAAA,EAAAA,IAAE,CACHC,gBAAiBf,EAAMgB,OAAOC,kBAC9BC,UAAWlB,EAAMmB,QAAQC,GACzBC,WAAY,WACZC,UAAW,aACZ,IAACX,SAEDZ,EAAMwB,cAGXrB,EAAAA,EAAAA,GAAA,OACEW,KAAGC,EAAAA,EAAAA,IAAE,CACHI,UAAWlB,EAAMmB,QAAQC,IAC1B,IAACT,UAEFT,EAAAA,EAAAA,GAACsB,EAAAA,EAAU,CAACC,SAAU1B,EAAMwB,SAAUG,WAAW,EAAOC,MAAMzB,EAAAA,EAAAA,GAAC0B,EAAAA,IAAQ,IAAK,aAAW,eAGrF,IC/BNC,EAA2B,GAEjC,SAASC,IACP,QADwCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAEpC,CACEG,SAAU,SACVC,aAAc,WACdC,SAAU,SACVf,WAAY,UAEd,CAAEA,WAAY,SACpB,CAKO,MAAMgB,EAAc5C,IAgBpB,IAhBqB,WAC1B6C,GAAa,EAAK,QAClBC,EAAO,IACPC,EAAG,oBACHC,GAAsB,EAAK,UAC3BC,EAAYb,EAAwB,SACpCc,EAAW,IAAG,UACdC,GASDnD,EACC,MAAMoD,GAAOC,EAAAA,EAAAA,MAENtC,EAAmCE,IAAwCqC,EAAAA,EAAAA,WAAS,IAErF,kBAAEC,EAAiB,oBAAEC,GA+CtB,SACLT,GAE+D,IAD/DE,EAASX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGF,EAEZ,MAAM,IAAEqB,EAAG,MAAEC,GAAUX,EACjBY,EAAaF,EAAIlB,OAASmB,EAAMnB,OAChCqB,EAAcH,EAAIlB,OAASmB,EAAMnB,OACjCsB,EAAgBD,EAAcF,EAAMnB,OAASkB,EAAIlB,OAGvD,OAAIoB,GAAcV,EAAkB,CAAEM,mBAAmB,EAAOC,qBAAqB,GAEjFK,EAAgBZ,EAAY,EAAU,CAAEM,mBAAmB,EAAMC,qBAAqB,GAGnF,CACLD,kBAAmBK,EACnBJ,qBAAsBI,EAE1B,CAlEqDE,CAAgCf,EAAKE,GAClFc,EAAqBf,IAAwBO,GAAqBC,GAElEQ,EAAqBZ,EAAKa,cAAc,CAAAC,GAAA,SAC5CC,eAAe,sBAIjB,OACEhD,EAAAA,EAAAA,IAAA,OAAAD,SAAA,EACET,EAAAA,EAAAA,GAAC2D,EAAAA,IAAG,CACFzD,YAAY,8DACZ0D,SAAUxB,EACVC,QAASA,EACTlC,MAAOmC,EAAIU,IACXN,UAAWA,EAAUjC,UAErBT,EAAAA,EAAAA,GAAC6D,EAAAA,IAAa,CAAC1D,MAAOmD,EAAqBC,EAAqB,GAAG9C,UACjEC,EAAAA,EAAAA,IAAA,QACEC,KAAGC,EAAAA,EAAAA,IAAE,CAAE6B,WAAUqB,QAAS,eAAe,IACzCC,QAASA,IAAOT,EAAqB9C,GAAqC,QAAQuB,EAAWtB,SAAA,EAE7FT,EAAAA,EAAAA,GAACV,EAAAA,EAAW0E,KAAI,CAACC,MAAI,EAAC9D,MAAOmC,EAAIU,IAAKrC,IAAKiB,EAAmBkB,GAAmBrC,SAC9E6B,EAAIU,MAENV,EAAIW,QACHvC,EAAAA,EAAAA,IAACpB,EAAAA,EAAW0E,KAAI,CAAC7D,MAAOmC,EAAIW,MAAOtC,IAAKiB,EAAmBmB,GAAqBtC,SAAA,CAAC,KAC5E6B,EAAIW,iBAMjBjD,EAAAA,EAAAA,GAAA,OAAAS,SACGH,IACCN,EAAAA,EAAAA,GAACL,EAAwB,CACvBS,OAAQkC,EAAIU,IACZ3B,SAAUiB,EAAIW,MACd3C,kCAAmCA,EACnCE,qCAAsCA,QAIxC,C,wKCvF8F,IAAAjB,EAAA,CAAAC,KAAA,SAAAC,OAAA,iBAyExG,SAASyE,EAAgBC,GACvB,OAAQC,GA/DV,SAAsBA,EAA0BD,GAC9C,MAAMxB,GAAOC,EAAAA,EAAAA,MACP,MAAE9C,IAAUC,EAAAA,EAAAA,KACZsE,EAAcD,EAAKvE,MAAMwE,YAAYC,cAwD3C,OAtDqBC,EAAAA,EAAAA,UAAQ,KAC3B,IAAKF,EAAa,OAAOD,EAGzB,IADsBI,EAAAA,EAAAA,eAAcL,EAAkBE,IAAgB,EACnD,OAAOD,EAE1B,MAAMK,EAAgB,kBAAkBC,KAAKL,GAG7C,OAAOzE,EAAAA,aAAmBwE,EAAM,CAC9BO,eAAgB,CACd,CACEC,KAAM,CACJ3B,MAAOoB,EACPQ,UAAWJ,EACXK,MAAO,CACLC,MAAON,EAAgB3E,EAAMgB,OAAOkE,0BAA4BlF,EAAMgB,OAAOmE,oBAE/ExE,UACET,EAAAA,EAAAA,GAAC6D,EAAAA,IAAa,CACZ1D,MACEsE,OACI1C,EACAY,EAAKa,cAAc,CAAAC,GAAA,SACjBC,eAAe,iDAKvBwB,UAAU,QAAOzE,UAEjBC,EAAAA,EAAAA,IAAA,QAAMC,IAAGpB,EAAuBkB,SAAA,EAC9BT,EAAAA,EAAAA,GAACmF,EAAAA,IAAQ,CAACxE,KAAGC,EAAAA,EAAAA,IAAE,CAAEwE,YAAatF,EAAMmB,QAAQC,IAAI,MAC/CyB,EAAKa,cACJ,CAAAC,GAAA,SACEC,eAAe,sBAGjB,CACEtD,OAAQiE,UAOpBrB,IAAKqB,EACLgB,aAAa,MAEZjB,EAAKvE,MAAM8E,iBAEhB,GACD,CAACR,EAAkBC,EAAMC,EAAa1B,EAAM7C,GAGjD,CAGuCwF,CAAalB,EAAMD,EAC1D,CAEA,IAAAoB,EAAA,CAAA/F,KAAA,UAAAC,OAAA,cAGO,SAAS+F,EAAoB9F,GAQhC,IARiC,iBACnCyE,EAAgB,QAChBsB,EAAO,oBACPC,GAKDhG,EACC,MAAMiD,GAAOC,EAAAA,EAAAA,MACN+C,EAAQC,IAAa/C,EAAAA,EAAAA,WAAS,GAC/BgD,GAAYC,EAAAA,EAAAA,QAAgD,OAE5D,MAAEC,EAAK,WAAEC,IAAeC,EAAAA,EAAAA,IAAc,CAC1CR,QAASA,EACTjG,KAAM,MACN0G,MAAO,CACLC,SAAU,CACRC,QAASzD,EAAKa,cAAc,CAAAC,GAAA,SAC1BC,eAAe,0BAGjBT,OAAO,MAmBb,OACEjD,EAAAA,EAAAA,GAACqG,EAAAA,IAAY,CACXC,YAAU,EACVC,IAAKV,EACLW,wBAAyB,CACvBC,YAAY,EACZC,eAAgBxC,EAAgBC,IAElCxD,IAAG4E,EACHoB,YAAahE,EAAKa,cAAc,CAAAC,GAAA,SAC9BC,eAAe,eAGjBT,MAAO8C,EAAM9C,MACb2D,aAAcb,EAAM9C,MACpB4D,KAAMlB,EACNmB,wBA9BiCzG,IACnCuF,EAAUvF,EAAQ,EA8BhB0G,aAAcA,CAACC,EAAOC,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQhE,MAAMqB,cAAc4C,SAASF,EAAM1C,eAC5E6C,SAvBkBnE,IACpB+C,EAAMqB,SAASpE,GACI,OAAnB0C,QAAmB,IAAnBA,GAAAA,EAAsB1C,EAAI,EAsBxBqE,QA7BgBC,KAClBvB,EAAMqB,cAASrF,GACI,OAAnB2D,QAAmB,IAAnBA,GAAAA,OAAsB3D,EAAU,EA4B9BwF,gBAAiBvB,EAAWwB,MAAQ,aAAUzF,EAAUtB,SAEvD0D,EAAiBsD,KAAKnF,IACrBtC,EAAAA,EAAAA,GAACqG,EAAAA,IAAaqB,OAAM,CAACzE,MAAOX,EAAI7B,SAC7B6B,GADmCA,MAM9C,C,0BCpIA,SAASqF,EAAWC,GAClB,OAAO,IAAIC,IAAID,EAAKH,KAAKnF,GAAQ,CAACA,EAAIU,IAAKV,KAC7C,CAEA,IAAAiD,EAAA,CAAA/F,KAAA,SAAAC,OAAA,UAAAqI,EAAA,CAAAtI,KAAA,SAAAC,OAAA,UAGO,MAAMsI,EAA2BxI,IAYjC,IAZyE,UAC9EyI,EAAS,gBACTC,EAAe,iBACf9D,EAAgB,cAChB+D,GAAgB,EAAK,MACrB/H,GAODZ,EACC,MAAM4I,GAAkBrC,EAAAA,EAAAA,WACjBsC,EAAcC,IAAmBxF,EAAAA,EAAAA,UAAiB,KACnD,MAAE/C,IAAUC,EAAAA,EAAAA,MAEXuI,EAAaC,IAAkB1F,EAAAA,EAAAA,UAAsC,IAAIgF,MACzEW,EAAWC,IAAgB5F,EAAAA,EAAAA,UAAsC,IAAIgF,MAErEa,EAAWC,IAAgB9F,EAAAA,EAAAA,WAAS,GAErC+F,GAAOC,EAAAA,EAAAA,IAAwB,CACnCC,cAAe,CACb9F,SAAKjB,EACLkB,MAAO,MAIL8F,EAAYA,IAAMJ,GAAa,GAK/BK,GAAoBC,EAAAA,EAAAA,cACvBC,IACCf,EAAgBgB,QAAUD,EAC1BX,EAAeZ,EAAWuB,EAAatB,MAAQ,KAC/Ca,EAAad,EAAWuB,EAAatB,MAAQ,KAC7CgB,EAAKQ,QAELT,GAAa,EAAK,GAEpB,CAACC,IAGGS,EAAWC,UACVnB,EAAgBgB,UAGrBd,EAAgB,IAChBkB,GAAa,GACbtB,EAAgBE,EAAgBgB,QAASK,MAAMC,KAAKnB,EAAYoB,UAAWF,MAAMC,KAAKjB,EAAUkB,WAC7FC,MAAK,KACJZ,IACS,OAATf,QAAS,IAATA,GAAAA,IACAuB,GAAa,EAAM,IAEpBK,OAAOC,IAA6B,IAADC,EAClCP,GAAa,GACblB,EAAgBwB,aAAaE,EAAAA,EAAsC,QAA1BD,EAAGD,EAAEG,6BAAqB,IAAAF,OAAA,EAAvBA,EAAyB1D,QAAUyD,EAAEzD,QAAQ,IACzF,EAGAzD,GAAOC,EAAAA,EAAAA,KACPqH,EAAarB,EAAKsB,SAEjBC,EAAWZ,IAAgB1G,EAAAA,EAAAA,WAAS,GAErCuH,GAAe7F,EAAAA,EAAAA,UACnB,MAAO8F,EAAAA,EAAAA,UAAQC,EAAAA,EAAAA,QAAOd,MAAMC,KAAKnB,EAAYoB,UAAW,QAAQY,EAAAA,EAAAA,QAAOd,MAAMC,KAAKjB,EAAUkB,UAAW,SACvG,CAACpB,EAAaE,IAEV+B,EAAUN,EAAWjH,KAAOiH,EAAWhH,MACvCuH,EAAqBJ,GAAgBG,EAmL3C,MAAO,CAAEE,eAnJP/J,EAAAA,EAAAA,IAACT,EAAAA,EAAK,CACJC,YAAY,uEACZwK,gBAAc,EACdrK,QAASqI,EACTvI,MACO,OAALA,QAAK,IAALA,EAAAA,GACEH,EAAAA,EAAAA,GAAC2K,EAAAA,EAAgB,CAAAlH,GAAA,SACfC,eAAe,kBAKrBnD,SAAUwI,EACV6B,QACElK,EAAAA,EAAAA,IAACmK,EAAAA,EAA2B,CAAApK,SAAA,EAC1BT,EAAAA,EAAAA,GAAC8K,EAAAA,EAAM,CACL5K,YAAY,uEACZ6K,gCAA8B,EAC9BhH,QAASgF,EAKTpI,KAAGC,EAAAA,EAAAA,IAAE,CAAEwE,YAAcgF,EAAkC,EAAnBtK,EAAMmB,QAAQC,IAAQ,IAACT,SAE1DkC,EAAKa,cAAc,CAAAC,GAAA,SAClBC,eAAe,aAIlB8G,GACCxK,EAAAA,EAAAA,GAACgL,EAAwB,CAACf,WAAYA,EAAYE,UAAWA,EAAWc,WAAY5B,KAEpFrJ,EAAAA,EAAAA,GAAC6D,EAAAA,IAAa,CACZ1D,MACGiK,OAKGrI,EAJAY,EAAKa,cAAc,CAAAC,GAAA,SACjBC,eAAe,wDAItBjD,UAEDT,EAAAA,EAAAA,GAAC8K,EAAAA,EAAM,CACL5K,YAAY,uEACZ6K,gCAA8B,EAC9BlG,UAAWuF,EACXc,QAASf,EACTgB,KAAK,UACLpH,QAASsF,EAAS5I,SAEjBkC,EAAKa,cAAc,CAAAC,GAAA,SAClBC,eAAe,qBAO1BjD,SAAA,EAEDC,EAAAA,EAAAA,IAAA,QACE0K,SAAUxC,EAAKyC,cA7EJD,KAEf,GAAIlD,IAAkB+B,EAAWhH,MAAMqI,OACrC,OAIF,MAAMC,EAAa,IAAI1D,IAAIW,GAC3B+C,EAAWC,IAAIvB,EAAWjH,IAAKiH,GAE/BxB,EAAa8C,GACb3C,EAAKQ,OAAO,IAmERzI,KAAGC,EAAAA,EAAAA,IAAE,CAAEkD,QAAS,OAAQ2H,WAAY,WAAYC,IAAK5L,EAAMmB,QAAQ0K,IAAI,IAAClL,SAAA,EAExEC,EAAAA,EAAAA,IAAA,OAAKC,KAAGC,EAAAA,EAAAA,IAAE,CAAEgL,SAAU,EAAG9H,QAAS,OAAQ4H,IAAK5L,EAAMmB,QAAQ0K,GAAIE,KAAM,GAAG,IAACpL,SAAA,EACzEC,EAAAA,EAAAA,IAAA,OAAKC,IAAG4E,EAAc9E,SAAA,EACpBT,EAAAA,EAAAA,GAAC8L,EAAAA,IAAOC,MAAK,CAACC,QAAQ,MAAKvL,SACxBkC,EAAKa,cAAc,CAAAC,GAAA,SAClBC,eAAe,WAInB1D,EAAAA,EAAAA,GAACwF,EAAoB,CACnBrB,iBAAkBA,GAAoB,GACtCsB,QAASmD,EAAKnD,QACdC,oBA1GiB1C,IAA6B,IAADiJ,EACvD,MAAM3J,EAAMU,EAAMwF,EAAU0D,IAAIlJ,QAAOjB,EAIvC6G,EAAKuD,SAAS,QAAmB,QAAZF,EAAK,OAAH3J,QAAG,IAAHA,OAAG,EAAHA,EAAKW,aAAK,IAAAgJ,EAAAA,EAAI,GAAG,QAwGlCvL,EAAAA,EAAAA,IAAA,OAAKC,IAAGmH,EAAcrH,SAAA,EACpBT,EAAAA,EAAAA,GAAC8L,EAAAA,IAAOC,MAAK,CAACC,QAAQ,QAAOvL,SAC1ByH,EACGvF,EAAKa,cAAc,CAAAC,GAAA,SACjBC,eAAe,UAGjBf,EAAKa,cAAc,CAAAC,GAAA,SACjBC,eAAe,wBAIvB1D,EAAAA,EAAAA,GAACoM,EAAAA,IAAwBC,MAAK,CAC5BnM,YAAY,uEACZV,KAAK,QACLiG,QAASmD,EAAKnD,QACd,aACEyC,EACIvF,EAAKa,cAAc,CAAAC,GAAA,SACjBC,eAAe,UAGjBf,EAAKa,cAAc,CAAAC,GAAA,SACjBC,eAAe,qBAIvBiD,YAAahE,EAAKa,cAAc,CAAAC,GAAA,SAC9BC,eAAe,0BAMvB1D,EAAAA,EAAAA,GAAC6D,EAAAA,IAAa,CACZ1D,MAAOwC,EAAKa,cAAc,CAAAC,GAAA,SACxBC,eAAe,YAEdjD,UAEHT,EAAAA,EAAAA,GAAC8K,EAAAA,EAAM,CACL5K,YAAY,uEACZoM,SAAS,SACT,aAAY3J,EAAKa,cAAc,CAAAC,GAAA,SAC7BC,eAAe,YAEdjD,UAEHT,EAAAA,EAAAA,GAACmF,EAAAA,IAAQ,WAIdiD,IAAgBpI,EAAAA,EAAAA,GAAC8L,EAAAA,IAAOS,QAAO,CAACpB,KAAK,QAAQ/E,QAASgC,KACvDpI,EAAAA,EAAAA,GAAA,OACEW,KAAGC,EAAAA,EAAAA,IAAE,CACHkD,QAAS,OACT0I,OAAQ1M,EAAMmB,QAAQwL,GACtBC,SAAU,OACV1L,UAAWlB,EAAMmB,QAAQC,IAC1B,IAACT,SAED+I,MAAMC,KAAKjB,EAAUkB,UAAUjC,KAAKnF,IACnCtC,EAAAA,EAAAA,GAACmC,EAAAA,EAAW,CAACC,YAAU,EAACE,IAAKA,EAAKD,QAASA,IAnK3B3C,KAA8B,IAA7B,IAAEsD,GAAqBtD,EAC9C+I,GAAckE,IACZA,EAAiBC,OAAO5J,GACjB,IAAI6E,IAAI8E,KACf,EA+JqDE,CAAgBvK,IAAWA,EAAIU,YAMhEgG,oBAAmBmB,YAAW,EACtD,IAAA2C,EAAA,CAAAtN,KAAA,SAAAC,OAAA,mBAEF,SAASuL,EAAwB+B,GAQ7B,IAR8B,UAChC5C,EAAS,WACTF,EAAU,WACVgB,GAKD8B,EACC,MAAMpK,GAAOC,EAAAA,EAAAA,MACP,MAAE9C,IAAUC,EAAAA,EAAAA,KAIZiN,EAAiB,GAFD,IAAGC,EAAAA,EAAAA,UAAShD,EAAWjH,IAAK,CAAElB,OAAQ,MAAS,QAC7CmI,EAAWhH,MAAQ,KAAIgK,EAAAA,EAAAA,UAAShD,EAAWhH,MAAO,CAAEnB,OAAQ,OAAU,KAGxFoL,EAAYvK,EAAKa,cACrB,CAAAC,GAAA,SACEC,eAAe,kEAGjB,CACEpB,IAAK0K,IAGT,OACEtM,EAAAA,EAAAA,IAACyM,EAAAA,GAAQC,KAAI,CAAClN,YAAY,uEAAsEO,SAAA,EAC9FT,EAAAA,EAAAA,GAACmN,EAAAA,GAAQE,QAAO,CAACC,SAAO,EAAA7M,UACtBT,EAAAA,EAAAA,GAAC8K,EAAAA,EAAM,CACL5K,YAAY,uEACZ6K,gCAA8B,EAC9BG,QAASf,EACTgB,KAAK,UAAS1K,SAEbkC,EAAKa,cAAc,CAAAC,GAAA,SAClBC,eAAe,mBAKrBhD,EAAAA,EAAAA,IAACyM,EAAAA,GAAQI,QAAO,CAACC,MAAM,MAAM,aAAYN,EAAUzM,SAAA,EACjDT,EAAAA,EAAAA,GAACV,EAAAA,EAAWD,UAAS,CAACsB,IAAGmM,EAAoBrM,SAAEyM,KAC/ClN,EAAAA,EAAAA,GAACmN,EAAAA,GAAQM,MAAK,CAACH,SAAO,EAAA7M,UACpBT,EAAAA,EAAAA,GAAC8K,EAAAA,EAAM,CACL5K,YAAY,uEACZ6D,QAASkH,EAAWxK,SAEnBkC,EAAKa,cAAc,CAAAC,GAAA,SAClBC,eAAe,6BAKrB1D,EAAAA,EAAAA,GAACmN,EAAAA,GAAQM,MAAK,CAACH,SAAO,EAAA7M,UACpBT,EAAAA,EAAAA,GAAC8K,EAAAA,EAAM,CACL5K,YAAY,uEACZiL,KAAK,UACLxK,KAAGC,EAAAA,EAAAA,IAAE,CAAE8M,WAAY5N,EAAMmB,QAAQC,IAAI,IAACT,SAErCkC,EAAKa,cAAc,CAAAC,GAAA,SAClBC,eAAe,gBAKrB1D,EAAAA,EAAAA,GAACmN,EAAAA,GAAQQ,MAAK,SAItB,C,wPC1VA,MAAMC,EAAWA,IAAM,oCAEVC,EAAmCA,CAACC,EAAUC,KACzD,MAAMC,EAAYC,IAAAA,SAAWH,EAAK,CAChChM,OAAQiM,IAEV,OAAOE,IAAAA,UAAYD,GAAYE,GAAkB,OAATA,IAAeC,KAAK,GAAG,EAUpDC,EAAoBA,CAACN,EAAUO,KAC1C,GAAIP,EAAIhM,OAASuM,EAAQ,CACvB,MAAMC,EAAeC,KAAKC,OAAOH,EAAS,GAAK,GACzCI,EAAcJ,EAAS,EAAIC,EACjC,OAAOR,EAAIY,UAAU,EAAGJ,GAAgB,MAAQR,EAAIY,UAAUZ,EAAIhM,OAAS2M,EAAaX,EAAIhM,OAC9F,CACE,OAAOgM,CACT,EAOIa,EAAU,oEASHC,EAAY5H,IACvB,IAAI6H,EAAS,GACTC,EAAI,EAER,MAAMC,EAASC,EAAahI,GAE5B,KAAO8H,EAAIC,EAAOjN,QAAQ,CACxB,MAAMmN,EAAOF,EAAOG,WAAWJ,KACzBK,EAAOJ,EAAOG,WAAWJ,KACzBM,EAAOL,EAAOG,WAAWJ,KAEzBO,EAAOJ,GAAQ,EACfK,GAAgB,EAAPL,IAAa,EAAME,GAAQ,EAC1C,IAAII,GAAgB,GAAPJ,IAAc,EAAMC,GAAQ,EACrCI,EAAc,GAAPJ,EAEPK,MAAMN,IACRK,EAAO,GACPD,EAAOC,GACEC,MAAML,KACfI,EAAO,IAGTX,EAASA,EAASF,EAAQe,OAAOL,GAAQV,EAAQe,OAAOJ,GAAQX,EAAQe,OAAOH,GAAQZ,EAAQe,OAAOF,EACxG,CAEA,OAAOX,CAAM,EASFc,EAAY3I,IACvB,IAAI6H,EAAS,GACTC,EAAI,EAER,MAAMC,GAAc,OAAL/H,QAAK,IAALA,OAAK,EAALA,EAAO4I,QAAQ,mBAAoB,MAAO,GAEzD,KAAOd,EAAIC,EAAOjN,QAAQ,CACxB,MAAMuN,EAAOV,EAAQkB,QAAQd,EAAOW,OAAOZ,MACrCQ,EAAOX,EAAQkB,QAAQd,EAAOW,OAAOZ,MACrCS,EAAOZ,EAAQkB,QAAQd,EAAOW,OAAOZ,MACrCU,EAAOb,EAAQkB,QAAQd,EAAOW,OAAOZ,MAErCG,EAAQI,GAAQ,EAAMC,GAAQ,EAC9BH,GAAgB,GAAPG,IAAc,EAAMC,GAAQ,EACrCH,GAAgB,EAAPG,IAAa,EAAKC,EAEjCX,GAAUiB,OAAOC,aAAad,GAEjB,KAATM,IACFV,GAAUiB,OAAOC,aAAaZ,IAGnB,KAATK,IACFX,GAAUiB,OAAOC,aAAaX,GAElC,CAEA,OAAOY,EAAanB,EAAO,EASvBG,EAAe,WACnB,MAAMD,GADoBlN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACP+N,QAAQ,QAAS,MACvC,IAAIK,EAAU,GAEd,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAOjN,OAAQoO,IAAK,CACtC,MAAMC,EAAIpB,EAAOG,WAAWgB,GAG1BD,GADEE,EAAI,IACKL,OAAOC,aAAaI,GACtBA,EAAI,KAAOA,EAAI,KACbL,OAAOC,aAAcI,GAAK,EAAK,KAAOL,OAAOC,aAAkB,GAAJI,EAAU,KAG9EL,OAAOC,aAAcI,GAAK,GAAM,KAChCL,OAAOC,aAAeI,GAAK,EAAK,GAAM,KACtCL,OAAOC,aAAkB,GAAJI,EAAU,IAErC,CAEA,OAAOF,CACT,EAQMD,EAAe,WAAmB,IAAlBC,EAAOpO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC1BuO,EAAS,GACTtB,EAAI,EAER,KAAOA,EAAImB,EAAQnO,QAAQ,CACzB,MAAMqO,EAAIF,EAAQf,WAAWJ,GAE7B,GAAIqB,EAAI,IACNC,GAAUN,OAAOC,aAAaI,GAC9BrB,SACK,GAAIqB,EAAI,KAAOA,EAAI,IAAK,CAC7B,MAAME,EAAKJ,EAAQf,WAAWJ,EAAI,GAClCsB,GAAUN,OAAOC,cAAmB,GAAJI,IAAW,EAAW,GAALE,GACjDvB,GAAK,CACP,KAAO,CACL,MAAMuB,EAAKJ,EAAQf,WAAWJ,EAAI,GAC5BwB,EAAKL,EAAQf,WAAWJ,EAAI,GAClCsB,GAAUN,OAAOC,cAAmB,GAAJI,IAAW,IAAa,GAALE,IAAY,EAAW,GAALC,GACrExB,GAAK,CACP,CACF,CACA,OAAOsB,CACT,EAMaG,EAAmBvJ,GACvBwJ,OAAOC,OAAOC,OAAO,WAAW,IAAIC,aAAcC,OAAO5J,IAAQ2C,MAAMkH,GACrErH,MAAMsH,UAAUrJ,IAAIsJ,KAAK,IAAIC,WAAWH,IAAeI,IAAO,KAAOA,EAAEC,SAAS,KAAKC,OAAO,KAAIhD,KAAK,MAI1GiD,EAAiC,WAE1BC,EAAsB/H,UACjC,MACMgI,SADa1D,KACK2D,QAAQC,GAGhC,GAAsB,qBAAXC,OAAwB,CACjC,MAAMC,EAAaD,OAAOhI,KAAK6H,GAAYJ,SAAS,UACpD,MAAO,GAAGE,IAAiCM,GAC7C,CAGA,MAAMC,EAAenI,MAAMC,KAAK6H,GAAaM,GAAS9B,OAAO+B,cAAcD,KAAOzD,KAAK,IACvF,MAAO,GAAGiD,IAAiCU,KAAKH,IAAe,EAGpDI,EAAwBzI,UACnC,MAAM0I,QAAapE,IACnB,IAAKqE,EAAeC,WAAWd,GAC7B,MAAM,IAAIe,MAAM,mDAElB,MAAMC,EAA8BH,EAAed,MAAMC,GAGzD,GAAsB,qBAAXK,OAAwB,CACjC,MAAME,EAAeF,OAAOhI,KAAK2I,EAA6B,UAC9D,OAAOJ,EAAKK,QAAQV,EAAc,CAAEW,GAAI,UAC1C,CAGA,MAAMX,EAAeY,KAAKH,GAC1B,OAAOJ,EAAKK,QACVrB,WAAWvH,KAAKkI,GAAea,IAAC,IAAAC,EAAA,OAAqB,QAArBA,EAAKD,EAAEE,YAAY,UAAE,IAAAD,EAAAA,EAAI,CAAC,IAC1D,CAAEH,GAAI,UACP,EAGUK,EAA2BnB,GAAiBA,EAAKU,WAAWd,E,kHCzNW,IAAA1R,EAAA,CAAAF,KAAA,UAAAC,OAAA,aAQ7E,MAAM6B,EAAa/B,IAAmF,IAAlF,SAAEgC,EAAQ,UAAEC,GAAY,EAAI,YAAEtB,KAAgB0S,GAA8BrT,EACrG,MAAOsT,EAAaC,IAAkBjQ,EAAAA,EAAAA,WAAS,GAc/C,OACE7C,EAAAA,EAAAA,GAAC6D,EAAAA,IAAa,CACZ1D,OACEH,EAAAA,EAAAA,GAAC2K,EAAAA,EAAgB,CAAAlH,GAAA,SAACC,eAAe,WAEnC8C,wBAAyB,CACvBnG,QAASwS,GACTpS,UAEFT,EAAAA,EAAAA,GAAC8K,EAAAA,EAAM,CACL5K,YAAwB,OAAXA,QAAW,IAAXA,EAAAA,EAAe,4BAC5BiL,KAAK,UACLpH,QAxBcgP,KAClBC,UAAUC,UAAUC,UAAU3R,GAC9BuR,GAAe,GACfK,YAAW,KACTL,GAAe,EAAM,GACpB,IAAK,EAoBJM,aAjBmBC,KACvBP,GAAe,EAAM,EAiBjBnS,IAAGjB,EAEHe,SACEe,GAAYxB,EAAAA,EAAAA,GAAC2K,EAAAA,EAAgB,CAAAlH,GAAA,SAACC,eAAe,cAAsD3B,KAEjG6Q,KAEQ,C","sources":["common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx","common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","common/utils/StringUtils.ts","shared/building_blocks/CopyButton.tsx"],"sourcesContent":["import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../../experiment-tracking/types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n","import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { Control, useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueEntity } from '../../experiment-tracking/types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../../experiment-tracking/types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport _ from 'lodash';\n// Import pako lazily to reduce bundle size\nconst lazyPako = () => import('pako');\n\nexport const truncateToFirstLineWithMaxLength = (str: any, maxLength: any) => {\n  const truncated = _.truncate(str, {\n    length: maxLength,\n  });\n  return _.takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n\nexport const capitalizeFirstChar = (str: any) => {\n  if (!str || typeof str !== 'string' || str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport const middleTruncateStr = (str: any, maxLen: any) => {\n  if (str.length > maxLen) {\n    const firstPartLen = Math.floor((maxLen - 3) / 2);\n    const lastPartLen = maxLen - 3 - firstPartLen;\n    return str.substring(0, firstPartLen) + '...' + str.substring(str.length - lastPartLen, str.length);\n  } else {\n    return str;\n  }\n};\n\nconst capitalizeFirstLetter = (string: any) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/* eslint-disable no-bitwise */\n/**\n * UTF-8 safe version of base64 encoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to encode\n */\nexport const btoaUtf8 = (input: any) => {\n  let output = '';\n  let i = 0;\n\n  const result = _utf8_encode(input);\n\n  while (i < result.length) {\n    const chr1 = result.charCodeAt(i++);\n    const chr2 = result.charCodeAt(i++);\n    const chr3 = result.charCodeAt(i++);\n\n    const enc1 = chr1 >> 2;\n    const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    let enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc4 = 64;\n      enc3 = enc4;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n\n/**\n * UTF-8 safe version of base64 decoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to decode\n */\nexport const atobUtf8 = (input: any) => {\n  let output = '';\n  let i = 0;\n\n  const result = input?.replace(/[^A-Za-z0-9+/=]/g, '') || '';\n\n  while (i < result.length) {\n    const enc1 = _keyStr.indexOf(result.charAt(i++));\n    const enc2 = _keyStr.indexOf(result.charAt(i++));\n    const enc3 = _keyStr.indexOf(result.charAt(i++));\n    const enc4 = _keyStr.indexOf(result.charAt(i++));\n\n    const chr1 = (enc1 << 2) | (enc2 >> 4);\n    const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    const chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output += String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n\n  return _utf8_decode(output);\n};\n\n/**\n * (private method) does a UTF-8 encoding\n *\n * @private\n * @param {string} string - Text to encode\n */\nconst _utf8_encode = (string = '') => {\n  const result = string.replace(/\\r\\n/g, '\\n');\n  let utftext = '';\n\n  for (let n = 0; n < result.length; n++) {\n    const c = result.charCodeAt(n);\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode((c >> 6) | 192) + String.fromCharCode((c & 63) | 128);\n    } else {\n      utftext +=\n        String.fromCharCode((c >> 12) | 224) +\n        String.fromCharCode(((c >> 6) & 63) | 128) +\n        String.fromCharCode((c & 63) | 128);\n    }\n  }\n\n  return utftext;\n};\n\n/**\n * (private method) does a UTF-8 decoding\n *\n * @private\n * @param {string} utftext - UTF-8 text to dencode\n */\nconst _utf8_decode = (utftext = '') => {\n  let string = '';\n  let i = 0;\n\n  while (i < utftext.length) {\n    const c = utftext.charCodeAt(i);\n\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if (c > 191 && c < 224) {\n      const c2 = utftext.charCodeAt(i + 1);\n      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n      i += 2;\n    } else {\n      const c2 = utftext.charCodeAt(i + 1);\n      const c3 = utftext.charCodeAt(i + 2);\n      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n      i += 3;\n    }\n  }\n  return string;\n};\n/* eslint-enable no-bitwise */\n\n/**\n * Returns a SHA256 hash of the input string\n */\nexport const getStringSHA256 = (input: string) => {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(input)).then((arrayBuffer) => {\n    return Array.prototype.map.call(new Uint8Array(arrayBuffer), (x) => ('00' + x.toString(16)).slice(-2)).join('');\n  });\n};\n\nconst COMPRESSED_TEXT_DEFLATE_PREFIX = 'deflate;';\n\nexport const textCompressDeflate = async (text: string) => {\n  const pako = await lazyPako();\n  const binaryData = pako.deflate(text);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const b64encoded = Buffer.from(binaryData).toString('base64');\n    return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${b64encoded}`;\n  }\n\n  // btoa-based implementation\n  const binaryString = Array.from(binaryData, (byte) => String.fromCodePoint(byte)).join('');\n  return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${btoa(binaryString)}`;\n};\n\nexport const textDecompressDeflate = async (compressedText: string) => {\n  const pako = await lazyPako();\n  if (!compressedText.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX)) {\n    throw new Error('Invalid compressed text, payload header invalid');\n  }\n  const compressedTextWithoutPrefix = compressedText.slice(COMPRESSED_TEXT_DEFLATE_PREFIX.length);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const binaryString = Buffer.from(compressedTextWithoutPrefix, 'base64');\n    return pako.inflate(binaryString, { to: 'string' });\n  }\n\n  // atob-based implementation\n  const binaryString = atob(compressedTextWithoutPrefix);\n  return pako.inflate(\n    Uint8Array.from(binaryString, (m) => m.codePointAt(0) ?? 0),\n    { to: 'string' },\n  );\n};\n\nexport const isTextCompressedDeflate = (text: string) => text.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX);\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n"],"names":["Paragraph","Typography","_ref","name","styles","_ref2","KeyValueTagFullViewModal","React","props","theme","useDesignSystemTheme","_jsx","Modal","componentId","title","tagKey","visible","isKeyValueTagFullViewModalVisible","onCancel","setIsKeyValueTagFullViewModalVisible","children","_jsxs","css","_css","backgroundColor","colors","backgroundPrimary","marginTop","spacing","sm","whiteSpace","wordBreak","tagValue","CopyButton","copyText","showLabel","icon","CopyIcon","TRUNCATE_ON_CHARS_LENGTH","getTruncatedStyles","arguments","length","undefined","overflow","textOverflow","textWrap","KeyValueTag","isClosable","onClose","tag","enableFullViewModal","charLimit","maxWidth","className","intl","useIntl","useState","shouldTruncateKey","shouldTruncateValue","key","value","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","formatMessage","id","defaultMessage","Tag","closable","LegacyTooltip","display","onClick","Text","bold","getDropdownMenu","allAvailableTags","menu","searchValue","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","flattenOptions","data","disabled","style","color","actionTertiaryTextDefault","actionDisabledText","placement","PlusIcon","marginRight","groupOption","DropdownMenu","_ref3","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","selectRef","useRef","field","fieldState","useController","rules","required","message","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","filterOption","input","option","includes","onSelect","onChange","onClear","handleClear","validationState","error","map","Option","getTagsMap","tags","Map","_ref4","useEditKeyValueTagsModal","onSuccess","saveTagsHandler","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","showEditTagsModal","useCallback","editedEntity","current","reset","saveTags","async","setIsLoading","Array","from","values","then","catch","e","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","EditTagsModal","destroyOnClose","FormattedMessage","footer","RestoreAntDDefaultClsPrefix","Button","dangerouslyUseFocusPseudoClass","UnsavedTagPopoverTrigger","onSaveTask","loading","type","onSubmit","handleSubmit","trim","newEntries","set","alignItems","gap","md","minWidth","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","xs","flexWrap","currentFinalTags","delete","handleTagDelete","_ref6","_ref5","fullTagDisplay","truncate","shownText","Popover","Root","Trigger","asChild","Content","align","Close","marginLeft","Arrow","lazyPako","truncateToFirstLineWithMaxLength","str","maxLength","truncated","_","char","join","middleTruncateStr","maxLen","firstPartLen","Math","floor","lastPartLen","substring","_keyStr","btoaUtf8","output","i","result","_utf8_encode","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","atobUtf8","replace","indexOf","String","fromCharCode","_utf8_decode","utftext","n","c","string","c2","c3","getStringSHA256","crypto","subtle","digest","TextEncoder","encode","arrayBuffer","prototype","call","Uint8Array","x","toString","slice","COMPRESSED_TEXT_DEFLATE_PREFIX","textCompressDeflate","binaryData","deflate","text","Buffer","b64encoded","binaryString","byte","fromCodePoint","btoa","textDecompressDeflate","pako","compressedText","startsWith","Error","compressedTextWithoutPrefix","inflate","to","atob","m","_m$codePointAt","codePointAt","isTextCompressedDeflate","buttonProps","showTooltip","setShowTooltip","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave"],"sourceRoot":""}