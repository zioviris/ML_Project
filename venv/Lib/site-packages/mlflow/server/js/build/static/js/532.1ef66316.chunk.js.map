{"version":3,"file":"static/js/532.1ef66316.chunk.js","mappings":"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","sources":["common/components/ScrollablePageWrapper.tsx","common/utils/ErrorUtils.tsx","common/utils/withErrorBoundary.tsx","experiment-tracking/components/artifact-view-components/ShowArtifactCodeSnippet.tsx","experiment-tracking/pages/prompts/hooks/usePromptDetailsQuery.tsx","experiment-tracking/pages/prompts/components/PromptVersionsTableAliasesCell.tsx","experiment-tracking/pages/prompts/components/PromptVersionsDiffSelectorButton.tsx","experiment-tracking/pages/prompts/components/PromptVersionsTable.tsx","experiment-tracking/pages/prompts/hooks/usePromptDetailsPageViewState.tsx","experiment-tracking/pages/prompts/components/PromptVersionRuns.tsx","experiment-tracking/pages/prompts/components/PromptVersionTags.tsx","experiment-tracking/pages/prompts/components/PromptVersionMetadata.tsx","experiment-tracking/pages/prompts/hooks/usePromptRunsInfo.tsx","experiment-tracking/pages/prompts/components/PromptContentPreview.tsx","experiment-tracking/pages/prompts/hooks/useDeletePromptVersionModal.tsx","experiment-tracking/pages/prompts/components/PromptContentCompare.tsx","experiment-tracking/pages/prompts/components/PromptDetailsTagsBox.tsx","experiment-tracking/pages/prompts/components/PromptNotFoundView.tsx","experiment-tracking/pages/prompts/PromptsDetailsPage.tsx","experiment-tracking/pages/prompts/hooks/useDeletePromptModal.tsx","experiment-tracking/pages/prompts/hooks/useUpdatePromptVersionMetadataModal.tsx","experiment-tracking/pages/prompts/components/PromptPageErrorHandler.tsx","experiment-tracking/pages/prompts/components/PromptsListTableVersionCell.tsx","experiment-tracking/pages/prompts/hooks/useCreatePromptModal.tsx","experiment-tracking/pages/prompts/hooks/useCreateRegisteredPromptMutation.tsx","experiment-tracking/pages/prompts/hooks/useUpdateRegisteredPromptTags.tsx","model-registry/components/aliases/ModelVersionAliasTag.tsx","model-registry/components/aliases/ModelVersionTableAliasesCell.tsx","model-registry/constants.tsx","model-registry/components/aliases/ModelVersionAliasSelect.tsx","model-registry/hooks/useEditRegisteredModelAliasesModal.tsx","shared/web-shared/snippet/theme/databricks-duotone-dark.ts","shared/web-shared/snippet/theme/databricks-light.ts","shared/web-shared/snippet/index.tsx"],"sourcesContent":["import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper\n      // Subtract header height\n      css={{ height: 'calc(100% - 60px)' }}\n      className={className}\n    >\n      {children}\n    </PageWrapper>\n  );\n};\n","import React from 'react';\n\nclass ErrorUtils {\n  static mlflowServices = {\n    MODEL_REGISTRY: 'Model Registry',\n    EXPERIMENTS: 'Experiments',\n    MODEL_SERVING: 'Model Serving',\n    RUN_TRACKING: 'Run Tracking',\n  };\n}\n\nexport default ErrorUtils;\n","import React from 'react';\nimport { ErrorBoundary, ErrorBoundaryPropsWithComponent, FallbackProps } from 'react-error-boundary';\nimport ErrorUtils from './ErrorUtils';\nimport { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport type ErrorBoundaryProps = {\n  children: React.Component;\n  customFallbackComponent?: ErrorBoundaryPropsWithComponent['FallbackComponent'];\n};\n\nfunction ErrorFallback() {\n  return (\n    <Empty\n      data-testid=\"fallback\"\n      title={<FormattedMessage defaultMessage=\"Error\" description=\"Title of editor error fallback component\" />}\n      description={\n        <FormattedMessage\n          defaultMessage=\"An error occurred while rendering this component.\"\n          description=\"Description of error fallback component\"\n        />\n      }\n      image={<DangerIcon />}\n    />\n  );\n}\n\nfunction CustomErrorBoundary({ children, customFallbackComponent }: React.PropsWithChildren<ErrorBoundaryProps>) {\n  function logErrorToConsole(error: Error, info: { componentStack: string }) {\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error('Caught Unexpected Error: ', error, info.componentStack);\n  }\n\n  if (customFallbackComponent) {\n    return (\n      <ErrorBoundary onError={logErrorToConsole} FallbackComponent={customFallbackComponent}>\n        {children}\n      </ErrorBoundary>\n    );\n  }\n\n  return (\n    <ErrorBoundary onError={logErrorToConsole} fallback={<ErrorFallback />}>\n      {children}\n    </ErrorBoundary>\n  );\n}\n\nexport function withErrorBoundary<P>(\n  service: string,\n  Component: React.ComponentType<P>,\n  errorMessage?: React.ReactNode,\n  customFallbackComponent?: React.ComponentType<FallbackProps>,\n): React.ComponentType<P> {\n  return function CustomErrorBoundaryWrapper(props: P) {\n    return (\n      <CustomErrorBoundary customFallbackComponent={customFallbackComponent}>\n        {/* @ts-expect-error Generics don't play well with WithConditionalCSSProp type coming @emotion/react jsx typing to validate css= prop values typing. More details here: emotion-js/emotion#2169 */}\n        <Component {...props} />\n      </CustomErrorBoundary>\n    );\n  };\n}\n","import React from 'react';\nimport { CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport const ShowArtifactCodeSnippet = ({ code }: { code: string }): React.ReactElement => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ position: 'relative' }}>\n      <CopyButton\n        css={{ zIndex: 1, position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs }}\n        showLabel={false}\n        copyText={code}\n        icon={<CopyIcon />}\n      />\n      <CodeSnippet\n        language=\"python\"\n        showLineNumbers={false}\n        style={{\n          padding: theme.spacing.sm,\n          color: theme.colors.textPrimary,\n          backgroundColor: theme.colors.backgroundSecondary,\n          whiteSpace: 'pre-wrap',\n        }}\n        wrapLongLines\n      >\n        {code}\n      </CodeSnippet>\n    </div>\n  );\n};\n","import { QueryFunctionContext, useQuery, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { RegisteredPromptDetailsResponse } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptDetailsQueryKey>) => {\n  const [, { promptName }] = queryKey;\n  const [detailsResponse, versionsResponse] = await Promise.all([\n    RegisteredPromptsApi.getPromptDetails(promptName),\n    RegisteredPromptsApi.getPromptVersions(promptName),\n  ]);\n\n  return {\n    prompt: detailsResponse.registered_model,\n    versions: versionsResponse.model_versions ?? [],\n  };\n};\n\ntype PromptDetailsQueryKey = ['prompt_details', { promptName: string }];\n\nexport const usePromptDetailsQuery = (\n  { promptName }: { promptName: string },\n  options: UseQueryOptions<\n    RegisteredPromptDetailsResponse,\n    Error,\n    RegisteredPromptDetailsResponse,\n    PromptDetailsQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    RegisteredPromptDetailsResponse,\n    Error,\n    RegisteredPromptDetailsResponse,\n    PromptDetailsQueryKey\n  >(['prompt_details', { promptName }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ColumnDef } from '@tanstack/react-table';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport { RegisteredPromptVersion } from '../types';\nimport { PromptsVersionsTableMetadata } from '../utils';\n\nexport const PromptVersionsTableAliasesCell: ColumnDef<RegisteredPromptVersion>['cell'] = ({\n  getValue,\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { showEditAliasesModal, aliasesByVersion, registeredPrompt } = meta as PromptsVersionsTableMetadata;\n\n  const mvAliases = aliasesByVersion[original.version] || [];\n\n  return registeredPrompt ? (\n    <ModelVersionTableAliasesCell\n      modelName={registeredPrompt?.name}\n      version={original.version}\n      aliases={mvAliases}\n      onAddEdit={() => {\n        showEditAliasesModal?.(original.version);\n      }}\n    />\n  ) : null;\n};\n","import { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A custom split button to select versions to compare in the prompt details page.\n */\nexport const PromptVersionsDiffSelectorButton = ({\n  isSelectedFirstToCompare,\n  isSelectedSecondToCompare,\n  onSelectFirst,\n  onSelectSecond,\n}: {\n  isSelectedFirstToCompare: boolean;\n  isSelectedSecondToCompare: boolean;\n  onSelectFirst?: () => void;\n  onSelectSecond?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  return (\n    <div\n      css={{ width: theme.general.buttonHeight, display: 'flex', alignItems: 'center', paddingRight: theme.spacing.sm }}\n    >\n      <div css={{ display: 'flex', height: theme.general.buttonInnerHeight + theme.spacing.xs, gap: 0, flex: 1 }}>\n        <Tooltip\n          componentId=\"mlflow.prompts.details.select_baseline.tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Select as baseline version\"\n              description=\"Label for selecting baseline prompt version in the comparison view\"\n            />\n          }\n          delayDuration={0}\n          side=\"left\"\n        >\n          <button\n            onClick={onSelectFirst}\n            role=\"radio\"\n            aria-checked={isSelectedFirstToCompare}\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Select as baseline version',\n              description: 'Label for selecting baseline prompt version in the comparison view',\n            })}\n            css={{\n              flex: 1,\n              border: `1px solid ${\n                isSelectedFirstToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderRight: 0,\n              marginLeft: 1,\n              borderTopLeftRadius: theme.borders.borderRadiusMd,\n              borderBottomLeftRadius: theme.borders.borderRadiusMd,\n              backgroundColor: isSelectedFirstToCompare\n                ? theme.colors.actionDefaultBackgroundPress\n                : theme.colors.actionDefaultBackgroundDefault,\n              cursor: 'pointer',\n              '&:hover': {\n                backgroundColor: theme.colors.actionDefaultBackgroundHover,\n              },\n            }}\n          />\n        </Tooltip>\n        <Tooltip\n          componentId=\"mlflow.prompts.details.select_compared.tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Select as compared version\"\n              description=\"Label for selecting compared prompt version in the comparison view\"\n            />\n          }\n          delayDuration={0}\n          side=\"right\"\n        >\n          <button\n            onClick={onSelectSecond}\n            role=\"radio\"\n            aria-checked={isSelectedSecondToCompare}\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Select as compared version',\n              description: 'Label for selecting compared prompt version in the comparison view',\n            })}\n            css={{\n              flex: 1,\n              border: `1px solid ${\n                isSelectedSecondToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderLeft: `1px solid ${\n                isSelectedFirstToCompare || isSelectedSecondToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderTopRightRadius: theme.borders.borderRadiusMd,\n              borderBottomRightRadius: theme.borders.borderRadiusMd,\n              backgroundColor: isSelectedSecondToCompare\n                ? theme.colors.actionDefaultBackgroundPress\n                : theme.colors.actionDefaultBackgroundDefault,\n              cursor: 'pointer',\n              '&:hover': {\n                backgroundColor: theme.colors.actionDefaultBackgroundHover,\n              },\n            }}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import {\n  ChevronRightIcon,\n  Empty,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableSkeletonRows,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { ColumnDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from '../../../../common/utils/Utils';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { PromptVersionsTableMode } from '../utils';\nimport { PromptsListTableVersionCell } from './PromptsListTableVersionCell';\nimport { PromptVersionsTableAliasesCell } from './PromptVersionsTableAliasesCell';\nimport { PromptVersionsDiffSelectorButton } from './PromptVersionsDiffSelectorButton';\n\ntype PromptVersionsTableColumnDef = ColumnDef<RegisteredPromptVersion>;\n\nexport const PromptVersionsTable = ({\n  promptVersions,\n  onUpdateComparedVersion,\n  isLoading,\n  onUpdateSelectedVersion,\n  comparedVersion,\n  selectedVersion,\n  mode,\n  registeredPrompt,\n  showEditAliasesModal,\n  aliasesByVersion,\n}: {\n  promptVersions?: RegisteredPromptVersion[];\n  isLoading: boolean;\n  selectedVersion?: string;\n  comparedVersion?: string;\n  onUpdateSelectedVersion: (version: string) => void;\n  onUpdateComparedVersion: (version: string) => void;\n  mode: PromptVersionsTableMode;\n  registeredPrompt?: RegisteredPrompt;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  aliasesByVersion: Record<string, string[]>;\n}) => {\n  const intl = useIntl();\n\n  const { theme } = useDesignSystemTheme();\n  const columns = useMemo(() => {\n    const resultColumns: PromptVersionsTableColumnDef[] = [\n      {\n        id: 'version',\n        header: intl.formatMessage({\n          defaultMessage: 'Version',\n          description: 'Header for the version column in the registered prompts table',\n        }),\n        accessorKey: 'version',\n        cell: PromptsListTableVersionCell,\n      },\n    ];\n\n    if (mode === PromptVersionsTableMode.TABLE) {\n      resultColumns.push({\n        id: 'creation_timestamp',\n        header: intl.formatMessage({\n          defaultMessage: 'Registered at',\n          description: 'Header for the registration time column in the registered prompts table',\n        }),\n        accessorFn: ({ creation_timestamp }) => Utils.formatTimestamp(creation_timestamp, intl),\n      });\n\n      resultColumns.push({\n        id: 'commit_message',\n        header: intl.formatMessage({\n          defaultMessage: 'Commit message',\n          description: 'Header for the commit message column in the registered prompts table',\n        }),\n        accessorKey: 'description',\n      });\n      resultColumns.push({\n        id: 'aliases',\n        header: intl.formatMessage({\n          defaultMessage: 'Aliases',\n          description: 'Header for the aliases column in the registered prompts table',\n        }),\n        accessorKey: 'aliases',\n        cell: PromptVersionsTableAliasesCell,\n      });\n    }\n\n    return resultColumns;\n  }, [mode, intl]);\n\n  const table = useReactTable({\n    data: promptVersions ?? [],\n    getRowId: (row) => row.version,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    meta: { showEditAliasesModal, aliasesByVersion, registeredPrompt },\n  });\n\n  const getEmptyState = () => {\n    if (!isLoading && promptVersions?.length === 0) {\n      return (\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No prompt versions created\"\n              description=\"A header for the empty state in the prompt versions table\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage='Use \"Create prompt version\" button in order to create a new prompt version'\n              description=\"Guidelines for the user on how to create a new prompt version in the prompt versions table\"\n            />\n          }\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div css={{ flex: 1, overflow: 'hidden' }}>\n      <Table scrollable empty={getEmptyState()} aria-label=\"Prompt versions table\">\n        <TableRow isHeader>\n          {table.getLeafHeaders().map((header) => (\n            <TableHeader componentId=\"mlflow.prompts.versions.table.header\" key={header.id}>\n              {flexRender(header.column.columnDef.header, header.getContext())}\n            </TableHeader>\n          ))}\n        </TableRow>\n        {isLoading ? (\n          <TableSkeletonRows table={table} />\n        ) : (\n          table.getRowModel().rows.map((row) => {\n            const isSelectedSingle =\n              [PromptVersionsTableMode.PREVIEW].includes(mode) && selectedVersion === row.original.version;\n\n            const isSelectedFirstToCompare =\n              [PromptVersionsTableMode.COMPARE].includes(mode) && selectedVersion === row.original.version;\n\n            const isSelectedSecondToCompare =\n              [PromptVersionsTableMode.COMPARE].includes(mode) && comparedVersion === row.original.version;\n\n            const getColor = () => {\n              if (isSelectedSingle) {\n                return theme.colors.actionDefaultBackgroundPress;\n              } else if (isSelectedFirstToCompare) {\n                return theme.colors.actionDefaultBackgroundHover;\n              } else if (isSelectedSecondToCompare) {\n                return theme.colors.actionDefaultBackgroundHover;\n              }\n              return 'transparent';\n            };\n\n            const showCursorForEntireRow = mode === PromptVersionsTableMode.PREVIEW;\n            return (\n              <TableRow\n                key={row.id}\n                css={{\n                  height: theme.general.heightBase,\n                  backgroundColor: getColor(),\n                  cursor: showCursorForEntireRow ? 'pointer' : 'default',\n                }}\n                onClick={() => {\n                  if (mode !== PromptVersionsTableMode.PREVIEW) {\n                    return;\n                  }\n                  onUpdateSelectedVersion(row.original.version);\n                }}\n              >\n                {row.getAllCells().map((cell) => (\n                  <TableCell key={cell.id} css={{ alignItems: 'center' }}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n                {isSelectedSingle && (\n                  <div\n                    css={{\n                      width: theme.spacing.md * 2,\n                      display: 'flex',\n                      alignItems: 'center',\n                      paddingRight: theme.spacing.sm,\n                    }}\n                  >\n                    <ChevronRightIcon />\n                  </div>\n                )}\n                {mode === PromptVersionsTableMode.COMPARE && (\n                  <PromptVersionsDiffSelectorButton\n                    onSelectFirst={() => onUpdateSelectedVersion(row.original.version)}\n                    onSelectSecond={() => onUpdateComparedVersion(row.original.version)}\n                    isSelectedFirstToCompare={isSelectedFirstToCompare}\n                    isSelectedSecondToCompare={isSelectedSecondToCompare}\n                  />\n                )}\n              </TableRow>\n            );\n          })\n        )}\n      </Table>\n    </div>\n  );\n};\n","import { useCallback, useReducer } from 'react';\nimport { PromptVersionsTableMode } from '../utils';\nimport { first } from 'lodash';\nimport { RegisteredPromptDetailsResponse } from '../types';\n\nconst promptDetailsViewStateReducer = (\n  state: {\n    mode: PromptVersionsTableMode;\n    selectedVersion?: string;\n    comparedVersion?: string;\n  },\n  action:\n    | { type: 'setTableMode' }\n    | { type: 'switchSides' }\n    | { type: 'setPreviewMode'; selectedVersion?: string }\n    | { type: 'setCompareMode'; selectedVersion?: string; comparedVersion?: string }\n    | { type: 'setSelectedVersion'; selectedVersion: string }\n    | { type: 'setComparedVersion'; comparedVersion: string },\n) => {\n  if (action.type === 'setTableMode') {\n    return { ...state, mode: PromptVersionsTableMode.TABLE };\n  }\n  if (action.type === 'switchSides') {\n    return { ...state, selectedVersion: state.comparedVersion, comparedVersion: state.selectedVersion };\n  }\n  if (action.type === 'setPreviewMode') {\n    return { ...state, mode: PromptVersionsTableMode.PREVIEW, selectedVersion: action.selectedVersion };\n  }\n  if (action.type === 'setCompareMode') {\n    return {\n      ...state,\n      mode: PromptVersionsTableMode.COMPARE,\n      selectedVersion: action.selectedVersion,\n      comparedVersion: action.comparedVersion,\n    };\n  }\n  if (action.type === 'setSelectedVersion') {\n    return { ...state, selectedVersion: action.selectedVersion };\n  }\n  if (action.type === 'setComparedVersion') {\n    return { ...state, comparedVersion: action.comparedVersion };\n  }\n  return state;\n};\n\nexport const usePromptDetailsPageViewState = (promptDetailsData?: RegisteredPromptDetailsResponse) => {\n  const [viewState, dispatchViewMode] = useReducer(promptDetailsViewStateReducer, {\n    mode: PromptVersionsTableMode.PREVIEW,\n  });\n\n  const setTableMode = useCallback(() => {\n    dispatchViewMode({ type: 'setTableMode' });\n  }, []);\n  const setPreviewMode = useCallback(\n    (versionEntity?: { version: string }) => {\n      const firstVersion = (versionEntity ?? first(promptDetailsData?.versions))?.version;\n      dispatchViewMode({ type: 'setPreviewMode', selectedVersion: firstVersion });\n    },\n    [promptDetailsData],\n  );\n  const setSelectedVersion = useCallback((selectedVersion: string) => {\n    dispatchViewMode({ type: 'setSelectedVersion', selectedVersion });\n  }, []);\n  const setComparedVersion = useCallback((comparedVersion: string) => {\n    dispatchViewMode({ type: 'setComparedVersion', comparedVersion });\n  }, []);\n  const setCompareMode = useCallback(() => {\n    // Last (highest) version will be the compared version\n    const comparedVersion = first(promptDetailsData?.versions)?.version;\n    // The one immediately before the last version will be the baseline version\n    const baselineVersion = promptDetailsData?.versions[1]?.version;\n    dispatchViewMode({ type: 'setCompareMode', selectedVersion: baselineVersion, comparedVersion });\n  }, [promptDetailsData]);\n\n  const switchSides = useCallback(() => dispatchViewMode({ type: 'switchSides' }), []);\n\n  if (\n    first(promptDetailsData?.versions) &&\n    viewState.mode === PromptVersionsTableMode.PREVIEW &&\n    !viewState.selectedVersion\n  ) {\n    setPreviewMode(first(promptDetailsData?.versions));\n  }\n\n  return {\n    viewState,\n    setTableMode,\n    setPreviewMode,\n    setCompareMode,\n    switchSides,\n    setSelectedVersion,\n    setComparedVersion,\n  };\n};\n","import { useState } from 'react';\nimport { Button, ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { isNil } from 'lodash';\n\nexport const PromptVersionRuns = ({\n  isLoadingRuns,\n  runIds,\n  runInfoMap,\n}: {\n  isLoadingRuns: boolean;\n  runIds: string[];\n  runInfoMap: Record<string, any>;\n}) => {\n  const [showAll, setShowAll] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const displayThreshold = 3;\n  const visibleCount = showAll ? runIds.length : Math.min(displayThreshold, runIds.length || 0);\n  const hasMore = runIds.length > displayThreshold;\n\n  return (\n    <>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"MLflow runs:\"\n          description=\"A label for the associated MLflow runs in the prompt details page\"\n        />\n      </Typography.Text>\n\n      <div>\n        {isLoadingRuns ? (\n          <ParagraphSkeleton css={{ width: 100 }} />\n        ) : (\n          <>\n            <div style={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.sm }}>\n              {runIds.slice(0, visibleCount).map((runId, index) => {\n                const runInfo = runInfoMap[runId];\n\n                if (!isNil(runInfo?.experimentId) && runInfo?.runUuid && runInfo?.runName) {\n                  const { experimentId, runUuid, runName } = runInfo;\n                  return (\n                    <Typography.Text>\n                      <Link to={Routes.getRunPageRoute(experimentId, runUuid)}>{runName}</Link>\n                      {index < visibleCount - 1 && ','}\n                    </Typography.Text>\n                  );\n                } else {\n                  return <span>{runInfo?.runName || runInfo?.runUuid}</span>;\n                }\n              })}\n              {hasMore && (\n                <Button\n                  componentId=\"mlflow.prompts.details.runs.show_more\"\n                  size=\"small\"\n                  type=\"link\"\n                  onClick={() => setShowAll(!showAll)}\n                >\n                  {showAll ? (\n                    <FormattedMessage\n                      defaultMessage=\"Show less\"\n                      description=\"Label for a link that shows less tags when clicked\"\n                    />\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage={'{count} more...'}\n                      description=\"Label for a link that renders the remaining tags when clicked\"\n                      values={{ count: runIds.length - visibleCount }}\n                    />\n                  )}\n                </Button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nimport { KeyValueTag } from '@mlflow/mlflow/src/common/components/KeyValueTag';\nimport { KeyValueEntity } from '../../../types';\nimport { useUpdatePromptVersionMetadataModal } from '../hooks/useUpdatePromptVersionMetadataModal';\nimport { isNil } from 'lodash';\n\nexport const PromptVersionTags = ({\n  tags,\n  onEditVersionMetadata,\n}: {\n  tags: KeyValueEntity[];\n  onEditVersionMetadata?: () => void;\n}) => {\n  const [showAll, setShowAll] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const displayThreshold = 3;\n  const visibleCount = showAll ? tags.length : Math.min(displayThreshold, tags.length || 0);\n  const hasMore = tags.length > displayThreshold;\n  const shouldAllowEditingMetadata = !isNil(onEditVersionMetadata);\n\n  const editButton =\n    tags.length > 0 ? (\n      <Button\n        componentId=\"mlflow.prompts.details.version.edit_tags\"\n        size=\"small\"\n        icon={<PencilIcon />}\n        onClick={onEditVersionMetadata}\n      />\n    ) : (\n      <Button\n        componentId=\"mlflow.prompts.details.version.add_tags\"\n        size=\"small\"\n        type=\"link\"\n        onClick={onEditVersionMetadata}\n      >\n        <FormattedMessage\n          defaultMessage=\"Add\"\n          description=\"Model registry > model version table > metadata column > 'add' button label\"\n        />\n      </Button>\n    );\n\n  return (\n    <>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Metadata:\"\n          description=\"A key-value pair for the metadata in the prompt details page\"\n        />\n      </Typography.Text>\n      <div>\n        <>\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.xs }}>\n            {tags.slice(0, visibleCount).map((tag) => (\n              <KeyValueTag css={{ margin: 0 }} key={tag.key} tag={tag} />\n            ))}\n            {shouldAllowEditingMetadata && editButton}\n            {!shouldAllowEditingMetadata && tags.length === 0 && <Typography.Hint>—</Typography.Hint>}\n            {hasMore && (\n              <Button\n                componentId=\"mlflow.prompts.details.version.tags.show_more\"\n                size=\"small\"\n                type=\"link\"\n                onClick={() => setShowAll(!showAll)}\n              >\n                {showAll ? (\n                  <FormattedMessage\n                    defaultMessage=\"Show less\"\n                    description=\"Label for a link that shows less tags when clicked\"\n                  />\n                ) : (\n                  <FormattedMessage\n                    defaultMessage={'{count} more...'}\n                    description=\"Label for a link that renders the remaining tags when clicked\"\n                    values={{ count: tags.length - visibleCount }}\n                  />\n                )}\n              </Button>\n            )}\n          </div>\n        </>\n      </div>\n    </>\n  );\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport Utils from '../../../../common/utils/Utils';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { usePromptRunsInfo } from '../hooks/usePromptRunsInfo';\nimport { REGISTERED_PROMPT_SOURCE_RUN_IDS } from '../utils';\nimport { useCallback, useMemo } from 'react';\nimport { PromptVersionRuns } from './PromptVersionRuns';\nimport { isUserFacingTag } from '@mlflow/mlflow/src/common/utils/TagUtils';\nimport { KeyValueTag } from '@mlflow/mlflow/src/common/components/KeyValueTag';\nimport { PromptVersionTags } from './PromptVersionTags';\n\nconst MAX_VISIBLE_TAGS = 3;\n\nexport const PromptVersionMetadata = ({\n  registeredPromptVersion,\n  registeredPrompt,\n  showEditAliasesModal,\n  onEditVersion,\n  showEditPromptVersionMetadataModal,\n  aliasesByVersion,\n  isBaseline,\n}: {\n  registeredPrompt?: RegisteredPrompt;\n  registeredPromptVersion?: RegisteredPromptVersion;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  onEditVersion?: (vesrion: RegisteredPromptVersion) => void;\n  showEditPromptVersionMetadataModal?: (version: RegisteredPromptVersion) => void;\n  aliasesByVersion: Record<string, string[]>;\n  isBaseline?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const runIds = useMemo(() => {\n    const tagValue = registeredPromptVersion?.tags?.find((tag) => tag.key === REGISTERED_PROMPT_SOURCE_RUN_IDS)?.value;\n    if (!tagValue) {\n      return [];\n    }\n    return tagValue.split(',').map((runId) => runId.trim());\n  }, [registeredPromptVersion]);\n\n  const { isLoading: isLoadingRuns, runInfoMap } = usePromptRunsInfo(runIds ? runIds : []);\n\n  if (!registeredPrompt || !registeredPromptVersion) {\n    return null;\n  }\n\n  const visibleTagList = registeredPromptVersion?.tags?.filter((tag) => isUserFacingTag(tag.key)) || [];\n\n  const versionElement = (\n    <FormattedMessage\n      defaultMessage=\"Version {version}\"\n      values={{ version: registeredPromptVersion.version }}\n      description=\"A label for the version number in the prompt details page\"\n    />\n  );\n\n  const onEditVersionMetadata = showEditPromptVersionMetadataModal\n    ? () => {\n        showEditPromptVersionMetadataModal(registeredPromptVersion);\n      }\n    : undefined;\n\n  return (\n    <div\n      css={{\n        display: 'grid',\n        gridTemplateColumns: '120px 1fr',\n        gridAutoRows: `minmax(${theme.typography.lineHeightLg}, auto)`,\n        alignItems: 'flex-start',\n        rowGap: theme.spacing.xs,\n        columnGap: theme.spacing.sm,\n      }}\n    >\n      {onEditVersion && (\n        <>\n          <Typography.Text bold>Version:</Typography.Text>\n          <Typography.Text>\n            <Typography.Link\n              componentId=\"mlflow.prompts.details.version.goto\"\n              onClick={() => onEditVersion(registeredPromptVersion)}\n            >\n              {versionElement}\n            </Typography.Link>{' '}\n            {isBaseline && (\n              <FormattedMessage\n                defaultMessage=\"(baseline)\"\n                description=\"A label displayed next to baseline version in the prompt versions comparison view\"\n              />\n            )}\n          </Typography.Text>\n        </>\n      )}\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Registered at:\"\n          description=\"A label for the registration timestamp in the prompt details page\"\n        />\n      </Typography.Text>\n      <Typography.Text>{Utils.formatTimestamp(registeredPromptVersion.creation_timestamp)}</Typography.Text>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Aliases:\"\n          description=\"A label for the aliases list in the prompt details page\"\n        />\n      </Typography.Text>\n      <div>\n        <ModelVersionTableAliasesCell\n          css={{ maxWidth: 'none' }}\n          modelName={registeredPrompt.name}\n          version={registeredPromptVersion.version}\n          aliases={aliasesByVersion[registeredPromptVersion.version] || []}\n          onAddEdit={() => {\n            showEditAliasesModal?.(registeredPromptVersion.version);\n          }}\n        />\n      </div>\n      {registeredPromptVersion.description && (\n        <>\n          <Typography.Text bold>\n            <FormattedMessage\n              defaultMessage=\"Commit message:\"\n              description=\"A label for the commit message in the prompt details page\"\n            />\n          </Typography.Text>\n          <Typography.Text>{registeredPromptVersion.description}</Typography.Text>\n        </>\n      )}\n      <PromptVersionTags onEditVersionMetadata={onEditVersionMetadata} tags={visibleTagList} />\n      {(isLoadingRuns || runIds.length > 0) && (\n        <PromptVersionRuns isLoadingRuns={isLoadingRuns} runIds={runIds} runInfoMap={runInfoMap} />\n      )}\n    </div>\n  );\n};\n","import { QueryFunctionContext, useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { transformGetRunResponse } from '../../../sdk/FieldNameTransformers';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { GetRunApiResponse } from '../../../types';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['prompt_associated_runs', string];\n\nexport const usePromptRunsInfo = (runUuids: string[] = []) => {\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: ['prompt_associated_runs', runUuid] as UseRegisteredModelRelatedRunNamesQueryKey,\n      queryFn: async ({\n        queryKey: [, runUuid],\n      }: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<GetRunApiResponse | null> => {\n        try {\n          const data = await MlflowService.getRun({ run_id: runUuid });\n          return transformGetRunResponse(data);\n        } catch (e) {\n          return null;\n        }\n      },\n    })),\n  });\n\n  // Create a map of run_id to run info\n  const runInfoMap: Record<string, any | undefined> = {};\n\n  queryResults.forEach((queryResult, index) => {\n    const runUuid = runUuids[index];\n    runInfoMap[runUuid] = queryResult.data?.run?.info;\n  });\n\n  return {\n    isLoading: runUuids.length > 0 && queryResults.some((queryResult) => queryResult.isLoading),\n    runInfoMap,\n  };\n};\n","import {\n  Button,\n  CopyIcon,\n  Modal,\n  PlayIcon,\n  Spacer,\n  TrashIcon,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { getPromptContentTagValue } from '../utils';\nimport { PromptVersionMetadata } from './PromptVersionMetadata';\nimport { FormattedMessage } from 'react-intl';\nimport { uniq } from 'lodash';\nimport { useDeletePromptVersionModal } from '../hooks/useDeletePromptVersionModal';\nimport { ShowArtifactCodeSnippet } from '../../../components/artifact-view-components/ShowArtifactCodeSnippet';\n\nconst PROMPT_VARIABLE_REGEX = /\\{\\{\\s*(.*?)\\s*\\}\\}/g;\n\nexport const PromptContentPreview = ({\n  promptVersion,\n  onUpdatedContent,\n  onDeletedVersion,\n  aliasesByVersion,\n  registeredPrompt,\n  showEditAliasesModal,\n  showEditPromptVersionMetadataModal,\n}: {\n  promptVersion?: RegisteredPromptVersion;\n  onUpdatedContent?: () => Promise<any>;\n  onDeletedVersion?: () => Promise<any>;\n  aliasesByVersion: Record<string, string[]>;\n  registeredPrompt?: RegisteredPrompt;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  showEditPromptVersionMetadataModal: (promptVersion: RegisteredPromptVersion) => void;\n}) => {\n  const value = useMemo(() => (promptVersion ? getPromptContentTagValue(promptVersion) : ''), [promptVersion]);\n\n  const { DeletePromptModal, openModal: openDeleteModal } = useDeletePromptVersionModal({\n    promptVersion,\n    onSuccess: () => onDeletedVersion?.(),\n  });\n\n  const [showUsageExample, setShowUsageExample] = useState(false);\n\n  // Find all variables in the prompt content\n  const variableNames = useMemo(() => {\n    if (!value) {\n      return [];\n    }\n\n    const variables: string[] = [];\n    let match;\n\n    while ((match = PROMPT_VARIABLE_REGEX.exec(value)) !== null) {\n      variables.push(match[1]);\n    }\n\n    // Sanity check for tricky cases like nested brackets. If the variable name contains\n    // a bracket, we consider it as a parsing error and render a placeholder instead.\n    if (variables.some((variable) => variable.includes('{') || variable.includes('}'))) {\n      return null;\n    }\n\n    return uniq(variables);\n  }, [value]);\n  const codeSnippetContent = buildCodeSnippetContent(promptVersion, variableNames);\n\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        padding: theme.spacing.md,\n        paddingTop: 0,\n        borderRadius: theme.borders.borderRadiusSm,\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Typography.Title level={3}>Viewing version {promptVersion?.version}</Typography.Title>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <Button\n            componentId=\"mlflow.prompts.details.delete_version\"\n            icon={<TrashIcon />}\n            type=\"primary\"\n            danger\n            onClick={openDeleteModal}\n          >\n            <FormattedMessage\n              defaultMessage=\"Delete version\"\n              description=\"A label for a button to delete prompt version on the prompt details page\"\n            />\n          </Button>\n          <Button\n            componentId=\"mlflow.prompts.details.preview.use\"\n            icon={<PlayIcon />}\n            onClick={() => setShowUsageExample(true)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Use\"\n              description=\"A label for a button to display the modal with the usage example of the prompt\"\n            />\n          </Button>\n        </div>\n      </div>\n      <Spacer shrinks={false} />\n      <PromptVersionMetadata\n        aliasesByVersion={aliasesByVersion}\n        registeredPrompt={registeredPrompt}\n        registeredPromptVersion={promptVersion}\n        showEditAliasesModal={showEditAliasesModal}\n        showEditPromptVersionMetadataModal={showEditPromptVersionMetadataModal}\n      />\n      <Spacer shrinks={false} />\n      <div\n        css={{\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n          overflow: 'auto',\n        }}\n      >\n        <Typography.Text\n          css={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {value || 'Empty'}\n        </Typography.Text>\n      </div>\n      <Modal\n        componentId=\"mlflow.prompts.details.preview.usage_example_modal\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Usage example\"\n            description=\"A title of the modal showing the usage example of the prompt\"\n          />\n        }\n        visible={showUsageExample}\n        onCancel={() => setShowUsageExample(false)}\n        cancelText={\n          <FormattedMessage\n            defaultMessage=\"Dismiss\"\n            description=\"A label for the button to dismiss the modal with the usage example of the prompt\"\n          />\n        }\n      >\n        <ShowArtifactCodeSnippet code={buildCodeSnippetContent(promptVersion, variableNames)} />\n      </Modal>\n      {DeletePromptModal}\n    </div>\n  );\n};\n\nconst buildCodeSnippetContent = (promptVersion: RegisteredPromptVersion | undefined, variables: string[] | null) => {\n  let codeSnippetContent = `from openai import OpenAI\nimport mlflow\nclient = OpenAI(api_key=\"<YOUR_API_KEY>\")\n\n# Set MLflow tracking URI\nmlflow.set_tracking_uri(\"<YOUR_TRACKING_URI>\")\n\n# Example of loading and using the prompt\nprompt = mlflow.load_prompt(\"prompts:/${promptVersion?.name}/${promptVersion?.version}\")`;\n\n  // Null variables mean that there was a parsing error\n  if (variables === null) {\n    codeSnippetContent += `\n\n# Replace the variables with the actual values\nvariables = {\n   \"key\": \"value\",\n   ...\n}\n\nresponse = client.chat.completions.create(\n    messages=[{\n        \"role\": \"user\",\n        \"content\": prompt.format(**variables),\n    }],\n    model=\"gpt-4o-mini\",\n)`;\n  } else {\n    codeSnippetContent += `\nresponse = client.chat.completions.create(\n    messages=[{\n        \"role\": \"user\",\n        \"content\": prompt.format(${variables.map((name) => `${name}=\"<${name}>\"`).join(', ')}),\n    }],\n    model=\"gpt-4o-mini\",\n)`;\n  }\n\n  codeSnippetContent += `\\n\\nprint(response.choices[0].message.content)`;\n  return codeSnippetContent;\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Modal } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nexport const useDeletePromptVersionModal = ({\n  promptVersion,\n  onSuccess,\n}: {\n  promptVersion?: RegisteredPromptVersion;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const { mutate } = useMutation<\n    unknown,\n    Error,\n    {\n      promptName: string;\n      version: string;\n    }\n  >({\n    mutationFn: async ({ promptName, version }) => {\n      await RegisteredPromptsApi.deleteRegisteredPromptVersion(promptName, version);\n    },\n  });\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.delete_version_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Delete prompt version\"\n          description=\"A header for the delete prompt version modal\"\n        />\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A label for the confirm button in the delete prompt version modal\"\n        />\n      }\n      okButtonProps={{ danger: true }}\n      onOk={async () => {\n        if (!promptVersion?.name) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            promptName: promptVersion.name,\n            version: promptVersion.version,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n        setOpen(false);\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the delete prompt version modal\"\n        />\n      }\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete the prompt version?\"\n        description=\"A content for the delete prompt version confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => setOpen(true);\n\n  return { DeletePromptModal: modalElement, openModal };\n};\n","import { Button, ExpandMoreIcon, Spacer, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { getPromptContentTagValue } from '../utils';\nimport { PromptVersionMetadata } from './PromptVersionMetadata';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { diffWords } from '../diff';\n\nexport const PromptContentCompare = ({\n  baselineVersion,\n  comparedVersion,\n  onSwitchSides,\n  onEditVersion,\n  registeredPrompt,\n  aliasesByVersion,\n  showEditAliasesModal,\n}: {\n  baselineVersion?: RegisteredPromptVersion;\n  comparedVersion?: RegisteredPromptVersion;\n  onSwitchSides: () => void;\n  onEditVersion: (version?: RegisteredPromptVersion) => void;\n  registeredPrompt?: RegisteredPrompt;\n  aliasesByVersion: Record<string, string[]>;\n  showEditAliasesModal?: (versionNumber: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const baselineValue = useMemo(\n    () => (baselineVersion ? getPromptContentTagValue(baselineVersion) : ''),\n    [baselineVersion],\n  );\n  const comparedValue = useMemo(\n    () => (comparedVersion ? getPromptContentTagValue(comparedVersion) : ''),\n    [comparedVersion],\n  );\n\n  const diff = useMemo(() => diffWords(baselineValue ?? '', comparedValue ?? '') ?? [], [baselineValue, comparedValue]);\n\n  const colors = useMemo(\n    () => ({\n      addedBackground: theme.isDarkMode ? theme.colors.green700 : theme.colors.green300,\n      removedBackground: theme.isDarkMode ? theme.colors.red700 : theme.colors.red300,\n    }),\n    [theme],\n  );\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        padding: theme.spacing.md,\n        paddingTop: 0,\n        borderRadius: theme.borders.borderRadiusSm,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Typography.Title level={3}>\n          <FormattedMessage\n            defaultMessage=\"Comparing version {baseline} with version {compared}\"\n            description=\"Label for comparing prompt versions in the prompt comparison view. Variables {baseline} and {compared} are numeric version numbers being compared.\"\n            values={{\n              baseline: baselineVersion?.version,\n              compared: comparedVersion?.version,\n            }}\n          />\n        </Typography.Title>\n      </div>\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex' }}>\n        <div css={{ flex: 1 }}>\n          <PromptVersionMetadata\n            aliasesByVersion={aliasesByVersion}\n            onEditVersion={onEditVersion}\n            registeredPrompt={registeredPrompt}\n            registeredPromptVersion={baselineVersion}\n            showEditAliasesModal={showEditAliasesModal}\n            isBaseline\n          />\n        </div>\n        <div css={{ paddingLeft: theme.spacing.sm, paddingRight: theme.spacing.sm }}>\n          <div css={{ width: theme.general.heightSm }} />\n        </div>\n        <div css={{ flex: 1 }}>\n          <PromptVersionMetadata\n            aliasesByVersion={aliasesByVersion}\n            onEditVersion={onEditVersion}\n            registeredPrompt={registeredPrompt}\n            registeredPromptVersion={comparedVersion}\n            showEditAliasesModal={showEditAliasesModal}\n          />\n        </div>\n      </div>\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex', flex: 1, overflow: 'auto', alignItems: 'flex-start' }}>\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            flex: 1,\n          }}\n        >\n          <Typography.Text\n            css={{\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {baselineValue || 'Empty'}\n          </Typography.Text>\n        </div>\n        <div css={{ paddingLeft: theme.spacing.sm, paddingRight: theme.spacing.sm }}>\n          <Tooltip\n            componentId=\"mlflow.prompts.details.switch_sides.tooltip\"\n            content={\n              <FormattedMessage\n                defaultMessage=\"Switch sides\"\n                description=\"A label for button used to switch prompt versions when in side-by-side comparison view\"\n              />\n            }\n            side=\"top\"\n          >\n            <Button\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Switch sides',\n                description: 'A label for button used to switch prompt versions when in side-by-side comparison view',\n              })}\n              componentId=\"mlflow.prompts.details.switch_sides\"\n              icon={<ExpandMoreIcon css={{ svg: { rotate: '90deg' } }} />}\n              onClick={onSwitchSides}\n            />\n          </Tooltip>\n        </div>\n\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            flex: 1,\n          }}\n        >\n          <Typography.Text\n            css={{\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {diff.map((part, index) => (\n              <span\n                key={index}\n                css={{\n                  backgroundColor: part.added\n                    ? colors.addedBackground\n                    : part.removed\n                    ? colors.removedBackground\n                    : undefined,\n                  textDecoration: part.removed ? 'line-through' : 'none',\n                }}\n              >\n                {part.value}\n              </span>\n            ))}\n          </Typography.Text>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { RegisteredPrompt } from '../types';\nimport { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useUpdateRegisteredPromptTags } from '../hooks/useUpdateRegisteredPromptTags';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\n\nexport const PromptsListTableTagsBox = ({\n  promptEntity,\n  onTagsUpdated,\n}: {\n  promptEntity?: RegisteredPrompt;\n  onTagsUpdated?: () => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const { EditTagsModal, showEditPromptTagsModal } = useUpdateRegisteredPromptTags({ onSuccess: onTagsUpdated });\n\n  const visibleTagList = promptEntity?.tags.filter((tag) => isUserFacingTag(tag.key)) || [];\n  const containsTags = visibleTagList.length > 0;\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagList?.map((tag) => (\n        <KeyValueTag key={tag.key} tag={tag} />\n      ))}\n      <Button\n        componentId=\"mlflow.prompts.details.tags.edit\"\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={() => promptEntity && showEditPromptTagsModal(promptEntity)}\n        aria-label={intl.formatMessage({\n          defaultMessage: 'Edit tags',\n          description: 'Label for the edit tags button on the registered prompt details page\"',\n        })}\n        children={\n          !containsTags ? (\n            <FormattedMessage\n              defaultMessage=\"Add tags\"\n              description=\"Label for the add tags button on the registered prompt details page\"\n            />\n          ) : undefined\n        }\n        type=\"tertiary\"\n      />\n      {EditTagsModal}\n    </div>\n  );\n};\n","import { ErrorView } from '@mlflow/mlflow/src/common/components/ErrorView';\nimport Routes from '../../../routes';\n\ninterface Props {\n  promptName: string;\n}\n\nexport function PromptNotFoundView({ promptName }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Prompt name '${promptName}' does not exist`}\n      fallbackHomePageReactRoute={Routes.promptsPageRoute}\n    />\n  );\n}\n","import invariant from 'invariant';\nimport { usePromptDetailsQuery } from './hooks/usePromptDetailsQuery';\nimport { Link, useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport { ScrollablePageWrapper } from '../../../common/components/ScrollablePageWrapper';\nimport {\n  Breadcrumb,\n  Button,\n  ColumnsIcon,\n  DropdownMenu,\n  GenericSkeleton,\n  Header,\n  OverflowIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  Spacer,\n  TableIcon,\n  TableSkeleton,\n  useDesignSystemTheme,\n  ZoomMarqueeSelection,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PromptVersionsTableMode } from './utils';\nimport { useMemo } from 'react';\nimport Routes from '../../routes';\nimport { CreatePromptModalMode, useCreatePromptModal } from './hooks/useCreatePromptModal';\nimport { useDeletePromptModal } from './hooks/useDeletePromptModal';\nimport { PromptVersionsTable } from './components/PromptVersionsTable';\nimport { useEditRegisteredModelAliasesModal } from '../../../model-registry/hooks/useEditRegisteredModelAliasesModal';\nimport { usePromptDetailsPageViewState } from './hooks/usePromptDetailsPageViewState';\nimport { PromptContentPreview } from './components/PromptContentPreview';\nimport { PromptContentCompare } from './components/PromptContentCompare';\nimport { withErrorBoundary } from '../../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../../common/utils/ErrorUtils';\nimport { PromptPageErrorHandler } from './components/PromptPageErrorHandler';\nimport { first, isEmpty } from 'lodash';\nimport { PromptsListTableTagsBox } from './components/PromptDetailsTagsBox';\nimport { PromptNotFoundView } from './components/PromptNotFoundView';\nimport { useUpdatePromptVersionMetadataModal } from './hooks/useUpdatePromptVersionMetadataModal';\n\nconst getAliasesModalTitle = (version: string) => (\n  <FormattedMessage\n    defaultMessage=\"Add/edit alias for prompt version {version}\"\n    description=\"Title for the edit aliases modal on the registered prompt details page\"\n    values={{ version }}\n  />\n);\n\nconst PromptsDetailsPage = () => {\n  const { promptName } = useParams<{ promptName: string }>();\n  const { theme } = useDesignSystemTheme();\n  const navigate = useNavigate();\n\n  invariant(promptName, 'Prompt name should be defined');\n\n  const { data: promptDetailsData, refetch, isLoading, error: promptLoadError } = usePromptDetailsQuery({ promptName });\n\n  const { CreatePromptModal, openModal: openCreateVersionModal } = useCreatePromptModal({\n    mode: CreatePromptModalMode.CreatePromptVersion,\n    registeredPrompt: promptDetailsData?.prompt,\n    latestVersion: first(promptDetailsData?.versions),\n    onSuccess: async ({ promptVersion }) => {\n      await refetch();\n      if (promptVersion) {\n        setPreviewMode({ version: promptVersion });\n      }\n    },\n  });\n\n  const { DeletePromptModal, openModal: openDeleteModal } = useDeletePromptModal({\n    registeredPrompt: promptDetailsData?.prompt,\n    onSuccess: () => navigate(Routes.promptsPageRoute),\n  });\n\n  const { EditPromptVersionMetadataModal, showEditPromptVersionMetadataModal } = useUpdatePromptVersionMetadataModal({\n    onSuccess: refetch,\n  });\n\n  const {\n    setCompareMode,\n    setPreviewMode,\n    setTableMode,\n    switchSides,\n    viewState,\n    setSelectedVersion,\n    setComparedVersion,\n  } = usePromptDetailsPageViewState(promptDetailsData);\n\n  const { mode } = viewState;\n\n  const isEmptyVersions = !isLoading && !promptDetailsData?.versions.length;\n\n  const showPreviewPane =\n    !isLoading && !isEmptyVersions && [PromptVersionsTableMode.PREVIEW, PromptVersionsTableMode.COMPARE].includes(mode);\n\n  const selectedVersionEntity = promptDetailsData?.versions.find(\n    ({ version }) => version === viewState.selectedVersion,\n  );\n\n  const comparedVersionEntity = promptDetailsData?.versions.find(\n    ({ version }) => version === viewState.comparedVersion,\n  );\n\n  const aliasesByVersion = useMemo(() => {\n    const result: Record<string, string[]> = {};\n    promptDetailsData?.prompt?.aliases?.forEach(({ alias, version }) => {\n      if (!result[version]) {\n        result[version] = [];\n      }\n      result[version].push(alias);\n    });\n    return result;\n  }, [promptDetailsData]);\n\n  const { EditAliasesModal, showEditAliasesModal } = useEditRegisteredModelAliasesModal({\n    model: promptDetailsData?.prompt || null,\n    onSuccess: refetch,\n    modalTitle: getAliasesModalTitle,\n    modalDescription: (\n      <FormattedMessage\n        // TODO: add a documentation link (\"Learn more\")\n        defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular prompt version.\"\n        description=\"Description for the edit aliases modal on the registered prompt details page\"\n      />\n    ),\n  });\n\n  // If the load error occurs, show not found page\n  if (promptLoadError) {\n    return <PromptNotFoundView promptName={promptName} />;\n  }\n\n  const breadcrumbs = (\n    <Breadcrumb>\n      <Breadcrumb.Item>\n        <Link to={Routes.promptsPageRoute}>Prompts</Link>\n      </Breadcrumb.Item>\n    </Breadcrumb>\n  );\n\n  if (isLoading) {\n    return (\n      <ScrollablePageWrapper>\n        <PromptsDetailsPage.Skeleton breadcrumbs={breadcrumbs} />\n      </ScrollablePageWrapper>\n    );\n  }\n\n  return (\n    <ScrollablePageWrapper css={{ overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n      <Spacer shrinks={false} />\n      <Header\n        breadcrumbs={breadcrumbs}\n        title={promptDetailsData?.prompt?.name}\n        buttons={\n          <>\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId=\"mlflow.prompts.details.actions\"\n                  icon={<OverflowIcon />}\n                  aria-label=\"More actions\"\n                />\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content>\n                <DropdownMenu.Item componentId=\"mlflow.prompts.details.actions.delete\" onClick={openDeleteModal}>\n                  <FormattedMessage\n                    defaultMessage=\"Delete\"\n                    description=\"Label for the delete prompt action on the registered prompt details page\"\n                  />\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n            <Button componentId=\"mlflow.prompts.details.create\" type=\"primary\" onClick={openCreateVersionModal}>\n              <FormattedMessage\n                defaultMessage=\"Create prompt version\"\n                description=\"Label for the create prompt action on the registered prompt details page\"\n              />\n            </Button>\n          </>\n        }\n      />\n      <PromptsListTableTagsBox onTagsUpdated={refetch} promptEntity={promptDetailsData?.prompt} />\n      <Spacer shrinks={false} />\n      <div css={{ flex: 1, display: 'flex', overflow: 'hidden' }}>\n        <div css={{ flex: showPreviewPane ? '0 0 320px' : 1, display: 'flex', flexDirection: 'column' }}>\n          <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n            <SegmentedControlGroup\n              name=\"mlflow.prompts.details.mode\"\n              componentId=\"mlflow.prompts.details.mode\"\n              value={mode}\n              disabled={isLoading}\n            >\n              <SegmentedControlButton value={PromptVersionsTableMode.PREVIEW} onClick={() => setPreviewMode()}>\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <ZoomMarqueeSelection />\n                  <FormattedMessage\n                    defaultMessage=\"Preview\"\n                    description=\"Label for the preview mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n              <SegmentedControlButton value={PromptVersionsTableMode.TABLE} onClick={setTableMode}>\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <TableIcon />{' '}\n                  <FormattedMessage\n                    defaultMessage=\"List\"\n                    description=\"Label for the list mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n              <SegmentedControlButton\n                disabled={Boolean(!promptDetailsData?.versions.length || promptDetailsData?.versions.length < 2)}\n                value={PromptVersionsTableMode.COMPARE}\n                onClick={setCompareMode}\n              >\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <ColumnsIcon />{' '}\n                  <FormattedMessage\n                    defaultMessage=\"Compare\"\n                    description=\"Label for the compare mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n            </SegmentedControlGroup>\n          </div>\n          <Spacer shrinks={false} size=\"sm\" />\n          <PromptVersionsTable\n            isLoading={isLoading}\n            registeredPrompt={promptDetailsData?.prompt}\n            promptVersions={promptDetailsData?.versions}\n            selectedVersion={viewState.selectedVersion}\n            comparedVersion={viewState.comparedVersion}\n            showEditAliasesModal={showEditAliasesModal}\n            aliasesByVersion={aliasesByVersion}\n            onUpdateSelectedVersion={setSelectedVersion}\n            onUpdateComparedVersion={setComparedVersion}\n            mode={mode}\n          />\n        </div>\n        {showPreviewPane && (\n          <div css={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n            <div css={{ borderLeft: `1px solid ${theme.colors.border}`, flex: 1, overflow: 'hidden', display: 'flex' }}>\n              {mode === PromptVersionsTableMode.PREVIEW && (\n                <PromptContentPreview\n                  promptVersion={selectedVersionEntity}\n                  onUpdatedContent={refetch}\n                  onDeletedVersion={async () => {\n                    await refetch().then(({ data }) => {\n                      if (!isEmpty(data?.versions) && data?.versions[0].version) {\n                        setSelectedVersion(data?.versions[0].version);\n                      } else {\n                        setTableMode();\n                      }\n                    });\n                  }}\n                  aliasesByVersion={aliasesByVersion}\n                  showEditAliasesModal={showEditAliasesModal}\n                  registeredPrompt={promptDetailsData?.prompt}\n                  showEditPromptVersionMetadataModal={showEditPromptVersionMetadataModal}\n                />\n              )}\n              {mode === PromptVersionsTableMode.COMPARE && (\n                <PromptContentCompare\n                  baselineVersion={selectedVersionEntity}\n                  comparedVersion={comparedVersionEntity}\n                  onSwitchSides={switchSides}\n                  onEditVersion={setPreviewMode}\n                  showEditAliasesModal={showEditAliasesModal}\n                  registeredPrompt={promptDetailsData?.prompt}\n                  aliasesByVersion={aliasesByVersion}\n                />\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      <Spacer shrinks={false} />\n      {EditAliasesModal}\n      {CreatePromptModal}\n      {DeletePromptModal}\n      {EditPromptVersionMetadataModal}\n    </ScrollablePageWrapper>\n  );\n};\n\nPromptsDetailsPage.Skeleton = function PromptsDetailsPageSkeleton({ breadcrumbs }: { breadcrumbs?: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <>\n      <Spacer shrinks={false} />\n      <Header\n        breadcrumbs={breadcrumbs}\n        title={<GenericSkeleton css={{ height: theme.general.heightBase, width: 200 }} />}\n        buttons={<GenericSkeleton css={{ height: theme.general.heightBase, width: 120 }} />}\n      />\n      <Spacer shrinks={false} />\n      <TableSkeleton lines={4} />\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex', gap: theme.spacing.lg }}>\n        <div css={{ flex: '0 0 320px' }}>\n          <TableSkeleton lines={6} />\n        </div>\n        <div css={{ flex: 1 }}>\n          <TableSkeleton lines={4} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default withErrorBoundary(\n  ErrorUtils.mlflowServices.EXPERIMENTS,\n  PromptsDetailsPage,\n  undefined,\n  PromptPageErrorHandler,\n);\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Modal } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RegisteredPrompt } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nexport const useDeletePromptModal = ({\n  registeredPrompt,\n  onSuccess,\n}: {\n  registeredPrompt?: RegisteredPrompt;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const { mutate } = useMutation<\n    unknown,\n    Error,\n    {\n      promptName: string;\n    }\n  >({\n    mutationFn: async ({ promptName }) => {\n      await RegisteredPromptsApi.deleteRegisteredPrompt(promptName);\n    },\n  });\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.delete_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={<FormattedMessage defaultMessage=\"Delete prompt\" description=\"A header for the delete prompt modal\" />}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A label for the confirm button in the delete prompt modal\"\n        />\n      }\n      okButtonProps={{ danger: true }}\n      onOk={async () => {\n        if (!registeredPrompt?.name) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            promptName: registeredPrompt.name,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n        setOpen(false);\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the delete prompt modal\"\n        />\n      }\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete the prompt?\"\n        description=\"A content for the delete prompt confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => setOpen(true);\n\n  return { DeletePromptModal: modalElement, openModal };\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport { RegisteredPromptVersion } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport { FormattedMessage } from 'react-intl';\n\ntype UpdatePromptVersionMetadataPayload = {\n  promptName: string;\n  promptVersion: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdatePromptVersionMetadataModal = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdatePromptVersionMetadataPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptName, promptVersion }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) =>\n          RegisteredPromptsApi.setRegisteredPromptVersionTag(promptName, promptVersion, key, value),\n        ),\n        ...toDelete.map(({ key }) =>\n          RegisteredPromptsApi.deleteRegisteredPromptVersionTag(promptName, promptVersion, key),\n        ),\n      ]);\n    },\n  });\n\n  const {\n    EditTagsModal: EditPromptVersionMetadataModal,\n    showEditTagsModal,\n    isLoading,\n  } = useEditKeyValueTagsModal<Pick<RegisteredPromptVersion, 'name' | 'version' | 'tags'>>({\n    title: (\n      <FormattedMessage\n        defaultMessage=\"Add/Edit Prompt Version Metadata\"\n        description=\"Title for a modal that allows the user to add or edit metadata tags on prompt versions.\"\n      />\n    ),\n    valueRequired: true,\n    saveTagsHandler: (promptVersion, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!promptVersion.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptName: promptVersion.name,\n            promptVersion: promptVersion.version,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptVersionMetadataModal = useCallback(\n    (promptVersion: RegisteredPromptVersion) =>\n      showEditTagsModal({\n        name: promptVersion.name,\n        version: promptVersion.version,\n        tags: promptVersion.tags?.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditPromptVersionMetadataModal, showEditPromptVersionMetadataModal, isLoading };\n};\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ScrollablePageWrapper } from '../../../../common/components/ScrollablePageWrapper';\n\nexport const PromptPageErrorHandler = ({ error }: { error?: Error }) => {\n  return (\n    <ScrollablePageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </ScrollablePageWrapper>\n  );\n};\n","import { Typography } from '@databricks/design-system';\nimport { ColumnDef } from '@tanstack/react-table';\nimport { FormattedMessage } from 'react-intl';\n\nexport const PromptsListTableVersionCell: ColumnDef<any>['cell'] = ({ row: { original }, getValue }) => {\n  const version = getValue<string>();\n\n  if (!version) {\n    return null;\n  }\n  return (\n    <Typography.Text>\n      <FormattedMessage\n        defaultMessage=\"Version {version}\"\n        description=\"Label for the version of a registered prompt in the registered prompts table\"\n        values={{\n          version,\n        }}\n      />\n    </Typography.Text>\n  );\n};\n","import { Alert, FormUI, Modal, RHFControlledComponents, Spacer } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { useCreateRegisteredPromptMutation } from './useCreateRegisteredPromptMutation';\nimport { getPromptContentTagValue } from '../utils';\nimport { CollapsibleSection } from '@mlflow/mlflow/src/common/components/CollapsibleSection';\nimport { EditableTagsTableView } from '@mlflow/mlflow/src/common/components/EditableTagsTableView';\n\nexport enum CreatePromptModalMode {\n  CreatePrompt = 'CreatePrompt',\n  CreatePromptVersion = 'CreatePromptVersion',\n}\n\nexport const useCreatePromptModal = ({\n  mode = CreatePromptModalMode.CreatePromptVersion,\n  registeredPrompt,\n  latestVersion,\n  onSuccess,\n}: {\n  mode: CreatePromptModalMode;\n  registeredPrompt?: RegisteredPrompt;\n  latestVersion?: RegisteredPromptVersion;\n  onSuccess?: (result: { promptName: string; promptVersion?: string }) => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n  const intl = useIntl();\n\n  const form = useForm({\n    defaultValues: {\n      draftName: '',\n      draftValue: '',\n      commitMessage: '',\n      tags: [] as { key: string; value: string }[],\n    },\n  });\n\n  const isCreatingNewPrompt = mode === CreatePromptModalMode.CreatePrompt;\n  const isCreatingPromptVersion = mode === CreatePromptModalMode.CreatePromptVersion;\n\n  const { mutate: mutateCreateVersion, error, reset: errorsReset, isLoading } = useCreateRegisteredPromptMutation();\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.create.modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={\n        isCreatingPromptVersion ? (\n          <FormattedMessage\n            defaultMessage=\"Create prompt version\"\n            description=\"A header for the create prompt version modal in the prompt management UI\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Create prompt\"\n            description=\"A header for the create prompt modal in the prompt management UI\"\n          />\n        )\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Create\"\n          description=\"A label for the confirm button in the create prompt modal in the prompt management UI\"\n        />\n      }\n      okButtonProps={{ loading: isLoading }}\n      onOk={form.handleSubmit(async (values) => {\n        const promptName =\n          isCreatingPromptVersion && registeredPrompt?.name ? registeredPrompt?.name : values.draftName;\n        mutateCreateVersion(\n          {\n            createPromptEntity: isCreatingNewPrompt,\n            content: values.draftValue,\n            commitMessage: values.commitMessage,\n            promptName,\n            tags: values.tags,\n          },\n          {\n            onSuccess: (data) => {\n              const promptVersion = data?.version;\n              onSuccess?.({ promptName, promptVersion });\n              setOpen(false);\n            },\n          },\n        );\n      })}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the prompt creation modal in the prompt management UI\"\n        />\n      }\n      size=\"wide\"\n    >\n      {error?.message && (\n        <>\n          <Alert componentId=\"mlflow.prompts.create.error\" closable={false} message={error.message} type=\"error\" />\n          <Spacer />\n        </>\n      )}\n      {isCreatingNewPrompt && (\n        <>\n          <FormUI.Label htmlFor=\"mlflow.prompts.create.name\">Name:</FormUI.Label>\n          <RHFControlledComponents.Input\n            control={form.control}\n            id=\"mlflow.prompts.create.name\"\n            componentId=\"mlflow.prompts.create.name\"\n            name=\"draftName\"\n            rules={{\n              required: {\n                value: true,\n                message: intl.formatMessage({\n                  defaultMessage: 'Name is required',\n                  description: 'A validation state for the prompt name in the prompt creation modal',\n                }),\n              },\n              pattern: {\n                value: /^[a-zA-Z0-9_\\-.]+$/,\n                message: intl.formatMessage({\n                  defaultMessage: 'Only alphanumeric characters, underscores, hyphens, and dots are allowed',\n                  description: 'A validation state for the prompt name format in the prompt creation modal',\n                }),\n              },\n            }}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Provide an unique prompt name',\n              description: 'A placeholder for the prompt name in the prompt creation modal',\n            })}\n            validationState={form.formState.errors.draftName ? 'error' : undefined}\n          />\n          {form.formState.errors.draftName && (\n            <FormUI.Message type=\"error\" message={form.formState.errors.draftName.message} />\n          )}\n          <Spacer />\n        </>\n      )}\n      <FormUI.Label htmlFor=\"mlflow.prompts.create.content\">Prompt:</FormUI.Label>\n      <RHFControlledComponents.TextArea\n        control={form.control}\n        id=\"mlflow.prompts.create.content\"\n        componentId=\"mlflow.prompts.create.content\"\n        name=\"draftValue\"\n        autoSize={{ minRows: 3, maxRows: 10 }}\n        rules={{\n          required: {\n            value: true,\n            message: intl.formatMessage({\n              defaultMessage: 'Prompt content is required',\n              description: 'A validation state for the prompt content in the prompt creation modal',\n            }),\n          },\n        }}\n        placeholder={intl.formatMessage({\n          defaultMessage: \"Type prompt content here. Wrap variables with double curly brace e.g. '{{' name '}}'.\",\n          description: 'A placeholder for the prompt content in the prompt creation modal',\n        })}\n        validationState={form.formState.errors.draftValue ? 'error' : undefined}\n      />\n      {form.formState.errors.draftValue && (\n        <FormUI.Message type=\"error\" message={form.formState.errors.draftValue.message} />\n      )}\n      <Spacer />\n      <FormUI.Label htmlFor=\"mlflow.prompts.create.commit_message\">Commit message (optional):</FormUI.Label>\n      <RHFControlledComponents.Input\n        control={form.control}\n        id=\"mlflow.prompts.create.commit_message\"\n        componentId=\"mlflow.prompts.create.commit_message\"\n        name=\"commitMessage\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => {\n    errorsReset();\n    if (mode === CreatePromptModalMode.CreatePromptVersion && latestVersion) {\n      form.reset({\n        commitMessage: '',\n        draftName: '',\n        draftValue: getPromptContentTagValue(latestVersion) ?? '',\n        tags: [],\n      });\n    }\n    setOpen(true);\n  };\n\n  return { CreatePromptModal: modalElement, openModal };\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { RegisteredPromptsApi } from '../api';\nimport { REGISTERED_PROMPT_CONTENT_TAG_KEY } from '../utils';\n\ntype UpdateContentPayload = {\n  promptName: string;\n  createPromptEntity?: boolean;\n  content: string;\n  commitMessage?: string;\n  tags: { key: string; value: string }[];\n};\n\nexport const useCreateRegisteredPromptMutation = () => {\n  const updateMutation = useMutation<{ version: string }, Error, UpdateContentPayload>({\n    mutationFn: async ({ promptName, createPromptEntity, content, commitMessage, tags }) => {\n      if (createPromptEntity) {\n        await RegisteredPromptsApi.createRegisteredPrompt(promptName);\n      }\n\n      const version = await RegisteredPromptsApi.createRegisteredPromptVersion(\n        promptName,\n        [{ key: REGISTERED_PROMPT_CONTENT_TAG_KEY, value: content }, ...tags],\n        commitMessage,\n      );\n\n      const newVersionNumber = version?.model_version?.version;\n      if (!newVersionNumber) {\n        throw new Error('Failed to create a new prompt version');\n      }\n      return { version: newVersionNumber };\n    },\n  });\n\n  return updateMutation;\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport { RegisteredPrompt } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\n\ntype UpdateTagsPayload = {\n  promptId: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdateRegisteredPromptTags = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdateTagsPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptId }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) => RegisteredPromptsApi.setRegisteredPromptTag(promptId, key, value)),\n        ...toDelete.map(({ key }) => RegisteredPromptsApi.deleteRegisteredPromptTag(promptId, key)),\n      ]);\n    },\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal<\n    Pick<RegisteredPrompt, 'name' | 'tags'>\n  >({\n    valueRequired: true,\n    saveTagsHandler: (prompt, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!prompt.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptId: prompt.name,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptTagsModal = useCallback(\n    (prompt: RegisteredPrompt) =>\n      showEditTagsModal({\n        name: prompt.name,\n        tags: prompt.tags.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditTagsModal, showEditPromptTagsModal, isLoading };\n};\n","import { Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport type { TagProps } from '@databricks/design-system';\n\ntype ModelVersionAliasTagProps = { value: string; compact?: boolean } & Pick<\n  TagProps,\n  'closable' | 'onClose' | 'className'\n>;\n\n// When displayed in compact mode (e.g. within <Select>), constrain the width to 160 pixels\nconst COMPACT_MODE_MAX_WIDTH = 160;\nconst REGULAR_MAX_WIDTH = 300;\nconst TAG_SYMBOL = '@';\n\nexport const ModelVersionAliasTag = ({\n  value,\n  closable,\n  onClose,\n  className,\n  compact = false,\n}: ModelVersionAliasTagProps) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionaliastag.tsx_23\"\n      css={{\n        fontWeight: theme.typography.typographyBoldFontWeight,\n        marginRight: theme.spacing.xs,\n      }}\n      className={className}\n      closable={closable}\n      onClose={onClose}\n      title={value}\n    >\n      <span\n        css={{\n          display: 'block',\n          whiteSpace: 'nowrap',\n          maxWidth: compact ? COMPACT_MODE_MAX_WIDTH : REGULAR_MAX_WIDTH,\n          textOverflow: 'ellipsis',\n          overflow: 'hidden',\n        }}\n      >\n        {TAG_SYMBOL}&nbsp;{value}\n      </span>\n    </Tag>\n  );\n};\n","import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ModelVersionTableAliasesCellProps {\n  aliases?: string[];\n  modelName: string;\n  version: string;\n  onAddEdit: () => void;\n  className?: string;\n}\n\nexport const ModelVersionTableAliasesCell = ({\n  aliases = [],\n  onAddEdit,\n  className,\n}: ModelVersionTableAliasesCellProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        maxWidth: 300,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        rowGap: theme.spacing.xs / 2,\n        columnGap: theme.spacing.xs,\n      }}\n    >\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_30\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add\"\n            description=\"Model registry > model version table > aliases column > 'add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {aliases.map((alias) => (\n            <ModelVersionAliasTag value={alias} key={alias} css={{ marginTop: theme.spacing.xs / 2 }} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_41\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Tag } from '@databricks/design-system';\n// @ts-expect-error TS(2306): File '/Users/elad.ossadon/universe4/mlflow/web/js/... Remove this comment to see the full error message\n// eslint-disable-next-line\nimport * as overrides from './constant-overrides'; // eslint-disable-line import/no-namespace\nimport { FormattedMessage } from 'react-intl';\nimport { ReadyIcon } from './utils';\n\nexport const Stages = {\n  NONE: 'None',\n  STAGING: 'Staging',\n  PRODUCTION: 'Production',\n  ARCHIVED: 'Archived',\n};\n\nexport const ACTIVE_STAGES = [Stages.STAGING, Stages.PRODUCTION];\n\nexport const StageLabels = {\n  [Stages.NONE]: 'None',\n  [Stages.STAGING]: 'Staging',\n  [Stages.PRODUCTION]: 'Production',\n  [Stages.ARCHIVED]: 'Archived',\n};\n\nexport const StageTagComponents = {\n  [Stages.NONE]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_37\">{StageLabels[Stages.NONE]}</Tag>\n  ),\n  [Stages.STAGING]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_38\" color=\"lemon\">\n      {StageLabels[Stages.STAGING]}\n    </Tag>\n  ),\n  [Stages.PRODUCTION]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_39\" color=\"lime\">\n      {StageLabels[Stages.PRODUCTION]}\n    </Tag>\n  ),\n  [Stages.ARCHIVED]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_40\" color=\"charcoal\">\n      {StageLabels[Stages.ARCHIVED]}\n    </Tag>\n  ),\n};\n\nexport interface ModelVersionActivity {\n  creation_timestamp?: number;\n  user_id?: string;\n  activity_type: ActivityTypes;\n  comment?: string;\n  last_updated_timestamp?: number;\n  from_stage?: string;\n  to_stage?: string;\n  system_comment?: string;\n  id?: string;\n}\n\nexport enum ActivityTypes {\n  APPLIED_TRANSITION = 'APPLIED_TRANSITION',\n  REQUESTED_TRANSITION = 'REQUESTED_TRANSITION',\n  SYSTEM_TRANSITION = 'SYSTEM_TRANSITION',\n  CANCELLED_REQUEST = 'CANCELLED_REQUEST',\n  APPROVED_REQUEST = 'APPROVED_REQUEST',\n  REJECTED_REQUEST = 'REJECTED_REQUEST',\n  NEW_COMMENT = 'NEW_COMMENT',\n}\n\nexport interface PendingModelVersionActivity {\n  type: ActivityTypes;\n  to_stage: string;\n}\n\nexport const EMPTY_CELL_PLACEHOLDER = <div style={{ marginTop: -12 }}>_</div>;\n\nexport const ModelVersionStatus = {\n  READY: 'READY',\n};\n\nexport const DefaultModelVersionStatusMessages = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage defaultMessage=\"Ready.\" description=\"Default status message for model versions that are ready\" />\n  ),\n};\n\nexport const modelVersionStatusIconTooltips = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage\n      defaultMessage=\"Ready\"\n      description=\"Tooltip text for ready model version status icon in model view page\"\n    />\n  ),\n};\n\nexport const ModelVersionStatusIcons = {\n  [ModelVersionStatus.READY]: <ReadyIcon />,\n};\n\nexport const MODEL_VERSION_STATUS_POLL_INTERVAL = 10000;\n\n// Number of registered models initially shown on the model registry list page\nconst REGISTERED_MODELS_PER_PAGE = 10;\n\n// Variant for compact tables (unified list pattern), this is\n// going to become a default soon\nexport const REGISTERED_MODELS_PER_PAGE_COMPACT = 25;\n\nexport const MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER = 75; // request size has a limit of 4KB\n\nexport const REGISTERED_MODELS_SEARCH_NAME_FIELD = 'name';\n\nexport const REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD = 'timestamp';\n\nexport const AntdTableSortOrder = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const archiveExistingVersionToolTipText = (currentStage: any) => (\n  <FormattedMessage\n    defaultMessage=\"Model versions in the `{currentStage}` stage will be moved to the\n     `Archived` stage.\"\n    description=\"Tooltip text for transitioning existing model versions in stage to archived\n     in the model versions page\"\n    values={{ currentStage: currentStage }}\n  />\n);\n\nexport const mlflowAliasesLearnMoreLink =\n  'https://mlflow.org/docs/latest/model-registry.html#using-registered-model-aliases';\n","import { Dispatch, useCallback, useState } from 'react';\n\nimport { LegacySelect, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A specialized <LegacySelect> component used for adding and removing aliases from model versions\n */\nexport const ModelVersionAliasSelect = ({\n  renderKey,\n  setDraftAliases,\n  existingAliases,\n  draftAliases,\n  version,\n  aliasToVersionMap,\n  disabled,\n}: {\n  renderKey: any;\n  disabled: boolean;\n  setDraftAliases: Dispatch<React.SetStateAction<string[]>>;\n  existingAliases: string[];\n  draftAliases: string[];\n  version: string;\n  aliasToVersionMap: Record<string, string>;\n}) => {\n  const intl = useIntl();\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n\n  const removeFromEditedAliases = useCallback(\n    (alias: string) => {\n      setDraftAliases((aliases) => aliases.filter((existingAlias) => existingAlias !== alias));\n    },\n    [setDraftAliases],\n  );\n\n  const updateEditedAliases = useCallback(\n    (aliases: string[]) => {\n      const sanitizedAliases = aliases\n        // Remove all characters that are not alphanumeric, underscores or hyphens\n        .map((alias) =>\n          alias\n            .replace(/[^\\w-]/g, '')\n            .toLowerCase()\n            .substring(0, 255),\n        )\n        // After sanitization, filter out invalid aliases\n        // so we won't get empty values\n        .filter((alias) => alias.length > 0);\n\n      // Remove duplicates that might result from varying letter case\n      const uniqueAliases = Array.from(new Set(sanitizedAliases));\n      setDraftAliases(uniqueAliases);\n      setDropdownVisible(false);\n    },\n    [setDraftAliases],\n  );\n\n  return (\n    // For the time being, we will use <LegacySelect /> under the hood,\n    // while <TypeaheadCombobox /> is still in the design phase.\n    <LegacySelect\n      disabled={disabled}\n      filterOption={(val, opt) => opt?.value.toLowerCase().startsWith(val.toLowerCase())}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Enter aliases (champion, challenger, etc)',\n        description: 'Model registry > model version alias select > Alias input placeholder',\n      })}\n      allowClear\n      css={{ width: '100%' }}\n      mode=\"tags\"\n      // There's a bug with current <LegacySelect /> implementation that causes the dropdown\n      // to detach from input vertically when its position on screen changes (in this case, it's\n      // caused by the conflict alerts). A small key={} hack ensures that the component is recreated\n      // and the dropdown is repositioned each time the alerts below are changed.\n      key={JSON.stringify(renderKey)}\n      onChange={updateEditedAliases}\n      dangerouslySetAntdProps={{\n        dropdownMatchSelectWidth: true,\n        tagRender: ({ value }) => (\n          <ModelVersionAliasTag\n            compact\n            css={{ marginTop: 2 }}\n            closable\n            onClose={() => removeFromEditedAliases(value.toString())}\n            value={value.toString()}\n          />\n        ),\n      }}\n      onDropdownVisibleChange={setDropdownVisible}\n      open={dropdownVisible}\n      value={draftAliases || []}\n    >\n      {existingAliases.map((alias) => (\n        <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n          <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n            <div css={{ flex: 1 }}>{alias}</div>\n            <div>\n              <FormattedMessage\n                defaultMessage=\"This version\"\n                description=\"Model registry > model version alias select > Indicator for alias of selected version\"\n              />\n            </div>\n          </div>\n        </LegacySelect.Option>\n      ))}\n      {Object.entries(aliasToVersionMap)\n        .filter(([, otherVersion]) => otherVersion !== version)\n        .map(([alias, aliasedVersion]) => (\n          <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n            <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n              <div css={{ flex: 1 }}>{alias}</div>\n              <div>\n                <FormattedMessage\n                  defaultMessage=\"Version {version}\"\n                  description=\"Model registry > model version alias select > Indicator for alias of a particular version\"\n                  values={{ version: aliasedVersion }}\n                />\n              </div>\n            </div>\n          </LegacySelect.Option>\n        ))}\n    </LegacySelect>\n  );\n};\n","import { isEqual } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { Alert, Button, LegacyForm, Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { ModelEntity } from '../../experiment-tracking/types';\nimport { ModelVersionAliasSelect } from '../components/aliases/ModelVersionAliasSelect';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../redux-types';\nimport { setModelVersionAliasesApi } from '../actions';\nimport { mlflowAliasesLearnMoreLink } from '../constants';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\n\nconst MAX_ALIASES_PER_MODEL_VERSION = 10;\n\n/**\n * Provides methods to initialize and display modal used to add and remove aliases from the model version\n */\nexport const useEditRegisteredModelAliasesModal = ({\n  model,\n  onSuccess,\n  modalTitle,\n  modalDescription,\n}: {\n  model: null | ModelEntity;\n  onSuccess?: () => void;\n  modalTitle?: (version: string) => React.ReactNode;\n  modalDescription?: React.ReactNode;\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [form] = LegacyForm.useForm();\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  // We will keep version's existing aliases in `existingAliases` state array\n  const [existingAliases, setExistingAliases] = useState<string[]>([]);\n  // Currently edited aliases will be kept in `draftAliases` state array\n  const [draftAliases, setDraftAliases] = useState<string[]>([]);\n  // Currently edited version\n  const [currentlyEditedVersion, setCurrentlyEditedVersion] = useState<string>('0');\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * Function used to invoke the modal and start editing aliases of the particular model version\n   */\n  const showEditAliasesModal = useCallback(\n    (versionNumber: string) => {\n      if (!model) {\n        return;\n      }\n\n      const modelVersionAliases =\n        model.aliases?.filter(({ version }) => version === versionNumber).map(({ alias }) => alias) || [];\n\n      if (versionNumber) {\n        setExistingAliases(modelVersionAliases);\n        setDraftAliases(modelVersionAliases);\n        setCurrentlyEditedVersion(versionNumber);\n        setShowModal(true);\n      }\n    },\n    [model],\n  );\n\n  // // Finds and stores alias values found in other model versions\n  const conflictedAliases = useMemo(() => {\n    if (!model?.aliases) {\n      return [];\n    }\n    const versionsWithAliases = model.aliases.reduce<{ version: string; aliases: string[] }[]>(\n      (aliasMap, aliasEntry) => {\n        if (!aliasMap.some(({ version }) => version === aliasEntry.version)) {\n          return [...aliasMap, { version: aliasEntry.version, aliases: [aliasEntry.alias] }];\n        }\n        aliasMap.find(({ version }) => version === aliasEntry.version)?.aliases.push(aliasEntry.alias);\n        return aliasMap;\n      },\n      [],\n    );\n    const otherVersionMappings = versionsWithAliases.filter(\n      ({ version: otherVersion }) => otherVersion !== currentlyEditedVersion,\n    );\n    return draftAliases\n      .map((alias) => ({\n        alias,\n        otherVersion: otherVersionMappings.find((version) =>\n          version.aliases?.find((alias_name) => alias_name === alias),\n        ),\n      }))\n      .filter(({ otherVersion }) => otherVersion);\n  }, [model?.aliases, draftAliases, currentlyEditedVersion]);\n\n  // Maps particular aliases to versions\n  const aliasToVersionMap = useMemo(\n    () =>\n      model?.aliases?.reduce<Record<string, string>>((result, { alias, version }) => {\n        return { ...result, [alias]: version };\n      }, {}) || {},\n    [model],\n  );\n\n  const save = () => {\n    if (!model) {\n      return;\n    }\n    setErrorMessage('');\n    dispatch(setModelVersionAliasesApi(model.name, currentlyEditedVersion, existingAliases, draftAliases))\n      .then(() => {\n        setShowModal(false);\n        onSuccess?.();\n      })\n      .catch((e: ErrorWrapper) => {\n        const extractedErrorMessage = e.getMessageField() || e.getUserVisibleError().toString() || e.text;\n        setErrorMessage(extractedErrorMessage);\n      });\n  };\n\n  // Indicates if there is any pending change to the alias set\n  const isPristine = isEqual(existingAliases.slice().sort(), draftAliases.slice().sort());\n  const isExceedingLimit = draftAliases.length > MAX_ALIASES_PER_MODEL_VERSION;\n\n  const isInvalid = isPristine || isExceedingLimit;\n\n  const EditAliasesModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_127\"\n      visible={showModal}\n      footer={\n        <div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_131\"\n            onClick={() => setShowModal(false)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Model registry > model version alias editor > Cancel editing aliases\"\n            />\n          </Button>\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_137\"\n            loading={false}\n            type=\"primary\"\n            disabled={isInvalid}\n            onClick={save}\n          >\n            <FormattedMessage\n              defaultMessage=\"Save aliases\"\n              description=\"Model registry > model version alias editor > Confirm change of aliases\"\n            />\n          </Button>\n        </div>\n      }\n      destroyOnClose\n      title={\n        modalTitle ? (\n          modalTitle(currentlyEditedVersion)\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit alias for model version {version}\"\n            description=\"Model registry > model version alias editor > Title of the update alias modal\"\n            values={{ version: currentlyEditedVersion }}\n          />\n        )\n      }\n      onCancel={() => setShowModal(false)}\n      confirmLoading={false}\n    >\n      <Typography.Paragraph>\n        {modalDescription ?? (\n          <FormattedMessage\n            defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular model version. <link>Learn more</link>\"\n            description=\"Explanation of registered model aliases\"\n            values={{\n              link: (chunks) => (\n                <a href={mlflowAliasesLearnMoreLink} rel=\"noreferrer\" target=\"_blank\">\n                  {chunks}\n                </a>\n              ),\n            }}\n          />\n        )}\n      </Typography.Paragraph>\n      <LegacyForm form={form} layout=\"vertical\">\n        <LegacyForm.Item>\n          <ModelVersionAliasSelect\n            disabled={false}\n            renderKey={conflictedAliases} // todo\n            aliasToVersionMap={aliasToVersionMap}\n            version={currentlyEditedVersion}\n            draftAliases={draftAliases}\n            existingAliases={existingAliases}\n            setDraftAliases={setDraftAliases}\n          />\n        </LegacyForm.Item>\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          {isExceedingLimit && (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_192\"\n              role=\"alert\"\n              message={\n                <FormattedMessage\n                  defaultMessage=\"You are exceeding a limit of {limit} aliases assigned to the single model version\"\n                  description=\"Model registry > model version alias editor > Warning about exceeding aliases limit\"\n                  values={{ limit: MAX_ALIASES_PER_MODEL_VERSION }}\n                />\n              }\n              type=\"error\"\n              closable={false}\n            />\n          )}\n          {conflictedAliases.map(({ alias, otherVersion }) => (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_206\"\n              role=\"alert\"\n              key={alias}\n              message={\n                <FormattedMessage\n                  defaultMessage='The \"{alias}\" alias is also being used on version {otherVersion}. Adding it to this version will remove it from version {otherVersion}.'\n                  description=\"Model registry > model version alias editor > Warning about reusing alias from the other version\"\n                  values={{ otherVersion: otherVersion?.version, alias }}\n                />\n              }\n              type=\"info\"\n              closable={false}\n            />\n          ))}\n          {errorMessage && (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_220\"\n              role=\"alert\"\n              message={errorMessage}\n              type=\"error\"\n              closable={false}\n            />\n          )}\n        </div>\n      </LegacyForm>\n    </Modal>\n  );\n\n  return { EditAliasesModal, showEditAliasesModal };\n};\n","/**\n * Adapted from `duotone-dark`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/duotone-dark.js\n */\n\nconst databricksDuotoneDarkTheme = {\n  'code[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n  },\n  'pre[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n    padding: '1em',\n    margin: '.5em 0',\n    overflow: 'auto',\n  },\n  'pre > code[class*=\"language-\"]': {\n    fontSize: '1em',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    padding: '.1em',\n    borderRadius: '.3em',\n  },\n  comment: {\n    color: '#6c6783',\n  },\n  prolog: {\n    color: '#6c6783',\n  },\n  doctype: {\n    color: '#6c6783',\n  },\n  cdata: {\n    color: '#6c6783',\n  },\n  punctuation: {\n    color: '#6c6783',\n  },\n  namespace: {\n    Opacity: '.7',\n  },\n  tag: {\n    color: '#3AACE2', // D\n  },\n  operator: {\n    color: '#3AACE2', // D\n  },\n  number: {\n    color: '#3AACE2', // D\n  },\n  property: {\n    color: '#5DFAFC', // D\n  },\n  function: {\n    color: '#5DFAFC', // D\n  },\n  'tag-id': {\n    color: '#eeebff',\n  },\n  selector: {\n    color: '#eeebff',\n  },\n  'atrule-id': {\n    color: '#eeebff',\n  },\n  'code.language-javascript': {\n    color: '#c4b9fe',\n  },\n  'attr-name': {\n    color: '#c4b9fe',\n  },\n  'code.language-css': {\n    color: '#ffffff', // D\n  },\n  'code.language-scss': {\n    color: '#ffffff', // D\n  },\n  boolean: {\n    color: '#ffffff', // D\n  },\n  string: {\n    color: '#ffffff', // D\n  },\n  entity: {\n    color: '#ffffff', // D\n    cursor: 'help',\n  },\n  url: {\n    color: '#ffffff', // D\n  },\n  '.language-css .token.string': {\n    color: '#ffffff', // D\n  },\n  '.language-scss .token.string': {\n    color: '#ffffff', // D\n  },\n  '.style .token.string': {\n    color: '#ffffff', // D\n  },\n  'attr-value': {\n    color: '#ffffff', // D\n  },\n  keyword: {\n    color: '#ffffff', // D\n  },\n  control: {\n    color: '#ffffff', // D\n  },\n  directive: {\n    color: '#ffffff', // D\n  },\n  unit: {\n    color: '#ffffff', // D\n  },\n  statement: {\n    color: '#ffffff', // D\n  },\n  regex: {\n    color: '#ffffff', // D\n  },\n  atrule: {\n    color: '#ffffff', // D\n  },\n  placeholder: {\n    color: '#ffffff', // D\n  },\n  variable: {\n    color: '#ffffff', // D\n  },\n  deleted: {\n    textDecoration: 'line-through',\n  },\n  inserted: {\n    borderBottom: '1px dotted #eeebff',\n    textDecoration: 'none',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n  important: {\n    fontWeight: 'bold',\n    color: '#c4b9fe',\n  },\n  bold: {\n    fontWeight: 'bold',\n  },\n  'pre > code.highlight': {\n    Outline: '.4em solid #8a75f5',\n    OutlineOffset: '.4em',\n  },\n  '.line-numbers.line-numbers .line-numbers-rows': {\n    borderRightColor: '#2c2937',\n  },\n  '.line-numbers .line-numbers-rows > span:before': {\n    color: '#3c3949',\n  },\n  '.line-highlight.line-highlight': {\n    background: 'linear-gradient(to right, rgba(224, 145, 66, 0.2) 70%, rgba(224, 145, 66, 0))',\n  },\n};\n\nexport default databricksDuotoneDarkTheme;\n","/**\n * Adapted from `material-light`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/material-light.js#L1\n *\n * This theme overwrites colors to be similiar to the `@databricks/editor` theme.\n */\n\nconst databricksLightTheme = {\n  'code[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n  },\n  'pre[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    overflow: 'auto',\n    position: 'relative',\n    margin: '0.5em 0',\n    padding: '1.25em 1em',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    whiteSpace: 'normal',\n    borderRadius: '0.2em',\n    padding: '0.1em',\n  },\n  '.language-css > code': {\n    color: '#f5871f', // D\n  },\n  '.language-sass > code': {\n    color: '#f5871f', // D\n  },\n  '.language-scss > code': {\n    color: '#f5871f', // D\n  },\n  '[class*=\"language-\"] .namespace': {\n    Opacity: '0.7',\n  },\n  atrule: {\n    color: '#7c4dff',\n  },\n  'attr-name': {\n    color: '#39adb5',\n  },\n  'attr-value': {\n    color: '#f6a434',\n  },\n  attribute: {\n    color: '#f6a434',\n  },\n  boolean: {\n    color: '#7c4dff', // D\n  },\n  builtin: {\n    color: '#39adb5',\n  },\n  cdata: {\n    color: '#39adb5',\n  },\n  char: {\n    color: '#39adb5',\n  },\n  class: {\n    color: '#39adb5',\n  },\n  'class-name': {\n    color: '#6182b8',\n  },\n  comment: {\n    color: '#8e908c', // D\n  },\n  constant: {\n    color: '#7c4dff', // D\n  },\n  deleted: {\n    color: '#e53935',\n  },\n  doctype: {\n    color: '#aabfc9',\n  },\n  entity: {\n    color: '#e53935',\n  },\n  function: {\n    color: '#4271ae', // D\n  },\n  hexcode: {\n    color: '#f5871f', // D\n  },\n  id: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  important: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  inserted: {\n    color: '#39adb5',\n  },\n  keyword: {\n    color: '#8959a8', // D\n  },\n  number: {\n    color: '#f5871f', // D\n  },\n  operator: {\n    color: '#3e999f', // D\n  },\n  prolog: {\n    color: '#aabfc9',\n  },\n  property: {\n    color: '#39adb5',\n  },\n  'pseudo-class': {\n    color: '#f6a434',\n  },\n  'pseudo-element': {\n    color: '#f6a434',\n  },\n  punctuation: {\n    color: 'rgb(77, 77, 76)', // D\n  },\n  regex: {\n    color: '#6182b8',\n  },\n  selector: {\n    color: '#e53935',\n  },\n  string: {\n    color: '#3ba85f', // D\n  },\n  symbol: {\n    color: '#7c4dff',\n  },\n  tag: {\n    color: '#e53935',\n  },\n  unit: {\n    color: '#f5871f', // D\n  },\n  url: {\n    color: '#e53935',\n  },\n  variable: {\n    color: '#c72d4c', // D\n  },\n};\n\nexport default databricksLightTheme;\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\n\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\n\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\n\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\n\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'python' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Whether or not to wrap long lines\n   */\n  wrapLongLines?: boolean;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n\n  return (\n    <SyntaxHighlighter\n      showLineNumbers={showLineNumbers}\n      lineNumberStyle={lineNumberStyle}\n      language={language}\n      style={themesStyles[theme]}\n      customStyle={customStyle}\n      codeTagProps={{\n        style: pick(style, 'backgroundColor'),\n      }}\n      wrapLongLines={wrapLongLines}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n"],"names":["_ref2","name","styles","ScrollablePageWrapper","_ref","children","className","_jsx","PageWrapper","css","ErrorUtils","mlflowServices","MODEL_REGISTRY","EXPERIMENTS","MODEL_SERVING","RUN_TRACKING","ErrorFallback","Empty","title","FormattedMessage","id","defaultMessage","description","image","DangerIcon","CustomErrorBoundary","customFallbackComponent","logErrorToConsole","error","info","console","componentStack","ErrorBoundary","onError","FallbackComponent","fallback","withErrorBoundary","service","Component","errorMessage","props","ShowArtifactCodeSnippet","code","theme","useDesignSystemTheme","_jsxs","CopyButton","_css","zIndex","position","top","spacing","xs","right","showLabel","copyText","icon","CopyIcon","CodeSnippet","language","showLineNumbers","style","padding","sm","color","colors","textPrimary","backgroundColor","backgroundSecondary","whiteSpace","wrapLongLines","queryFn","async","_versionsResponse$mod","queryKey","promptName","detailsResponse","versionsResponse","Promise","all","RegisteredPromptsApi","getPromptDetails","getPromptVersions","prompt","registered_model","versions","model_versions","PromptVersionsTableAliasesCell","getValue","row","original","table","options","meta","showEditAliasesModal","aliasesByVersion","registeredPrompt","mvAliases","version","ModelVersionTableAliasesCell","modelName","aliases","onAddEdit","PromptVersionsDiffSelectorButton","isSelectedFirstToCompare","isSelectedSecondToCompare","onSelectFirst","onSelectSecond","intl","useIntl","width","general","buttonHeight","display","alignItems","paddingRight","height","buttonInnerHeight","gap","flex","Tooltip","componentId","content","delayDuration","side","onClick","role","formatMessage","border","actionDefaultBorderFocus","actionDefaultBorderDefault","borderRight","marginLeft","borderTopLeftRadius","borders","borderRadiusMd","borderBottomLeftRadius","actionDefaultBackgroundPress","actionDefaultBackgroundDefault","cursor","actionDefaultBackgroundHover","borderLeft","borderTopRightRadius","borderBottomRightRadius","_ref3","_ref4","PromptVersionsTable","promptVersions","onUpdateComparedVersion","isLoading","onUpdateSelectedVersion","comparedVersion","selectedVersion","mode","columns","useMemo","resultColumns","header","accessorKey","cell","PromptsListTableVersionCell","PromptVersionsTableMode","TABLE","push","accessorFn","creation_timestamp","Utils","formatTimestamp","useReactTable","data","getRowId","getCoreRowModel","Table","scrollable","empty","length","TableRow","isHeader","getLeafHeaders","map","TableHeader","flexRender","column","columnDef","getContext","TableSkeletonRows","getRowModel","rows","isSelectedSingle","PREVIEW","includes","COMPARE","showCursorForEntireRow","heightBase","getAllCells","TableCell","md","ChevronRightIcon","promptDetailsViewStateReducer","state","action","type","PromptVersionRuns","isLoadingRuns","runIds","runInfoMap","showAll","setShowAll","useState","visibleCount","Math","min","hasMore","_Fragment","Typography","Text","bold","ParagraphSkeleton","flexWrap","slice","runId","index","runInfo","isNil","experimentId","runUuid","runName","Link","to","Routes","getRunPageRoute","Button","size","values","count","PromptVersionTags","tags","onEditVersionMetadata","shouldAllowEditingMetadata","editButton","PencilIcon","tag","KeyValueTag","key","Hint","PromptVersionMetadata","_registeredPromptVers3","registeredPromptVersion","onEditVersion","showEditPromptVersionMetadataModal","isBaseline","_registeredPromptVers","_registeredPromptVers2","tagValue","find","REGISTERED_PROMPT_SOURCE_RUN_IDS","value","split","trim","runUuids","arguments","undefined","queryResults","useQueries","queries","MlflowService","getRun","run_id","transformGetRunResponse","e","forEach","queryResult","_queryResult$data","_queryResult$data$run","run","some","usePromptRunsInfo","visibleTagList","filter","isUserFacingTag","versionElement","gridTemplateColumns","gridAutoRows","typography","lineHeightLg","rowGap","columnGap","PROMPT_VARIABLE_REGEX","PromptContentPreview","promptVersion","onUpdatedContent","onDeletedVersion","getPromptContentTagValue","DeletePromptModal","openModal","openDeleteModal","onSuccess","open","setOpen","mutate","useMutation","mutationFn","deleteRegisteredPromptVersion","Modal","visible","onCancel","okText","okButtonProps","danger","onOk","cancelText","useDeletePromptVersionModal","showUsageExample","setShowUsageExample","variableNames","variables","match","exec","variable","uniq","buildCodeSnippetContent","paddingTop","borderRadius","borderRadiusSm","overflow","flexDirection","Title","level","TrashIcon","PlayIcon","Spacer","shrinks","codeSnippetContent","join","_ref5","_ref6","_ref7","_ref8","_ref9","PromptContentCompare","baselineVersion","onSwitchSides","baselineValue","comparedValue","diff","_diffWords","diffWords","addedBackground","isDarkMode","green700","green300","removedBackground","red700","red300","baseline","compared","paddingLeft","heightSm","ExpandMoreIcon","part","added","removed","textDecoration","PromptsListTableTagsBox","promptEntity","onTagsUpdated","EditTagsModal","showEditPromptTagsModal","useUpdateRegisteredPromptTags","containsTags","paddingBottom","marginRight","PromptNotFoundView","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","promptsPageRoute","getAliasesModalTitle","PromptsDetailsPage","_promptDetailsData$pr3","useParams","navigate","useNavigate","invariant","promptDetailsData","refetch","promptLoadError","_queryResult$error","useQuery","retry","usePromptDetailsQuery","CreatePromptModal","openCreateVersionModal","useCreatePromptModal","CreatePromptModalMode","CreatePromptVersion","latestVersion","first","setPreviewMode","deleteRegisteredPrompt","useDeletePromptModal","EditPromptVersionMetadataModal","updateMutation","toAdd","toDelete","setRegisteredPromptVersionTag","deleteRegisteredPromptVersionTag","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","saveTagsHandler","currentTags","newTags","addedOrModifiedTags","deletedTags","diffCurrentAndNewTags","resolve","reject","useCallback","_promptVersion$tags","useUpdatePromptVersionMetadataModal","setCompareMode","setTableMode","switchSides","viewState","setSelectedVersion","setComparedVersion","dispatchViewMode","useReducer","versionEntity","firstVersion","_first","_promptDetailsData$ve","usePromptDetailsPageViewState","isEmptyVersions","showPreviewPane","selectedVersionEntity","comparedVersionEntity","_promptDetailsData$pr","_promptDetailsData$pr2","result","alias","EditAliasesModal","useEditRegisteredModelAliasesModal","model","modalTitle","modalDescription","breadcrumbs","Breadcrumb","Item","Skeleton","Header","buttons","DropdownMenu","Root","Trigger","asChild","OverflowIcon","Content","SegmentedControlGroup","disabled","SegmentedControlButton","ZoomMarqueeSelection","TableIcon","Boolean","ColumnsIcon","then","isEmpty","_ref10","_ref11","GenericSkeleton","TableSkeleton","lines","lg","PromptPageErrorHandler","_error$message","message","form","useForm","defaultValues","draftName","draftValue","commitMessage","isCreatingNewPrompt","CreatePrompt","isCreatingPromptVersion","mutateCreateVersion","reset","errorsReset","_version$model_versio","createPromptEntity","createRegisteredPrompt","createRegisteredPromptVersion","REGISTERED_PROMPT_CONTENT_TAG_KEY","newVersionNumber","model_version","Error","loading","handleSubmit","Alert","closable","FormUI","Label","htmlFor","RHFControlledComponents","Input","control","rules","required","pattern","placeholder","validationState","formState","errors","Message","TextArea","autoSize","minRows","maxRows","_getPromptContentTagV","promptId","setRegisteredPromptTag","deleteRegisteredPromptTag","ModelVersionAliasTag","onClose","compact","Tag","fontWeight","typographyBoldFontWeight","maxWidth","textOverflow","marginTop","Stages","NONE","STAGING","PRODUCTION","ARCHIVED","ACTIVE_STAGES","StageLabels","StageTagComponents","ActivityTypes","ModelVersionStatus","READY","DefaultModelVersionStatusMessages","modelVersionStatusIconTooltips","ModelVersionStatusIcons","ReadyIcon","MODEL_VERSION_STATUS_POLL_INTERVAL","REGISTERED_MODELS_PER_PAGE_COMPACT","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","REGISTERED_MODELS_SEARCH_NAME_FIELD","REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD","AntdTableSortOrder","ASC","DESC","archiveExistingVersionToolTipText","currentStage","mlflowAliasesLearnMoreLink","ModelVersionAliasSelect","renderKey","setDraftAliases","existingAliases","draftAliases","aliasToVersionMap","dropdownVisible","setDropdownVisible","removeFromEditedAliases","existingAlias","updateEditedAliases","sanitizedAliases","replace","toLowerCase","substring","uniqueAliases","Array","from","Set","LegacySelect","filterOption","val","opt","startsWith","allowClear","onChange","dangerouslySetAntdProps","dropdownMatchSelectWidth","tagRender","toString","onDropdownVisibleChange","Option","Object","entries","otherVersion","aliasedVersion","JSON","stringify","showModal","setShowModal","LegacyForm","setErrorMessage","setExistingAliases","currentlyEditedVersion","setCurrentlyEditedVersion","dispatch","useDispatch","versionNumber","_model$aliases","modelVersionAliases","conflictedAliases","versionsWithAliases","reduce","aliasMap","aliasEntry","_aliasMap$find","otherVersionMappings","_version$aliases","alias_name","_model$aliases2","isPristine","isEqual","sort","isExceedingLimit","isInvalid","footer","save","setModelVersionAliasesApi","catch","extractedErrorMessage","getMessageField","getUserVisibleError","text","destroyOnClose","confirmLoading","Paragraph","link","chunks","href","rel","target","layout","limit","fontFamily","fontSize","lineHeight","direction","textAlign","wordSpacing","wordBreak","MozTabSize","OTabSize","tabSize","WebkitHyphens","MozHyphens","msHyphens","hyphens","background","margin","textShadow","comment","prolog","doctype","cdata","punctuation","namespace","Opacity","operator","number","property","function","selector","boolean","string","entity","url","keyword","directive","unit","statement","regex","atrule","deleted","inserted","borderBottom","italic","fontStyle","important","Outline","OutlineOffset","borderRightColor","wordWrap","attribute","builtin","char","class","constant","hexcode","symbol","SyntaxHighlighter","registerLanguage","python","json","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","actions","lineNumberStyle","customStyle","codeTagProps","pick"],"sourceRoot":""}