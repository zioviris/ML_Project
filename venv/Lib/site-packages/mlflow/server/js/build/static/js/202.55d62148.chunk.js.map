{"version":3,"file":"static/js/202.55d62148.chunk.js","mappings":"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","sources":["common/components/ScrollablePageWrapper.tsx","common/forms/validations.ts","common/utils/LocalStorageUtils.ts","common/utils/withRouterNext.tsx","experiment-tracking/components/modals/GenericInputModal.tsx","model-registry/components/CreateModelForm.tsx","model-registry/components/CreateModelModal.tsx","model-registry/components/CreateModelButton.tsx","model-registry/components/model-list/ModelListFilters.tsx","model-registry/components/model-list/ModelTableCellRenderers.tsx","model-registry/components/aliases/ModelsTableAliasedVersionsCell.tsx","model-registry/components/model-list/ModelListTable.tsx","model-registry/components/ModelListView.tsx","model-registry/components/ModelListPage.tsx","model-registry/components/ModelListPageWrapper.tsx","model-registry/constants.tsx","model-registry/utils/SearchUtils.ts","shared/building_blocks/PageHeader.tsx","shared/building_blocks/PreviewBadge.tsx"],"sourcesContent":["import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper\n      // Subtract header height\n      css={{ height: 'calc(100% - 60px)' }}\n      className={className}\n    >\n      {children}\n    </PageWrapper>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { MlflowService } from '../../experiment-tracking/sdk/MlflowService';\nimport { Services as ModelRegistryService } from '../../model-registry/services';\n\nexport const getExperimentNameValidator = (getExistingExperimentNames: any) => {\n  return (rule: any, value: any, callback: any) => {\n    if (!value) {\n      // no need to execute below validations when no value is entered\n      // eslint-disable-next-line callback-return\n      callback(undefined);\n    } else if (getExistingExperimentNames().includes(value)) {\n      // getExistingExperimentNames returns the names of all active experiments\n      // check whether the passed value is part of the list\n      // eslint-disable-next-line callback-return\n      callback(`Experiment \"${value}\" already exists.`);\n    } else {\n      // on-demand validation whether experiment already exists in deleted state\n      MlflowService.getExperimentByName({ experiment_name: value })\n        .then((res) =>\n          callback(`Experiment \"${value}\" already exists in deleted state.\n                                 You can restore the experiment, or permanently delete the\n                                 experiment from the .trash folder (under tracking server's\n                                 root folder) in order to use this experiment name again.`),\n        )\n        .catch((e) => callback(undefined)); // no experiment returned\n    }\n  };\n};\n\nexport const modelNameValidator = (rule: any, name: any, callback: any) => {\n  if (!name) {\n    callback(undefined);\n    return;\n  }\n\n  ModelRegistryService.getRegisteredModel({ name: name })\n    .then(() => callback(`Model \"${name}\" already exists.`))\n    .catch((e) => callback(undefined));\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n/**\n * Utils for working with local storage.\n */\nexport default class LocalStorageUtils {\n  /**\n   * Protocol version of MLflow's local storage. Should be incremented on any breaking change in how\n   * data persisted in local storage is used, to prevent old (invalid) cached data from being loaded\n   * and breaking the application.\n   */\n  static version = '1.1';\n\n  /**\n   * Return a LocalStorageStore corresponding to the specified component and ID, where the ID\n   * can be used to disambiguate between multiple instances of cached data for the same component\n   * (e.g. cached data for multiple experiments).\n   */\n  static getStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'localStorage');\n  }\n\n  static getSessionScopedStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'sessionStorage');\n  }\n}\n\n/**\n * Interface to browser local storage that allows for setting key-value pairs under the specified\n * \"scope\".\n */\nclass LocalStorageStore {\n  constructor(scope: any, type: any) {\n    this.scope = scope;\n    if (type === 'localStorage') {\n      this.storageObj = window.localStorage;\n    } else {\n      this.storageObj = window.sessionStorage;\n    }\n  }\n  static reactComponentStateKey = 'ReactComponentState';\n\n  scope: any;\n  storageObj: any;\n\n  /**\n   * Loads React component state cached in local storage into a vanilla JS object.\n   */\n  loadComponentState() {\n    const storedVal = this.getItem(LocalStorageStore.reactComponentStateKey);\n    if (storedVal) {\n      return JSON.parse(storedVal);\n    }\n    return {};\n  }\n\n  /**\n   * Save React component state in local storage.\n   * @param stateRecord: Immutable.Record instance or plain object containing component state.\n   */\n  saveComponentState(stateRecord: any) {\n    const targetValue = typeof stateRecord.toJSON === 'function' ? stateRecord.toJSON() : stateRecord;\n    this.setItem(LocalStorageStore.reactComponentStateKey, JSON.stringify(targetValue));\n  }\n\n  /**\n   * Helper method for constructing a scoped key to use for setting/getting values in\n   * local storage.\n   */\n  withScopePrefix(key: any) {\n    return ['MLflowLocalStorage', LocalStorageUtils.version, this.scope, key].join('-');\n  }\n\n  /** Save the specified key-value pair in local storage. */\n  setItem(key: any, value: any) {\n    this.storageObj.setItem(this.withScopePrefix(key), value);\n  }\n\n  /** Fetch the value corresponding to the passed-in key from local storage. */\n  getItem(key: any) {\n    return this.storageObj.getItem(this.withScopePrefix(key));\n  }\n}\n","import React from 'react';\n\nimport {\n  type Location,\n  type Params as RouterDOMParams,\n  type NavigateOptions,\n  type To,\n  useLocation,\n  useNavigate,\n  useParams,\n} from './RoutingUtils';\n\nexport interface WithRouterNextProps<Params extends RouterDOMParams = RouterDOMParams> {\n  navigate: ReturnType<typeof useNavigate>;\n  location: Location;\n  params: Params;\n}\n\n/**\n * This HoC serves as a retrofit for class components enabling them to use\n * react-router v6's location, navigate and params being injected via props.\n */\nexport const withRouterNext =\n  <\n    T,\n    Props extends JSX.IntrinsicAttributes &\n      JSX.LibraryManagedAttributes<React.ComponentType<T>, React.PropsWithChildren<T>>,\n    Params extends RouterDOMParams = RouterDOMParams,\n  >(\n    Component: React.ComponentType<T>,\n  ) =>\n  (\n    props: Omit<\n      Props,\n      | 'location'\n      | 'navigate'\n      | 'params'\n      | 'navigationType'\n      /* prettier-ignore*/\n    >,\n  ) => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const params = useParams<Params>();\n\n    return (\n      <Component\n        /* prettier-ignore */\n        params={params as Params}\n        location={location}\n        navigate={navigate}\n        {...(props as Props)}\n      />\n    );\n  };\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\n\ntype Props = {\n  okText?: string;\n  cancelText?: string;\n  isOpen?: boolean;\n  onClose: (...args: any[]) => any;\n  onCancel?: (...args: any[]) => any;\n  className?: string;\n  footer?: React.ReactNode;\n  handleSubmit: (...args: any[]) => any;\n  title: React.ReactNode;\n};\n\ntype State = any;\n\n/**\n * Generic modal that has a title and an input field with a save/submit button.\n * As of now, it is used to display the 'Rename Run' and 'Rename Experiment' modals.\n */\nexport class GenericInputModal extends Component<Props, State> {\n  state = {\n    isSubmitting: false,\n  };\n\n  formRef = React.createRef();\n\n  onSubmit = async () => {\n    this.setState({ isSubmitting: true });\n    try {\n      const values = await (this as any).formRef.current.validateFields();\n\n      // call handleSubmit from parent component, pass form values\n      // handleSubmit is expected to return a promise\n      return await this.props\n        .handleSubmit(values)\n        .then(this.resetAndClearModalForm)\n        .catch(this.handleSubmitFailure)\n        .finally(this.onRequestCloseHandler);\n    } catch (e) {\n      this.setState({ isSubmitting: false });\n      return Promise.reject(e);\n    }\n  };\n\n  resetAndClearModalForm = () => {\n    this.setState({ isSubmitting: false });\n    (this as any).formRef.current.resetFields();\n  };\n\n  handleSubmitFailure = (e: any) => {\n    this.setState({ isSubmitting: false });\n    Utils.logErrorAndNotifyUser(e);\n  };\n\n  onRequestCloseHandler = () => {\n    if (!this.state.isSubmitting) {\n      this.resetAndClearModalForm();\n      this.props.onClose();\n    }\n  };\n\n  handleCancel = () => {\n    this.onRequestCloseHandler();\n    // Check for optional `onCancel` method prop.\n    if (this.props.onCancel !== undefined) {\n      this.props.onCancel();\n    }\n  };\n\n  render() {\n    const { isSubmitting } = this.state;\n    const { okText, cancelText, isOpen, footer, children } = this.props;\n\n    // add props (ref) to passed component\n    const displayForm = React.Children.map(children, (child) => {\n      // Checking isValidElement is the safe way and avoids a typescript\n      // error too.\n      if (React.isValidElement(child)) {\n        // @ts-expect-error TODO: fix this\n        return React.cloneElement(child, { innerRef: this.formRef });\n      }\n      return child;\n    });\n\n    return (\n      <Modal\n        data-testid=\"mlflow-input-modal\"\n        className={this.props.className}\n        title={this.props.title}\n        // @ts-expect-error TS(2322): Type '{ children: {}[] | null | undefined; \"data-t... Remove this comment to see the full error message\n        width={540}\n        visible={isOpen}\n        onOk={this.onSubmit}\n        okText={okText}\n        cancelText={cancelText}\n        confirmLoading={isSubmitting}\n        onCancel={this.handleCancel}\n        footer={footer}\n        centered\n      >\n        {displayForm}\n      </Modal>\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\n\nimport { LegacyForm, Input } from '@databricks/design-system';\nimport { ModelRegistryDocUrl } from '../../common/constants';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nexport const MODEL_NAME_FIELD = 'modelName';\n\ntype Props = {\n  visible: boolean;\n  validator?: (...args: any[]) => any;\n  intl?: any;\n  innerRef: any;\n};\n\n/**\n * Component that renders a form for creating a new experiment.\n */\nclass CreateModelFormImpl extends Component<Props> {\n  static getLearnMoreLinkUrl = () => ModelRegistryDocUrl;\n\n  render() {\n    const learnMoreLinkUrl = CreateModelFormImpl.getLearnMoreLinkUrl();\n    return (\n      // @ts-expect-error TS(2322)\n      <LegacyForm ref={this.props.innerRef} layout=\"vertical\" data-testid=\"create-model-form-modal\">\n        <LegacyForm.Item\n          name={MODEL_NAME_FIELD}\n          label={this.props.intl.formatMessage({\n            defaultMessage: 'Model name',\n            description: 'Text for form title on creating model in the model registry',\n          })}\n          rules={[\n            {\n              required: true,\n              message: this.props.intl.formatMessage({\n                defaultMessage: 'Please input a name for the new model.',\n                description: 'Error message for having no input for creating models in the model registry',\n              }),\n            },\n            { validator: this.props.validator },\n          ]}\n        >\n          <Input componentId=\"codegen_mlflow_app_src_model-registry_components_createmodelform.tsx_62\" autoFocus />\n        </LegacyForm.Item>\n        <p className=\"create-modal-explanatory-text\">\n          <FormattedMessage\n            defaultMessage=\"After creation, you can register logged models as new versions.&nbsp;\"\n            description=\"Text for form description on creating model in the model registry\"\n          />\n          <FormattedMessage\n            defaultMessage=\"<link>Learn more</link>\"\n            description=\"Learn more link on the form for creating model in the model registry\"\n            values={{\n              link: (\n                chunks: any, // Reported during ESLint upgrade\n              ) => (\n                // eslint-disable-next-line react/jsx-no-target-blank\n                <a href={learnMoreLinkUrl} target=\"_blank\">\n                  {chunks}\n                </a>\n              ),\n            }}\n          />\n          .\n        </p>\n      </LegacyForm>\n    );\n  }\n}\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const CreateModelForm = injectIntl(CreateModelFormImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { GenericInputModal } from '../../experiment-tracking/components/modals/GenericInputModal';\nimport { CreateModelForm, MODEL_NAME_FIELD } from './CreateModelForm';\nimport { connect } from 'react-redux';\nimport { createRegisteredModelApi } from '../actions';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport { debounce } from 'lodash';\nimport { modelNameValidator } from '../../common/forms/validations';\nimport { IntlShape, injectIntl } from 'react-intl';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\n\ntype Props = WithRouterNextProps & {\n  createRegisteredModelApi: (...args: any[]) => any;\n  modalVisible: boolean;\n  hideModal: (...args: any[]) => any;\n  navigateBackOnCancel?: boolean;\n  intl: IntlShape;\n};\n\nclass CreateModelModalImpl extends React.Component<Props> {\n  createRegisteredModelRequestId = getUUID();\n\n  handleCreateRegisteredModel = async (values: any) => {\n    const result = await this.props.createRegisteredModelApi(\n      values[MODEL_NAME_FIELD],\n      this.createRegisteredModelRequestId,\n    );\n    const newModel = result.value && result.value.registered_model;\n    if (newModel) {\n      // Jump to the page of newly created model. Here we are yielding to next tick to allow modal\n      // and form to finish closing and cleaning up.\n      setTimeout(() => this.props.navigate(ModelRegistryRoutes.getModelPageRoute(newModel.name)));\n    }\n  };\n\n  debouncedModelNameValidator = debounce(modelNameValidator, 400);\n\n  handleOnCancel = () => {\n    if (this.props.navigateBackOnCancel) {\n      this.props.navigate(ModelRegistryRoutes.modelListPageRoute);\n    }\n  };\n\n  render() {\n    const { modalVisible, hideModal } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Create Model',\n          description: 'Title text for creating model in the model registry',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Create',\n          description: 'Create button text for creating model in the model registry',\n        })}\n        cancelText={this.props.intl.formatMessage({\n          defaultMessage: 'Cancel',\n          description: 'Cancel button text for creating model in the model registry',\n        })}\n        isOpen={modalVisible}\n        handleSubmit={this.handleCreateRegisteredModel}\n        onClose={hideModal}\n        onCancel={this.handleOnCancel}\n      >\n        {/* @ts-expect-error TS(2322): Type '{ visible: boolean; validator: ((rule: any, ... Remove this comment to see the full error message */}\n        <CreateModelForm visible={modalVisible} validator={this.debouncedModelNameValidator} />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  createRegisteredModelApi,\n};\n\nconst CreateModelModalWithRouter = withRouterNext(\n  connect(undefined, mapDispatchToProps)(injectIntl<'intl', Props>(CreateModelModalImpl)),\n);\n\nexport const CreateModelModal = withErrorBoundary(ErrorUtils.mlflowServices.MODEL_REGISTRY, CreateModelModalWithRouter);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Button } from '@databricks/design-system';\nimport { CreateModelModal } from './CreateModelModal';\nimport { FormattedMessage } from 'react-intl';\n\ntype Props = {\n  buttonType?: string;\n  buttonText?: React.ReactNode;\n};\n\ntype State = any;\n\nexport class CreateModelButton extends React.Component<Props, State> {\n  state = {\n    modalVisible: false,\n  };\n\n  hideModal = () => {\n    this.setState({ modalVisible: false });\n  };\n\n  showModal = () => {\n    this.setState({ modalVisible: true });\n  };\n\n  render() {\n    const { modalVisible } = this.state;\n    const buttonType = this.props.buttonType || 'primary';\n    const buttonText = this.props.buttonText || (\n      <FormattedMessage defaultMessage=\"Create Model\" description=\"Create button to register a new model\" />\n    );\n\n    return (\n      <div css={styles.wrapper}>\n        <Button\n          className=\"create-model-btn\"\n          css={styles.getButtonSize(buttonType)}\n          // @ts-expect-error TS(2322): Type 'string' is not assignable to type '\"link\" | ... Remove this comment to see the full error message\n          type={buttonType}\n          onClick={this.showModal}\n          data-testid=\"create-model-button\"\n        >\n          {buttonText}\n        </Button>\n        <CreateModelModal modalVisible={modalVisible} hideModal={this.hideModal} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  getButtonSize: (buttonType: any) =>\n    buttonType === 'primary'\n      ? {\n          height: '40px',\n          width: 'fit-content',\n        }\n      : { padding: '0px' },\n  wrapper: { display: 'inline' },\n};\n","import {\n  LegacyTooltip,\n  TableFilterLayout,\n  Button,\n  TableFilterInput,\n  InfoIcon,\n  Popover,\n  Typography,\n} from '@databricks/design-system';\nimport { useEffect, useState } from 'react';\nimport { FormattedMessage, defineMessage, useIntl } from 'react-intl';\nimport { ExperimentSearchSyntaxDocUrl } from '../../../common/constants';\n\nexport interface ModelListFiltersProps {\n  searchFilter: string;\n  onSearchFilterChange: (newValue: string) => void;\n  isFiltered: boolean;\n}\n\nexport const ModelSearchInputHelpTooltip = ({\n  exampleEntityName = 'my_model_name',\n}: {\n  exampleEntityName?: string;\n}) => {\n  const { formatMessage } = useIntl();\n  const tooltipIntroMessage = defineMessage({\n    defaultMessage:\n      'To search by tags or by names and tags, use a simplified version{newline}of the SQL {whereBold} clause.',\n    description: 'Tooltip string to explain how to search models from the model registry table',\n  });\n\n  // Tooltips are not expected to contain links.\n  const labelText = formatMessage(tooltipIntroMessage, { newline: ' ', whereBold: 'WHERE' });\n\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_model-registry_components_model-list_modellistfilters.tsx_46\">\n      <Popover.Trigger\n        aria-label={labelText}\n        css={{ border: 0, background: 'none', padding: 0, lineHeight: 0, cursor: 'pointer' }}\n      >\n        <InfoIcon />\n      </Popover.Trigger>\n      <Popover.Content align=\"start\">\n        <div>\n          <FormattedMessage {...tooltipIntroMessage} values={{ newline: <br />, whereBold: <b>WHERE</b> }} />{' '}\n          <FormattedMessage\n            defaultMessage=\"<link>Learn more</link>\"\n            description=\"Learn more tooltip link to learn more on how to search models\"\n            values={{\n              link: (chunks) => (\n                <Typography.Link\n                  componentId=\"codegen_mlflow_app_src_model-registry_components_model-list_modellistfilters.tsx_61\"\n                  href={ExperimentSearchSyntaxDocUrl + '#syntax'}\n                  openInNewTab\n                >\n                  {chunks}\n                </Typography.Link>\n              ),\n            }}\n          />\n          <br />\n          <br />\n          <FormattedMessage defaultMessage=\"Examples:\" description=\"Text header for examples of mlflow search syntax\" />\n          <br />\n          • tags.my_key = \"my_value\"\n          <br />• name ilike \"%{exampleEntityName}%\" and tags.my_key = \"my_value\"\n        </div>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nexport const ModelListFilters = ({\n  // prettier-ignore\n  searchFilter,\n  onSearchFilterChange,\n  isFiltered,\n}: ModelListFiltersProps) => {\n  const intl = useIntl();\n\n  const [internalSearchFilter, setInternalSearchFilter] = useState(searchFilter);\n\n  const triggerSearch = () => {\n    onSearchFilterChange(internalSearchFilter);\n  };\n  useEffect(() => {\n    setInternalSearchFilter(searchFilter);\n  }, [searchFilter]);\n\n  const reset = () => {\n    onSearchFilterChange('');\n  };\n\n  return (\n    <TableFilterLayout>\n      <TableFilterInput\n        componentId=\"codegen_mlflow_app_src_model-registry_components_model-list_modellistfilters.tsx_118\"\n        placeholder={intl.formatMessage({\n          defaultMessage: 'Filter registered models by name or tags',\n          description: 'Placeholder text inside model search bar',\n        })}\n        onSubmit={triggerSearch}\n        onClear={() => {\n          setInternalSearchFilter('');\n          onSearchFilterChange('');\n        }}\n        onChange={(e) => setInternalSearchFilter(e.target.value)}\n        data-testid=\"model-search-input\"\n        suffix={<ModelSearchInputHelpTooltip />}\n        value={internalSearchFilter}\n        showSearchButton\n      />\n      {isFiltered && (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_model-list_modellistfilters.tsx_152\"\n          type=\"tertiary\"\n          onClick={reset}\n          data-testid=\"models-list-filters-reset\"\n        >\n          <FormattedMessage defaultMessage=\"Reset filters\" description=\"Reset filters button in list\" />\n        </Button>\n      )}\n    </TableFilterLayout>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { useState } from 'react';\nimport {\n  Button,\n  ChevronDoubleDownIcon,\n  ChevronDoubleUpIcon,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { ModelRegistryRoutes } from '../../routes';\nimport { KeyValueEntity } from '../../../experiment-tracking/types';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../common/utils/TagUtils';\n\nconst EmptyCell = () => <>&mdash;</>;\n\nexport const ModelListTagsCell = ({ tags }: { tags: KeyValueEntity[] }) => {\n  const tagsToShowInitially = 3;\n  const { theme } = useDesignSystemTheme();\n  const [showMore, setShowMore] = useState(false);\n\n  const validTags = tags?.filter((tag) => !tag.key.startsWith(MLFLOW_INTERNAL_PREFIX));\n\n  const tagsToDisplay = validTags?.slice(0, showMore ? undefined : tagsToShowInitially);\n\n  if (!validTags?.length) {\n    return <EmptyCell />;\n  }\n\n  const noValue = (\n    <em>\n      <FormattedMessage description=\"Models table > tags column > no value\" defaultMessage=\"(empty)\" />\n    </em>\n  );\n\n  return (\n    <div>\n      {tagsToDisplay.map((tag) => (\n        <LegacyTooltip\n          key={tag.key}\n          title={\n            <>\n              {tag.key}: {tag.value || noValue}\n            </>\n          }\n          placement=\"left\"\n        >\n          <div\n            key={tag.key}\n            css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}\n            data-testid=\"models-table-tag-entry\"\n          >\n            <Typography.Text bold>{tag.key}</Typography.Text>: {tag.value || noValue}\n          </div>\n        </LegacyTooltip>\n      ))}\n      {tags.length > tagsToShowInitially && (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_model-list_modeltablecellrenderers.tsx_65\"\n          css={{ marginTop: theme.spacing.sm }}\n          size=\"small\"\n          onClick={() => setShowMore(!showMore)}\n          icon={showMore ? <ChevronDoubleUpIcon /> : <ChevronDoubleDownIcon />}\n          data-testid=\"models-table-show-more-tags\"\n        >\n          {showMore ? (\n            <FormattedMessage\n              defaultMessage=\"Show less\"\n              description=\"Models table > tags column > show less toggle button\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"{value} more\"\n              description=\"Models table > tags column > show more toggle button\"\n              values={{ value: validTags.length - tagsToShowInitially }}\n            />\n          )}\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Renders model version with the link in the models table\n */\nexport const ModelListVersionLinkCell = ({ versionNumber, name }: { versionNumber?: string; name: string }) => {\n  if (!versionNumber) {\n    return <EmptyCell />;\n  }\n  return (\n    <FormattedMessage\n      defaultMessage=\"<link>Version {versionNumber}</link>\"\n      description=\"Row entry for version columns in the registered model page\"\n      values={{\n        versionNumber,\n        link: (text: any) => <Link to={ModelRegistryRoutes.getModelVersionPageRoute(name, versionNumber)}>{text}</Link>,\n      }}\n    />\n  );\n};\n","import { first, sortBy } from 'lodash';\nimport { ModelEntity } from '../../../experiment-tracking/types';\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { Button, DropdownMenu, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../../routes';\nimport { FormattedMessage, defineMessage } from 'react-intl';\n\nconst versionLabel = defineMessage({\n  defaultMessage: 'Version {version}',\n  description: 'Model registry > models table > aliases column > version indicator',\n});\n\ninterface ModelsTableAliasedVersionsCellProps {\n  model: ModelEntity;\n}\n\nexport const ModelsTableAliasedVersionsCell = ({ model }: ModelsTableAliasedVersionsCellProps) => {\n  const { aliases } = model;\n  const { theme } = useDesignSystemTheme();\n\n  if (!aliases?.length) {\n    return null;\n  }\n\n  // Sort alias entries by version, descending\n  const aliasesByVersionSorted = sortBy(aliases, ({ version }) => parseInt(version, 10) || 0).reverse();\n\n  const latestVersionAlias = first(aliasesByVersionSorted);\n\n  // Return nothing if there's not a single alias present\n  if (!latestVersionAlias) {\n    return null;\n  }\n\n  const otherAliases = aliasesByVersionSorted.filter((alias) => alias !== latestVersionAlias);\n\n  return (\n    <div>\n      <Link to={ModelRegistryRoutes.getModelVersionPageRoute(model.name, latestVersionAlias.version)}>\n        <ModelVersionAliasTag value={latestVersionAlias.alias} css={{ marginRight: 0, cursor: 'pointer' }} />\n        : <FormattedMessage {...versionLabel} values={{ version: latestVersionAlias.version }} />\n      </Link>\n      {otherAliases.length > 0 && (\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelstablealiasedversionscell.tsx_47\"\n              size=\"small\"\n              css={{ borderRadius: 12, marginLeft: theme.spacing.xs }}\n            >\n              +{aliases.length - 1}\n            </Button>\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content align=\"start\">\n            {otherAliases.map(({ alias, version }) => (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelstablealiasedversionscell.tsx_57\"\n                key={alias}\n              >\n                <Link to={ModelRegistryRoutes.getModelVersionPageRoute(model.name, version)}>\n                  <ModelVersionAliasTag value={alias} css={{ marginRight: 0, cursor: 'pointer' }} />:{' '}\n                  <span css={{ color: theme.colors.actionTertiaryTextDefault }}>\n                    <FormattedMessage {...versionLabel} values={{ version }} />\n                  </span>\n                </Link>\n              </DropdownMenu.Item>\n            ))}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      )}\n    </div>\n  );\n};\n","import {\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  LegacyTooltip,\n  Empty,\n  PlusIcon,\n  TableSkeletonRows,\n  WarningIcon,\n} from '@databricks/design-system';\nimport { Interpolation, Theme } from '@emotion/react';\nimport { ColumnDef, flexRender, getCoreRowModel, SortingState, useReactTable } from '@tanstack/react-table';\nimport { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { ModelListTagsCell, ModelListVersionLinkCell } from './ModelTableCellRenderers';\nimport { RegisteringModelDocUrl } from '../../../common/constants';\nimport Utils from '../../../common/utils/Utils';\nimport type { KeyValueEntity, ModelEntity, ModelVersionInfoEntity } from '../../../experiment-tracking/types';\nimport { Stages } from '../../constants';\nimport { ModelRegistryRoutes } from '../../routes';\nimport { CreateModelButton } from '../CreateModelButton';\nimport { ModelsTableAliasedVersionsCell } from '../aliases/ModelsTableAliasedVersionsCell';\nimport { useNextModelsUIContext } from '../../hooks/useNextModelsUI';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\n\nconst getLatestVersionNumberByStage = (latestVersions: ModelVersionInfoEntity[], stage: string) => {\n  const modelVersion = latestVersions && latestVersions.find((v) => v.current_stage === stage);\n  return modelVersion && modelVersion.version;\n};\n\nenum ColumnKeys {\n  NAME = 'name',\n  LATEST_VERSION = 'latest_versions',\n  LAST_MODIFIED = 'timestamp',\n  CREATED_BY = 'user_id',\n  STAGE_STAGING = 'stage_staging',\n  STAGE_PRODUCTION = 'stage_production',\n  TAGS = 'tags',\n  ALIASED_VERSIONS = 'aliased_versions',\n}\n\nexport interface ModelListTableProps {\n  modelsData: ModelEntity[];\n  pagination: React.ReactElement;\n  orderByKey: string;\n  orderByAsc: boolean;\n  isLoading: boolean;\n  error?: Error;\n  isFiltered: boolean;\n  onSortChange: (params: { orderByKey: string; orderByAsc: boolean }) => void;\n}\n\ntype EnrichedModelEntity = ModelEntity;\ntype ModelsColumnDef = ColumnDef<EnrichedModelEntity> & {\n  // Our experiments column definition houses style definitions in the metadata field\n  meta?: { styles?: Interpolation<Theme> };\n};\n\nexport const ModelListTable = ({\n  modelsData,\n  orderByAsc,\n  orderByKey,\n  onSortChange,\n  isLoading,\n  error,\n  isFiltered,\n  pagination,\n}: ModelListTableProps) => {\n  const intl = useIntl();\n\n  const { usingNextModelsUI } = useNextModelsUIContext();\n\n  const enrichedModelsData: EnrichedModelEntity[] = modelsData.map((model) => {\n    return model;\n  });\n\n  const tableColumns = useMemo(() => {\n    const columns: ModelsColumnDef[] = [\n      {\n        id: ColumnKeys.NAME,\n        enableSorting: true,\n        header: intl.formatMessage({\n          defaultMessage: 'Name',\n          description: 'Column title for model name in the registered model page',\n        }),\n        accessorKey: 'name',\n        cell: ({ getValue }) => (\n          <Link to={ModelRegistryRoutes.getModelPageRoute(String(getValue()))}>\n            <LegacyTooltip title={getValue()}>{getValue()}</LegacyTooltip>\n          </Link>\n        ),\n        meta: { styles: { minWidth: 200, flex: 1 } },\n      },\n      {\n        id: ColumnKeys.LATEST_VERSION,\n        enableSorting: false,\n\n        header: intl.formatMessage({\n          defaultMessage: 'Latest version',\n          description: 'Column title for latest model version in the registered model page',\n        }),\n        accessorKey: 'latest_versions',\n        cell: ({ getValue, row: { original } }) => {\n          const { name } = original;\n          const latestVersions = getValue() as ModelVersionInfoEntity[];\n          const latestVersionNumber =\n            (Boolean(latestVersions?.length) &&\n              Math.max(...latestVersions.map((v) => parseInt(v.version, 10))).toString()) ||\n            '';\n          return <ModelListVersionLinkCell name={name} versionNumber={latestVersionNumber} />;\n        },\n        meta: { styles: { maxWidth: 120 } },\n      },\n    ];\n    if (usingNextModelsUI) {\n      // Display aliases column only when \"new models UI\" is flipped\n      columns.push({\n        id: ColumnKeys.ALIASED_VERSIONS,\n        enableSorting: false,\n\n        header: intl.formatMessage({\n          defaultMessage: 'Aliased versions',\n          description: 'Column title for aliased versions in the registered model page',\n        }),\n        cell: ({ row: { original: modelEntity } }) => {\n          return <ModelsTableAliasedVersionsCell model={modelEntity} />;\n        },\n        meta: { styles: { minWidth: 150 } },\n      });\n    } else {\n      // If not, display legacy \"Stage\" columns\n      columns.push(\n        {\n          id: ColumnKeys.STAGE_STAGING,\n          enableSorting: false,\n\n          header: intl.formatMessage({\n            defaultMessage: 'Staging',\n            description: 'Column title for staging phase version in the registered model page',\n          }),\n          cell: ({ row: { original } }) => {\n            const { latest_versions, name } = original;\n            const versionNumber = getLatestVersionNumberByStage(latest_versions, Stages.STAGING);\n            return <ModelListVersionLinkCell name={name} versionNumber={versionNumber} />;\n          },\n          meta: { styles: { maxWidth: 120 } },\n        },\n        {\n          id: ColumnKeys.STAGE_PRODUCTION,\n          enableSorting: false,\n\n          header: intl.formatMessage({\n            defaultMessage: 'Production',\n            description: 'Column title for production phase version in the registered model page',\n          }),\n          cell: ({ row: { original } }) => {\n            const { latest_versions, name } = original;\n            const versionNumber = getLatestVersionNumberByStage(latest_versions, Stages.PRODUCTION);\n            return <ModelListVersionLinkCell name={name} versionNumber={versionNumber} />;\n          },\n          meta: { styles: { maxWidth: 120 } },\n        },\n      );\n    }\n\n    columns.push(\n      {\n        id: ColumnKeys.CREATED_BY,\n        header: intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Column title for created by column for a model in the registered model page',\n        }),\n        accessorKey: 'user_id',\n        enableSorting: false,\n        cell: ({ getValue, row: { original } }) => {\n          return <span title={getValue() as string}>{getValue()}</span>;\n        },\n        meta: { styles: { flex: 1 } },\n      },\n      {\n        id: ColumnKeys.LAST_MODIFIED,\n        enableSorting: true,\n        header: intl.formatMessage({\n          defaultMessage: 'Last modified',\n          description: 'Column title for last modified timestamp for a model in the registered model page',\n        }),\n        accessorKey: 'last_updated_timestamp',\n        cell: ({ getValue }) => <span>{Utils.formatTimestamp(getValue(), intl)}</span>,\n        meta: { styles: { flex: 1, maxWidth: 150 } },\n      },\n      {\n        id: ColumnKeys.TAGS,\n        header: intl.formatMessage({\n          defaultMessage: 'Tags',\n          description: 'Column title for model tags in the registered model page',\n        }),\n        enableSorting: false,\n        accessorKey: 'tags',\n        cell: ({ getValue }) => {\n          return <ModelListTagsCell tags={getValue() as KeyValueEntity[]} />;\n        },\n      },\n    );\n\n    return columns;\n  }, [\n    // prettier-ignore\n    intl,\n    usingNextModelsUI,\n  ]);\n\n  const sorting: SortingState = [{ id: orderByKey, desc: !orderByAsc }];\n\n  const setSorting = (stateUpdater: SortingState | ((state: SortingState) => SortingState)) => {\n    const [newSortState] = typeof stateUpdater === 'function' ? stateUpdater(sorting) : stateUpdater;\n    if (newSortState) {\n      onSortChange({ orderByKey: newSortState.id, orderByAsc: !newSortState.desc });\n    }\n  };\n\n  // eslint-disable-next-line prefer-const\n  let registerModelDocUrl = RegisteringModelDocUrl;\n\n  const noResultsDescription = (() => {\n    return (\n      <FormattedMessage\n        defaultMessage=\"No results. Try using a different keyword or adjusting your filters.\"\n        description=\"Models table > no results after filtering\"\n      />\n    );\n  })();\n  const emptyComponent = error ? (\n    <Empty\n      image={<WarningIcon />}\n      description={error instanceof ErrorWrapper ? error.getMessageField() : error.message}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Error fetching models\"\n          description=\"Workspace models page > Error empty state title\"\n        />\n      }\n    />\n  ) : isFiltered ? (\n    // Displayed when there is no results, but any filters have been applied\n    <Empty description={noResultsDescription} image={<SearchIcon />} data-testid=\"model-list-no-results\" />\n  ) : (\n    // Displayed when there is no results with no filters applied\n    <Empty\n      description={\n        <FormattedMessage\n          defaultMessage=\"No models registered yet. <link>Learn more about registering models</link>.\"\n          description=\"Models table > no models present yet\"\n          values={{\n            link: (content: any) => (\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={registerModelDocUrl}>\n                {content}\n              </a>\n            ),\n          }}\n        />\n      }\n      image={<PlusIcon />}\n      button={\n        <CreateModelButton\n          buttonType=\"primary\"\n          buttonText={\n            <FormattedMessage defaultMessage=\"Create a model\" description=\"Create button to register a new model\" />\n          }\n        />\n      }\n    />\n  );\n\n  const isEmpty = () => (!isLoading && table.getRowModel().rows.length === 0) || error;\n\n  const table = useReactTable<EnrichedModelEntity>({\n    data: enrichedModelsData,\n    columns: tableColumns,\n    state: {\n      sorting,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: ({ id }) => id,\n    onSortingChange: setSorting,\n  });\n\n  return (\n    <>\n      <Table\n        data-testid=\"model-list-table\"\n        pagination={pagination}\n        scrollable\n        empty={isEmpty() ? emptyComponent : undefined}\n      >\n        <TableRow isHeader>\n          {table.getLeafHeaders().map((header) => (\n            <TableHeader\n              componentId=\"codegen_mlflow_app_src_model-registry_components_model-list_modellisttable.tsx_412\"\n              ellipsis\n              key={header.id}\n              sortable={header.column.getCanSort()}\n              sortDirection={header.column.getIsSorted() || 'none'}\n              onToggleSort={() => {\n                const [currentSortColumn] = sorting;\n                const changingDirection = header.column.id === currentSortColumn.id;\n                const sortDesc = changingDirection ? !currentSortColumn.desc : false;\n                header.column.toggleSorting(sortDesc);\n              }}\n              css={(header.column.columnDef as ModelsColumnDef).meta?.styles}\n            >\n              {flexRender(header.column.columnDef.header, header.getContext())}\n            </TableHeader>\n          ))}\n        </TableRow>\n        {isLoading ? (\n          <TableSkeletonRows table={table} />\n        ) : (\n          table.getRowModel().rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.getAllCells().map((cell) => (\n                <TableCell ellipsis key={cell.id} css={(cell.column.columnDef as ModelsColumnDef).meta?.styles}>\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))\n        )}\n      </Table>\n    </>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport './ModelListView.css';\nimport Utils from '../../common/utils/Utils';\nimport {\n  REGISTERED_MODELS_PER_PAGE_COMPACT,\n  REGISTERED_MODELS_SEARCH_NAME_FIELD,\n  REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD,\n} from '../constants';\nimport { ModelRegistryDocUrl, ModelRegistryOnboardingString, onboarding } from '../../common/constants';\nimport { CreateModelButton } from './CreateModelButton';\nimport LocalStorageUtils from '../../common/utils/LocalStorageUtils';\nimport { PageHeader } from '../../shared/building_blocks/PageHeader';\n\nimport { FormattedMessage, type IntlShape, injectIntl } from 'react-intl';\nimport { Alert, CursorPagination, Spacer as DuBoisSpacer, Spacer, Typography } from '@databricks/design-system';\nimport { shouldShowModelsNextUI } from '../../common/utils/FeatureUtils';\nimport { ModelListFilters } from './model-list/ModelListFilters';\nimport { ModelListTable } from './model-list/ModelListTable';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { ModelsNextUIToggleSwitch } from './ModelsNextUIToggleSwitch';\nimport { withNextModelsUIContext } from '../hooks/useNextModelsUI';\n\nconst NAME_COLUMN_INDEX = 'name';\nconst LAST_MODIFIED_COLUMN_INDEX = 'last_updated_timestamp';\n\ntype ModelListViewImplProps = {\n  models: any[];\n  endpoints?: any;\n  showEditPermissionModal: (...args: any[]) => any;\n  permissionLevel: string;\n  selectedOwnerFilter: string;\n  selectedStatusFilter: string;\n  onOwnerFilterChange: (...args: any[]) => any;\n  onStatusFilterChange: (...args: any[]) => any;\n  searchInput: string;\n  orderByKey: string;\n  orderByAsc: boolean;\n  currentPage: number;\n  nextPageToken: string | null;\n  loading?: boolean;\n  error?: Error;\n  onSearch: (...args: any[]) => any;\n  onClickNext: (...args: any[]) => any;\n  onClickPrev: (...args: any[]) => any;\n  onClickSortableColumn: (...args: any[]) => any;\n  onSetMaxResult: (...args: any[]) => any;\n  maxResultValue: number;\n  intl: IntlShape;\n};\n\ntype ModelListViewImplState = any;\n\nexport class ModelListViewImpl extends React.Component<ModelListViewImplProps, ModelListViewImplState> {\n  constructor(props: ModelListViewImplProps) {\n    super(props);\n\n    this.state = {\n      maxResultsSelection: REGISTERED_MODELS_PER_PAGE_COMPACT,\n    };\n  }\n\n  static defaultProps = {\n    models: [],\n    searchInput: '',\n  };\n\n  disableOnboardingHelper() {\n    const onboardingInformationStore = ModelListViewImpl.getLocalStore(onboarding);\n    onboardingInformationStore.setItem('showRegistryHelper', 'false');\n  }\n\n  /**\n   * Returns a LocalStorageStore instance that can be used to persist data associated with the\n   * ModelRegistry component.\n   */\n  static getLocalStore(key: any) {\n    return LocalStorageUtils.getStoreForComponent('ModelListView', key);\n  }\n\n  componentDidMount() {\n    const pageTitle = 'MLflow Models';\n    Utils.updatePageTitle(pageTitle);\n  }\n\n  handleSearch = (event: any, searchInput: any) => {\n    event?.preventDefault();\n    this.props.onSearch(searchInput);\n  };\n\n  static getSortFieldName = (column: any) => {\n    switch (column) {\n      case NAME_COLUMN_INDEX:\n        return REGISTERED_MODELS_SEARCH_NAME_FIELD;\n      case LAST_MODIFIED_COLUMN_INDEX:\n        return REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD;\n      default:\n        return null;\n    }\n  };\n\n  unifiedTableSortChange = ({ orderByKey, orderByAsc }: any) => {\n    // Different column keys are used for sorting and data accessing,\n    // mapping to proper keys happens below\n    const fieldMappedToSortKey =\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      {\n        timestamp: 'last_updated_timestamp',\n      }[orderByKey] || orderByKey;\n\n    this.handleTableChange(undefined, undefined, {\n      field: fieldMappedToSortKey,\n      order: orderByAsc ? 'undefined' : 'descend',\n    });\n  };\n\n  handleTableChange = (pagination: any, filters: any, sorter: any) => {\n    this.props.onClickSortableColumn(ModelListViewImpl.getSortFieldName(sorter.field), sorter.order);\n  };\n\n  static getLearnMoreLinkUrl = () => ModelRegistryDocUrl;\n\n  static getLearnMoreDisplayString = () => ModelRegistryOnboardingString;\n\n  handleClickNext = () => {\n    this.props.onClickNext();\n  };\n\n  handleClickPrev = () => {\n    this.props.onClickPrev();\n  };\n\n  handleSetMaxResult = ({ item, key, keyPath, domEvent }: any) => {\n    this.props.onSetMaxResult(key);\n  };\n\n  render() {\n    // prettier-ignore\n    const {\n      models,\n      currentPage,\n      nextPageToken,\n      searchInput,\n    } = this.props;\n    const { loading, error } = this.props;\n\n    // Determine if we use any filters at the moment\n    const isFiltered =\n      // prettier-ignore\n      Boolean(searchInput);\n\n    const title = (\n      <FormattedMessage\n        defaultMessage=\"Registered Models\"\n        description=\"Header for displaying models in the model registry\"\n      />\n    );\n    return (\n      <PageContainer data-test-id=\"ModelListView-container\" usesFullHeight>\n        <div>\n          <PageHeader title={title} spacerSize=\"xs\">\n            <CreateModelButton />\n          </PageHeader>\n          {/* TODO[SHIP-6202]: Move the description to the Header prop 'description' once it's been added */}\n          <Typography.Hint>\n            {ModelListViewImpl.getLearnMoreDisplayString()}{' '}\n            <FormattedMessage\n              defaultMessage=\"<link>Learn more</link>\"\n              description=\"Learn more link on the model list page with cloud-specific link\"\n              values={{\n                link: (chunks) => (\n                  <Typography.Link\n                    componentId=\"codegen_mlflow_app_src_model-registry_components_modellistview.tsx_244\"\n                    href={ModelListViewImpl.getLearnMoreLinkUrl()}\n                    openInNewTab\n                  >\n                    {chunks}\n                  </Typography.Link>\n                ),\n              }}\n            />\n          </Typography.Hint>\n          <Spacer />\n\n          <ModelListFilters\n            searchFilter={this.props.searchInput}\n            onSearchFilterChange={(value) => this.handleSearch(null, value)}\n            isFiltered={isFiltered}\n          />\n        </div>\n        <ModelListTable\n          modelsData={models}\n          onSortChange={this.unifiedTableSortChange}\n          orderByKey={this.props.orderByKey}\n          orderByAsc={this.props.orderByAsc}\n          isLoading={loading || false}\n          error={error}\n          pagination={\n            <div\n              data-testid=\"model-list-view-pagination\"\n              css={{ width: '100%', alignItems: 'center', display: 'flex' }}\n            >\n              <div css={{ flex: 1 }}>{shouldShowModelsNextUI() && <ModelsNextUIToggleSwitch />}</div>\n              <div>\n                <CursorPagination\n                  componentId=\"codegen_mlflow_app_src_model-registry_components_modellistview.tsx_305\"\n                  hasNextPage={Boolean(nextPageToken)}\n                  hasPreviousPage={currentPage > 1}\n                  onNextPage={this.handleClickNext}\n                  onPreviousPage={this.handleClickPrev}\n                  pageSizeSelect={{\n                    onChange: (num) => this.handleSetMaxResult({ key: num }),\n                    default: this.props.maxResultValue,\n                    options: [10, 25, 50, 100],\n                  }}\n                />\n              </div>\n            </div>\n          }\n          isFiltered={isFiltered}\n        />\n      </PageContainer>\n    );\n  }\n}\n\nexport const ModelListView = withNextModelsUIContext(injectIntl<'intl', ModelListViewImplProps>(ModelListViewImpl));\n\nconst styles = {\n  nameSearchBox: {\n    width: '446px',\n  },\n  searchFlexBar: {\n    marginBottom: '24px',\n  },\n  questionMark: {\n    marginLeft: 4,\n    cursor: 'pointer',\n    color: '#888',\n  },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { ModelListView } from './ModelListView';\nimport { connect } from 'react-redux';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport Utils from '../../common/utils/Utils';\nimport { getCombinedSearchFilter, constructSearchInputFromURLState } from '../utils/SearchUtils';\nimport {\n  AntdTableSortOrder,\n  REGISTERED_MODELS_PER_PAGE_COMPACT,\n  REGISTERED_MODELS_SEARCH_NAME_FIELD,\n} from '../constants';\nimport { searchRegisteredModelsApi } from '../actions';\nimport LocalStorageUtils from '../../common/utils/LocalStorageUtils';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { ScrollablePageWrapper } from '../../common/components/ScrollablePageWrapper';\nimport { createMLflowRoutePath } from '../../common/utils/RoutingUtils';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\n\ntype ModelListPageImplProps = WithRouterNextProps & {\n  models?: any[];\n  searchRegisteredModelsApi: (...args: any[]) => any;\n};\n\ntype ModelListPageImplState = {\n  orderByKey: string;\n  orderByAsc: boolean;\n  currentPage: number;\n  maxResultsSelection: number;\n  pageTokens: Record<number, string | null>;\n  loading: boolean;\n  error: Error | undefined;\n  searchInput: string;\n};\n\nexport class ModelListPageImpl extends React.Component<ModelListPageImplProps, ModelListPageImplState> {\n  constructor(props: ModelListPageImplProps) {\n    super(props);\n    this.state = {\n      orderByKey: REGISTERED_MODELS_SEARCH_NAME_FIELD,\n      orderByAsc: true,\n      currentPage: 1,\n      maxResultsSelection: this.getPersistedMaxResults(),\n      pageTokens: {},\n      loading: true,\n      error: undefined,\n      searchInput: constructSearchInputFromURLState(this.getUrlState()),\n    };\n  }\n  modelListPageStoreKey = 'ModelListPageStore';\n  defaultPersistedPageTokens = { 1: null };\n  initialSearchRegisteredModelsApiId = getUUID();\n  searchRegisteredModelsApiId = getUUID();\n  criticalInitialRequestIds = [this.initialSearchRegisteredModelsApiId];\n\n  getUrlState() {\n    return this.props.location ? Utils.getSearchParamsFromUrl(this.props.location.search) : {};\n  }\n\n  componentDidMount() {\n    const urlState = this.getUrlState();\n    const persistedPageTokens = this.getPersistedPageTokens();\n    const maxResultsForTokens = this.getPersistedMaxResults();\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState(\n      {\n        // @ts-expect-error TS(4111): Property 'orderByKey' comes from an index signatur... Remove this comment to see the full error message\n        orderByKey: urlState.orderByKey === undefined ? this.state.orderByKey : urlState.orderByKey,\n        orderByAsc:\n          // @ts-expect-error TS(4111): Property 'orderByAsc' comes from an index signatur... Remove this comment to see the full error message\n          urlState.orderByAsc === undefined\n            ? this.state.orderByAsc\n            : // @ts-expect-error TS(4111): Property 'orderByAsc' comes from an index signatur... Remove this comment to see the full error message\n              urlState.orderByAsc === 'true',\n        currentPage:\n          // @ts-expect-error TS(4111): Property 'page' comes from an index signature, so ... Remove this comment to see the full error message\n          urlState.page !== undefined && (urlState as any).page in persistedPageTokens\n            ? // @ts-expect-error TS(2345): Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n              parseInt(urlState.page, 10)\n            : this.state.currentPage,\n        maxResultsSelection: maxResultsForTokens,\n        pageTokens: persistedPageTokens,\n      },\n      () => {\n        this.loadModels(true);\n      },\n    );\n  }\n\n  getPersistedPageTokens() {\n    const store = ModelListPageImpl.getLocalStore(this.modelListPageStoreKey);\n    if (store && store.getItem('page_tokens')) {\n      return JSON.parse(store.getItem('page_tokens'));\n    } else {\n      return this.defaultPersistedPageTokens;\n    }\n  }\n\n  setPersistedPageTokens(page_tokens: any) {\n    const store = ModelListPageImpl.getLocalStore(this.modelListPageStoreKey);\n    if (store) {\n      store.setItem('page_tokens', JSON.stringify(page_tokens));\n    }\n  }\n\n  getPersistedMaxResults() {\n    const store = ModelListPageImpl.getLocalStore(this.modelListPageStoreKey);\n    if (store && store.getItem('max_results')) {\n      return parseInt(store.getItem('max_results'), 10);\n    } else {\n      return REGISTERED_MODELS_PER_PAGE_COMPACT;\n    }\n  }\n\n  setMaxResultsInStore(max_results: any) {\n    const store = ModelListPageImpl.getLocalStore(this.modelListPageStoreKey);\n    store.setItem('max_results', max_results.toString());\n  }\n\n  /**\n   * Returns a LocalStorageStore instance that can be used to persist data associated with the\n   * ModelRegistry component.\n   */\n  static getLocalStore(key: any) {\n    return LocalStorageUtils.getSessionScopedStoreForComponent('ModelListPage', key);\n  }\n\n  // Loads the initial set of models.\n  loadModels(isInitialLoading = false) {\n    this.loadPage(this.state.currentPage, isInitialLoading);\n  }\n\n  resetHistoryState() {\n    this.setState((prevState: any) => ({\n      currentPage: 1,\n      pageTokens: this.defaultPersistedPageTokens,\n    }));\n    this.setPersistedPageTokens(this.defaultPersistedPageTokens);\n  }\n\n  /**\n   *\n   * @param orderByKey column key to sort by\n   * @param orderByAsc is sort by ascending order\n   * @returns {string} ex. 'name ASC'\n   */\n  static getOrderByExpr = (orderByKey: any, orderByAsc: any) =>\n    orderByKey ? `${orderByKey} ${orderByAsc ? 'ASC' : 'DESC'}` : '';\n\n  pollIntervalId: any;\n\n  isEmptyPageResponse = (value: any) => {\n    return !value || !value.registered_models || !value.next_page_token;\n  };\n\n  getNextPageTokenFromResponse(response: any) {\n    const { value } = response;\n    if (this.isEmptyPageResponse(value)) {\n      // Why we could be here:\n      // 1. There are no models returned: we went to the previous page but all models after that\n      //    page's token has been deleted.\n      // 2. If `next_page_token` is not returned, assume there is no next page.\n      return null;\n    } else {\n      return value.next_page_token;\n    }\n  }\n\n  updatePageState = (page: any, response = {}) => {\n    const nextPageToken = this.getNextPageTokenFromResponse(response);\n    this.setState(\n      (prevState: any) => ({\n        currentPage: page,\n\n        pageTokens: {\n          ...prevState.pageTokens,\n          [page + 1]: nextPageToken,\n        },\n      }),\n      () => {\n        this.setPersistedPageTokens(this.state.pageTokens);\n      },\n    );\n  };\n\n  handleSearch = (searchInput: any) => {\n    this.resetHistoryState();\n    this.setState({ searchInput: searchInput }, () => {\n      this.loadPage(1, false);\n    });\n  };\n\n  // Note: this method is no longer used by the UI but is used in tests. Probably best to refactor at some point.\n  handleSearchInputChange = (searchInput: any) => {\n    this.setState({ searchInput: searchInput });\n  };\n\n  updateUrlWithSearchFilter = (searchInput: any, orderByKey: any, orderByAsc: any, page: any) => {\n    const urlParams = {};\n    if (searchInput) {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      urlParams['searchInput'] = searchInput;\n    }\n    if (orderByKey && orderByKey !== REGISTERED_MODELS_SEARCH_NAME_FIELD) {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      urlParams['orderByKey'] = orderByKey;\n    }\n    if (orderByAsc === false) {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      urlParams['orderByAsc'] = orderByAsc;\n    }\n    if (page && page !== 1) {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      urlParams['page'] = page;\n    }\n    const newUrl = createMLflowRoutePath(`/models?${Utils.getSearchUrlFromState(urlParams)}`);\n    if (newUrl !== this.props.location.pathname + this.props.location.search) {\n      this.props.navigate(newUrl);\n    }\n  };\n\n  handleMaxResultsChange = (key: any) => {\n    this.setState({ maxResultsSelection: parseInt(key, 10) }, () => {\n      this.resetHistoryState();\n      const { maxResultsSelection } = this.state;\n      this.setMaxResultsInStore(maxResultsSelection);\n      this.loadPage(1, false);\n    });\n  };\n\n  handleClickNext = () => {\n    const { currentPage } = this.state;\n    this.loadPage(currentPage + 1, false);\n  };\n\n  handleClickPrev = () => {\n    const { currentPage } = this.state;\n    this.loadPage(currentPage - 1, false);\n  };\n\n  handleClickSortableColumn = (orderByKey: any, sortOrder: any) => {\n    const orderByAsc = sortOrder !== AntdTableSortOrder.DESC; // default to true\n    this.setState({ orderByKey, orderByAsc }, () => {\n      this.resetHistoryState();\n      this.loadPage(1, false);\n    });\n  };\n\n  getMaxResultsSelection = () => {\n    return this.state.maxResultsSelection;\n  };\n\n  loadPage(page: any, isInitialLoading: any) {\n    const {\n      searchInput,\n      pageTokens,\n      orderByKey,\n      orderByAsc,\n      // eslint-disable-nextline\n    } = this.state;\n    this.setState({ loading: true, error: undefined });\n    this.updateUrlWithSearchFilter(searchInput, orderByKey, orderByAsc, page);\n    this.props\n      .searchRegisteredModelsApi(\n        getCombinedSearchFilter({\n          query: searchInput,\n          // eslint-disable-nextline\n        }),\n        this.state.maxResultsSelection,\n        ModelListPageImpl.getOrderByExpr(orderByKey, orderByAsc),\n        pageTokens[page],\n        isInitialLoading ? this.initialSearchRegisteredModelsApiId : this.searchRegisteredModelsApiId,\n      )\n      .then((r: any) => {\n        this.updatePageState(page, r);\n      })\n      .catch((e: any) => {\n        this.setState({ currentPage: 1, error: e });\n        this.resetHistoryState();\n      })\n      .finally(() => {\n        this.setState({ loading: false });\n      });\n  }\n\n  render() {\n    const {\n      orderByKey,\n      orderByAsc,\n      currentPage,\n      pageTokens,\n      searchInput,\n      // eslint-disable-nextline\n    } = this.state;\n    const { models } = this.props;\n    return (\n      <ScrollablePageWrapper>\n        <ModelListView\n          // @ts-expect-error TS(2322): Type '{ models: any[] | undefined; loading: any; e... Remove this comment to see the full error message\n          models={models}\n          loading={this.state.loading}\n          error={this.state.error}\n          searchInput={searchInput}\n          orderByKey={orderByKey}\n          orderByAsc={orderByAsc}\n          currentPage={currentPage}\n          nextPageToken={pageTokens[currentPage + 1]}\n          onSearch={this.handleSearch}\n          onClickNext={this.handleClickNext}\n          onClickPrev={this.handleClickPrev}\n          onClickSortableColumn={this.handleClickSortableColumn}\n          onSetMaxResult={this.handleMaxResultsChange}\n          maxResultValue={this.getMaxResultsSelection()}\n        />\n      </ScrollablePageWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  const models = Object.values(state.entities.modelByName);\n  return {\n    models,\n  };\n};\n\nconst mapDispatchToProps = {\n  searchRegisteredModelsApi,\n};\n\nconst ModelListPageWithRouter = withRouterNext(connect(mapStateToProps, mapDispatchToProps)(ModelListPageImpl));\n\nexport const ModelListPage = ModelListPageWithRouter;\n","import { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport { ModelListPage } from './ModelListPage';\nconst ModelListPageWrapperImpl = () => {\n  return <ModelListPage />;\n};\nexport const ModelListPageWrapper = withErrorBoundary(\n  ErrorUtils.mlflowServices.MODEL_REGISTRY,\n  ModelListPageWrapperImpl,\n);\n\nexport default ModelListPageWrapper;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Tag } from '@databricks/design-system';\n// @ts-expect-error TS(2306): File '/Users/elad.ossadon/universe4/mlflow/web/js/... Remove this comment to see the full error message\n// eslint-disable-next-line\nimport * as overrides from './constant-overrides'; // eslint-disable-line import/no-namespace\nimport { FormattedMessage } from 'react-intl';\nimport { ReadyIcon } from './utils';\n\nexport const Stages = {\n  NONE: 'None',\n  STAGING: 'Staging',\n  PRODUCTION: 'Production',\n  ARCHIVED: 'Archived',\n};\n\nexport const ACTIVE_STAGES = [Stages.STAGING, Stages.PRODUCTION];\n\nexport const StageLabels = {\n  [Stages.NONE]: 'None',\n  [Stages.STAGING]: 'Staging',\n  [Stages.PRODUCTION]: 'Production',\n  [Stages.ARCHIVED]: 'Archived',\n};\n\nexport const StageTagComponents = {\n  [Stages.NONE]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_37\">{StageLabels[Stages.NONE]}</Tag>\n  ),\n  [Stages.STAGING]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_38\" color=\"lemon\">\n      {StageLabels[Stages.STAGING]}\n    </Tag>\n  ),\n  [Stages.PRODUCTION]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_39\" color=\"lime\">\n      {StageLabels[Stages.PRODUCTION]}\n    </Tag>\n  ),\n  [Stages.ARCHIVED]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_40\" color=\"charcoal\">\n      {StageLabels[Stages.ARCHIVED]}\n    </Tag>\n  ),\n};\n\nexport interface ModelVersionActivity {\n  creation_timestamp?: number;\n  user_id?: string;\n  activity_type: ActivityTypes;\n  comment?: string;\n  last_updated_timestamp?: number;\n  from_stage?: string;\n  to_stage?: string;\n  system_comment?: string;\n  id?: string;\n}\n\nexport enum ActivityTypes {\n  APPLIED_TRANSITION = 'APPLIED_TRANSITION',\n  REQUESTED_TRANSITION = 'REQUESTED_TRANSITION',\n  SYSTEM_TRANSITION = 'SYSTEM_TRANSITION',\n  CANCELLED_REQUEST = 'CANCELLED_REQUEST',\n  APPROVED_REQUEST = 'APPROVED_REQUEST',\n  REJECTED_REQUEST = 'REJECTED_REQUEST',\n  NEW_COMMENT = 'NEW_COMMENT',\n}\n\nexport interface PendingModelVersionActivity {\n  type: ActivityTypes;\n  to_stage: string;\n}\n\nexport const EMPTY_CELL_PLACEHOLDER = <div style={{ marginTop: -12 }}>_</div>;\n\nexport const ModelVersionStatus = {\n  READY: 'READY',\n};\n\nexport const DefaultModelVersionStatusMessages = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage defaultMessage=\"Ready.\" description=\"Default status message for model versions that are ready\" />\n  ),\n};\n\nexport const modelVersionStatusIconTooltips = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage\n      defaultMessage=\"Ready\"\n      description=\"Tooltip text for ready model version status icon in model view page\"\n    />\n  ),\n};\n\nexport const ModelVersionStatusIcons = {\n  [ModelVersionStatus.READY]: <ReadyIcon />,\n};\n\nexport const MODEL_VERSION_STATUS_POLL_INTERVAL = 10000;\n\n// Number of registered models initially shown on the model registry list page\nconst REGISTERED_MODELS_PER_PAGE = 10;\n\n// Variant for compact tables (unified list pattern), this is\n// going to become a default soon\nexport const REGISTERED_MODELS_PER_PAGE_COMPACT = 25;\n\nexport const MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER = 75; // request size has a limit of 4KB\n\nexport const REGISTERED_MODELS_SEARCH_NAME_FIELD = 'name';\n\nexport const REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD = 'timestamp';\n\nexport const AntdTableSortOrder = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const archiveExistingVersionToolTipText = (currentStage: any) => (\n  <FormattedMessage\n    defaultMessage=\"Model versions in the `{currentStage}` stage will be moved to the\n     `Archived` stage.\"\n    description=\"Tooltip text for transitioning existing model versions in stage to archived\n     in the model versions page\"\n    values={{ currentStage: currentStage }}\n  />\n);\n\nexport const mlflowAliasesLearnMoreLink =\n  'https://mlflow.org/docs/latest/model-registry.html#using-registered-model-aliases';\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { REGISTERED_MODELS_SEARCH_NAME_FIELD } from '../constants';\nimport { resolveFilterValue } from '../actions';\n\nexport function getModelNameFilter(query: any) {\n  if (query) {\n    return `${REGISTERED_MODELS_SEARCH_NAME_FIELD} ilike ${resolveFilterValue(query, true)}`;\n  } else {\n    return '';\n  }\n}\n\nexport function getCombinedSearchFilter({\n  query = '',\n}: {\n  query?: string;\n} = {}) {\n  const filters = [];\n  const initialFilter = query.includes('tags.') ? query : getModelNameFilter(query);\n  if (initialFilter) filters.push(initialFilter);\n  return filters.join(' AND ');\n}\n\nexport function constructSearchInputFromURLState(urlState: any) {\n  if ('searchInput' in urlState) {\n    return urlState['searchInput'];\n  }\n  if ('nameSearchInput' in urlState && 'tagSearchInput' in urlState) {\n    return getModelNameFilter(urlState['nameSearchInput']) + ` AND ` + urlState['tagSearchInput'];\n  }\n  if ('tagSearchInput' in urlState) {\n    return urlState['tagSearchInput'];\n  }\n  if ('nameSearchInput' in urlState) {\n    return urlState['nameSearchInput'];\n  }\n  return '';\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-test-id={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-test-id=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n"],"names":["_ref2","name","styles","ScrollablePageWrapper","_ref","children","className","_jsx","PageWrapper","css","getExperimentNameValidator","getExistingExperimentNames","rule","value","callback","includes","MlflowService","getExperimentByName","experiment_name","then","res","catch","e","undefined","modelNameValidator","ModelRegistryService","getRegisteredModel","LocalStorageUtils","getStoreForComponent","componentName","id","LocalStorageStore","join","getSessionScopedStoreForComponent","version","constructor","scope","type","storageObj","this","window","localStorage","sessionStorage","loadComponentState","storedVal","getItem","reactComponentStateKey","JSON","parse","saveComponentState","stateRecord","targetValue","toJSON","setItem","stringify","withScopePrefix","key","withRouterNext","Component","props","location","useLocation","navigate","useNavigate","params","useParams","GenericInputModal","arguments","state","isSubmitting","formRef","React","onSubmit","async","setState","values","current","validateFields","handleSubmit","resetAndClearModalForm","handleSubmitFailure","finally","onRequestCloseHandler","Promise","reject","resetFields","Utils","logErrorAndNotifyUser","onClose","handleCancel","onCancel","render","okText","cancelText","isOpen","footer","displayForm","map","child","innerRef","Modal","title","width","visible","onOk","confirmLoading","centered","MODEL_NAME_FIELD","CreateModelFormImpl","learnMoreLinkUrl","getLearnMoreLinkUrl","_jsxs","LegacyForm","ref","layout","Item","label","intl","formatMessage","defaultMessage","rules","required","message","validator","Input","componentId","autoFocus","FormattedMessage","link","chunks","href","target","ModelRegistryDocUrl","CreateModelForm","injectIntl","CreateModelModalImpl","createRegisteredModelRequestId","getUUID","handleCreateRegisteredModel","result","createRegisteredModelApi","newModel","registered_model","setTimeout","ModelRegistryRoutes","getModelPageRoute","debouncedModelNameValidator","debounce","handleOnCancel","navigateBackOnCancel","modelListPageRoute","modalVisible","hideModal","mapDispatchToProps","CreateModelModalWithRouter","connect","CreateModelModal","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY","CreateModelButton","showModal","buttonType","buttonText","wrapper","Button","getButtonSize","onClick","height","padding","display","ModelSearchInputHelpTooltip","exampleEntityName","useIntl","tooltipIntroMessage","defineMessage","labelText","newline","whereBold","Popover","Root","Trigger","InfoIcon","Content","align","Typography","Link","ExperimentSearchSyntaxDocUrl","openInNewTab","Arrow","ModelListFilters","_ref3","searchFilter","onSearchFilterChange","isFiltered","internalSearchFilter","setInternalSearchFilter","useState","useEffect","TableFilterLayout","TableFilterInput","placeholder","triggerSearch","onClear","onChange","suffix","showSearchButton","reset","EmptyCell","_Fragment","ModelListTagsCell","tags","theme","useDesignSystemTheme","showMore","setShowMore","validTags","filter","tag","startsWith","MLFLOW_INTERNAL_PREFIX","tagsToDisplay","slice","length","noValue","LegacyTooltip","placement","Text","bold","_css","marginTop","spacing","sm","size","icon","ChevronDoubleUpIcon","ChevronDoubleDownIcon","ModelListVersionLinkCell","versionNumber","text","to","getModelVersionPageRoute","versionLabel","_ref5","ModelsTableAliasedVersionsCell","model","aliases","aliasesByVersionSorted","sortBy","parseInt","reverse","latestVersionAlias","first","otherAliases","alias","ModelVersionAliasTag","DropdownMenu","modal","asChild","borderRadius","marginLeft","xs","_ref4","color","colors","actionTertiaryTextDefault","getLatestVersionNumberByStage","latestVersions","stage","modelVersion","find","v","current_stage","ColumnKeys","ModelListTable","modelsData","orderByAsc","orderByKey","onSortChange","isLoading","error","pagination","usingNextModelsUI","useNextModelsUIContext","enrichedModelsData","tableColumns","useMemo","columns","NAME","enableSorting","header","accessorKey","cell","getValue","String","meta","minWidth","flex","LATEST_VERSION","row","original","latestVersionNumber","Boolean","Math","max","toString","maxWidth","push","ALIASED_VERSIONS","modelEntity","STAGE_STAGING","latest_versions","Stages","STAGING","STAGE_PRODUCTION","_ref6","PRODUCTION","CREATED_BY","_ref7","LAST_MODIFIED","_ref8","formatTimestamp","TAGS","_ref9","sorting","desc","registerModelDocUrl","RegisteringModelDocUrl","noResultsDescription","emptyComponent","Empty","image","WarningIcon","description","ErrorWrapper","getMessageField","SearchIcon","content","rel","PlusIcon","button","table","useReactTable","data","getCoreRowModel","getRowId","_ref10","onSortingChange","stateUpdater","newSortState","Table","scrollable","empty","getRowModel","rows","TableRow","isHeader","getLeafHeaders","_meta","TableHeader","ellipsis","sortable","column","getCanSort","sortDirection","getIsSorted","onToggleSort","currentSortColumn","sortDesc","toggleSorting","columnDef","flexRender","getContext","TableSkeletonRows","getAllCells","_meta2","TableCell","ModelListViewImpl","super","handleSearch","event","searchInput","preventDefault","onSearch","unifiedTableSortChange","fieldMappedToSortKey","timestamp","handleTableChange","field","order","filters","sorter","onClickSortableColumn","getSortFieldName","handleClickNext","onClickNext","handleClickPrev","onClickPrev","handleSetMaxResult","item","keyPath","domEvent","onSetMaxResult","maxResultsSelection","REGISTERED_MODELS_PER_PAGE_COMPACT","disableOnboardingHelper","getLocalStore","onboarding","componentDidMount","updatePageTitle","models","currentPage","nextPageToken","loading","PageContainer","usesFullHeight","PageHeader","spacerSize","Hint","getLearnMoreDisplayString","Spacer","shouldShowModelsNextUI","ModelsNextUIToggleSwitch","CursorPagination","hasNextPage","hasPreviousPage","onNextPage","onPreviousPage","pageSizeSelect","num","default","maxResultValue","options","defaultProps","REGISTERED_MODELS_SEARCH_NAME_FIELD","REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD","ModelRegistryOnboardingString","ModelListView","withNextModelsUIContext","ModelListPageImpl","_this","modelListPageStoreKey","defaultPersistedPageTokens","initialSearchRegisteredModelsApiId","searchRegisteredModelsApiId","criticalInitialRequestIds","pollIntervalId","isEmptyPageResponse","registered_models","next_page_token","updatePageState","page","response","getNextPageTokenFromResponse","prevState","pageTokens","setPersistedPageTokens","resetHistoryState","loadPage","handleSearchInputChange","updateUrlWithSearchFilter","urlParams","newUrl","createMLflowRoutePath","getSearchUrlFromState","pathname","search","handleMaxResultsChange","setMaxResultsInStore","handleClickSortableColumn","sortOrder","AntdTableSortOrder","DESC","getMaxResultsSelection","getPersistedMaxResults","constructSearchInputFromURLState","getUrlState","getSearchParamsFromUrl","urlState","persistedPageTokens","getPersistedPageTokens","maxResultsForTokens","loadModels","store","page_tokens","max_results","isInitialLoading","searchRegisteredModelsApi","getCombinedSearchFilter","query","getOrderByExpr","r","ModelListPage","Object","entities","modelByName","ModelListPageWrapper","ModelListPageWrapperImpl","NONE","ARCHIVED","ACTIVE_STAGES","StageLabels","StageTagComponents","Tag","ActivityTypes","style","ModelVersionStatus","READY","DefaultModelVersionStatusMessages","modelVersionStatusIconTooltips","ModelVersionStatusIcons","ReadyIcon","MODEL_VERSION_STATUS_POLL_INTERVAL","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","ASC","archiveExistingVersionToolTipText","currentStage","mlflowAliasesLearnMoreLink","getModelNameFilter","resolveFilterValue","initialFilter","OverflowMenu","menu","overflowMenu","Menu","itemName","otherProps","Dropdown","overlay","trigger","arrow","OverflowIcon","breadcrumbs","titleAddOns","preview","hideSpacer","dangerouslyAppendEmotionCSS","Header","Breadcrumb","includeTrailingCaret","b","i","buttons","PreviewBadge","flexShrink"],"sourceRoot":""}