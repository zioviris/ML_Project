{"version":3,"file":"static/js/249.779da5e1.chunk.js","mappings":"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","sources":["experiment-tracking/components/runs-charts/components/RunsChartsGlobalChartSettingsDropdown.tsx","common/static/icon-visible-fill.svg","experiment-tracking/components/experiment-page/utils/persistSearchFacets.serializers.ts","experiment-tracking/components/experiment-page/hooks/useExperimentPageSearchFacets.tsx","common/hooks/useIsTabActive.tsx","experiment-tracking/components/runs-charts/utils/findChartStepsByTimestamp.ts","experiment-tracking/components/runs-charts/components/cards/RunsChartsLineChartCard.tsx","experiment-tracking/components/runs-charts/hooks/useCompareRunChartSelectedRange.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsScatterChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsContourChartCard.tsx","common/static/parallel-chart-placeholder.svg","experiment-tracking/components/runs-charts/components/cards/RunsChartsParallelChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsDifferenceChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsImageChartCard.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsCard.tsx","common/static/chart-contour.svg","experiment-tracking/components/runs-charts/components/hooks/useLineChartGlobalConfig.tsx","experiment-tracking/components/experiment-page/utils/experimentPage.fetch-utils.ts","experiment-tracking/components/runs-charts/components/cards/ChartCard.common.tsx","experiment-tracking/components/runs-charts/components/RunsScatterPlot.tsx","experiment-tracking/components/runs-charts/components/RunsMetricsLegend.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigure.common.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureMetricWithDatasetSelect.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureBarChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureParallelChart.tsx","experiment-tracking/components/runs-charts/components/RunsChartsYAxisMetricAndExpressionSelector.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureLineChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureLineChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureParallelChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureContourChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureScatterChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureDifferenceChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureImageChart.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureImageChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureScatterChartWithDatasets.tsx","experiment-tracking/components/runs-charts/components/RunsChartsConfigureModal.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureBarChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureContourChart.preview.tsx","experiment-tracking/components/runs-charts/components/config/RunsChartsConfigureScatterChart.preview.tsx","experiment-tracking/components/runs-charts/utils/runsCharts.const.ts","experiment-tracking/components/runs-charts/components/charts/LazyParallelCoordinatesPlot.tsx","experiment-tracking/components/experiment-page/contexts/ExperimentPageUIStateContext.tsx","experiment-tracking/components/experiment-page/hooks/useToggleRowVisibilityCallback.tsx","experiment-tracking/components/runs-charts/components/RunsMetricsLegendWrapper.tsx","experiment-tracking/components/runs-charts/hooks/useSampledMetricHistoryGraphQL.tsx","experiment-tracking/components/runs-charts/hooks/useSampledMetricHistory.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentIds.ts","experiment-tracking/components/runs-charts/hooks/useRunsChartTraceHighlight.ts","shared/web-shared/utils/coerceToEnum.ts","graphql/get-graphql-error.ts","experiment-tracking/components/runs-charts/hooks/useRunsHighlightTableRow.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ColumnHeaderCell.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DateCellRenderer.tsx","common/components/TrimmedText.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunDescriptionCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ExperimentNameCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ModelsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ModelsHeaderCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/VersionCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunVisibilityControlButton.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableHeaderContext.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsHeaderCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/GroupParentCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunNameCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/LoadMoreRowRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DatasetsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/AggregateMetricValueCell.tsx","experiment-tracking/components/experiment-page/utils/experimentPage.column-utils.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsEmptyTable.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableAddColumnCTA.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableStatusBar.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentTableSelectRowHandler.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTable.tsx","experiment-tracking/components/runs-charts/utils/differenceView.ts","experiment-tracking/components/runs-charts/components/charts/difference-view-plot/DifferencePlotDataCell.tsx","experiment-tracking/components/runs-charts/components/charts/difference-view-plot/DifferencePlotRunHeaderCell.tsx","experiment-tracking/components/runs-charts/components/charts/DifferenceViewPlot.tsx","common/static/chart-difference.svg","experiment-tracking/components/modals/DeleteRunModal.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridSingleKeyPlot.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridMultipleKeyPlot.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.tsx","common/components/PreviewSidebar.tsx","experiment-tracking/components/MetricChartsAccordion.tsx","experiment-tracking/components/runs-charts/components/RunsChartsAddChartMenu.tsx","experiment-tracking/components/runs-charts/components/sections/RunsChartsSectionHeader.tsx","experiment-tracking/components/runs-charts/hooks/useIsInViewport.tsx","experiment-tracking/components/runs-charts/components/RunsChartsDraggableCard.tsx","experiment-tracking/components/runs-charts/components/RunsChartsDraggablePreview.tsx","experiment-tracking/components/runs-charts/components/RunsChartsDraggableCardsGridSection.tsx","experiment-tracking/components/runs-charts/components/sections/RunsChartsSection.tsx","experiment-tracking/components/runs-charts/components/sections/RunsChartsSectionAccordion.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFilterInput.tsx","common/static/chart-parallel.svg","common/utils/StringUtils.ts","experiment-tracking/components/runs-charts/hooks/useChartExpressionParser.tsx","experiment-tracking/components/runs-charts/hooks/useChartImageDownloadHandler.tsx","common/components/ag-grid/AgGridLoader.tsx","shared/web-shared/hooks/useMediaQuery.ts","experiment-tracking/components/modals/RenameRunModal.tsx","experiment-tracking/components/experiment-page/hooks/usePopulateImagesByRunUuid.tsx","experiment-tracking/components/modals/RenameForm.tsx","experiment-tracking/components/runs-charts/components/cards/RunsChartsBarChartCard.tsx","experiment-tracking/components/runs-charts/components/RunsMultipleTracesTooltipBody.tsx","experiment-tracking/components/runs-charts/hooks/useRunsChartsUIConfiguration.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFullScreenModal.tsx","experiment-tracking/components/runs-charts/components/RunsMetricsBarPlot.tsx","experiment-tracking/components/runs-charts/components/RunsContourPlot.tsx","experiment-tracking/components/modals/GenericInputModal.tsx","experiment-tracking/components/runs-charts/components/RunsChartsDraggableCardsGridContext.tsx","experiment-tracking/components/runs-charts/components/RunsChartsTooltipBody.tsx","common/static/chart-line.svg","experiment-tracking/components/runs-charts/hooks/useRunsChartsMultipleTracesTooltip.tsx","experiment-tracking/components/runs-charts/utils/expressionCharts.utils.ts","experiment-tracking/components/runs-charts/components/RunsMetricsLinePlot.tsx","common/static/chart-scatter.svg","experiment-tracking/components/runs-charts/components/RunsChartsNoDataFoundIndicator.tsx","experiment-tracking/components/runs-charts/hooks/useRunsChartsTooltip.tsx","experiment-tracking/components/RunStatusIcon.tsx","common/static/chart-bar.svg","experiment-tracking/components/runs-compare/hooks/useGroupedChartRunData.tsx","experiment-tracking/components/experiment-page/models/ExperimentPageSearchFacetsState.tsx","common/hooks/useDragAndDropElement.tsx","experiment-tracking/components/modals/ConfirmModal.tsx","experiment-tracking/components/runs-charts/hooks/useMutableHoverCallback.tsx","experiment-tracking/components/runs-charts/hooks/useImageSliderStepMarks.tsx","common/static/chart-image.svg"],"sourcesContent":["import { Button, CheckIcon, DropdownMenu, GearIcon, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isUndefined } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useCallback } from 'react';\nimport { LineSmoothSlider } from '../../LineSmoothSlider';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RunsChartsUIConfigurationSetter } from '../hooks/useRunsChartsUIConfiguration';\n\nexport const RunsChartsGlobalChartSettingsDropdown = ({\n  globalLineChartConfig,\n  metricKeyList,\n  updateUIState,\n}: {\n  metricKeyList: string[];\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  updateUIState: (stateSetter: RunsChartsUIConfigurationSetter) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const { lineSmoothness, selectedXAxisMetricKey, xAxisKey } = globalLineChartConfig || {};\n\n  const updateGlobalLineChartSettings = useCallback(\n    (newSettings: Partial<RunsChartsGlobalLineChartConfig>) =>\n      updateUIState((state) => ({\n        ...state,\n        globalLineChartConfig: {\n          ...state.globalLineChartConfig,\n          ...newSettings,\n        },\n      })),\n    [updateUIState],\n  );\n\n  const isUsingGlobalMetricXaxis = xAxisKey === RunsChartsLineChartXAxisType.METRIC;\n\n  const label = intl.formatMessage({\n    defaultMessage: 'Configure charts',\n    description: 'Experiment page > view controls > global settings for line chart view > dropdown button label',\n  });\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <Tooltip\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_44\"\n        content={label}\n      >\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"mlflow.charts.controls.global_chart_setup_dropdown\"\n            icon={<GearIcon />}\n            aria-label={label}\n          />\n        </DropdownMenu.Trigger>\n      </Tooltip>\n      <DropdownMenu.Content align=\"end\" css={{ minWidth: 300 }}>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'X-axis',\n            description:\n              'Experiment page > view controls > global settings for line chart view > settings for x-axis section label',\n          })}\n        >\n          <DropdownMenu.Label css={{ display: 'flex', gap: 8 }}>\n            <FormattedMessage\n              defaultMessage=\"X-axis\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis section label\"\n            />\n          </DropdownMenu.Label>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_68\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.STEP}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.STEP })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Step\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use step axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_78\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (wall)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use wall time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_88\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME_RELATIVE })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (relative)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use relative time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.Sub>\n            <DropdownMenu.SubTrigger\n              css={{\n                paddingLeft: theme.spacing.xs + theme.spacing.sm,\n              }}\n            >\n              <DropdownMenu.IconWrapper>\n                <CheckIcon\n                  css={{\n                    visibility: isUsingGlobalMetricXaxis ? 'visible' : 'hidden',\n                  }}\n                />\n              </DropdownMenu.IconWrapper>\n              <FormattedMessage\n                defaultMessage=\"Metric\"\n                description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use metric axis in all charts\"\n              />\n            </DropdownMenu.SubTrigger>\n            <DropdownMenu.SubContent css={{ maxHeight: 300, overflow: 'auto' }}>\n              {metricKeyList.map((metricKey) => (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_118\"\n                  key={metricKey}\n                  checked={selectedXAxisMetricKey === metricKey && isUsingGlobalMetricXaxis}\n                  onClick={() =>\n                    updateGlobalLineChartSettings({\n                      xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n                      selectedXAxisMetricKey: metricKey,\n                    })\n                  }\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {metricKey}\n                </DropdownMenu.CheckboxItem>\n              ))}\n            </DropdownMenu.SubContent>\n          </DropdownMenu.Sub>\n        </DropdownMenu.Group>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Line smoothing',\n            description:\n              'Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.',\n          })}\n        >\n          <DropdownMenu.Label>\n            <FormattedMessage\n              defaultMessage=\"Line smoothing\"\n              description=\"Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.\"\n            />\n          </DropdownMenu.Label>\n\n          <div css={{ padding: theme.spacing.sm }}>\n            <LineSmoothSlider\n              min={0}\n              max={100}\n              onChange={(lineSmoothness) => updateGlobalLineChartSettings({ lineSmoothness })}\n              value={lineSmoothness ? lineSmoothness : 0}\n            />\n          </div>\n        </DropdownMenu.Group>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","var _path, _circle;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgIconVisibleFill(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 3C3.45 3 1.4375 6.33333 1 8C1.4375 9.66667 3.45 13 8 13C12.55 13 14.5625 9.66667 15 8C14.5625 6.33333 12.55 3 8 3Z\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 8,\n    cy: 8,\n    r: 2.25,\n    fill: \"currentColor\",\n    stroke: \"white\",\n    strokeWidth: 1.5\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconVisibleFill);\nexport default __webpack_public_path__ + \"static/media/icon-visible-fill.8d34cd35303828fdfc15154f5536e63b.svg\";\nexport { ForwardRef as ReactComponent };","import { isArray } from 'lodash';\nimport { atobUtf8, btoaUtf8 } from '../../../../common/utils/StringUtils';\nimport { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../models/ExperimentPageUIState';\n\ntype PersistSearchSerializeFunctions<Serialized = any, Unserialized = any> = {\n  serializeLocalStorage?(input: Unserialized): Serialized;\n  serializeQueryString?(input: Unserialized): Serialized;\n  deserializeLocalStorage?(input: Serialized): Unserialized;\n  deserializeQueryString?(input: Serialized): Unserialized;\n};\n\n/**\n * \"Flattens\" the strings array, i.e. merges it into a single value\n */\nconst flattenString = (input: string | string[]) => (isArray(input) ? input.join() : input);\n\n/**\n * All known field serialization and deserialization mechanisms used in search facets state persisting mechanism.\n */\nconst persistSearchStateFieldSerializers: Record<string, PersistSearchSerializeFunctions> = {\n  /**\n   * In rare cases, search filter might contain commas that interfere with `querystring` library\n   * parsing causing it to return array instead of string. Since it's difficult to selectively\n   * change `querystring`'s parsing action, we are making sure that the parsed values are always strings.\n   */\n  searchFilter: {\n    deserializeLocalStorage: flattenString,\n    deserializeQueryString: flattenString,\n  },\n  orderByAsc: {\n    serializeQueryString(input: boolean) {\n      return input.toString();\n    },\n    deserializeQueryString(input: string) {\n      return input === 'true';\n    },\n  },\n  datasetsFilter: {\n    serializeQueryString(inputs: ExperimentPageSearchFacetsState['datasetsFilter']) {\n      const inputsWithoutExperimentId = inputs.map(({ name, digest, context }) => ({\n        name,\n        digest,\n        context,\n      }));\n      return btoaUtf8(JSON.stringify(inputsWithoutExperimentId));\n    },\n    deserializeQueryString(input: string): ExperimentPageSearchFacetsState['datasetsFilter'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return [];\n        }\n        return parsedResult;\n      } catch {\n        return [];\n      }\n    },\n  },\n  /**\n   * Array of visible configured charts are serialized into base64-encoded JSON when put into query string\n   */\n  compareRunCharts: {\n    serializeQueryString(input: ExperimentPageUIState['compareRunCharts']) {\n      return btoaUtf8(JSON.stringify(input));\n    },\n    deserializeQueryString(input: string): ExperimentPageUIState['compareRunCharts'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return undefined;\n        }\n        return parsedResult;\n      } catch {\n        return undefined;\n      }\n    },\n  },\n  /**\n   * For \"compareRunsMode\", we will always save \"undefined\" value to local storage so users will\n   * get back to default view after visiting the view once more.\n   */\n  compareRunsMode: {\n    serializeLocalStorage() {\n      return undefined;\n    },\n  },\n};\n\ntype StateKey = keyof Partial<ExperimentPageSearchFacetsState>;\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to query string.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToQueryString = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeQueryString;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from query string and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromQueryString = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeQueryString;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to local storage.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToLocalStorage = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeLocalStorage;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from local storage and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromLocalStorage = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeLocalStorage;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n","import { assign, entries, isNil, keys, omitBy, pick } from 'lodash';\nimport { useMemo } from 'react';\nimport { NavigateOptions, useParams, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport {\n  ExperimentPageSearchFacetsState,\n  createExperimentPageSearchFacetsState,\n} from '../models/ExperimentPageSearchFacetsState';\nimport {\n  deserializeFieldsFromQueryString,\n  serializeFieldsToQueryString,\n} from '../utils/persistSearchFacets.serializers';\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_KEYS = [\n  'searchFilter',\n  'orderByKey',\n  'orderByAsc',\n  'startTime',\n  'lifecycleFilter',\n  'modelVersionFilter',\n  'datasetsFilter',\n];\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW = 'isPreview';\n\nexport type ExperimentPageQueryParams = any;\n\nexport type ExperimentQueryParamsSearchFacets = ExperimentPageSearchFacetsState & {\n  experimentIds?: string[];\n};\n\nconst getComparedExperimentIds = (comparedExperimentIds: string): string[] => {\n  try {\n    return comparedExperimentIds ? JSON.parse(comparedExperimentIds) : [];\n  } catch {\n    return [];\n  }\n};\n\nexport const useExperimentPageSearchFacets = (): [ExperimentQueryParamsSearchFacets | null, string[], boolean] => {\n  const [queryParams] = useSearchParams();\n\n  // Pick only the keys we care about\n  const pickedValues = useMemo(\n    () => pick(Object.fromEntries(queryParams.entries()), EXPERIMENT_PAGE_QUERY_PARAM_KEYS),\n    [queryParams],\n  );\n\n  // Check if the page is in preview mode. If so, it should not be persisted until explicitly changed\n  const isPreview = queryParams.get(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW) === 'true';\n\n  // Destructure to get raw values\n  const { searchFilter, orderByKey, orderByAsc, startTime, lifecycleFilter, modelVersionFilter, datasetsFilter } =\n    pickedValues;\n\n  const areValuesEmpty = keys(pickedValues).length < 1;\n\n  const { experimentId } = useParams<{ experimentId: string }>();\n  const queryParamsExperimentIds = queryParams.get('experiments');\n\n  // Calculate experiment IDs\n  const experimentIds = useMemo(() => {\n    if (experimentId) {\n      return [experimentId];\n    }\n    if (queryParamsExperimentIds) {\n      return getComparedExperimentIds(queryParamsExperimentIds);\n    }\n    return [];\n  }, [experimentId, queryParamsExperimentIds]);\n\n  // Calculate and memoize search facets\n  const searchFacets = useMemo(() => {\n    if (areValuesEmpty) {\n      return null;\n    }\n    const deserializedFields = deserializeFieldsFromQueryString(\n      omitBy(\n        {\n          searchFilter,\n          orderByKey,\n          orderByAsc,\n          startTime,\n          lifecycleFilter,\n          modelVersionFilter,\n          datasetsFilter,\n        },\n        isNil,\n      ),\n    ) as ExperimentPageSearchFacetsState;\n\n    // If not all fields are provided, fill the gaps with default values\n    return assign(createExperimentPageSearchFacetsState(), deserializedFields);\n  }, [\n    // Use exact values to avoid unnecessary re-renders\n    searchFilter,\n    orderByKey,\n    orderByAsc,\n    startTime,\n    lifecycleFilter,\n    modelVersionFilter,\n    datasetsFilter,\n    areValuesEmpty,\n  ]);\n\n  return [searchFacets, experimentIds, isPreview];\n};\n\nexport const useUpdateExperimentPageSearchFacets = () => {\n  const [, setParams] = useSearchParams();\n\n  return (partialFacets: Partial<ExperimentPageSearchFacetsState>, options?: NavigateOptions) => {\n    const newParams = serializeFieldsToQueryString(partialFacets);\n    setParams((currentParams) => {\n      entries(newParams).forEach(([key, value]) => {\n        currentParams.set(key, value);\n      });\n      currentParams.delete(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW);\n      return currentParams;\n    }, options);\n  };\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns whether the browser tab is active or not.\n * @returns true if the tab is active, false otherwise\n */\nexport const useIsTabActive = () => {\n  const [isTabActive, setIsTabActive] = useState(document.visibilityState === 'visible');\n  useEffect(() => {\n    document.addEventListener('visibilitychange', (x) => {\n      setIsTabActive(document.visibilityState === 'visible');\n    });\n  }, []);\n  return isTabActive;\n};\n","import { type Dictionary, compact, first, isUndefined, last, max, min, minBy, orderBy, values } from 'lodash';\nimport { MetricEntity, SampledMetricsByRunUuidState } from '../../../types';\nimport { SampledMetricsByRun } from '../hooks/useSampledMetricHistory';\n\n/**\n * This function consumes chart timestamp range and returns\n * corresponding step range for a given metric basing on a history.\n */\nexport const findChartStepsByTimestamp = (\n  // Currently fetched metric history\n  currentMetricHistory: {\n    [rangeKey: string]: {\n      loading?: boolean | undefined;\n      metricsHistory?: MetricEntity[] | undefined;\n    };\n  },\n  // Timestamp range - either textual (\"2022-10-23 10:00:00\") or numeric (milliseconds)\n  range: [string | number, string | number],\n  // If set to true, will return entire boundaries from history if timestamps are not found.\n  // Otherwise, will return undefined.\n  useDefaultIfNotFound = true,\n): [number, number] | undefined => {\n  // First, let's compile a history of all metric values from all ranges,\n  // then sort it by timestamp\n  const flatHistory = orderBy(\n    compact(\n      values(currentMetricHistory)\n        .map(({ metricsHistory }) => metricsHistory)\n        .flat(),\n    ),\n    'timestamp',\n  );\n\n  // If there's no sufficient entries, return nothing\n  if (flatHistory.length < 2) {\n    return undefined;\n  }\n\n  // We consume textual ranges produced by charts so we have\n  // to convert them to timestamps\n  const lowerBound = new Date(range[0]).valueOf();\n  const upperBound = new Date(range[1]).valueOf();\n\n  // First, try to find the lower entry using loop\n  let lowerEntry = useDefaultIfNotFound ? first(flatHistory) : undefined;\n\n  for (let index = 0; index < flatHistory.length; index++) {\n    const entry = flatHistory[index];\n    if (entry.timestamp > lowerBound) {\n      lowerEntry = flatHistory[index - 1] || entry;\n      break;\n    }\n  }\n\n  // Repeat for the upper entry\n  let upperEntry = useDefaultIfNotFound ? last(flatHistory) : undefined;\n\n  for (let index = flatHistory.length - 1; index >= 0; index--) {\n    const entry = flatHistory[index];\n    if (entry.timestamp < upperBound) {\n      upperEntry = flatHistory[index + 1] || entry;\n      break;\n    }\n  }\n\n  // If boundaries are not found, return nothing\n  if (isUndefined(lowerEntry) || isUndefined(upperEntry)) {\n    return undefined;\n  }\n\n  // Return found boundary entries\n  return [lowerEntry.step, upperEntry.step];\n};\n\n/**\n * Finds the chart steps by absolute timestamp for multiple runs.\n *\n * @param sampledMetrics - The sampled metrics by run UUID state.\n * @param runUuids - The array of run UUIDs.\n * @param metricKey - The metric key.\n * @param range - The range of timestamps.\n * @returns The lower and upper bounds of the chart steps, or undefined if not found.\n */\nexport const findChartStepsByTimestampForRuns = (\n  sampledMetrics: SampledMetricsByRunUuidState,\n  runUuids: string[],\n  metricKey: string,\n  range: [string | number, string | number],\n): [number, number] | undefined => {\n  const stepRangesPerRun = compact(\n    runUuids.map((runUuid) => {\n      const metricHistoryForRun = sampledMetrics[runUuid]?.[metricKey];\n      return metricHistoryForRun ? findChartStepsByTimestamp(metricHistoryForRun, range, false) : undefined;\n    }),\n  );\n  const lowerBound = min(stepRangesPerRun.map(([bound]) => bound));\n  const upperBound = max(stepRangesPerRun.map(([, bound]) => bound));\n\n  if (!isUndefined(lowerBound) && !isUndefined(upperBound)) {\n    return [lowerBound, upperBound];\n  }\n\n  return undefined;\n};\n\n/**\n * This function consumes chart relative time range and returns\n * corresponding step range for a given metric basing on a history.\n *\n * @param currentlyVisibleMetrics currentlyVisibleMetrics is a dictionary of currently rendered metric traces for run\n * @param runUuids a list of run UUIDs to process\n * @param relativeRange a relative time range in seconds\n * @returns a range of steps or undefined if no relevant are found\n */\nexport const findAbsoluteTimestampRangeForRelativeRange = (\n  currentlyVisibleMetrics: Dictionary<SampledMetricsByRun>,\n  runUuids: string[],\n  relativeRange: [number, number],\n  multiplier = 1000,\n): [number, number] | undefined => {\n  const stepRangesPerRun = compact(\n    runUuids.map((runUuid) => {\n      const runData = currentlyVisibleMetrics[runUuid];\n\n      if (!runData) {\n        return null;\n      }\n\n      // omit the \"runUuid\" key so we can conveniently access the metrics data\n      const { runUuid: _, ...runMetrics } = runData;\n\n      // concat all the metrics history for the run\n      const visibleMetricHistoryForRun = values(runMetrics).flatMap((metric) => metric.metricsHistory ?? []);\n\n      // Find the timestamp offset for the run. Should be equal to lowest timestamp value for each run.\n      const timestampOffset = minBy(visibleMetricHistoryForRun, 'timestamp')?.timestamp || 0;\n\n      // Convert relative time range to timestamp range. Relative range comes\n      // in seconds so we have to multiply it by 1000 to get milliseconds.\n      return [relativeRange[0] * multiplier + timestampOffset, relativeRange[1] * multiplier + timestampOffset] as [\n        number,\n        number,\n      ];\n    }),\n  );\n  const lowerBound = min(stepRangesPerRun.map(([bound]) => bound));\n  const upperBound = max(stepRangesPerRun.map(([, bound]) => bound));\n  if (!isUndefined(lowerBound) && !isUndefined(upperBound)) {\n    return [lowerBound, upperBound];\n  }\n\n  return undefined;\n};\n","import { ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { RunsChartsRunData, RunsChartsLineChartXAxisType, removeOutliersFromMetricHistory } from '../RunsCharts.common';\nimport { RunsMetricsLinePlot } from '../RunsMetricsLinePlot';\nimport { RunsChartsTooltipMode, useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport {\n  RunsChartsLineChartYAxisType,\n  type RunsChartsCardConfig,\n  type RunsChartsLineCardConfig,\n} from '../../runs-charts.types';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  RunsChartCardVisibilityProps,\n  RunsChartCardSizeProps,\n  RunsChartCardLoadingPlaceholder,\n} from './ChartCard.common';\nimport { useSampledMetricHistory } from '../../hooks/useSampledMetricHistory';\nimport { compact, intersection, isEqual, isUndefined, pick, uniq } from 'lodash';\nimport {\n  shouldEnableRelativeTimeDateAxis,\n  shouldEnableChartExpressions,\n} from '../../../../../common/utils/FeatureUtils';\nimport { findAbsoluteTimestampRangeForRelativeRange } from '../../utils/findChartStepsByTimestamp';\nimport { Figure } from 'react-plotly.js';\nimport { ReduxState } from '../../../../../redux-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useCompareRunChartSelectedRange } from '../../hooks/useCompareRunChartSelectedRange';\nimport { MetricHistoryByName } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { useGroupedChartRunData } from '../../../runs-compare/hooks/useGroupedChartRunData';\nimport {\n  ExperimentChartImageDownloadFileFormat,\n  useChartImageDownloadHandler,\n} from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartMetricHistoryCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\nimport { RunsChartsNoDataFoundIndicator } from '../RunsChartsNoDataFoundIndicator';\nimport { RunsChartsGlobalLineChartConfig } from '../../../experiment-page/models/ExperimentPageUIState';\nimport { useLineChartGlobalConfig } from '../hooks/useLineChartGlobalConfig';\n\nconst getV2ChartTitle = (cardConfig: RunsChartsLineCardConfig): string => {\n  if (shouldEnableChartExpressions() && cardConfig.yAxisKey === RunsChartsLineChartYAxisType.EXPRESSION) {\n    const expressions = cardConfig.yAxisExpressions?.map((exp) => exp.expression) || [];\n    return expressions?.join(' vs ') || '';\n  }\n  if (!cardConfig.selectedMetricKeys || cardConfig.selectedMetricKeys.length === 0) {\n    return cardConfig.metricKey;\n  }\n\n  return cardConfig.selectedMetricKeys.join(' vs ');\n};\n\nexport interface RunsChartsLineChartCardProps\n  extends RunsChartCardReorderProps,\n    RunsChartCardSizeProps,\n    RunsChartCardVisibilityProps {\n  config: RunsChartsLineCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  groupBy: RunsGroupByConfig | null;\n\n  onDelete: () => void;\n  onEdit: () => void;\n\n  fullScreen?: boolean;\n\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n\n  setFullScreenChart?: (chart: { config: RunsChartsCardConfig; title: string; subtitle: ReactNode }) => void;\n  onDownloadFullMetricHistoryCsv?: (runUuids: string[], metricKeys: string[]) => void;\n\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n}\n\nconst SUPPORTED_DOWNLOAD_FORMATS: (ExperimentChartImageDownloadFileFormat | 'csv' | 'csv-full')[] = [\n  'png',\n  'svg',\n  'csv',\n  'csv-full',\n];\n\nexport const RunsChartsLineChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  onDownloadFullMetricHistoryCsv,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n  autoRefreshEnabled,\n  hideEmptyCharts,\n  globalLineChartConfig,\n  isInViewport: isInViewportProp,\n  isInViewportDeferred: isInViewportDeferredProp,\n  positionInSection,\n  ...reorderProps\n}: RunsChartsLineChartCardProps) => {\n  const { xAxisKey, selectedXAxisMetricKey, lineSmoothness } = useLineChartGlobalConfig(config, globalLineChartConfig);\n\n  const toggleFullScreenChart = useCallback(() => {\n    setFullScreenChart?.({\n      config,\n      title: getV2ChartTitle(config),\n      subtitle: null,\n    });\n  }, [config, setFullScreenChart]);\n\n  const slicedRuns = useMemo(() => chartRunData.filter(({ hidden }) => !hidden).reverse(), [chartRunData]);\n\n  const isGrouped = useMemo(() => slicedRuns.some((r) => r.groupParentInfo), [slicedRuns]);\n\n  const isEmptyDataset = useMemo(() => {\n    const metricKeys = config.selectedMetricKeys ?? [config.metricKey];\n    const metricsInRuns = slicedRuns.flatMap(({ metrics }) => Object.keys(metrics));\n    return intersection(metricKeys, uniq(metricsInRuns)).length === 0;\n  }, [config, slicedRuns]);\n\n  const runUuidsToFetch = useMemo(() => {\n    if (isGrouped) {\n      // First, get all runs inside visible groups\n      const runsInGroups = compact(slicedRuns.map((r) => r.groupParentInfo)).flatMap((g) => g.runUuids);\n\n      // Finally, get \"remaining\" runs that are not grouped\n      const ungroupedRuns = compact(\n        slicedRuns.filter((r) => !r.groupParentInfo && !r.belongsToGroup).map((r) => r.runInfo?.runUuid),\n      );\n      return [...runsInGroups, ...ungroupedRuns];\n    }\n    // If grouping is disabled, just get all run UUIDs from runInfo\n    return compact(slicedRuns.map((r) => r.runInfo?.runUuid));\n  }, [slicedRuns, isGrouped]);\n\n  const metricKeys = useMemo(() => {\n    const getYAxisKeys = (config: RunsChartsLineCardConfig) => {\n      const fallback = [config.metricKey];\n      if (!shouldEnableChartExpressions() || config.yAxisKey !== RunsChartsLineChartYAxisType.EXPRESSION) {\n        return config.selectedMetricKeys ?? fallback;\n      }\n      const yAxisKeys = config.yAxisExpressions?.reduce((acc, exp) => {\n        exp.variables.forEach((variable) => acc.add(variable));\n        return acc;\n      }, new Set<string>());\n      return yAxisKeys === undefined ? fallback : Array.from(yAxisKeys);\n    };\n    const yAxisKeys = getYAxisKeys(config);\n    const xAxisKeys = !selectedXAxisMetricKey ? [] : [selectedXAxisMetricKey];\n\n    return yAxisKeys.concat(xAxisKeys);\n  }, [config, selectedXAxisMetricKey]);\n\n  const { setTooltip, resetTooltip, destroyTooltip, selectedRunUuid } = useRunsChartsTooltip(\n    config,\n    RunsChartsTooltipMode.MultipleTracesWithScanline,\n  );\n\n  // If the chart is in fullscreen mode, we always render its body.\n  // Otherwise, we only render the chart if it is in the viewport.\n  const isInViewport = fullScreen || isInViewportProp;\n  const isInViewportDeferred = fullScreen || isInViewportDeferredProp;\n\n  const { aggregateFunction } = groupBy || {};\n\n  const sampledMetricsByRunUuid = useSelector(\n    (state: ReduxState) => pick(state.entities.sampledMetricsByRunUuid, runUuidsToFetch),\n    shallowEqual,\n  );\n\n  /**\n   * We set a local state for changes because full screen and non-full screen charts are\n   * different components - this prevents having to sync them.\n   */\n  const [yRangeLocal, setYRangeLocal] = useState<[number, number] | undefined>(() => {\n    if (config.range && !isUndefined(config.range.yMin) && !isUndefined(config.range.yMax)) {\n      return [config.range.yMin, config.range.yMax];\n    }\n    return undefined;\n  });\n\n  const { setOffsetTimestamp, stepRange, xRangeLocal, setXRangeLocal } = useCompareRunChartSelectedRange(\n    config,\n    xAxisKey,\n    config.metricKey,\n    sampledMetricsByRunUuid,\n    runUuidsToFetch,\n    xAxisKey === RunsChartsLineChartXAxisType.STEP ? config.xAxisScaleType : 'linear',\n  );\n\n  const { resultsByRunUuid, isLoading, isRefreshing } = useSampledMetricHistory({\n    runUuids: runUuidsToFetch,\n    metricKeys,\n    enabled: isInViewportDeferred,\n    maxResults: 320,\n    range: stepRange,\n    autoRefreshEnabled,\n  });\n\n  const chartLayoutUpdated = ({ layout }: Readonly<Figure>) => {\n    // We only want to update the local state if the chart is not in full screen mode.\n    // If not, this can cause synchronization issues between the full screen and non-full screen charts.\n    if (!fullScreen) {\n      let yAxisMin = yRangeLocal?.[0];\n      let yAxisMax = yRangeLocal?.[1];\n      let xAxisMin = xRangeLocal?.[0];\n      let xAxisMax = xRangeLocal?.[1];\n\n      const { autorange: yAxisAutorange, range: newYRange } = layout.yaxis || {};\n      const yRangeChanged = !isEqual(yAxisAutorange ? [undefined, undefined] : newYRange, [yAxisMin, yAxisMax]);\n\n      if (yRangeChanged) {\n        // When user zoomed in/out or changed the Y range manually, hide the tooltip\n        destroyTooltip();\n      }\n\n      if (yAxisAutorange) {\n        yAxisMin = undefined;\n        yAxisMax = undefined;\n      } else if (newYRange) {\n        yAxisMin = newYRange[0];\n        yAxisMax = newYRange[1];\n      }\n\n      const { autorange: xAxisAutorange, range: newXRange } = layout.xaxis || {};\n      if (xAxisAutorange) {\n        // Remove saved range if chart is back to default viewport\n        xAxisMin = undefined;\n        xAxisMax = undefined;\n      } else if (newXRange) {\n        const ungroupedRunUuids = compact(slicedRuns.map(({ runInfo }) => runInfo?.runUuid));\n        const groupedRunUuids = slicedRuns.flatMap(({ groupParentInfo }) => groupParentInfo?.runUuids ?? []);\n\n        if (!shouldEnableRelativeTimeDateAxis() && xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n          const timestampRange = findAbsoluteTimestampRangeForRelativeRange(\n            resultsByRunUuid,\n            [...ungroupedRunUuids, ...groupedRunUuids],\n            newXRange as [number, number],\n          );\n          setOffsetTimestamp([...(timestampRange as [number, number])]);\n        } else if (xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE_HOURS) {\n          const timestampRange = findAbsoluteTimestampRangeForRelativeRange(\n            resultsByRunUuid,\n            [...ungroupedRunUuids, ...groupedRunUuids],\n            newXRange as [number, number],\n            1000 * 60 * 60, // Convert hours to milliseconds\n          );\n          setOffsetTimestamp([...(timestampRange as [number, number])]);\n        } else {\n          setOffsetTimestamp(undefined);\n        }\n        xAxisMin = newXRange[0];\n        xAxisMax = newXRange[1];\n      }\n\n      if (\n        !isEqual(\n          { xMin: xRangeLocal?.[0], xMax: xRangeLocal?.[1], yMin: yRangeLocal?.[0], yMax: yRangeLocal?.[1] },\n          { xMin: xAxisMin, xMax: xAxisMax, yMin: yAxisMin, yMax: yAxisMax },\n        )\n      ) {\n        setXRangeLocal(isUndefined(xAxisMin) || isUndefined(xAxisMax) ? undefined : [xAxisMin, xAxisMax]);\n        setYRangeLocal(isUndefined(yAxisMin) || isUndefined(yAxisMax) ? undefined : [yAxisMin, yAxisMax]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    destroyTooltip();\n  }, [destroyTooltip, isLoading]);\n\n  const sampledData: RunsChartsRunData[] = useMemo(\n    () =>\n      slicedRuns.map((run) => {\n        const metricsHistory = metricKeys.reduce((acc: MetricHistoryByName, key) => {\n          const history = resultsByRunUuid[run.uuid]?.[key]?.metricsHistory;\n          if (history) {\n            acc[key] = config.ignoreOutliers ? removeOutliersFromMetricHistory(history) : history;\n          }\n          return acc;\n        }, {});\n\n        return {\n          ...run,\n          metricsHistory,\n        };\n      }),\n    [metricKeys, resultsByRunUuid, slicedRuns, config.ignoreOutliers],\n  );\n\n  const sampledGroupData = useGroupedChartRunData({\n    enabled: isGrouped,\n    ungroupedRunsData: sampledData,\n    metricKeys,\n    sampledDataResultsByRunUuid: resultsByRunUuid,\n    aggregateFunction,\n    selectedXAxisMetricKey: xAxisKey === RunsChartsLineChartXAxisType.METRIC ? selectedXAxisMetricKey : undefined,\n    ignoreOutliers: config.ignoreOutliers ?? false,\n  });\n\n  // Use grouped data traces only if enabled and if there are any groups\n  const chartData = isGrouped ? sampledGroupData : sampledData;\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  // If the component is not in the viewport, we don't want to render the chart\n  const renderChartBody = isInViewport;\n\n  // If the data is loading or chart has just entered the viewport, show a skeleton\n  const renderSkeleton = isLoading || !isInViewportDeferred;\n\n  const chartBody = (\n    <div\n      css={[\n        styles.lineChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n    >\n      {!renderChartBody ? null : renderSkeleton ? (\n        <RunsChartCardLoadingPlaceholder />\n      ) : (\n        <RunsMetricsLinePlot\n          runsData={chartData}\n          metricKey={config.metricKey}\n          selectedMetricKeys={config.selectedMetricKeys}\n          scaleType={config.scaleType}\n          xAxisKey={xAxisKey}\n          xAxisScaleType={config.xAxisScaleType}\n          yAxisKey={config.yAxisKey}\n          yAxisExpressions={config.yAxisExpressions}\n          selectedXAxisMetricKey={selectedXAxisMetricKey}\n          lineSmoothness={lineSmoothness}\n          useDefaultHoverBox={false}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          selectedRunUuid={selectedRunUuid}\n          onUpdate={chartLayoutUpdated}\n          xRange={xRangeLocal}\n          yRange={yRangeLocal}\n          fullScreen={fullScreen}\n          displayPoints={config.displayPoints}\n          onSetDownloadHandler={setImageDownloadHandler}\n          positionInSection={positionInSection ?? 0}\n        />\n      )}\n    </div>\n  );\n\n  const onClickDownload = useCallback(\n    (format) => {\n      const savedChartTitle = config.selectedMetricKeys?.join('-') ?? config.metricKey;\n      if (format === 'csv-full') {\n        const singleRunUuids = compact(chartData.map((d) => d.runInfo?.runUuid));\n        const runUuidsFromGroups = compact(\n          chartData\n            .filter(({ groupParentInfo }) => groupParentInfo)\n            .flatMap((group) => group.groupParentInfo?.runUuids),\n        );\n        const runUuids = [...singleRunUuids, ...runUuidsFromGroups];\n        onDownloadFullMetricHistoryCsv?.(runUuids, config.selectedMetricKeys || [config.metricKey]);\n        return;\n      }\n      if (format === 'csv') {\n        downloadChartMetricHistoryCsv(chartData, config.selectedMetricKeys || [config.metricKey], savedChartTitle);\n        return;\n      }\n      imageDownloadHandler?.(format, savedChartTitle);\n    },\n    [chartData, config, imageDownloadHandler, onDownloadFullMetricHistoryCsv],\n  );\n\n  // Do not render the card if the chart is empty and the user has enabled hiding empty charts\n  if (hideEmptyCharts && isEmptyDataset) {\n    return null;\n  }\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={getV2ChartTitle(config)}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      supportedDownloadFormats={SUPPORTED_DOWNLOAD_FORMATS}\n      onClickDownload={onClickDownload}\n      // Disable fullscreen button if the chart is empty\n      toggleFullScreenChart={isEmptyDataset ? undefined : toggleFullScreenChart}\n      isRefreshing={isRefreshing}\n      isHidden={!isInViewport}\n      {...reorderProps}\n    >\n      {isEmptyDataset ? <RunsChartsNoDataFoundIndicator /> : chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  lineChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { useMemo, useState } from 'react';\nimport { findChartStepsByTimestampForRuns } from '../utils/findChartStepsByTimestamp';\nimport { SampledMetricsByRunUuidState } from '../../../types';\nimport { isNumber, isString, isUndefined } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from '../components/RunsCharts.common';\nimport { RunsChartsLineCardConfig } from '../runs-charts.types';\n\n/**\n * Hook used in compare run charts. It's responsible for converting selected range\n * (which can be either step or timestamp) to step range, based on chart axis type.\n * @param config Line chart configuration\n * @param xAxisKey Can be 'step', 'time' or 'time-relative'\n * @param metricKey\n * @param sampledMetricsByRunUuid Recorded history for metrics for runs in compare chart\n * @param runUuids List of run UUIDs in compare chart\n * @param scaleType Scale type for the chart\n */\nexport const useCompareRunChartSelectedRange = (\n  config: RunsChartsLineCardConfig,\n  xAxisKey: RunsChartsLineChartXAxisType,\n  metricKey: string,\n  sampledMetricsByRunUuid: SampledMetricsByRunUuidState,\n  runUuids: string[],\n  scaleType: 'linear' | 'log' = 'linear',\n) => {\n  const [xRangeLocal, setXRangeLocal] = useState<[number | string, number | string] | undefined>(() => {\n    if (config.range && !isUndefined(config.range.xMin) && !isUndefined(config.range.xMax)) {\n      return [config.range.xMin, config.range.xMax];\n    }\n    return undefined;\n  });\n  const [offsetTimestamp, setOffsetTimestamp] = useState<[number, number] | undefined>(undefined);\n  const stepRange = useMemo<[number, number] | undefined>(() => {\n    if (!xRangeLocal) {\n      return undefined;\n    }\n    if (xAxisKey === RunsChartsLineChartXAxisType.TIME && isString(xRangeLocal[0]) && isString(xRangeLocal[1])) {\n      // If we're dealing with absolute time-based chart axis, find corresponding steps based on timestamp\n      const bounds = findChartStepsByTimestampForRuns(\n        sampledMetricsByRunUuid,\n        runUuids,\n        metricKey,\n        xRangeLocal as [string, string],\n      );\n      return bounds;\n    }\n\n    if (\n      xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE &&\n      offsetTimestamp &&\n      isNumber(xRangeLocal[0]) &&\n      isNumber(xRangeLocal[1])\n    ) {\n      // If we're dealing with absolute time-based chart axis, find corresponding steps based on timestamp\n      const bounds = findChartStepsByTimestampForRuns(\n        sampledMetricsByRunUuid,\n        runUuids,\n        metricKey,\n        offsetTimestamp as [number, number],\n      );\n      return bounds;\n    }\n\n    if (xAxisKey === RunsChartsLineChartXAxisType.STEP && isNumber(xRangeLocal[0]) && isNumber(xRangeLocal[1])) {\n      // If we're dealing with step-based chart axis, use those steps but incremented/decremented\n      const lowerBound = Math.floor(scaleType === 'log' ? 10 ** xRangeLocal[0] : xRangeLocal[0]);\n      const upperBound = Math.ceil(scaleType === 'log' ? 10 ** xRangeLocal[1] : xRangeLocal[1]);\n      return lowerBound && upperBound ? [lowerBound - 1, upperBound + 1] : undefined;\n    }\n\n    // return undefined for xAxisKey === 'metric' because there isn't\n    // necessarily a mapping between value range and step range\n    return undefined;\n  }, [xAxisKey, metricKey, xRangeLocal, sampledMetricsByRunUuid, runUuids, offsetTimestamp, scaleType]);\n\n  return {\n    /**\n     * If there's an offset timestamp calculated from relative runs, set it using this function\n     */\n    setOffsetTimestamp,\n    /**\n     * Resulting step range\n     */\n    stepRange,\n    /**\n     * Local range selected by user\n     */\n    xRangeLocal,\n    /**\n     * Set selected range\n     */\n    setXRangeLocal,\n  };\n};\n","import { useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport type { RunsChartsScatterCardConfig } from '../../runs-charts.types';\nimport {\n  RunsChartCardFullScreenProps,\n  RunsChartCardReorderProps,\n  RunsChartCardVisibilityProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n} from './ChartCard.common';\nimport { RunsScatterPlot } from '../RunsScatterPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { useChartImageDownloadHandler } from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\nimport { intersection, uniq } from 'lodash';\nimport { RunsChartsNoDataFoundIndicator } from '../RunsChartsNoDataFoundIndicator';\nimport { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nexport interface RunsChartsScatterChartCardProps\n  extends RunsChartCardReorderProps,\n    RunsChartCardVisibilityProps,\n    RunsChartCardFullScreenProps {\n  config: RunsChartsScatterCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  hideEmptyCharts?: boolean;\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const RunsChartsScatterChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  fullScreen,\n  setFullScreenChart,\n  hideEmptyCharts,\n  isInViewport: isInViewportProp,\n  ...reorderProps\n}: RunsChartsScatterChartCardProps) => {\n  const { theme } = useDesignSystemTheme();\n  const title = (() => {\n    if (config.xaxis.datasetName || config.yaxis.datasetName) {\n      return (\n        <div css={{ flex: 1, display: 'flex', alignItems: 'center', overflow: 'hidden', gap: theme.spacing.xs }}>\n          <Typography.Text title={config.xaxis.key} ellipsis bold>\n            {config.xaxis.datasetName && (\n              <>\n                <Tag componentId=\"mlflow.charts.scatter_card_title.dataset_tag\" css={{ marginRight: 0 }}>\n                  {config.xaxis.datasetName}\n                </Tag>{' '}\n              </>\n            )}\n            {config.xaxis.key}\n          </Typography.Text>\n          <Typography.Text>vs</Typography.Text>\n          <Typography.Text title={config.xaxis.key} ellipsis bold>\n            {config.yaxis.datasetName && (\n              <>\n                <Tag componentId=\"mlflow.charts.scatter_card_title.dataset_tag\" css={{ marginRight: 0 }}>\n                  {config.yaxis.datasetName}\n                </Tag>{' '}\n              </>\n            )}\n            {config.yaxis.key}\n          </Typography.Text>\n        </div>\n      );\n    }\n    return `${config.xaxis.key} vs. ${config.yaxis.key}`;\n  })();\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title,\n      subtitle: null,\n    });\n  };\n\n  const slicedRuns = useMemo(() => chartRunData.filter(({ hidden }) => !hidden), [chartRunData]);\n\n  const isEmptyDataset = useMemo(() => {\n    const metricKeys = [config.xaxis.dataAccessKey ?? config.xaxis.key, config.yaxis.dataAccessKey ?? config.yaxis.key];\n    const metricsInRuns = slicedRuns.flatMap(({ metrics }) => Object.keys(metrics));\n    return intersection(metricKeys, uniq(metricsInRuns)).length === 0;\n  }, [config, slicedRuns]);\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useRunsChartsTooltip(config);\n\n  // If the chart is in fullscreen mode, we always render its body.\n  // Otherwise, we only render the chart if it is in the viewport.\n  const isInViewport = fullScreen || isInViewportProp;\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  const chartBody = (\n    <div\n      css={[\n        styles.scatterChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n    >\n      {isInViewport ? (\n        <RunsScatterPlot\n          runsData={slicedRuns}\n          xAxis={config.xaxis}\n          yAxis={config.yaxis}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          useDefaultHoverBox={false}\n          selectedRunUuid={selectedRunUuid}\n          onSetDownloadHandler={setImageDownloadHandler}\n        />\n      ) : null}\n    </div>\n  );\n\n  // Do not render the card if the chart is empty and the user has enabled hiding empty charts\n  if (hideEmptyCharts && isEmptyDataset) {\n    return null;\n  }\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={title}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      // Disable fullscreen button if the chart is empty\n      toggleFullScreenChart={isEmptyDataset ? undefined : toggleFullScreenChart}\n      supportedDownloadFormats={['png', 'svg', 'csv']}\n      onClickDownload={(format) => {\n        const savedChartTitle = [config.xaxis.key, config.yaxis.key].join('-');\n        if (format === 'csv' || format === 'csv-full') {\n          const paramsToExport = [];\n          const metricsToExport = [];\n          for (const axis of ['xaxis' as const, 'yaxis' as const]) {\n            if (config[axis].type === 'PARAM') {\n              paramsToExport.push(config[axis].key);\n            } else {\n              metricsToExport.push(config[axis].key);\n            }\n          }\n          downloadChartDataCsv(slicedRuns, metricsToExport, paramsToExport, savedChartTitle);\n          return;\n        }\n        imageDownloadHandler?.(format, savedChartTitle);\n      }}\n      {...reorderProps}\n    >\n      {isEmptyDataset ? <RunsChartsNoDataFoundIndicator /> : chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  scatterChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport type { RunsChartsContourCardConfig } from '../../runs-charts.types';\nimport {\n  RunsChartCardFullScreenProps,\n  RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n} from './ChartCard.common';\nimport { RunsContourPlot } from '../RunsContourPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { useChartImageDownloadHandler } from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\nimport { intersection, uniq } from 'lodash';\nimport { RunsChartsNoDataFoundIndicator } from '../RunsChartsNoDataFoundIndicator';\n\nexport interface RunsChartsContourChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsContourCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  hideEmptyCharts?: boolean;\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const RunsChartsContourChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  fullScreen,\n  setFullScreenChart,\n  hideEmptyCharts,\n  ...reorderProps\n}: RunsChartsContourChartCardProps) => {\n  const title = `${config.xaxis.key} vs. ${config.yaxis.key} vs. ${config.zaxis.key}`;\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title,\n      subtitle: null,\n    });\n  };\n\n  const slicedRuns = useMemo(() => chartRunData.filter(({ hidden }) => !hidden), [chartRunData]);\n\n  const isEmptyDataset = useMemo(() => {\n    const metricKeys = [config.xaxis.key, config.yaxis.key, config.zaxis.key];\n    const metricsInRuns = slicedRuns.flatMap(({ metrics }) => Object.keys(metrics));\n    return intersection(metricKeys, uniq(metricsInRuns)).length === 0;\n  }, [config, slicedRuns]);\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useRunsChartsTooltip(config);\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  const chartBody = (\n    <div\n      css={[\n        styles.contourChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n    >\n      <RunsContourPlot\n        runsData={slicedRuns}\n        xAxis={config.xaxis}\n        yAxis={config.yaxis}\n        zAxis={config.zaxis}\n        useDefaultHoverBox={false}\n        onHover={setTooltip}\n        onUnhover={resetTooltip}\n        selectedRunUuid={selectedRunUuid}\n        onSetDownloadHandler={setImageDownloadHandler}\n      />\n    </div>\n  );\n\n  // Do not render the card if the chart is empty and the user has enabled hiding empty charts\n  if (hideEmptyCharts && isEmptyDataset) {\n    return null;\n  }\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={title}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      // Disable fullscreen button if the chart is empty\n      toggleFullScreenChart={isEmptyDataset ? undefined : toggleFullScreenChart}\n      supportedDownloadFormats={['png', 'svg', 'csv']}\n      onClickDownload={(format) => {\n        const savedChartTitle = [config.xaxis.key, config.yaxis.key, config.zaxis.key].join('-');\n        if (format === 'csv' || format === 'csv-full') {\n          const paramsToExport = [];\n          const metricsToExport = [];\n          for (const axis of ['xaxis' as const, 'yaxis' as const, 'zaxis' as const]) {\n            if (config[axis].type === 'PARAM') {\n              paramsToExport.push(config[axis].key);\n            } else {\n              metricsToExport.push(config[axis].key);\n            }\n          }\n          downloadChartDataCsv(slicedRuns, metricsToExport, paramsToExport, savedChartTitle);\n          return;\n        }\n        imageDownloadHandler?.(format, savedChartTitle);\n      }}\n      {...reorderProps}\n    >\n      {isEmptyDataset ? <RunsChartsNoDataFoundIndicator /> : chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  contourChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","var _path, _path2, _g, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgParallelChartPlaceholder(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 80,\n    height: 42,\n    viewBox: \"0 0 80 42\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.28418 2.34094L39.4998 17.0908L76.3746 7.87216\",\n    stroke: \"#CF797B\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.95459 20.443L40.1702 25.1361L77.045 21.1134M1.95459 36.5338L40.1702 35.1929L77.045 25.1361\",\n    stroke: \"#A88E6F\",\n    strokeLinecap: \"round\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.8\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.28418 1V40.3341\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.6189 2.07251V39.9763\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.7156 2.07251V39.9763\",\n    stroke: \"url(#paint0_linear_2781_406689)\",\n    strokeWidth: 4,\n    strokeLinecap: \"square\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_2781_406689\",\n    x1: 78.2156,\n    y1: 2.07251,\n    x2: 78.2156,\n    y2: 39.9763,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#D04F5E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#4D9734\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgParallelChartPlaceholder);\nexport default __webpack_public_path__ + \"static/media/parallel-chart-placeholder.234ef0c5b220ef2a5a6fa5bafff173f7.svg\";\nexport { ForwardRef as ReactComponent };","import { Button, DropdownMenu, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useCallback, useMemo } from 'react';\nimport { ReactComponent as ParallelChartSvg } from '../../../../../common/static/parallel-chart-placeholder.svg';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport LazyParallelCoordinatesPlot from '../charts/LazyParallelCoordinatesPlot';\nimport { isParallelChartConfigured, processParallelCoordinateData } from '../../utils/parallelCoordinatesPlot.utils';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport type { RunsChartsParallelCardConfig } from '../../runs-charts.types';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  RunsChartCardFullScreenProps,\n  RunsChartCardVisibilityProps,\n  RunsChartCardLoadingPlaceholder,\n} from './ChartCard.common';\nimport { FormattedMessage } from 'react-intl';\nimport { useUpdateExperimentViewUIState } from '../../../experiment-page/contexts/ExperimentPageUIStateContext';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsNoDataFoundIndicator } from '../RunsChartsNoDataFoundIndicator';\n\nexport interface RunsChartsParallelChartCardProps\n  extends RunsChartCardReorderProps,\n    RunsChartCardFullScreenProps,\n    RunsChartCardVisibilityProps {\n  config: RunsChartsParallelCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  hideEmptyCharts?: boolean;\n\n  onDelete: () => void;\n  onEdit: () => void;\n  groupBy: RunsGroupByConfig | null;\n}\n\n/**\n * A placeholder component displayed before parallel coords chart is being configured by user\n */\nconst NotConfiguredParallelCoordsPlaceholder = ({ onEdit }: { onEdit: () => void }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <div css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', maxWidth: 360 }}>\n        <ParallelChartSvg />\n        <Typography.Title css={{ marginTop: theme.spacing.md }} color=\"secondary\" level={3}>\n          <FormattedMessage\n            defaultMessage=\"Compare parameter importance\"\n            description=\"Experiment page > compare runs > parallel coordinates chart > chart not configured warning > title\"\n          />\n        </Typography.Title>\n        <Typography.Text css={{ marginBottom: theme.spacing.md }} color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Use the parallel coordinates chart to compare how various parameters in model affect your model metrics.\"\n            description=\"Experiment page > compare runs > parallel coordinates chart > chart not configured warning > description\"\n          />\n        </Typography.Text>\n        <Button componentId=\"mlflow.charts.parallel_coords_chart_configure_button\" type=\"primary\" onClick={onEdit}>\n          <FormattedMessage\n            defaultMessage=\"Configure chart\"\n            description=\"Experiment page > compare runs > parallel coordinates chart > configure chart button\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\n/**\n * A placeholder component displayed before parallel coords chart is being configured by user\n */\nconst UnsupportedDataPlaceholder = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <div css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', maxWidth: 360 }}>\n        <ParallelChartSvg />\n        <Typography.Title css={{ marginTop: theme.spacing.md, textAlign: 'center' }} color=\"secondary\" level={3}>\n          <FormattedMessage\n            defaultMessage=\"Parallel coordinates chart does not support aggregated string values.\"\n            description=\"Experiment page > compare runs > parallel coordinates chart > unsupported string values warning > title\"\n          />\n        </Typography.Title>\n        <Typography.Text css={{ marginBottom: theme.spacing.md }} color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Use other parameters or disable run grouping to continue.\"\n            description=\"Experiment page > compare runs > parallel coordinates chart > unsupported string values warning > description\"\n          />\n        </Typography.Text>\n      </div>\n    </div>\n  );\n};\n\nexport const RunsChartsParallelChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n  hideEmptyCharts,\n  isInViewport: isInViewportProp,\n  ...reorderProps\n}: RunsChartsParallelChartCardProps) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: 'Parallel Coordinates',\n      subtitle: displaySubtitle ? subtitle : null,\n    });\n  };\n\n  const configuredChartRunData = useMemo(() => {\n    if (config?.showAllRuns) {\n      return chartRunData;\n    }\n    return chartRunData?.filter(({ hidden }) => !hidden);\n  }, [chartRunData, config?.showAllRuns]);\n\n  const containsStringValues = useMemo(\n    () =>\n      config.selectedParams?.some(\n        (paramKey) => configuredChartRunData?.some((dataTrace) => isNaN(Number(dataTrace.params[paramKey]?.value))),\n        [config.selectedParams, configuredChartRunData],\n      ),\n    [config.selectedParams, configuredChartRunData],\n  );\n\n  const updateVisibleOnlySetting = useCallback(\n    (showAllRuns: boolean) => {\n      updateUIState((state) => {\n        const newCompareRunCharts = state.compareRunCharts?.map((existingChartConfig) => {\n          if (existingChartConfig.uuid === config.uuid) {\n            const parallelChartConfig = existingChartConfig as RunsChartsParallelCardConfig;\n            return { ...parallelChartConfig, showAllRuns };\n          }\n          return existingChartConfig;\n        });\n\n        return { ...state, compareRunCharts: newCompareRunCharts };\n      });\n    },\n    [config.uuid, updateUIState],\n  );\n\n  const [isConfigured, parallelCoordsData] = useMemo(() => {\n    const configured = isParallelChartConfigured(config);\n\n    // Prepare the data in the parcoord-es format\n    const data = configured\n      ? processParallelCoordinateData(configuredChartRunData, config.selectedParams, config.selectedMetrics)\n      : [];\n\n    return [configured, data];\n  }, [config, configuredChartRunData]);\n\n  const isEmptyDataset = useMemo(() => {\n    return parallelCoordsData.length === 0;\n  }, [parallelCoordsData]);\n\n  // If the chart is in fullscreen mode, we always render its body.\n  // Otherwise, we only render the chart if it is in the viewport.\n  const isInViewport = fullScreen || isInViewportProp;\n\n  const { setTooltip, resetTooltip, selectedRunUuid, closeContextMenu } = useRunsChartsTooltip(config);\n\n  const containsUnsupportedValues = containsStringValues && groupBy;\n  const displaySubtitle = isConfigured && !containsUnsupportedValues;\n\n  const subtitle = (\n    <>\n      {config.showAllRuns ? (\n        <FormattedMessage\n          defaultMessage=\"Showing all runs\"\n          description=\"Experiment page > compare runs > parallel chart > header > indicator for all runs shown\"\n        />\n      ) : (\n        <FormattedMessage\n          defaultMessage=\"Showing only visible runs\"\n          description=\"Experiment page > compare runs > parallel chart > header > indicator for only visible runs shown\"\n        />\n      )}\n    </>\n  );\n\n  const chartBody = (\n    <>\n      {!isConfigured ? (\n        <NotConfiguredParallelCoordsPlaceholder onEdit={onEdit} />\n      ) : containsUnsupportedValues ? (\n        <UnsupportedDataPlaceholder />\n      ) : parallelCoordsData.length === 0 ? (\n        <RunsChartsNoDataFoundIndicator />\n      ) : (\n        // Avoid displaying empty set, otherwise parcoord-es goes crazy\n        <div\n          css={[\n            styles.parallelChartCardWrapper,\n            {\n              height: fullScreen ? '100%' : undefined,\n            },\n          ]}\n        >\n          {isInViewport ? (\n            <LazyParallelCoordinatesPlot\n              data={parallelCoordsData}\n              selectedParams={config.selectedParams}\n              selectedMetrics={config.selectedMetrics}\n              onHover={setTooltip}\n              onUnhover={resetTooltip}\n              axesRotateThreshold={8}\n              selectedRunUuid={selectedRunUuid}\n              closeContextMenu={closeContextMenu}\n              fallback={<RunsChartCardLoadingPlaceholder css={{ flex: 1 }} />}\n            />\n          ) : null}\n        </div>\n      )}\n    </>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  // Do not render the card if the chart is empty and the user has enabled hiding empty charts\n  if (hideEmptyCharts && isEmptyDataset) {\n    return null;\n  }\n\n  const fullScreenEnabled = isConfigured && !containsUnsupportedValues && !isEmptyDataset;\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title=\"Parallel Coordinates\"\n      subtitle={displaySubtitle ? subtitle : null}\n      uuid={config.uuid}\n      tooltip={\n        <FormattedMessage\n          defaultMessage=\"The parallel coordinates chart shows runs with columns that are either numbers or strings. If a column has string entries, the runs corresponding to the 30 most recent unique values will be shown. Only runs with all relevant metrics and/or parameters will be displayed.\"\n          description=\"Experiment page > charts > parallel coordinates chart > tooltip explaining what data is expected to be rendered\"\n        />\n      }\n      dragGroupKey={RunsChartsChartsDragGroup.PARALLEL_CHARTS_AREA}\n      // Disable fullscreen button if the chart is empty\n      toggleFullScreenChart={fullScreenEnabled ? toggleFullScreenChart : undefined}\n      additionalMenuContent={\n        <>\n          <DropdownMenu.Separator />\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_runschartsparallelchartcard.tsx_293\"\n            checked={!config.showAllRuns}\n            onClick={() => updateVisibleOnlySetting(false)}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Show only visible\"\n              description=\"Experiment page > compare runs tab > chart header > move down option\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_runschartsparallelchartcard.tsx_300\"\n            checked={config.showAllRuns}\n            onClick={() => updateVisibleOnlySetting(true)}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Show all runs\"\n              description=\"Experiment page > compare runs tab > chart header > move down option\"\n            />\n          </DropdownMenu.CheckboxItem>\n        </>\n      }\n      supportedDownloadFormats={['csv']}\n      onClickDownload={(format) => {\n        const savedChartTitle = [...config.selectedMetrics, ...config.selectedParams].join('-');\n\n        if (format === 'csv') {\n          downloadChartDataCsv(configuredChartRunData, config.selectedMetrics, config.selectedParams, savedChartTitle);\n        }\n      }}\n      {...reorderProps}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  parallelChartCardWrapper: {\n    // Set \"display: flex\" here (and \"flex: 1\" in the child element)\n    // so the chart will grow in width and height\n    display: 'flex',\n    overflow: 'hidden',\n    cursor: 'pointer',\n  },\n};\n","import { Button, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useCallback, useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport {\n  DISABLED_GROUP_WHEN_GROUPBY,\n  DifferenceCardConfigCompareGroup,\n  type RunsChartsCardConfig,\n  type RunsChartsDifferenceCardConfig,\n} from '../../runs-charts.types';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  RunsChartCardFullScreenProps,\n} from './ChartCard.common';\nimport { useConfirmChartCardConfigurationFn } from '../../hooks/useRunsChartsUIConfiguration';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { DifferenceViewPlot } from '../charts/DifferenceViewPlot';\n\nexport interface RunsChartsDifferenceChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsDifferenceCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  hideEmptyCharts?: boolean;\n\n  onDelete: () => void;\n  onEdit: () => void;\n  groupBy: RunsGroupByConfig | null;\n}\n\n/**\n * A placeholder component displayed before runs difference chart is being configured by user\n */\nconst NotConfiguredDifferenceChartPlaceholder = ({ onEdit }: { onEdit: () => void }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <div css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', maxWidth: 360 }}>\n        <Typography.Title css={{ marginTop: theme.spacing.md }} color=\"secondary\" level={3}>\n          <FormattedMessage\n            defaultMessage=\"Compare runs\"\n            description=\"Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > chart not configured warning > title\"\n          />\n        </Typography.Title>\n        <Typography.Text css={{ marginBottom: theme.spacing.md }} color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Use the runs difference view to compare model and system metrics, parameters, attributes,\n            and tags across runs.\"\n            description=\"Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > chart not configured warning > description\"\n          />\n        </Typography.Text>\n        <Button componentId=\"mlflow.charts.difference_chart_configure_button\" type=\"primary\" onClick={onEdit}>\n          <FormattedMessage\n            defaultMessage=\"Configure chart\"\n            description=\"Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > configure chart button\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const RunsChartsDifferenceChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n  hideEmptyCharts,\n  ...reorderProps\n}: RunsChartsDifferenceChartCardProps) => {\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: config.chartName,\n      subtitle: null,\n    });\n  };\n\n  const [isConfigured, slicedRuns] = useMemo(() => {\n    const configured = Boolean(config.compareGroups?.length);\n    return [configured, chartRunData.filter(({ hidden }) => !hidden).reverse()];\n  }, [chartRunData, config]);\n\n  const isEmptyDataset = useMemo(() => {\n    return !isConfigured;\n  }, [isConfigured]);\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const setCardConfig = (setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig) => {\n    confirmChartCardConfiguration(setter(config));\n  };\n\n  const showChangeFromBaselineToggle = useCallback(() => {\n    confirmChartCardConfiguration({\n      ...config,\n      showChangeFromBaseline: !config.showChangeFromBaseline,\n    } as RunsChartsCardConfig);\n  }, [config, confirmChartCardConfiguration]);\n\n  const showDifferencesOnlyToggle = useCallback(() => {\n    confirmChartCardConfiguration({\n      ...config,\n      showDifferencesOnly: !config.showDifferencesOnly,\n    } as RunsChartsCardConfig);\n  }, [config, confirmChartCardConfiguration]);\n\n  const { formatMessage } = useIntl();\n\n  const chartBody = (\n    <>\n      {!isConfigured ? (\n        <NotConfiguredDifferenceChartPlaceholder onEdit={onEdit} />\n      ) : (\n        <DifferenceViewPlot\n          previewData={slicedRuns}\n          groupBy={groupBy}\n          cardConfig={config}\n          setCardConfig={setCardConfig}\n        />\n      )}\n    </>\n  );\n  let showTooltip = undefined;\n  if (groupBy && DISABLED_GROUP_WHEN_GROUPBY.some((group) => config.compareGroups.includes(group))) {\n    showTooltip = formatMessage({\n      defaultMessage: 'Disable grouped runs to compare parameters, tag, or attributes',\n      description:\n        'Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > disable group runs tooltip message',\n    });\n  }\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  // Do not render the card if the chart is empty and the user has enabled hiding empty charts\n  if (hideEmptyCharts && isEmptyDataset) {\n    return null;\n  }\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={config.chartName}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      toggleFullScreenChart={toggleFullScreenChart}\n      toggles={[\n        {\n          toggleLabel: formatMessage({\n            defaultMessage: 'Show change from baseline',\n            description:\n              'Runs charts > components > cards > RunsChartsDifferenceChartCard > Show change from baseline toggle label',\n          }),\n          currentToggle: config.showChangeFromBaseline,\n          setToggle: showChangeFromBaselineToggle,\n        },\n        {\n          toggleLabel: formatMessage({\n            defaultMessage: 'Show differences only',\n            description:\n              'Runs charts > components > cards > RunsChartsDifferenceChartCard > Show differences only toggle label',\n          }),\n          currentToggle: config.showDifferencesOnly,\n          setToggle: showDifferencesOnlyToggle,\n        },\n      ]}\n      tooltip={showTooltip}\n      {...reorderProps}\n    >\n      {chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport {\n  type RunsChartCardReorderProps,\n  RunsChartCardWrapper,\n  RunsChartsChartsDragGroup,\n  RunsChartCardFullScreenProps,\n} from './ChartCard.common';\nimport { useConfirmChartCardConfigurationFn } from '../../hooks/useRunsChartsUIConfiguration';\nimport { RunsChartsCardConfig, RunsChartsImageCardConfig } from '../../runs-charts.types';\nimport { ImageGridPlot } from '../charts/ImageGridPlot';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { useImageSliderStepMarks } from '../../hooks/useImageSliderStepMarks';\nimport {\n  DEFAULT_IMAGE_GRID_CHART_NAME,\n  LOG_IMAGE_TAG_INDICATOR,\n  NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE,\n} from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { LineSmoothSlider } from '@mlflow/mlflow/src/experiment-tracking/components/LineSmoothSlider';\nimport { RunsGroupByConfig } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/utils/experimentPage.group-row-utils';\n\nexport interface RunsChartsImageChartCardProps extends RunsChartCardReorderProps, RunsChartCardFullScreenProps {\n  config: RunsChartsImageCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n  groupBy: RunsGroupByConfig | null;\n}\n\nexport const RunsChartsImageChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  groupBy,\n  fullScreen,\n  setFullScreenChart,\n  ...reorderProps\n}: RunsChartsImageChartCardProps) => {\n  const { theme } = useDesignSystemTheme();\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n\n  // Optimizations for smoother slider experience. Maintain a local copy of config, and update\n  // the global state only after the user has finished dragging the slider.\n  const [tmpConfig, setTmpConfig] = useState(config);\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n  const updateStep = useCallback(\n    (step: number) => {\n      confirmChartCardConfiguration({ ...config, step } as RunsChartsImageCardConfig);\n    },\n    [config, confirmChartCardConfiguration],\n  );\n  const tmpStepChange = (step: number) => {\n    setTmpConfig((conf) => ({ ...conf, step }));\n  };\n\n  const chartName = config.imageKeys.length === 1 ? config.imageKeys[0] : DEFAULT_IMAGE_GRID_CHART_NAME;\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: chartName,\n      subtitle: null,\n    });\n  };\n\n  const slicedRuns = useMemo(() => chartRunData.filter(({ hidden }) => !hidden).reverse(), [chartRunData]);\n\n  const setCardConfig = (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => {\n    confirmChartCardConfiguration(setter(config));\n  };\n\n  const { stepMarks, maxMark, minMark } = useImageSliderStepMarks({\n    data: slicedRuns,\n    selectedImageKeys: config.imageKeys || [],\n  });\n\n  const stepMarkLength = Object.keys(stepMarks).length;\n\n  useEffect(() => {\n    // If there is only one step mark, set the step to the min mark\n    if (stepMarkLength === 1 && tmpConfig.step !== minMark) {\n      updateStep(minMark);\n    }\n  }, [minMark, stepMarkLength, tmpConfig.step, updateStep]);\n\n  const shouldDisplayImageLimitIndicator =\n    slicedRuns.filter((run) => {\n      return run.tags[LOG_IMAGE_TAG_INDICATOR];\n    }).length > NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE;\n\n  const chartBody = (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: fullScreen ? '100%' : undefined,\n        width: '100%',\n        overflow: 'hidden',\n        marginTop: theme.spacing.sm,\n        gap: theme.spacing.md,\n      }}\n    >\n      <div\n        ref={containerRef}\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <ImageGridPlot\n          previewData={slicedRuns}\n          groupBy={groupBy}\n          cardConfig={tmpConfig}\n          setCardConfig={setCardConfig}\n        />\n      </div>\n      <div\n        css={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          display: 'inline-flex',\n          gap: theme.spacing.md,\n        }}\n      >\n        <div css={{ flex: 1 }}>\n          <LineSmoothSlider\n            value={tmpConfig.step}\n            onChange={tmpStepChange}\n            max={maxMark}\n            min={minMark}\n            marks={stepMarks}\n            disabled={Object.keys(stepMarks).length <= 1}\n            onAfterChange={updateStep}\n            css={{\n              '&[data-orientation=\"horizontal\"]': { width: 'auto' },\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  const cardBodyToRender = chartBody;\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={chartName}\n      subtitle={\n        shouldDisplayImageLimitIndicator && `Displaying images from first ${NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE} runs`\n      }\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      toggleFullScreenChart={toggleFullScreenChart}\n      {...reorderProps}\n    >\n      {cardBodyToRender}\n    </RunsChartCardWrapper>\n  );\n};\n","import { useMemo, memo } from 'react';\nimport { RunsChartType } from '../../runs-charts.types';\nimport type {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartsContourCardConfig,\n  RunsChartsDifferenceCardConfig,\n  RunsChartsImageCardConfig,\n  RunsChartsLineCardConfig,\n  RunsChartsParallelCardConfig,\n  RunsChartsScatterCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { shouldEnableDifferenceViewCharts } from '../../../../../common/utils/FeatureUtils';\nimport { RunsChartsBarChartCard } from './RunsChartsBarChartCard';\nimport { RunsChartsLineChartCard } from './RunsChartsLineChartCard';\nimport { RunsChartsScatterChartCard } from './RunsChartsScatterChartCard';\nimport { RunsChartsContourChartCard } from './RunsChartsContourChartCard';\nimport { RunsChartsParallelChartCard } from './RunsChartsParallelChartCard';\nimport type {\n  RunsChartCardFullScreenProps,\n  RunsChartCardReorderProps,\n  RunsChartCardSizeProps,\n  RunsChartCardVisibilityProps,\n} from './ChartCard.common';\nimport { RunsChartsDifferenceChartCard } from './RunsChartsDifferenceChartCard';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsImageChartCard } from './RunsChartsImageChartCard';\nimport { RunsChartsGlobalLineChartConfig } from '../../../experiment-page/models/ExperimentPageUIState';\n\nexport interface RunsChartsCardProps\n  extends RunsChartCardReorderProps,\n    RunsChartCardFullScreenProps,\n    RunsChartCardVisibilityProps,\n    RunsChartCardSizeProps {\n  cardConfig: RunsChartsCardConfig;\n  chartRunData: RunsChartsRunData[];\n  onStartEditChart: (chart: RunsChartsCardConfig) => void;\n  onRemoveChart: (chart: RunsChartsCardConfig) => void;\n  onDownloadFullMetricHistoryCsv?: (runUuids: string[], metricKeys: string[]) => void;\n  index: number;\n  sectionIndex?: number;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n  groupBy: RunsGroupByConfig | null;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n}\n\nconst RunsChartsCardRaw = ({\n  cardConfig,\n  chartRunData,\n  index,\n  sectionIndex,\n  onStartEditChart,\n  onRemoveChart,\n  setFullScreenChart,\n  groupBy,\n  fullScreen,\n  canMoveDown,\n  canMoveUp,\n  previousChartUuid,\n  nextChartUuid,\n  onReorderWith,\n  autoRefreshEnabled,\n  onDownloadFullMetricHistoryCsv,\n  hideEmptyCharts,\n  globalLineChartConfig,\n  height,\n  isInViewport,\n  isInViewportDeferred,\n}: RunsChartsCardProps) => {\n  const reorderProps = useMemo(\n    () => ({\n      onReorderWith,\n      canMoveDown,\n      canMoveUp,\n      previousChartUuid,\n      nextChartUuid,\n    }),\n    [onReorderWith, canMoveDown, canMoveUp, previousChartUuid, nextChartUuid],\n  );\n\n  const editProps = useMemo(\n    () => ({\n      onEdit: () => onStartEditChart(cardConfig),\n      onDelete: () => onRemoveChart(cardConfig),\n      setFullScreenChart,\n    }),\n    [onStartEditChart, onRemoveChart, setFullScreenChart, cardConfig],\n  );\n\n  const commonChartProps = useMemo(\n    () => ({\n      fullScreen,\n      autoRefreshEnabled,\n      groupBy,\n      hideEmptyCharts,\n      height,\n      isInViewport,\n      isInViewportDeferred,\n      ...editProps,\n      ...reorderProps,\n    }),\n    [\n      fullScreen,\n      autoRefreshEnabled,\n      groupBy,\n      editProps,\n      reorderProps,\n      hideEmptyCharts,\n      height,\n      isInViewport,\n      isInViewportDeferred,\n    ],\n  );\n\n  const slicedRuns = useMemo(() => chartRunData.filter(({ hidden }) => !hidden).reverse(), [chartRunData]);\n\n  if (cardConfig.type === RunsChartType.PARALLEL) {\n    return (\n      <RunsChartsParallelChartCard\n        config={cardConfig as RunsChartsParallelCardConfig}\n        chartRunData={chartRunData}\n        {...commonChartProps}\n      />\n    );\n  }\n\n  if (shouldEnableDifferenceViewCharts() && cardConfig.type === RunsChartType.DIFFERENCE) {\n    return (\n      <RunsChartsDifferenceChartCard\n        config={cardConfig as RunsChartsDifferenceCardConfig}\n        chartRunData={chartRunData}\n        {...commonChartProps}\n      />\n    );\n  }\n\n  if (cardConfig.type === RunsChartType.IMAGE) {\n    return (\n      <RunsChartsImageChartCard\n        config={cardConfig as RunsChartsImageCardConfig}\n        chartRunData={chartRunData}\n        {...commonChartProps}\n      />\n    );\n  }\n\n  if (cardConfig.type === RunsChartType.BAR) {\n    return (\n      <RunsChartsBarChartCard\n        config={cardConfig as RunsChartsBarCardConfig}\n        chartRunData={slicedRuns}\n        {...commonChartProps}\n      />\n    );\n  } else if (cardConfig.type === RunsChartType.LINE) {\n    return (\n      <RunsChartsLineChartCard\n        config={cardConfig as RunsChartsLineCardConfig}\n        chartRunData={slicedRuns}\n        onDownloadFullMetricHistoryCsv={onDownloadFullMetricHistoryCsv}\n        globalLineChartConfig={globalLineChartConfig}\n        positionInSection={index}\n        {...commonChartProps}\n      />\n    );\n  } else if (cardConfig.type === RunsChartType.SCATTER) {\n    return (\n      <RunsChartsScatterChartCard\n        config={cardConfig as RunsChartsScatterCardConfig}\n        chartRunData={slicedRuns}\n        {...commonChartProps}\n      />\n    );\n  } else if (cardConfig.type === RunsChartType.CONTOUR) {\n    return (\n      <RunsChartsContourChartCard\n        config={cardConfig as RunsChartsContourCardConfig}\n        chartRunData={slicedRuns}\n        {...commonChartProps}\n      />\n    );\n  }\n  return null;\n};\n\nexport const RunsChartsCard = memo(RunsChartsCardRaw);\n","var _path, _path2, _path3;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgChartContour(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V17H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.9749 4.94148C12.9188 4.71702 12.221 4.73284 12.0618 4.71515C11.1779 4.61693 10.2817 4.66052 9.39271 4.66052C8.11919 4.66052 7.15648 4.97961 6.24753 5.90922C5.86197 6.30355 5.5235 6.77684 5.23295 7.24378C4.99434 7.62726 4.65544 7.93479 4.40569 8.31299C3.93777 9.02154 3.56281 9.80723 3.56281 10.6699C3.56281 11.1806 3.37479 11.598 3.76962 12.0669C4.19449 12.5714 4.6863 12.9507 5.27978 13.2649C5.88594 13.5858 6.42202 13.8619 7.13723 13.8619C7.74338 13.8619 8.34952 13.8619 8.95567 13.8619C9.45735 13.8619 9.96042 13.8731 10.4619 13.8619C11.1412 13.8468 11.9484 13.1895 12.413 12.7381C13.581 11.6035 14.2393 9.88016 14.2393 8.24665C14.2393 7.69923 14.3797 7.17063 14.3797 6.62723C14.3797 6.40084 14.4779 5.87696 14.2744 5.71411C13.9268 5.43606 13.5785 5.13789 13.1857 4.94148\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.9213 6.83789C11.2761 6.83789 10.6309 6.83789 9.98577 6.83789C9.19776 6.83789 8.80182 7.44144 8.2844 7.97734C7.58163 8.70521 7.28544 9.67306 7.28544 10.666C7.28544 10.9641 7.22004 11.177 7.46104 11.3645C7.6831 11.5372 8.10719 11.6142 8.37806 11.6142C9.07316 11.6142 9.91042 11.5583 10.4462 11.0523C10.9277 10.5975 11.473 10.3701 11.8159 9.75284C12.045 9.34042 12.2022 8.86324 12.2022 8.38317C12.2022 8.14903 12.2022 7.9149 12.2022 7.68077C12.2022 7.4241 12.0208 7.38817 11.9213 7.18909\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartContour);\nexport default __webpack_public_path__ + \"static/media/chart-contour.0d4b306f2669f3ad25375568935e3ce3.svg\";\nexport { ForwardRef as ReactComponent };","import { isUndefined, pick } from 'lodash';\nimport type { RunsChartsLineCardConfig } from '../../runs-charts.types';\nimport type { RunsChartsGlobalLineChartConfig } from '../../../experiment-page/models/ExperimentPageUIState';\nimport { useMemo } from 'react';\nimport { RunsChartsLineChartXAxisType } from '../RunsCharts.common';\n\n/**\n * A utility hook that selects if certain line chart settings should be\n * taken from global configuration or from local chard card settings.\n */\nexport const useLineChartGlobalConfig = (\n  originalCardConfig: RunsChartsLineCardConfig,\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig,\n) =>\n  useMemo(() => {\n    const result = pick(originalCardConfig, ['xAxisKey', 'selectedXAxisMetricKey', 'lineSmoothness']);\n\n    if (!globalLineChartConfig) {\n      return result;\n    }\n\n    const globalXAxisKey = globalLineChartConfig.xAxisKey;\n\n    if (originalCardConfig.useGlobalLineSmoothing && !isUndefined(globalLineChartConfig.lineSmoothness)) {\n      result.lineSmoothness = globalLineChartConfig.lineSmoothness;\n    }\n\n    if (!isUndefined(globalXAxisKey) && originalCardConfig.useGlobalXaxisKey) {\n      result.xAxisKey = globalXAxisKey;\n      const globalSelectedXAxisMetricKey = globalLineChartConfig?.selectedXAxisMetricKey;\n      if (globalXAxisKey === RunsChartsLineChartXAxisType.METRIC && globalSelectedXAxisMetricKey) {\n        result.selectedXAxisMetricKey = globalSelectedXAxisMetricKey;\n      }\n    }\n\n    return result;\n  }, [originalCardConfig, globalLineChartConfig]);\n","import { chunk, isEqual } from 'lodash';\nimport { AnyAction } from 'redux';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER } from '../../../../model-registry/constants';\nimport {\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport { ViewType } from '../../../sdk/MlflowEnums';\nimport { KeyValueEntity, LIFECYCLE_FILTER } from '../../../types';\nimport { EXPERIMENT_LOG_MODEL_HISTORY_TAG } from './experimentPage.common-utils';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport type { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { RUNS_SEARCH_MAX_RESULTS } from '../../../actions';\nimport { getUUID } from '../../../../common/utils/ActionUtils';\nimport { shouldUseRegexpBasedAutoRunsSearchFilter } from '../../../../common/utils/FeatureUtils';\n\nconst START_TIME_COLUMN_OFFSET = {\n  ALL: null,\n  LAST_HOUR: 1 * 60 * 60 * 1000,\n  LAST_24_HOURS: 24 * 60 * 60 * 1000,\n  LAST_7_DAYS: 7 * 24 * 60 * 60 * 1000,\n  LAST_30_DAYS: 30 * 24 * 60 * 60 * 1000,\n  LAST_YEAR: 12 * 30 * 24 * 60 * 60 * 1000,\n};\n\nconst VALID_TABLE_ALIASES = [\n  'attribute',\n  'attributes',\n  'attr',\n  'run',\n  'metric',\n  'metrics',\n  'param',\n  'params',\n  'parameter',\n  'tag',\n  'tags',\n  'dataset',\n  'datasets',\n];\nconst SQL_SYNTAX_PATTERN = new RegExp(\n  `(${VALID_TABLE_ALIASES.join('|')})\\\\.\\\\S+\\\\s*(>|<|>=|<=|=|!=| like| ilike| rlike| in)`,\n  'i',\n);\n\nexport const RUNS_AUTO_REFRESH_INTERVAL = 30000;\n\n/**\n * Creates \"order by\" SQL expression\n */\nconst createOrderByExpression = ({ orderByKey, orderByAsc }: ExperimentPageSearchFacetsState) => {\n  if (orderByKey) {\n    return orderByAsc ? [orderByKey + ' ASC'] : [orderByKey + ' DESC'];\n  }\n  return [];\n};\n\n/**\n * Creates SQL expression for filtering by run start time\n */\nconst createStartTimeExpression = ({ startTime }: ExperimentPageSearchFacetsState, referenceTime: number) => {\n  const offset = START_TIME_COLUMN_OFFSET[startTime as keyof typeof START_TIME_COLUMN_OFFSET];\n  if (!startTime || !offset || startTime === 'ALL') {\n    return null;\n  }\n  const startTimeOffset = referenceTime - offset;\n\n  return `attributes.start_time >= ${startTimeOffset}`;\n};\n\n/**\n * Creates SQL expression for filtering by selected datasets\n */\nconst createDatasetsFilterExpression = ({ datasetsFilter }: ExperimentPageSearchFacetsState) => {\n  if (datasetsFilter.length === 0) {\n    return null;\n  }\n  const datasetNames = datasetsFilter.map((dataset) => `'${dataset.name}'`).join(',');\n  const datasetDigests = datasetsFilter.map((dataset) => `'${dataset.digest}'`).join(',');\n\n  return `dataset.name IN (${datasetNames}) AND dataset.digest IN (${datasetDigests})`;\n};\n\nexport const detectSqlSyntaxInSearchQuery = (searchFilter: string) => {\n  return SQL_SYNTAX_PATTERN.test(searchFilter);\n};\n\nexport const createQuickRegexpSearchFilter = (searchFilter: string) =>\n  `attributes.run_name RLIKE '${searchFilter.replace(/'/g, \"\\\\'\")}'`;\n\n/**\n * Combines search filter and start time SQL expressions\n */\nconst createFilterExpression = (\n  { searchFilter }: ExperimentPageSearchFacetsState,\n  startTimeExpression: string | null,\n  datasetsFilterExpression: string | null,\n) => {\n  if (\n    shouldUseRegexpBasedAutoRunsSearchFilter() &&\n    searchFilter.length > 0 &&\n    !detectSqlSyntaxInSearchQuery(searchFilter)\n  ) {\n    return createQuickRegexpSearchFilter(searchFilter);\n  }\n\n  const activeFilters = [];\n  if (searchFilter) activeFilters.push(searchFilter);\n  if (startTimeExpression) activeFilters.push(startTimeExpression);\n  if (datasetsFilterExpression) activeFilters.push(datasetsFilterExpression);\n\n  if (activeFilters.length === 0) return undefined;\n  return activeFilters.join(' and ');\n};\n\n/**\n * If this function returns true, the ExperimentView should nest children underneath their parents\n * and fetch all root level parents of visible runs. If this function returns false, the views will\n * not nest children or fetch any additional parents. Will always return true if the orderByKey is\n * 'attributes.start_time'\n */\nconst shouldNestChildrenAndFetchParents = ({ orderByKey, searchFilter }: ExperimentPageSearchFacetsState) =>\n  (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE;\n\n/**\n *\n * Function creates API-compatible query object basing on the given criteria.\n * @param experimentIds IDs of experiments to be queries for runs\n * @param searchFacetsState the sort/filter model to use\n * @param referenceTime reference time to calculate startTime filter\n * @param pageToken next page token if fetching the next page\n */\nexport const createSearchRunsParams = (\n  experimentIds: string[],\n  searchFacetsState: ExperimentPageSearchFacetsState & { runsPinned: string[] },\n  referenceTime: number,\n  pageToken?: string,\n  maxResults?: number,\n) => {\n  const runViewType =\n    searchFacetsState.lifecycleFilter === LIFECYCLE_FILTER.ACTIVE ? ViewType.ACTIVE_ONLY : ViewType.DELETED_ONLY;\n\n  const { runsPinned = undefined } = searchFacetsState;\n\n  const orderBy = createOrderByExpression(searchFacetsState);\n  const startTimeExpression = createStartTimeExpression(searchFacetsState, referenceTime);\n  const datasetsFilterExpression = createDatasetsFilterExpression(searchFacetsState);\n  const filter = createFilterExpression(searchFacetsState, startTimeExpression, datasetsFilterExpression);\n  const shouldFetchParents = shouldNestChildrenAndFetchParents(searchFacetsState);\n\n  return {\n    // Experiment IDs\n    experimentIds,\n\n    // Filters and sort options\n    filter,\n    runViewType,\n    orderBy,\n    shouldFetchParents,\n\n    // Next page token for loading more runs\n    pageToken,\n    runsPinned,\n\n    maxResults: maxResults || RUNS_SEARCH_MAX_RESULTS,\n  };\n};\n/**\n * Function checks if given runs set contain info about log model history and if true,\n * fetches model versions for them\n *\n * @param runsPayload runs payload returned from the searchRuns API\n * @param actionCreator redux-thunk action creator that for search model versions action\n * @param dispatch redux-compatible dispatch function\n */\nexport const fetchModelVersionsForRuns = (\n  runsPayload: {\n    info: {\n      run_id: string;\n    };\n    data: {\n      tags: KeyValueEntity[];\n    };\n  }[],\n  actionCreator: typeof searchModelVersionsApi,\n  dispatch: ThunkDispatch,\n) => {\n  const runsWithLogModelHistory = runsPayload.filter((run) =>\n    run.data.tags.some((t) => t.key === EXPERIMENT_LOG_MODEL_HISTORY_TAG),\n  );\n\n  const promises = chunk(runsWithLogModelHistory, MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER).map((runsChunk) => {\n    // eslint-disable-next-line prefer-const\n    let maxResults = undefined;\n    const action = actionCreator(\n      {\n        run_id: runsChunk.map((run) => run.info.run_id),\n      },\n      getUUID(),\n      maxResults,\n    );\n    return dispatch(action);\n  });\n\n  return Promise.all(promises);\n};\n\n/**\n * Function consumes a search state facets object and returns `true`\n * if at least one filter-related facet is not-default meaning that runs\n * are currently filtered.\n */\nexport const isSearchFacetsFilterUsed = (currentSearchFacetsState: ExperimentPageSearchFacetsState) => {\n  const { lifecycleFilter, modelVersionFilter, datasetsFilter, searchFilter, startTime } = currentSearchFacetsState;\n  return Boolean(\n    lifecycleFilter !== DEFAULT_LIFECYCLE_FILTER ||\n      modelVersionFilter !== DEFAULT_MODEL_VERSION_FILTER ||\n      datasetsFilter.length !== 0 ||\n      searchFilter ||\n      startTime !== DEFAULT_START_TIME,\n  );\n};\n","import {\n  Button,\n  DragIcon,\n  DropdownMenu,\n  OverflowIcon,\n  Typography,\n  useDesignSystemTheme,\n  LegacyInfoTooltip,\n  FullscreenIcon,\n  Switch,\n  Spinner,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { PropsWithChildren, ReactNode, memo, useCallback, forwardRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport type { RunsChartsCardConfig } from '../../runs-charts.types';\nimport type { ExperimentChartImageDownloadFileFormat } from '../../hooks/useChartImageDownloadHandler';\nimport { noop } from 'lodash';\n\nexport const DRAGGABLE_CARD_HANDLE_CLASS = 'drag-handle';\nexport const DRAGGABLE_CARD_TRANSITION_NAME = '--drag-transform';\nexport const DRAGGABLE_CARD_TRANSITION_VAR = `var(${DRAGGABLE_CARD_TRANSITION_NAME})`;\n\nexport enum RunsChartsChartsDragGroup {\n  PARALLEL_CHARTS_AREA = 'PARALLEL_CHARTS_AREA',\n  GENERAL_AREA = 'GENERAL_AREA',\n}\n\nexport interface RunsChartCardReorderProps {\n  onReorderWith: (draggedKey: string, targetDropKey: string) => void;\n  canMoveUp: boolean;\n  canMoveDown: boolean;\n  previousChartUuid?: string;\n  nextChartUuid?: string;\n}\n\nexport interface RunsChartCardSizeProps {\n  height?: number;\n  positionInSection?: number;\n}\n\nexport interface RunsChartCardVisibilityProps {\n  isInViewport?: boolean;\n  isInViewportDeferred?: boolean;\n}\n\nexport type RunsChartCardSetFullscreenFn = (chart: {\n  config: RunsChartsCardConfig;\n  title: string | ReactNode;\n  subtitle: ReactNode;\n}) => void;\n\nexport interface RunsChartCardFullScreenProps {\n  fullScreen?: boolean;\n  setFullScreenChart?: RunsChartCardSetFullscreenFn;\n}\n\nexport interface ChartCardToggleProps {\n  toggleLabel: string;\n  currentToggle: boolean;\n  setToggle: () => void;\n}\n\nexport interface ChartCardWrapperProps extends RunsChartCardReorderProps, RunsChartCardSizeProps {\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n  onEdit: () => void;\n  onDelete: () => void;\n  tooltip?: React.ReactNode;\n  uuid?: string;\n  dragGroupKey: RunsChartsChartsDragGroup;\n  additionalMenuContent?: React.ReactNode;\n  toggleFullScreenChart?: () => void;\n  toggles?: ChartCardToggleProps[];\n  isRefreshing?: boolean;\n  onClickDownload?: (format: ExperimentChartImageDownloadFileFormat | 'csv' | 'csv-full') => void;\n  supportedDownloadFormats?: (ExperimentChartImageDownloadFileFormat | 'csv' | 'csv-full')[];\n  isHidden?: boolean;\n}\n\n/**\n * Wrapper components for all chart cards. Provides styles and adds\n * a dropdown menu with actions for configure and delete.\n */\nconst RunsChartCardWrapperRaw = ({\n  title,\n  subtitle,\n  onDelete,\n  onEdit,\n  children,\n  uuid,\n  dragGroupKey,\n  tooltip = '',\n  onReorderWith = noop,\n  canMoveDown,\n  canMoveUp,\n  previousChartUuid,\n  nextChartUuid,\n  additionalMenuContent,\n  toggleFullScreenChart,\n  toggles,\n  supportedDownloadFormats = [],\n  onClickDownload,\n  isHidden,\n  height,\n  isRefreshing = false,\n}: PropsWithChildren<ChartCardWrapperProps>) => {\n  const { theme } = useDesignSystemTheme();\n\n  const onMoveUp = useCallback(\n    () => onReorderWith(uuid || '', previousChartUuid || ''),\n    [onReorderWith, uuid, previousChartUuid],\n  );\n  const onMoveDown = useCallback(\n    () => onReorderWith(uuid || '', nextChartUuid || ''),\n    [onReorderWith, uuid, nextChartUuid],\n  );\n\n  const usingCustomTitle = React.isValidElement(title);\n\n  return (\n    <div\n      css={{\n        // Either use provided height or default to 360\n        height: height ?? 360,\n        overflow: 'hidden',\n        display: 'grid',\n        gridTemplateRows: 'auto 1fr',\n        backgroundColor: theme.colors.backgroundPrimary,\n        padding: 12,\n        // have a slightly smaller padding when the enableDeepLearningUI\n        // flag is on to accomodate the legend in the charts\n        paddingBottom: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.general.borderRadiusBase,\n        transition: 'opacity 0.12s',\n        position: 'relative',\n      }}\n      data-testid=\"experiment-view-compare-runs-card\"\n    >\n      <div\n        css={{\n          display: 'flex',\n          overflow: 'hidden',\n        }}\n      >\n        <div\n          data-testid=\"experiment-view-compare-runs-card-drag-handle\"\n          css={{\n            marginTop: usingCustomTitle ? theme.spacing.sm : theme.spacing.xs,\n            marginRight: theme.spacing.sm,\n            cursor: 'grab',\n          }}\n          className={DRAGGABLE_CARD_HANDLE_CLASS}\n        >\n          <DragIcon />\n        </div>\n        {usingCustomTitle ? (\n          title\n        ) : (\n          <div css={{ overflow: 'hidden', flex: 1, flexShrink: 1 }}>\n            <Typography.Title\n              title={String(title)}\n              level={4}\n              css={{\n                marginBottom: 0,\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              {title}\n            </Typography.Title>\n            {subtitle && <span css={styles.subtitle(theme)}>{subtitle}</span>}\n            {tooltip && <LegacyInfoTooltip css={{ verticalAlign: 'middle' }} title={tooltip} />}\n          </div>\n        )}\n        {isRefreshing && (\n          <div\n            css={{\n              width: theme.general.heightSm,\n              height: theme.general.heightSm,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Spinner />\n          </div>\n        )}\n        {toggles && (\n          <div\n            css={{\n              display: 'flex',\n              padding: `0px ${theme.spacing.lg}px`,\n              gap: theme.spacing.md,\n              alignItems: 'flex-start',\n            }}\n          >\n            {toggles.map((toggle) => {\n              return (\n                <Switch\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_262\"\n                  key={toggle.toggleLabel}\n                  checked={toggle.currentToggle}\n                  onChange={toggle.setToggle}\n                  label={toggle.toggleLabel}\n                />\n              );\n            })}\n          </div>\n        )}\n        <Button\n          componentId=\"fullscreen_button_chartcard\"\n          icon={<FullscreenIcon />}\n          onClick={toggleFullScreenChart}\n          disabled={!toggleFullScreenChart}\n        />\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_cards_chartcard.common.tsx_158\"\n              type=\"tertiary\"\n              icon={<OverflowIcon />}\n              data-testid=\"experiment-view-compare-runs-card-menu\"\n            />\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content align=\"end\" minWidth={100}>\n            <DropdownMenu.Item\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_288\"\n              onClick={onEdit}\n              data-testid=\"experiment-view-compare-runs-card-edit\"\n            >\n              Configure\n            </DropdownMenu.Item>\n            <DropdownMenu.Item\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_291\"\n              onClick={onDelete}\n              data-testid=\"experiment-view-compare-runs-card-delete\"\n            >\n              Delete\n            </DropdownMenu.Item>\n            {supportedDownloadFormats.length > 0 && onClickDownload && (\n              <>\n                <DropdownMenu.Separator />\n                {supportedDownloadFormats.includes('csv') && (\n                  <DropdownMenu.Item\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_298\"\n                    onClick={() => onClickDownload('csv')}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Export as CSV\"\n                      description=\"Experiment page > compare runs tab > chart header > export CSV data option\"\n                    />\n                  </DropdownMenu.Item>\n                )}\n                {supportedDownloadFormats.includes('svg') && (\n                  <DropdownMenu.Item\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_316\"\n                    onClick={() => onClickDownload('svg')}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Download as SVG\"\n                      description=\"Experiment page > compare runs tab > chart header > download as SVG option\"\n                    />\n                  </DropdownMenu.Item>\n                )}\n                {supportedDownloadFormats.includes('png') && (\n                  <DropdownMenu.Item\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_324\"\n                    onClick={() => onClickDownload('png')}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Download as PNG\"\n                      description=\"Experiment page > compare runs tab > chart header > download as PNG option\"\n                    />\n                  </DropdownMenu.Item>\n                )}\n              </>\n            )}\n            <DropdownMenu.Separator />\n            <DropdownMenu.Item\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_334\"\n              disabled={!canMoveUp}\n              onClick={onMoveUp}\n              data-testid=\"experiment-view-compare-runs-move-up\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Move up\"\n                description=\"Experiment page > compare runs tab > chart header > move up option\"\n              />\n            </DropdownMenu.Item>\n            <DropdownMenu.Item\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_cards_chartcard.common.tsx_344\"\n              disabled={!canMoveDown}\n              onClick={onMoveDown}\n              data-testid=\"experiment-view-compare-runs-move-down\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Move down\"\n                description=\"Experiment page > compare runs tab > chart header > move down option\"\n              />\n            </DropdownMenu.Item>\n            {additionalMenuContent}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nconst styles = {\n  chartEntry: (theme: Theme) => ({\n    height: 360,\n    overflow: 'hidden',\n    display: 'grid',\n    gridTemplateRows: 'auto 1fr',\n    backgroundColor: theme.colors.backgroundPrimary,\n    padding: theme.spacing.md,\n    border: `1px solid ${theme.colors.border}`,\n    borderRadius: theme.general.borderRadiusBase,\n  }),\n  chartComponentWrapper: () => ({\n    overflow: 'hidden',\n  }),\n  subtitle: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    fontSize: 11,\n    marginRight: 4,\n    verticalAlign: 'middle',\n  }),\n};\n\nexport const RunsChartCardWrapper = memo(RunsChartCardWrapperRaw);\n\nexport const RunsChartCardLoadingPlaceholder = forwardRef<\n  HTMLDivElement,\n  {\n    className?: string;\n    style?: React.CSSProperties;\n  }\n>(({ className, style }, ref) => (\n  <div\n    css={{ display: 'flex', height: '100%', justifyContent: 'center', alignItems: 'center' }}\n    className={className}\n    style={style}\n    ref={ref}\n  >\n    <Spinner />\n  </div>\n));\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { isNil } from 'lodash';\nimport { Data, Datum, Layout, PlotMouseEvent } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightScatterTraces, useRenderRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  RunsChartAxisDef,\n  runsChartDefaultMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  useDynamicPlotSize,\n  getLegendDataFromRuns,\n} from './RunsCharts.common';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\nimport { RunsChartCardLoadingPlaceholder } from './cards/ChartCard.common';\n\nexport interface RunsScatterPlotProps extends RunsPlotsCommonProps {\n  /**\n   * Horizontal axis with a metric or a param\n   */\n  xAxis: RunsChartAxisDef;\n\n  /**\n   * Vertical axis with a metric or a param\n   */\n  yAxis: RunsChartAxisDef;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: RunsChartsRunData[];\n}\n\nconst PLOT_CONFIG = {\n  displaylogo: false,\n  scrollZoom: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nconst createTooltipTemplate = () =>\n  '<b>%{customdata[1]}:</b><br>' +\n  '<b>%{xaxis.title.text}:</b> %{x:.2f}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  '<extra></extra>';\n\n/**\n * Implementation of plotly.js chart displaying\n * scatter plot comparing values for a given\n * set of experiments runs\n */\nexport const RunsScatterPlot = React.memo(\n  ({\n    runsData,\n    xAxis,\n    yAxis,\n    markerSize = 10,\n    className,\n    margin = runsChartDefaultMargin,\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n    onSetDownloadHandler,\n  }: RunsScatterPlotProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const plotData = useMemo(() => {\n      // Prepare empty values\n      const xValues: (number | string)[] = [];\n      const yValues: (number | string)[] = [];\n      const colors: (number | string)[] = [];\n      const tooltipData: Datum[] = [];\n\n      // Iterate through all the runs and aggregate selected metrics/params\n      for (const runData of runsData) {\n        const { runInfo, metrics, params, color, uuid, displayName } = runData;\n        const { runUuid, runName } = runInfo || {};\n        const xAxisData = xAxis.type === 'METRIC' ? metrics : params;\n        const yAxisData = yAxis.type === 'METRIC' ? metrics : params;\n\n        const x = xAxisData?.[xAxis.dataAccessKey ?? xAxis.key]?.value;\n        const y = yAxisData?.[yAxis.dataAccessKey ?? yAxis.key]?.value;\n\n        if (!isNil(x) && !isNil(y)) {\n          xValues.push(x);\n          yValues.push(y);\n          colors.push(color || theme.colors.primary);\n          if (runUuid) {\n            tooltipData.push([runUuid, runName || runUuid] as any);\n          } else {\n            tooltipData.push([uuid, displayName] as any);\n          }\n        }\n      }\n\n      return [\n        {\n          x: xValues,\n          y: yValues,\n          customdata: tooltipData,\n          text: runsData.map(({ displayName }) => displayName),\n          hovertemplate: useDefaultHoverBox ? createTooltipTemplate() : undefined,\n          hoverinfo: useDefaultHoverBox ? undefined : 'none',\n          hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n          type: 'scatter',\n          mode: 'markers',\n          textposition: 'bottom center',\n          marker: {\n            size: markerSize,\n            color: colors,\n          },\n        } as Data,\n      ];\n    }, [runsData, xAxis, yAxis, theme, markerSize, useDefaultHoverBox]);\n\n    const plotlyThemedLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: xAxis.key, tickfont: { size: 11, color: theme.colors.textSecondary } },\n      yaxis: { title: yAxis.key, tickfont: { size: 11, color: theme.colors.textSecondary } },\n      template: { layout: plotlyThemedLayout },\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const newLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n        };\n\n        if (newLayout.xaxis) {\n          newLayout.xaxis.title = xAxis.key;\n        }\n\n        if (newLayout.yaxis) {\n          newLayout.yaxis.title = yAxis.key;\n        }\n\n        return newLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, xAxis.key, yAxis.key, width, height]);\n\n    const { setHoveredPointIndex } = useRenderRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightScatterTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points }: PlotMouseEvent) => {\n        // Find the corresponding run UUID by basing on \"customdata\" field set in the trace data.\n        // Plotly TS typings don't support custom fields so we need to cast to \"any\" first\n        const pointCustomDataRunUuid = (points[0] as any)?.customdata?.[0];\n        setHoveredPointIndex(points[0]?.pointIndex ?? -1);\n\n        if (pointCustomDataRunUuid) {\n          onHover?.(pointCustomDataRunUuid, undefined, {});\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(hoverCallback);\n\n    const legendLabelData = useMemo(() => getLegendDataFromRuns(runsData), [runsData]);\n\n    useEffect(() => {\n      const dataToExport: Data[] = plotData.map((trace: Data) => ({\n        ...trace,\n        mode: 'text+markers',\n      }));\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layout));\n    }, [layout, onSetDownloadHandler, plotData]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), commonRunsChartStyles.scatterChartHighlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onUpdate={onUpdate}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n          fallback={<RunsChartCardLoadingPlaceholder />}\n        />\n      </div>\n    );\n\n    return <RunsMetricsLegendWrapper labelData={legendLabelData}>{chart}</RunsMetricsLegendWrapper>;\n  },\n);\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport React from 'react';\nimport { Dash } from 'plotly.js';\n\nconst STROKE_WIDTH = 3;\n\n/**\n * Replicating plotly.js's dasharrays for each dash type, with smaller spaces\n * https://github.com/plotly/plotly.js/blob/master/src/components/drawing/index.js#L162\n */\nconst getDashArray = (dashType: Dash) => {\n  switch (dashType) {\n    case 'dot':\n      return `${STROKE_WIDTH}`;\n    case 'dash':\n      return `${2 * STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    case 'longdash':\n      return `${3 * STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    case 'dashdot':\n      return `${2 * STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    case 'longdashdot':\n      return `${3 * STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}, ${STROKE_WIDTH}`;\n    default:\n      return '';\n  }\n};\n\nexport type LegendLabelData = {\n  label: string;\n  color: string;\n  dashStyle?: Dash;\n  uuid?: string;\n  metricKey?: string;\n};\n\nconst TraceLabel: React.FC<LegendLabelData> = ({ label, color, dashStyle }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        textOverflow: 'ellipsis',\n        flexShrink: 0,\n        marginRight: theme.spacing.md,\n        maxWidth: '100%',\n      }}\n    >\n      <TraceLabelColorIndicator color={color} dashStyle={dashStyle} />\n      <Typography.Text\n        color=\"secondary\"\n        size=\"sm\"\n        css={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}\n      >\n        {label}\n      </Typography.Text>\n    </div>\n  );\n};\n\nexport const TraceLabelColorIndicator: React.FC<Pick<LegendLabelData, 'color' | 'dashStyle'>> = ({\n  color,\n  dashStyle,\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const strokeDasharray = dashStyle ? getDashArray(dashStyle) : undefined;\n  const pathYOffset = theme.typography.fontSizeSm / 2;\n\n  return (\n    <svg\n      css={{\n        height: theme.typography.fontSizeSm,\n        width: STROKE_WIDTH * 8,\n        marginRight: theme.spacing.xs,\n        flexShrink: 0,\n      }}\n    >\n      <path\n        d={`M0,${pathYOffset}h${STROKE_WIDTH * 8}`}\n        style={{\n          strokeWidth: STROKE_WIDTH,\n          stroke: color,\n          strokeDasharray,\n        }}\n      />\n    </svg>\n  );\n};\ntype RunsMetricsLegendProps = {\n  labelData: LegendLabelData[];\n  height: number;\n  fullScreen?: boolean;\n};\n\nconst RunsMetricsLegend: React.FC<RunsMetricsLegendProps> = ({ labelData, height, fullScreen }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        height,\n        alignContent: fullScreen ? 'flex-start' : 'normal',\n        gap: fullScreen ? theme.spacing.sm : 0,\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        marginTop: fullScreen ? theme.spacing.lg : theme.spacing.sm,\n      }}\n    >\n      {labelData.map((labelDatum) => (\n        <TraceLabel key={labelDatum.uuid ?? labelDatum.label} {...labelDatum} />\n      ))}\n    </div>\n  );\n};\n\nexport default RunsMetricsLegend;\n","import {\n  LegacySelect,\n  SimpleSelect,\n  SimpleSelectOption,\n  SimpleSelectOptionGroup,\n  Tag,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport React, { ComponentProps, PropsWithChildren, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { makeCanonicalSortKey } from '../../../experiment-page/utils/experimentPage.common-utils';\n\n/**\n * Represents a field in the compare run charts configuration modal.\n * Displays a title and content with proper margins.\n */\nexport const RunsChartsConfigureField = ({\n  title,\n  compact = false,\n  children,\n}: PropsWithChildren<{\n  title: React.ReactNode;\n  compact?: boolean;\n}>) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{ marginBottom: compact ? theme.spacing.sm : theme.spacing.md * 2 }}\n      data-testid=\"experiment-view-compare-runs-config-field\"\n    >\n      <Typography.Title level={4}>{title}</Typography.Title>\n      {children}\n    </div>\n  );\n};\n\n/**\n * A searchable select for selecting metric or param from a categorized list.\n */\nexport const RunsChartsMetricParamSelect = ({\n  value,\n  onChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  value: string;\n  onChange: ComponentProps<typeof LegacySelect>['onChange'];\n  metricKeyList?: string[];\n  paramKeyList?: string[];\n}) => {\n  const { formatMessage } = useIntl();\n\n  const isEmpty = !paramKeyList?.length && !metricKeyList?.length;\n\n  return (\n    <LegacySelect\n      css={styles.selectFull}\n      value={\n        isEmpty\n          ? formatMessage({\n              description:\n                'Message displayed when no metrics or params are available in the compare runs chart configure modal',\n              defaultMessage: 'No metrics or parameters available',\n            })\n          : value\n      }\n      disabled={isEmpty}\n      onChange={onChange}\n      dangerouslySetAntdProps={{ showSearch: true }}\n    >\n      {metricKeyList?.length ? (\n        <LegacySelect.OptGroup\n          label={formatMessage({\n            defaultMessage: 'Metrics',\n            description: \"Label for 'metrics' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {metricKeyList.map((metric) => (\n            <LegacySelect.Option\n              key={makeCanonicalSortKey('METRIC', metric)}\n              value={makeCanonicalSortKey('METRIC', metric)}\n            >\n              {metric}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect.OptGroup>\n      ) : null}\n      {paramKeyList?.length ? (\n        <LegacySelect.OptGroup\n          label={formatMessage({\n            defaultMessage: 'Params',\n            description: \"Label for 'params' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {paramKeyList.map((param) => (\n            <LegacySelect.Option\n              key={makeCanonicalSortKey('PARAM', param)}\n              value={makeCanonicalSortKey('PARAM', param)}\n            >\n              {param}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect.OptGroup>\n      ) : null}\n    </LegacySelect>\n  );\n};\n\nexport const RunsChartsMetricParamSelectV2 = ({\n  value,\n  id,\n  onChange,\n  metricOptions = [],\n  paramOptions = [],\n}: {\n  value: string;\n  id: string;\n  onChange: (value: string) => void;\n  metricOptions: {\n    key: string;\n    datasetName: string | undefined;\n    metricKey: string;\n  }[];\n  paramOptions: {\n    key: string;\n    paramKey: string;\n  }[];\n}) => {\n  const { formatMessage } = useIntl();\n\n  const isEmpty = !paramOptions.length && !metricOptions.length;\n\n  return (\n    <SimpleSelect\n      componentId=\"mlflow.charts.chart_configure.metric_with_dataset_select\"\n      id={id}\n      css={styles.selectFull}\n      value={\n        isEmpty\n          ? formatMessage({\n              description:\n                'Message displayed when no metrics or params are available in the compare runs chart configure modal',\n              defaultMessage: 'No metrics or parameters available',\n            })\n          : value\n      }\n      disabled={isEmpty}\n      onChange={({ target }) => {\n        onChange(target.value);\n      }}\n      contentProps={{\n        matchTriggerWidth: true,\n        maxHeight: 500,\n      }}\n    >\n      {metricOptions?.length ? (\n        <SimpleSelectOptionGroup\n          label={formatMessage({\n            defaultMessage: 'Metrics',\n            description: \"Label for 'metrics' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {metricOptions.map(({ datasetName, key, metricKey }) => (\n            <SimpleSelectOption key={key} value={key}>\n              {datasetName && (\n                <Tag componentId=\"mlflow.charts.chart_configure.metric_with_dataset_select.tag\">{datasetName}</Tag>\n              )}{' '}\n              {metricKey}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      ) : null}\n      {paramOptions?.length ? (\n        <SimpleSelectOptionGroup\n          label={formatMessage({\n            defaultMessage: 'Params',\n            description: \"Label for 'params' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {paramOptions.map(({ key, paramKey }) => (\n            <SimpleSelectOption key={key} value={key}>\n              {paramKey}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      ) : null}\n    </SimpleSelect>\n  );\n};\n\nexport const runsChartsRunCountDefaultOptions: { value: number; label: React.ReactNode }[] = [\n  // We're not using any procedural generation so react-intl extractor can parse it\n  {\n    value: 5,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"5\"\n        description=\"Label for 5 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 10,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"10\"\n        description=\"Label for 10 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 20,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"20\"\n        description=\"Label for 20 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n];\n\nconst styles = { selectFull: { width: '100%' } };\n","import { SimpleSelect, SimpleSelectOption, Tag } from '@databricks/design-system';\nimport { RunsChartsMetricByDatasetEntry } from '../../runs-charts.types';\n\nexport const RunsChartsConfigureMetricWithDatasetSelect = ({\n  metricKeysByDataset,\n  value,\n  onChange,\n}: {\n  metricKeysByDataset?: RunsChartsMetricByDatasetEntry[];\n  value?: string;\n  onChange: (metricByDatasetEntry: RunsChartsMetricByDatasetEntry) => void;\n}) => {\n  return (\n    <SimpleSelect\n      css={{ width: '100%' }}\n      componentId=\"mlflow.charts.chart_configure.metric_with_dataset_select\"\n      id=\"mlflow.charts.chart_configure.metric_with_dataset_select\"\n      value={value}\n      onChange={({ target }) => {\n        const entry = metricKeysByDataset?.find(({ dataAccessKey }) => dataAccessKey === target.value);\n        if (entry) {\n          onChange(entry);\n        }\n      }}\n      contentProps={{\n        matchTriggerWidth: true,\n        maxHeight: 400,\n      }}\n    >\n      {metricKeysByDataset?.map(({ datasetName, metricKey, dataAccessKey }) => (\n        <SimpleSelectOption key={dataAccessKey} value={dataAccessKey}>\n          {datasetName && (\n            <Tag componentId=\"mlflow.charts.chart_configure.metric_with_dataset_select.tag\">{datasetName}</Tag>\n          )}{' '}\n          {metricKey}\n        </SimpleSelectOption>\n      ))}\n    </SimpleSelect>\n  );\n};\n","import { LegacySelect } from '@databricks/design-system';\nimport { useCallback, useEffect } from 'react';\nimport type {\n  RunsChartsCardConfig,\n  RunsChartsBarCardConfig,\n  RunsChartsMetricByDatasetEntry,\n} from '../../runs-charts.types';\nimport { RunsChartsConfigureField, runsChartsRunCountDefaultOptions } from './RunsChartsConfigure.common';\nimport { isEmpty } from 'lodash';\nimport { RunsChartsConfigureMetricWithDatasetSelect } from './RunsChartsConfigureMetricWithDatasetSelect';\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsChartsConfigureBarChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  metricKeysByDataset,\n}: {\n  metricKeyList: string[];\n  metricKeysByDataset?: RunsChartsMetricByDatasetEntry[];\n  state: Partial<RunsChartsBarCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsBarCardConfig) => void;\n}) => {\n  /**\n   * Callback for updating metric key\n   */\n  const updateMetric = useCallback(\n    (metricKey: string, datasetName?: string, dataAccessKey?: string) => {\n      onStateChange((current) => ({ ...(current as RunsChartsBarCardConfig), metricKey, datasetName, dataAccessKey }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsBarCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow metric key is not predetermined, automatically\n   * select the first one so it's not empty\n   */\n  useEffect(() => {\n    if (!state.metricKey && metricKeysByDataset?.[0]) {\n      updateMetric(\n        metricKeysByDataset[0].metricKey,\n        metricKeysByDataset[0].datasetName,\n        metricKeysByDataset[0].dataAccessKey,\n      );\n      return;\n    }\n\n    if (!state.metricKey && metricKeyList?.[0]) {\n      updateMetric(metricKeyList[0]);\n    }\n  }, [state.metricKey, updateMetric, metricKeyList, metricKeysByDataset]);\n\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <>\n      <RunsChartsConfigureField title=\"Metric\">\n        {!isEmpty(metricKeysByDataset) ? (\n          <RunsChartsConfigureMetricWithDatasetSelect\n            metricKeysByDataset={metricKeysByDataset}\n            onChange={({ metricKey, datasetName, dataAccessKey }) =>\n              updateMetric(metricKey, datasetName, dataAccessKey)\n            }\n            value={state.dataAccessKey ?? state.metricKey}\n          />\n        ) : (\n          <LegacySelect\n            css={styles.selectFull}\n            value={emptyMetricsList ? 'No metrics available' : state.metricKey}\n            onChange={(metricKey) => updateMetric(metricKey)}\n            disabled={emptyMetricsList}\n            dangerouslySetAntdProps={{ showSearch: true }}\n          >\n            {metricKeyList.map((metric) => (\n              <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n                {metric}\n              </LegacySelect.Option>\n            ))}\n          </LegacySelect>\n        )}\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n\nconst styles = { selectFull: { width: '100%' } };\n","import { LegacySelect } from '@databricks/design-system';\nimport { useCallback } from 'react';\nimport type { RunsChartsCardConfig, RunsChartsParallelCardConfig } from '../../runs-charts.types';\nimport { RunsChartsConfigureField } from './RunsChartsConfigure.common';\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsChartsConfigureParallelChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: Partial<RunsChartsParallelCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsParallelCardConfig) => void;\n}) => {\n  /**\n   * Callback for updating selected metrics and params\n   */\n\n  const updateSelectedParams = useCallback(\n    (selectedParams: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsParallelCardConfig),\n        selectedParams,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateSelectedMetrics = useCallback(\n    (selectedMetrics: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsParallelCardConfig),\n        selectedMetrics,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const emptyMetricsList = metricKeyList.length === 0;\n  const emptyParamsList = paramKeyList.length === 0;\n\n  return (\n    <>\n      <RunsChartsConfigureField title=\"Params\">\n        <LegacySelect\n          mode={emptyParamsList ? undefined : 'multiple'}\n          onChange={updateSelectedParams}\n          style={{\n            width: 275,\n          }}\n          value={emptyParamsList ? ('No parameters available' as any) : state.selectedParams}\n          disabled={emptyParamsList}\n        >\n          {paramKeyList.map((param) => (\n            <LegacySelect.Option value={param} key={param}>\n              {param}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect>\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField title=\"Metrics\">\n        <LegacySelect\n          mode={emptyMetricsList ? undefined : 'multiple'}\n          onChange={updateSelectedMetrics}\n          style={{\n            width: 275,\n          }}\n          value={emptyMetricsList ? ('No metrics available' as any) : state.selectedMetrics}\n          disabled={emptyMetricsList}\n        >\n          {metricKeyList.map((metric) => (\n            <LegacySelect.Option value={metric} key={metric}>\n              {metric}\n            </LegacySelect.Option>\n          ))}\n        </LegacySelect>\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import {\n  Button,\n  CloseIcon,\n  Input,\n  LegacySelect,\n  PlusIcon,\n  Radio,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport {\n  RunsChartsCardConfig,\n  RunsChartsLineCardConfig,\n  RunsChartsLineChartExpression,\n  RunsChartsLineChartYAxisType,\n} from '../runs-charts.types';\nimport { RunsChartsConfigureField } from './config/RunsChartsConfigure.common';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableChartExpressions } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useChartExpressionParser } from '../hooks/useChartExpressionParser';\nimport { RunsChartsLineChartXAxisType } from './RunsCharts.common';\n\nconst renderMetricSelectorV1 = ({\n  metricKeyList,\n  metricKey,\n  updateMetric,\n}: {\n  metricKeyList: string[];\n  metricKey?: string;\n  updateMetric: (metricKey: string) => void;\n}) => {\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <LegacySelect\n      css={{ width: '100%' }}\n      value={emptyMetricsList ? 'No metrics available' : metricKey}\n      onChange={updateMetric}\n      disabled={emptyMetricsList}\n      dangerouslySetAntdProps={{ showSearch: true }}\n    >\n      {metricKeyList.map((metric) => (\n        <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n          {metric}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n};\n\nconst renderMetricSelectorV2 = ({\n  metricKeyList,\n  selectedMetricKeys,\n  updateSelectedMetrics,\n}: {\n  metricKeyList: string[];\n  selectedMetricKeys?: string[];\n  updateSelectedMetrics: (metricKeys: string[]) => void;\n}) => {\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <LegacySelect\n      mode=\"multiple\"\n      placeholder={\n        emptyMetricsList ? (\n          <FormattedMessage\n            defaultMessage=\"No metrics available\"\n            description=\"Text shown in a disabled multi-selector when there are no selectable metrics.\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Select metrics\"\n            description=\"Placeholder text for a metric multi-selector when configuring a line chart\"\n          />\n        )\n      }\n      css={{ width: '100%' }}\n      value={emptyMetricsList ? [] : selectedMetricKeys}\n      onChange={updateSelectedMetrics}\n      disabled={emptyMetricsList}\n      dangerouslySetAntdProps={{ showSearch: true }}\n    >\n      {metricKeyList.map((metric) => (\n        <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n          {metric}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n};\n\nconst ExpressionInput = ({\n  chartExpression,\n  index,\n  updateYAxisExpression,\n  removeYAxisExpression,\n  metricKeyList,\n}: {\n  chartExpression: RunsChartsLineChartExpression;\n  index: number;\n  updateYAxisExpression: (expression: RunsChartsLineChartExpression, index: number) => void;\n  removeYAxisExpression: (index: number) => void;\n  metricKeyList: string[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { compileExpression } = useChartExpressionParser();\n  const [isValidExpression, setIsValidExpression] = useState(true);\n  const validateAndUpdate = (expression: string) => {\n    const compiledExpression = compileExpression(expression, metricKeyList);\n    if (compiledExpression === undefined) {\n      setIsValidExpression(false);\n      updateYAxisExpression({ rpn: [], variables: [], expression }, index);\n    } else {\n      setIsValidExpression(true);\n      updateYAxisExpression(compiledExpression, index);\n    }\n  };\n\n  return (\n    <span css={{ display: 'flex', width: '100%', gap: theme.spacing.sm }}>\n      <Input\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsyaxismetricandexpressionselector.tsx_122\"\n        value={chartExpression.expression}\n        onChange={(e) => validateAndUpdate(e.target.value)}\n        validationState={isValidExpression ? undefined : 'error'}\n      />\n      <Button\n        componentId=\"mlflow.charts.line-chart-expressions-remove\"\n        icon={<CloseIcon />}\n        onClick={() => removeYAxisExpression(index)}\n      />\n    </span>\n  );\n};\n\nexport const RunsChartsYAxisMetricAndExpressionSelector = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  updateSelectedMetrics,\n}: {\n  state: Partial<RunsChartsLineCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsLineCardConfig) => void;\n  metricKeyList: string[];\n  updateSelectedMetrics: (metricKeys: string[]) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const usingChartExpressions =\n    shouldEnableChartExpressions() && state.xAxisKey !== RunsChartsLineChartXAxisType.METRIC;\n\n  const DEBOUNCE_DELAY = 300; // in ms\n\n  const [temporaryChartExpressions, setTemporaryChartExpressions] = useState<RunsChartsLineChartExpression[]>(\n    state.yAxisExpressions || [],\n  );\n\n  const updateYAxisExpressionTemporary = (expression: RunsChartsLineChartExpression, index: number) => {\n    setTemporaryChartExpressions((current) => {\n      const newExpressions = [...current];\n      newExpressions[index] = expression;\n      return newExpressions;\n    });\n  };\n\n  const addNewYAxisExpressionTemporary = () => {\n    setTemporaryChartExpressions((current) => {\n      return [...current, { rpn: [], variables: [], expression: '' } as RunsChartsLineChartExpression];\n    });\n  };\n\n  const removeYAxisExpressionTemporary = (index: number) => {\n    setTemporaryChartExpressions((current) => {\n      const newExpressions = [...current];\n      newExpressions.splice(index, 1);\n      return newExpressions;\n    });\n  };\n\n  useEffect(() => {\n    const updateYAxisExpression = (yAxisExpressions: RunsChartsLineChartExpression[]) => {\n      onStateChange((current) => {\n        const config = current as RunsChartsLineCardConfig;\n        return {\n          ...config,\n          yAxisExpressions,\n        };\n      });\n    };\n    const handler = setTimeout(() => {\n      updateYAxisExpression(temporaryChartExpressions);\n    }, DEBOUNCE_DELAY);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [temporaryChartExpressions, onStateChange]);\n\n  const updateYAxisKey = useCallback(\n    (yAxisKey: RunsChartsLineCardConfig['yAxisKey']) => {\n      onStateChange((current) => {\n        const config = current as RunsChartsLineCardConfig;\n        return {\n          ...config,\n          yAxisKey,\n          range: {\n            ...config.range,\n            yMin: undefined,\n            yMax: undefined,\n          },\n        };\n      });\n    },\n    [onStateChange],\n  );\n\n  return (\n    <>\n      {usingChartExpressions && (\n        <RunsChartsConfigureField title=\"Metric type\" compact>\n          <Radio.Group\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsyaxismetricandexpressionselector.tsx_221\"\n            name=\"runs-charts-field-group-metric-type-y-axis\"\n            value={state.yAxisKey || RunsChartsLineChartYAxisType.METRIC}\n            onChange={({ target: { value } }) => updateYAxisKey(value)}\n          >\n            <Radio value={RunsChartsLineChartYAxisType.METRIC} key={RunsChartsLineChartYAxisType.METRIC}>\n              <FormattedMessage\n                defaultMessage=\"Logged metrics\"\n                description=\"Experiment tracking > runs charts > line chart configuration > logged metrics label\"\n              />\n            </Radio>\n            <Radio value={RunsChartsLineChartYAxisType.EXPRESSION} key={RunsChartsLineChartYAxisType.EXPRESSION}>\n              <FormattedMessage\n                defaultMessage=\"Custom expression\"\n                description=\"Experiment tracking > runs charts > line chart configuration > custom expression label\"\n              />\n            </Radio>\n          </Radio.Group>\n        </RunsChartsConfigureField>\n      )}\n      {usingChartExpressions && state.yAxisKey === RunsChartsLineChartYAxisType.EXPRESSION ? (\n        <RunsChartsConfigureField title=\"Expression\" compact>\n          <div css={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: theme.spacing.sm }}>\n            {temporaryChartExpressions.map((chartExpression, index) => {\n              return (\n                <ExpressionInput\n                  key={index}\n                  chartExpression={chartExpression}\n                  index={index}\n                  updateYAxisExpression={updateYAxisExpressionTemporary}\n                  removeYAxisExpression={removeYAxisExpressionTemporary}\n                  metricKeyList={metricKeyList}\n                />\n              );\n            })}\n            <Button\n              componentId=\"mlflow.charts.line-chart-expressions-add-new\"\n              icon={<PlusIcon />}\n              onClick={addNewYAxisExpressionTemporary}\n            >\n              Add new\n            </Button>\n          </div>\n        </RunsChartsConfigureField>\n      ) : (\n        <RunsChartsConfigureField title=\"Metric\" compact>\n          {renderMetricSelectorV2({\n            metricKeyList,\n            selectedMetricKeys: state.selectedMetricKeys,\n            updateSelectedMetrics,\n          })}\n        </RunsChartsConfigureField>\n      )}\n    </>\n  );\n};\n","import {\n  Radio,\n  LegacySelect,\n  Switch,\n  LegacyTooltip,\n  QuestionMarkIcon,\n  useDesignSystemTheme,\n  ThemeType,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  InfoIcon,\n  Input,\n  FormUI,\n  Typography,\n  SimpleSelect,\n  SimpleSelectOption,\n  SimpleSelectOptionGroup,\n  Tooltip,\n  PlusIcon,\n  Button,\n  Spacer,\n  CloseIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useCallback, useEffect, useState } from 'react';\nimport {\n  RunsChartsLineChartYAxisType,\n  type ChartRange,\n  type RunsChartsCardConfig,\n  type RunsChartsLineCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsConfigureField } from './RunsChartsConfigure.common';\nimport { shouldEnableChartExpressions } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { RunsChartsLineChartXAxisType } from '@mlflow/mlflow/src/experiment-tracking/components/runs-charts/components/RunsCharts.common';\nimport { LineSmoothSlider } from '@mlflow/mlflow/src/experiment-tracking/components/LineSmoothSlider';\nimport { isUndefined } from 'lodash';\nimport { RunsChartsYAxisMetricAndExpressionSelector } from '../RunsChartsYAxisMetricAndExpressionSelector';\n\nconst USE_GLOBAL_SETTING_KEY = '_GLOBAL';\n\nconst renderXAxisMetricSelector = ({\n  theme,\n  metricKeyList,\n  selectedXAxisMetricKey,\n  updateSelectedXAxisMetricKey,\n  disabled = false,\n}: {\n  theme: ThemeType;\n  metricKeyList: string[];\n  selectedXAxisMetricKey?: string;\n  updateSelectedXAxisMetricKey: (metricKey: string) => void;\n  disabled?: boolean;\n}) => {\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <Radio value={RunsChartsLineChartXAxisType.METRIC} disabled={disabled}>\n      <FormattedMessage\n        defaultMessage=\"Metric\"\n        description=\"Label for a radio button that configures the x-axis on a line chart. This option makes the X-axis a custom metric that the user selects.\"\n      />\n      <LegacySelect\n        css={{\n          marginTop: theme.spacing.xs,\n          width: '100%',\n        }}\n        value={selectedXAxisMetricKey || undefined}\n        placeholder={\n          emptyMetricsList ? (\n            <FormattedMessage\n              defaultMessage=\"No metrics available\"\n              description=\"Text shown in a disabled metric selector when there are no selectable metrics.\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"Select metric\"\n              description=\"Placeholder text for a metric selector when configuring a line chart\"\n            />\n          )\n        }\n        onClick={(e: React.MouseEvent<HTMLElement>) => {\n          // this is to prevent the radio button\n          // from automatically closing the selector\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onChange={updateSelectedXAxisMetricKey}\n        disabled={emptyMetricsList || disabled}\n        dangerouslySetAntdProps={{ showSearch: true }}\n      >\n        {metricKeyList.map((metric) => (\n          <LegacySelect.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n            {metric}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n    </Radio>\n  );\n};\n\nconst safeLog = (x: number | undefined) => {\n  if (isUndefined(x)) {\n    return x;\n  }\n  if (x <= 0) {\n    return undefined;\n  }\n  return Math.log10(x);\n};\n\nconst safePow = (x: number | undefined) => {\n  if (isUndefined(x)) {\n    return x;\n  }\n  return Math.pow(10, x);\n};\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsChartsConfigureLineChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n}: {\n  metricKeyList: string[];\n  state: Partial<RunsChartsLineCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsLineCardConfig) => void;\n}) => {\n  const usingChartExpressions = shouldEnableChartExpressions();\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const runSelectOptions = [5, 10, 20, 50, 100];\n\n  const [localAxisRange, setLocalAxisRange] = useState<ChartRange>({\n    xMin: state.xAxisScaleType === 'log' ? safePow(state.range?.xMin) : state.range?.xMin,\n    xMax: state.xAxisScaleType === 'log' ? safePow(state.range?.xMax) : state.range?.xMax,\n    yMin: state.scaleType === 'log' ? safePow(state.range?.yMin) : state.range?.yMin,\n    yMax: state.scaleType === 'log' ? safePow(state.range?.yMax) : state.range?.yMax,\n  });\n\n  /**\n   * Callback for updating metric key\n   */\n  const updateMetric = useCallback(\n    (metricKey: string) => {\n      onStateChange((current) => ({ ...(current as RunsChartsLineCardConfig), metricKey }));\n    },\n    [onStateChange],\n  );\n\n  const updateSelectedMetrics = useCallback(\n    (metricKeys: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        metricKey: metricKeys[0],\n        selectedMetricKeys: metricKeys,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateXAxisKey = useCallback(\n    (xAxisKey: RunsChartsLineCardConfig['xAxisKey'], useGlobal = false) => {\n      onStateChange((current) => {\n        const config = current as RunsChartsLineCardConfig;\n        return {\n          ...config,\n          xAxisKey,\n          selectedXAxisMetricKey: '',\n          range: {\n            ...config.range,\n            xMin: undefined,\n            xMax: undefined,\n          },\n          useGlobalXaxisKey: useGlobal ?? config.useGlobalXaxisKey,\n          selectedYAxisMetricKey: RunsChartsLineChartYAxisType.METRIC,\n        };\n      });\n    },\n    [onStateChange],\n  );\n\n  const isInvalidLogValue = (value: number | undefined) => !isUndefined(value) && value <= 0;\n\n  const updateXAxisScaleType = useCallback(\n    (isLogType: boolean) => {\n      onStateChange((current) => {\n        const config = current as RunsChartsLineCardConfig;\n\n        let newXMin = isLogType ? safeLog(localAxisRange.xMin) : localAxisRange.xMin;\n        let newXMax = isLogType ? safeLog(localAxisRange.xMax) : localAxisRange.xMax;\n        if (isLogType && isInvalidLogValue(localAxisRange.xMin) && localAxisRange.xMax && localAxisRange.xMax > 1) {\n          // when switching to log type, if only xMin is invalid, set xMin to 1.\n          setLocalAxisRange((prev) => ({\n            ...prev,\n            xMin: 1,\n          }));\n          newXMin = 0;\n        } else if (isLogType && (isInvalidLogValue(localAxisRange.xMin) || isInvalidLogValue(localAxisRange.xMax))) {\n          setLocalAxisRange((prev) => ({\n            ...prev,\n            xMin: undefined,\n            xMax: undefined,\n          }));\n          newXMin = undefined;\n          newXMax = undefined;\n        }\n        return {\n          ...config,\n          xAxisScaleType: isLogType ? 'log' : 'linear',\n          range: {\n            ...config.range,\n            xMin: newXMin,\n            xMax: newXMax,\n          },\n        };\n      });\n    },\n    [onStateChange, localAxisRange.xMin, localAxisRange.xMax],\n  );\n\n  const updateSelectedXAxisMetricKey = useCallback(\n    (selectedXAxisMetricKey: string) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        selectedXAxisMetricKey,\n        xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateYAxisType = useCallback(\n    (isLogType: boolean) => {\n      onStateChange((current) => {\n        const config = current as RunsChartsLineCardConfig;\n\n        let newYMin = isLogType ? safeLog(localAxisRange.yMin) : localAxisRange.yMin;\n        let newYMax = isLogType ? safeLog(localAxisRange.yMax) : localAxisRange.yMax;\n        if (isLogType && isInvalidLogValue(localAxisRange.yMin) && localAxisRange.yMax && localAxisRange.yMax > 1) {\n          // when switching to log type, if only yMin is invalid, set yMin to 1.\n          setLocalAxisRange((prev) => ({\n            ...prev,\n            yMin: 1,\n          }));\n          newYMin = 0; // This is the logged value of 1.\n        } else if (isLogType && (isInvalidLogValue(localAxisRange.yMin) || isInvalidLogValue(localAxisRange.yMax))) {\n          setLocalAxisRange((prev) => ({\n            ...prev,\n            yMin: undefined,\n            yMax: undefined,\n          }));\n          newYMin = undefined;\n          newYMax = undefined;\n        }\n        return {\n          ...config,\n          scaleType: isLogType ? 'log' : 'linear',\n          range: {\n            ...config.range,\n            yMin: newYMin,\n            yMax: newYMax,\n          },\n        };\n      });\n    },\n    [onStateChange, localAxisRange.yMin, localAxisRange.yMax],\n  );\n\n  const updateIgnoreOutliers = useCallback(\n    (ignoreOutliers: boolean) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        ignoreOutliers,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateSmoothing = useCallback(\n    (lineSmoothness: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        lineSmoothness: lineSmoothness,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsLineCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow metric key is not predetermined, automatically\n   * select the first one so it's not empty\n   */\n  useEffect(() => {\n    if (!state.metricKey && metricKeyList?.[0]) {\n      updateMetric(metricKeyList[0]);\n    }\n  }, [state.metricKey, updateMetric, metricKeyList]);\n\n  // for backwards compatibility, if selectedMetricKeys\n  // is not present, set it using metricKey.\n  useEffect(() => {\n    if (isUndefined(state.selectedMetricKeys) && !isUndefined(state.metricKey) && state.metricKey !== '') {\n      updateSelectedMetrics([state.metricKey]);\n    }\n  }, [state.selectedMetricKeys, state.metricKey, updateSelectedMetrics]);\n\n  const updateXAxisWhenConfirmed = (xMin: number | undefined, xMax: number | undefined) => {\n    if (inTransitionState(xMin, xMax)) {\n      return;\n    }\n    onStateChange((current) => {\n      const config = current as RunsChartsLineCardConfig;\n      return {\n        ...config,\n        range: {\n          ...config.range,\n          xMin: config.xAxisScaleType === 'log' ? safeLog(xMin) : xMin,\n          xMax: config.xAxisScaleType === 'log' ? safeLog(xMax) : xMax,\n        },\n      };\n    });\n  };\n\n  const updateYAxisWhenConfirmed = (yMin: number | undefined, yMax: number | undefined) => {\n    if (inTransitionState(yMin, yMax)) {\n      return;\n    }\n    onStateChange((current) => {\n      const config = current as RunsChartsLineCardConfig;\n      return {\n        ...config,\n        range: {\n          ...config.range,\n          yMin: config.scaleType === 'log' ? safeLog(yMin) : yMin,\n          yMax: config.scaleType === 'log' ? safeLog(yMax) : yMax,\n        },\n      };\n    });\n  };\n\n  const updateXAxisScaleMin = (xMin: string) => {\n    const newXMin = xMin ? Number(xMin) : undefined;\n    setLocalAxisRange((prev) => ({ ...prev, xMin: newXMin }));\n    updateXAxisWhenConfirmed(newXMin, localAxisRange.xMax);\n  };\n  const updateXAxisScaleMax = (xMax: string) => {\n    const newXMax = xMax ? Number(xMax) : undefined;\n    setLocalAxisRange((prev) => ({ ...prev, xMax: newXMax }));\n    updateXAxisWhenConfirmed(localAxisRange.xMin, newXMax);\n  };\n  const updateYAxisScaleMin = (yMin: string) => {\n    const newYMin = yMin ? Number(yMin) : undefined;\n    setLocalAxisRange((prev) => ({ ...prev, yMin: newYMin }));\n    updateYAxisWhenConfirmed(newYMin, localAxisRange.yMax);\n  };\n  const updateYAxisScaleMax = (yMax: string) => {\n    const newYMax = yMax ? Number(yMax) : undefined;\n    setLocalAxisRange((prev) => ({ ...prev, yMax: newYMax }));\n    updateYAxisWhenConfirmed(localAxisRange.yMin, newYMax);\n  };\n\n  const inTransitionState = (a: number | undefined, b: number | undefined) => {\n    if (isUndefined(a) && isUndefined(b)) {\n      return false;\n    } else if (!isUndefined(a) && !isUndefined(b)) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const invalidMessage = (scaleType: 'log' | 'linear' | undefined, value: number | undefined) => {\n    if (scaleType === 'log' && isInvalidLogValue(value)) {\n      return (\n        <FormUI.Message\n          message={\n            <FormattedMessage\n              defaultMessage=\"Invalid log value\"\n              description=\"Experiment tracking > runs charts > line chart configuration > invalid log value message\"\n            />\n          }\n          type=\"warning\"\n        />\n      );\n    }\n    return null;\n  };\n\n  const METRIC_AXIS_PREFIX = 'metric-';\n  return (\n    <>\n      <Typography.Title level={4} color=\"secondary\">\n        X-axis\n      </Typography.Title>\n      <RunsChartsConfigureField title=\"Type\" compact>\n        {usingChartExpressions ? (\n          <SimpleSelect\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_436\"\n            id=\"x-axis-type\"\n            width=\"100%\"\n            value={state.useGlobalXaxisKey ? USE_GLOBAL_SETTING_KEY : state.xAxisKey}\n            contentProps={{ matchTriggerWidth: true, textOverflowMode: 'ellipsis' }}\n            onChange={({ target: { value } }) => {\n              if (value.startsWith(METRIC_AXIS_PREFIX)) {\n                updateSelectedXAxisMetricKey(value.slice(METRIC_AXIS_PREFIX.length));\n              } else if (value === RunsChartsLineChartXAxisType.STEP) {\n                updateXAxisKey(RunsChartsLineChartXAxisType.STEP);\n              } else if (value === RunsChartsLineChartXAxisType.TIME) {\n                updateXAxisKey(RunsChartsLineChartXAxisType.TIME);\n              } else if (value === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n                updateXAxisKey(RunsChartsLineChartXAxisType.TIME_RELATIVE);\n              } else if (value === USE_GLOBAL_SETTING_KEY) {\n                updateXAxisKey(RunsChartsLineChartXAxisType.STEP, true);\n              }\n            }}\n          >\n            <SimpleSelectOption value={USE_GLOBAL_SETTING_KEY}>\n              <FormattedMessage\n                defaultMessage=\"Use workspace settings\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for using global workspace settings.\"\n              />\n            </SimpleSelectOption>\n            <SimpleSelectOption value={RunsChartsLineChartXAxisType.STEP}>\n              <FormattedMessage\n                defaultMessage=\"Step\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for the step number that the metrics were logged.\"\n              />\n            </SimpleSelectOption>\n            <SimpleSelectOption value={RunsChartsLineChartXAxisType.TIME}>\n              <FormattedMessage\n                defaultMessage=\"Time (wall)\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for the absolute time that the metrics were logged.\"\n              />\n              <Tooltip\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_474\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Absolute date and time\"\n                    description=\"A tooltip line chart configuration for the step function of wall time\"\n                  />\n                }\n                side=\"right\"\n              >\n                <span>\n                  {' '}\n                  <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n                </span>\n              </Tooltip>\n            </SimpleSelectOption>\n            <SimpleSelectOption value={RunsChartsLineChartXAxisType.TIME_RELATIVE}>\n              <FormattedMessage\n                defaultMessage=\"Time (relative)\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for relative time since the first metric was logged.\"\n              />\n              <Tooltip\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_494\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Amount of time that has passed since the first metric value was logged\"\n                    description=\"A tooltip line chart configuration for the step function of relative time\"\n                  />\n                }\n                side=\"right\"\n              >\n                <span>\n                  {' '}\n                  <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n                </span>\n              </Tooltip>\n            </SimpleSelectOption>\n            {metricKeyList.length > 0 && (\n              <SimpleSelectOptionGroup label=\"Metrics\">\n                {metricKeyList.map((metric) => (\n                  <SimpleSelectOption\n                    key={metric}\n                    value={`${METRIC_AXIS_PREFIX}${metric}`}\n                    data-testid={`${METRIC_AXIS_PREFIX}${metric}`}\n                  >\n                    {metric}\n                  </SimpleSelectOption>\n                ))}\n              </SimpleSelectOptionGroup>\n            )}\n          </SimpleSelect>\n        ) : (\n          <Radio.Group\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_524\"\n            name=\"runs-charts-field-group-x-axis\"\n            value={state.useGlobalXaxisKey ? USE_GLOBAL_SETTING_KEY : state.xAxisKey}\n            onChange={({ target: { value } }) => {\n              if (value === USE_GLOBAL_SETTING_KEY) {\n                updateXAxisKey(RunsChartsLineChartXAxisType.STEP, true);\n              } else {\n                updateXAxisKey(value);\n              }\n            }}\n          >\n            <Radio value={USE_GLOBAL_SETTING_KEY}>\n              <FormattedMessage\n                defaultMessage=\"Use workspace settings\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for using global workspace settings.\"\n              />\n            </Radio>\n\n            <Radio value={RunsChartsLineChartXAxisType.STEP}>\n              <FormattedMessage\n                defaultMessage=\"Step\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for the step number that the metrics were logged.\"\n              />\n            </Radio>\n            <Radio value={RunsChartsLineChartXAxisType.TIME}>\n              <FormattedMessage\n                defaultMessage=\"Time (wall)\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for the absolute time that the metrics were logged.\"\n              />\n              <LegacyTooltip\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Absolute date and time\"\n                    description=\"A tooltip line chart configuration for the step function of wall time\"\n                  />\n                }\n                placement=\"right\"\n              >\n                {' '}\n                <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n              </LegacyTooltip>\n            </Radio>\n            <Radio value={RunsChartsLineChartXAxisType.TIME_RELATIVE}>\n              <FormattedMessage\n                defaultMessage=\"Time (relative)\"\n                description=\"Label for a radio button that configures the x-axis on a line chart. This option is for relative time since the first metric was logged.\"\n              />\n              <LegacyTooltip\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Amount of time that has passed since the first metric value was logged\"\n                    description=\"A tooltip line chart configuration for the step function of relative time\"\n                  />\n                }\n                placement=\"right\"\n              >\n                {' '}\n                <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n              </LegacyTooltip>\n            </Radio>\n            {renderXAxisMetricSelector({\n              theme,\n              metricKeyList,\n              selectedXAxisMetricKey: state.selectedXAxisMetricKey,\n              updateSelectedXAxisMetricKey,\n            })}\n          </Radio.Group>\n        )}\n      </RunsChartsConfigureField>\n      {state.xAxisKey === RunsChartsLineChartXAxisType.STEP && (\n        <>\n          <RunsChartsConfigureField title=\"X-axis scale\" compact>\n            <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n              <div>\n                <Input\n                  componentId=\"mlflow.charts.line_chart_configure.x_axis_min\"\n                  aria-label=\"x-axis-min\"\n                  name=\"min\"\n                  type=\"number\"\n                  value={localAxisRange.xMin}\n                  onChange={(e) => updateXAxisScaleMin(e.target.value)}\n                  max={localAxisRange.xMax}\n                  placeholder=\"Min\"\n                />\n                {invalidMessage(state.xAxisScaleType, localAxisRange.xMin)}\n              </div>\n              <div>\n                <Input\n                  componentId=\"mlflow.charts.line_chart_configure.x_axis_max\"\n                  aria-label=\"x-axis-max\"\n                  name=\"max\"\n                  type=\"number\"\n                  value={localAxisRange.xMax}\n                  onChange={(e) => updateXAxisScaleMax(e.target.value)}\n                  min={localAxisRange.xMin}\n                  placeholder=\"Max\"\n                />\n                {invalidMessage(state.xAxisScaleType, localAxisRange.xMax)}\n              </div>\n            </div>\n            <div style={{ padding: theme.spacing.xs }} />\n            <Switch\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_628\"\n              aria-label=\"x-axis-log\"\n              checked={state.xAxisScaleType === 'log'}\n              onChange={updateXAxisScaleType}\n              label=\"Log scale\"\n              activeLabel=\"On\"\n              inactiveLabel=\"Off\"\n              disabledLabel=\"Disabled\"\n            />\n          </RunsChartsConfigureField>\n        </>\n      )}\n      <Typography.Title level={4} color=\"secondary\" css={{ paddingTop: theme.spacing.lg }}>\n        Y-axis\n      </Typography.Title>\n      <RunsChartsYAxisMetricAndExpressionSelector\n        state={state}\n        onStateChange={onStateChange}\n        metricKeyList={metricKeyList}\n        updateSelectedMetrics={updateSelectedMetrics}\n      />\n      <RunsChartsConfigureField title=\"Y-axis scale\" compact>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <div>\n            <Input\n              componentId=\"mlflow.charts.line_chart_configure.y_axis_min\"\n              aria-label=\"y-axis-min\"\n              name=\"min\"\n              type=\"number\"\n              value={localAxisRange.yMin}\n              onChange={(e) => updateYAxisScaleMin(e.target.value)}\n              max={localAxisRange.yMax}\n              placeholder=\"Min\"\n            />\n            {invalidMessage(state.scaleType, localAxisRange.yMin)}\n          </div>\n          <div>\n            <Input\n              componentId=\"mlflow.charts.line_chart_configure.y_axis_max\"\n              aria-label=\"y-axis-max\"\n              name=\"max\"\n              type=\"number\"\n              value={localAxisRange.yMax}\n              onChange={(e) => updateYAxisScaleMax(e.target.value)}\n              min={localAxisRange.yMin}\n              placeholder=\"Max\"\n            />\n            {invalidMessage(state.scaleType, localAxisRange.yMax)}\n          </div>\n        </div>\n        <Spacer size=\"xs\" />\n        <Switch\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_682\"\n          aria-label=\"y-axis-log\"\n          checked={state.scaleType === 'log'}\n          onChange={updateYAxisType}\n          label=\"Log scale\"\n          activeLabel=\"On\"\n          inactiveLabel=\"Off\"\n          disabledLabel=\"Disabled\"\n        />\n        <Spacer size=\"xs\" />\n        <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n          <div>\n            <Typography.Text bold>\n              <FormattedMessage\n                defaultMessage=\"Ignore outliers\"\n                description=\"Runs charts > line chart > ignore outliers > label\"\n              />\n            </Typography.Text>\n            <Tooltip\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_703\"\n              delayDuration={0}\n              content={\n                <FormattedMessage\n                  defaultMessage=\"Only display data points between the p5 and p95 of the data. This can help with chart readability in cases where outliers significantly affect the Y-axis range\"\n                  description=\"A tooltip describing the 'Ignore Outliers' configuration option for line charts\"\n                />\n              }\n              side=\"right\"\n            >\n              <span>\n                {' '}\n                <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n              </span>\n            </Tooltip>\n          </div>\n          <Switch\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_716\"\n            aria-label=\"y-axis-ignore-outliers\"\n            checked={state.ignoreOutliers}\n            onChange={updateIgnoreOutliers}\n            // Empty label so that the active/inactive labels are actually displayed\n            label=\" \"\n            activeLabel={intl.formatMessage({\n              defaultMessage: 'On',\n              description: 'Runs charts > line chart > ignore outliers > on setting label',\n            })}\n            inactiveLabel={intl.formatMessage({\n              defaultMessage: 'Off',\n              description: 'Runs charts > line chart > ignore outliers > off setting label',\n            })}\n            disabledLabel={intl.formatMessage({\n              defaultMessage: 'Disabled',\n              description: 'Runs charts > line chart > ignore outliers > disabled label',\n            })}\n          />\n        </div>\n      </RunsChartsConfigureField>\n      <Typography.Title level={4} color=\"secondary\" css={{ paddingTop: theme.spacing.lg }}>\n        Advanced\n      </Typography.Title>\n      <RunsChartsConfigureField\n        title={intl.formatMessage({\n          defaultMessage: 'Display points',\n          description: 'Runs charts > line chart > display points > label',\n        })}\n        compact\n      >\n        <SegmentedControlGroup\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_747\"\n          name={intl.formatMessage({\n            defaultMessage: 'Display points',\n            description: 'Runs charts > line chart > display points > label',\n          })}\n          value={state.displayPoints}\n          onChange={({ target }) => {\n            onStateChange((current) => ({\n              ...(current as RunsChartsLineCardConfig),\n              displayPoints: target.value,\n            }));\n          }}\n        >\n          <SegmentedControlButton\n            value={undefined}\n            aria-label={[\n              intl.formatMessage({\n                defaultMessage: 'Display points',\n                description: 'Runs charts > line chart > display points > label',\n              }),\n              intl.formatMessage({\n                defaultMessage: 'Auto',\n                description: 'Runs charts > line chart > display points > auto setting label',\n              }),\n            ].join(': ')}\n          >\n            <FormattedMessage\n              defaultMessage=\"Auto\"\n              description=\"Runs charts > line chart > display points > auto setting label\"\n            />{' '}\n            <LegacyTooltip\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Show points on line charts if there are fewer than 60 data points per trace\"\n                  description=\"Runs charts > line chart > display points > auto tooltip\"\n                />\n              }\n            >\n              <InfoIcon />\n            </LegacyTooltip>\n          </SegmentedControlButton>\n          <SegmentedControlButton\n            value\n            aria-label={[\n              intl.formatMessage({\n                defaultMessage: 'Display points',\n                description: 'Runs charts > line chart > display points > label',\n              }),\n              intl.formatMessage({\n                defaultMessage: 'On',\n                description: 'Runs charts > line chart > display points > on setting label',\n              }),\n            ].join(': ')}\n          >\n            <FormattedMessage\n              defaultMessage=\"On\"\n              description=\"Runs charts > line chart > display points > on setting label\"\n            />\n          </SegmentedControlButton>\n          <SegmentedControlButton\n            value={false}\n            aria-label={[\n              intl.formatMessage({\n                defaultMessage: 'Display points',\n                description: 'Runs charts > line chart > display points > label',\n              }),\n              intl.formatMessage({\n                defaultMessage: 'Off',\n                description: 'Runs charts > line chart > display points > off setting label',\n              }),\n            ].join(': ')}\n          >\n            <FormattedMessage\n              defaultMessage=\"Off\"\n              description=\"Runs charts > line chart > display points > off setting label\"\n            />\n          </SegmentedControlButton>\n        </SegmentedControlGroup>\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={\n          <>\n            <FormattedMessage\n              defaultMessage=\"Line smoothing\"\n              description=\"Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.\"\n            />\n          </>\n        }\n        compact\n      >\n        <Radio.Group\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigurelinechart.tsx_838\"\n          name=\"use-global-line-smoothness\"\n          value={Boolean(state.useGlobalLineSmoothing)}\n          onChange={({ target }) => {\n            onStateChange((current) => ({\n              ...(current as RunsChartsLineCardConfig),\n              useGlobalLineSmoothing: target.value === true,\n            }));\n          }}\n        >\n          <Radio value>Use workspace settings</Radio>\n          <Radio value={false}>Custom</Radio>\n        </Radio.Group>\n\n        <LineSmoothSlider\n          data-testid=\"smoothness-toggle\"\n          min={0}\n          max={100}\n          onChange={updateSmoothing}\n          value={state.lineSmoothness ? state.lineSmoothness : 0}\n          disabled={state.useGlobalLineSmoothing}\n        />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n\nconst styles = {\n  selectFull: { width: '100%' },\n  timeStepQuestionMarkIcon: () => ({\n    svg: { width: 12, height: 12 },\n  }),\n};\n","import { useCallback, useMemo, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxState } from '../../../../../redux-types';\nimport { MetricHistoryByName } from '../../../../types';\nimport {\n  RunsChartsLineChartXAxisType,\n  removeOutliersFromMetricHistory,\n  type RunsChartsRunData,\n} from '../RunsCharts.common';\nimport { RunsMetricsLinePlot } from '../RunsMetricsLinePlot';\nimport { RunsChartsTooltipMode, useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsLineCardConfig, RunsChartsLineChartYAxisType } from '../../runs-charts.types';\nimport { shouldEnableChartExpressions } from '../../../../../common/utils/FeatureUtils';\nimport { useSampledMetricHistory } from '../../hooks/useSampledMetricHistory';\nimport { compact, isUndefined, uniq } from 'lodash';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { useGroupedChartRunData } from '../../../runs-compare/hooks/useGroupedChartRunData';\nimport { RunsChartsGlobalLineChartConfig } from '../../../experiment-page/models/ExperimentPageUIState';\nimport { useLineChartGlobalConfig } from '../hooks/useLineChartGlobalConfig';\nimport { RunsChartCardLoadingPlaceholder } from '../cards/ChartCard.common';\n\nconst RunsChartsConfigureLineChartPreviewImpl = ({\n  previewData,\n  cardConfig,\n  metricsByRunUuid,\n  groupBy,\n  globalLineChartConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsLineCardConfig;\n  groupBy: RunsGroupByConfig | null;\n\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n\n  metricsByRunUuid: Record<string, MetricHistoryByName>;\n}) => {\n  const { lineSmoothness, selectedXAxisMetricKey, xAxisKey } = useLineChartGlobalConfig(\n    cardConfig,\n    globalLineChartConfig,\n  );\n\n  const isGrouped = useMemo(() => previewData.some((r) => r.groupParentInfo), [previewData]);\n\n  const { aggregateFunction } = groupBy || {};\n\n  const runUuidsToFetch = useMemo(() => {\n    if (isGrouped) {\n      const runsInGroups = compact(previewData.map((r) => r.groupParentInfo)).flatMap((g) => g.runUuids);\n      const ungroupedRuns = compact(\n        previewData.filter((r) => !r.groupParentInfo && !r.belongsToGroup).map((r) => r.runInfo?.runUuid ?? undefined),\n      );\n      return [...runsInGroups, ...ungroupedRuns];\n    }\n    return compact(previewData.map((r) => r.runInfo)).map((g) => g.runUuid ?? '');\n  }, [previewData, isGrouped]);\n\n  const metricKeysToFetch = useMemo(() => {\n    const getYAxisKeys = (cardConfig: RunsChartsLineCardConfig) => {\n      const fallback = [cardConfig.metricKey];\n      if (!shouldEnableChartExpressions() || cardConfig.yAxisKey !== RunsChartsLineChartYAxisType.EXPRESSION) {\n        return cardConfig.selectedMetricKeys ?? fallback;\n      }\n      const yAxisKeys = cardConfig.yAxisExpressions?.reduce((acc, exp) => {\n        exp.variables.forEach((variable) => acc.add(variable));\n        return acc;\n      }, new Set<string>());\n      return yAxisKeys === undefined ? fallback : Array.from(yAxisKeys);\n    };\n    const yAxisKeys = getYAxisKeys(cardConfig);\n    const xAxisKeys = !selectedXAxisMetricKey ? [] : [selectedXAxisMetricKey];\n    return yAxisKeys.concat(xAxisKeys);\n  }, [cardConfig, selectedXAxisMetricKey]);\n\n  const { resultsByRunUuid, isLoading } = useSampledMetricHistory({\n    runUuids: runUuidsToFetch,\n    metricKeys: metricKeysToFetch,\n    enabled: true,\n    maxResults: 320,\n    autoRefreshEnabled: false,\n  });\n\n  const sampledData = useMemo(\n    () =>\n      previewData.map((run) => {\n        const metricsHistory = metricKeysToFetch.reduce((acc: MetricHistoryByName, key) => {\n          const history = resultsByRunUuid[run.uuid]?.[key]?.metricsHistory;\n          if (history) {\n            acc[key] = cardConfig.ignoreOutliers ? removeOutliersFromMetricHistory(history) : history;\n          }\n          return acc;\n        }, {});\n\n        return {\n          ...run,\n          metricsHistory,\n        };\n      }),\n    [metricKeysToFetch, resultsByRunUuid, previewData, cardConfig.ignoreOutliers],\n  );\n\n  const sampledGroupData = useGroupedChartRunData({\n    enabled: isGrouped,\n    ungroupedRunsData: sampledData,\n    metricKeys: metricKeysToFetch,\n    sampledDataResultsByRunUuid: resultsByRunUuid,\n    aggregateFunction,\n    selectedXAxisMetricKey: xAxisKey === RunsChartsLineChartXAxisType.METRIC ? selectedXAxisMetricKey : undefined,\n    ignoreOutliers: cardConfig.ignoreOutliers ?? false,\n  });\n\n  // Use grouped data traces only if enabled and if there are any groups\n  const chartData = isGrouped ? sampledGroupData : sampledData;\n\n  const { setTooltip, resetTooltip } = useRunsChartsTooltip(\n    cardConfig,\n    RunsChartsTooltipMode.MultipleTracesWithScanline,\n  );\n\n  if (isLoading) {\n    return <RunsChartCardLoadingPlaceholder />;\n  }\n\n  const checkValidRange = (\n    rangeMin: number | undefined,\n    rangeMax: number | undefined,\n  ): [number, number] | undefined => {\n    if (isUndefined(rangeMin) || isUndefined(rangeMax)) {\n      return undefined;\n    }\n    return [rangeMin, rangeMax];\n  };\n\n  const xRange = checkValidRange(cardConfig.range?.xMin, cardConfig.range?.xMax);\n  const yRange = checkValidRange(cardConfig.range?.yMin, cardConfig.range?.yMax);\n\n  return (\n    <RunsMetricsLinePlot\n      runsData={chartData}\n      metricKey={cardConfig.metricKey}\n      selectedMetricKeys={cardConfig.selectedMetricKeys}\n      scaleType={cardConfig.scaleType}\n      xAxisScaleType={cardConfig.xAxisScaleType}\n      lineSmoothness={lineSmoothness}\n      xAxisKey={xAxisKey}\n      selectedXAxisMetricKey={selectedXAxisMetricKey}\n      displayPoints={cardConfig.displayPoints}\n      yAxisExpressions={cardConfig.yAxisExpressions}\n      yAxisKey={cardConfig.yAxisKey}\n      useDefaultHoverBox={false}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      xRange={xRange}\n      yRange={yRange}\n    />\n  );\n};\n\nconst mapStateToProps = ({ entities: { metricsByRunUuid } }: ReduxState) => ({\n  metricsByRunUuid,\n});\n\n/**\n * Preview of line chart used in compare runs configuration modal\n */\nexport const RunsChartsConfigureLineChartPreview = connect(mapStateToProps, undefined, undefined, {\n  areStatesEqual: (nextState, prevState) => nextState.entities.metricsByRunUuid === prevState.entities.metricsByRunUuid,\n})(RunsChartsConfigureLineChartPreviewImpl);\n","import { RunsChartsRunData } from '../RunsCharts.common';\nimport LazyParallelCoordinatesPlot from '../charts/LazyParallelCoordinatesPlot';\nimport { isParallelChartConfigured, processParallelCoordinateData } from '../../utils/parallelCoordinatesPlot.utils';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsParallelCardConfig } from '../../runs-charts.types';\nimport { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { Empty, NoIcon } from '@databricks/design-system';\nimport { RunsChartCardLoadingPlaceholder } from '../cards/ChartCard.common';\n\nexport const RunsChartsConfigureParallelChartPreview = ({\n  previewData,\n  cardConfig,\n  groupBy,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsParallelCardConfig;\n  groupBy: RunsGroupByConfig | null;\n}) => {\n  const isConfigured = isParallelChartConfigured(cardConfig);\n\n  const { setTooltip, resetTooltip } = useRunsChartsTooltip(cardConfig);\n\n  const containsStringValues = useMemo(\n    () =>\n      cardConfig.selectedParams?.some(\n        (paramKey) => previewData?.some((dataTrace) => isNaN(Number(dataTrace.params[paramKey]?.value))),\n        [cardConfig.selectedParams, previewData],\n      ),\n    [cardConfig.selectedParams, previewData],\n  );\n\n  if (containsStringValues && groupBy) {\n    return (\n      <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center', textAlign: 'center' }}>\n        <FormattedMessage\n          defaultMessage=\"Parallel coordinates chart does not support aggregated string values. Use other parameters or disable run grouping to continue.\"\n          description=\"Experiment page > compare runs > parallel coordinates chart configuration modal > unsupported string values warning\"\n        />\n      </div>\n    );\n  }\n\n  const filteredData = isConfigured\n    ? processParallelCoordinateData(previewData, cardConfig.selectedParams, cardConfig.selectedMetrics)\n    : [];\n\n  if (!isConfigured) {\n    return (\n      <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        Select at least two metrics and params first\n      </div>\n    );\n  }\n\n  return filteredData.length ? (\n    /* Avoid displaying empty set, otherwise parcoord-es crashes */\n    <LazyParallelCoordinatesPlot\n      selectedMetrics={cardConfig.selectedMetrics}\n      selectedParams={cardConfig.selectedParams}\n      data={filteredData}\n      axesRotateThreshold={6}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      fallback={<RunsChartCardLoadingPlaceholder />}\n    />\n  ) : (\n    <Empty\n      description={\n        <FormattedMessage\n          defaultMessage=\"No matching data found for the available runs.\"\n          description=\"Experiment tracking > runs charts > parallel coordinates chart preview > no data found description\"\n        />\n      }\n      image={<NoIcon />}\n    />\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../../experiment-page/utils/experimentPage.common-utils';\nimport type { RunsChartsCardConfig, RunsChartsContourCardConfig } from '../../runs-charts.types';\nimport { RunsChartsMetricParamSelect, RunsChartsConfigureField } from './RunsChartsConfigure.common';\n\ntype ValidAxis = keyof Pick<RunsChartsContourCardConfig, 'xaxis' | 'yaxis' | 'zaxis'>;\n\n/**\n * Form containing configuration controls for Contour runs compare chart.\n */\nexport const RunsChartsConfigureContourChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: RunsChartsContourCardConfig;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsContourCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n  const runSelectOptions = [5, 10, 20, 50, 100];\n\n  /**\n   * Callback for updating X or Y axis\n   */\n  const updateAxis = useCallback(\n    (canonicalKey: string, axis: ValidAxis) => {\n      const type = isCanonicalSortKeyOfType(canonicalKey, 'METRIC') ? 'METRIC' : 'PARAM';\n      const key = extractCanonicalSortKey(canonicalKey, type);\n      onStateChange((current) => ({\n        ...(current as RunsChartsContourCardConfig),\n        [axis]: { key, type },\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsContourCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow axes are not predetermined, automatically\n   * select the first metric/param so it's not empty\n   */\n  useEffect(() => {\n    const firstMetric = metricKeyList?.[0];\n    const firstParam = paramKeyList?.[0];\n    if (!state.xaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'xaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'xaxis');\n      }\n    }\n    if (!state.yaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'yaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'yaxis');\n      }\n    }\n    if (!state.zaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'zaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'zaxis');\n      }\n    }\n  }, [state.xaxis, state.yaxis, state.zaxis, updateAxis, metricKeyList, paramKeyList]);\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'X axis',\n          description: 'Label for X axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.xaxis.key ? makeCanonicalSortKey(state.xaxis.type, state.xaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'xaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Y axis',\n          description: 'Label for Y axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.yaxis.key ? makeCanonicalSortKey(state.yaxis.type, state.yaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'yaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Z axis',\n          description: 'Label for Z axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.zaxis.key ? makeCanonicalSortKey(state.zaxis.type, state.zaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'zaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../../experiment-page/utils/experimentPage.common-utils';\nimport type { RunsChartsCardConfig, RunsChartsScatterCardConfig } from '../../runs-charts.types';\nimport {\n  RunsChartsMetricParamSelect,\n  RunsChartsConfigureField,\n  runsChartsRunCountDefaultOptions,\n} from './RunsChartsConfigure.common';\n\ntype ValidAxis = keyof Pick<RunsChartsScatterCardConfig, 'xaxis' | 'yaxis'>;\n\nconst scatterPlotDefaultOptions = runsChartsRunCountDefaultOptions;\nscatterPlotDefaultOptions.push(\n  {\n    value: 100,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"100\"\n        description=\"Label for 100 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 250,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"250\"\n        description=\"Label for 250 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n  {\n    value: 500,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"500\"\n        description=\"Label for 500 first runs visible in run count selector within runs compare configuration modal\"\n      />\n    ),\n  },\n);\n\n/**\n * Form containing configuration controls for scatter runs compare chart.\n */\nexport const RunsChartsConfigureScatterChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: RunsChartsScatterCardConfig;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsScatterCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * Callback for updating X or Y axis\n   */\n  const updateAxis = useCallback(\n    (canonicalKey: string, axis: ValidAxis) => {\n      const type = isCanonicalSortKeyOfType(canonicalKey, 'METRIC') ? 'METRIC' : 'PARAM';\n      const key = extractCanonicalSortKey(canonicalKey, type);\n      onStateChange((current) => ({\n        ...(current as RunsChartsScatterCardConfig),\n        [axis]: { key, type },\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsChartsScatterCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow axes are not predetermined, automatically\n   * select the first metric/param so it's not empty\n   */\n  useEffect(() => {\n    const firstMetric = metricKeyList?.[0];\n    const firstParam = paramKeyList?.[0];\n    if (!state.xaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'xaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'xaxis');\n      }\n    }\n    if (!state.yaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'yaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'yaxis');\n      }\n    }\n  }, [state.xaxis, state.yaxis, updateAxis, metricKeyList, paramKeyList]);\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'X axis',\n          description: 'Label for X axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.xaxis.key ? makeCanonicalSortKey(state.xaxis.type, state.xaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'xaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Y axis',\n          description: 'Label for Y axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelect\n          value={state.yaxis.key ? makeCanonicalSortKey(state.yaxis.type, state.yaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'yaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import {\n  Checkbox,\n  Input,\n  Switch,\n  useDesignSystemTheme,\n  LegacyTooltip,\n  InfoIcon,\n  LegacyInfoTooltip,\n} from '@databricks/design-system';\nimport {\n  DISABLED_GROUP_WHEN_GROUPBY,\n  DifferenceCardConfigCompareGroup,\n  RunsChartsCardConfig,\n  RunsChartsDifferenceCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsConfigureField } from './RunsChartsConfigure.common';\nimport { useCallback } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\n\n/**\n * Form containing configuration controls for runs compare difference view chart.\n */\nexport const RunsChartsConfigureDifferenceChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n  groupBy,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: Partial<RunsChartsDifferenceCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig) => void;\n  groupBy: RunsGroupByConfig | null;\n}) => {\n  /**\n   * Callback for updating compare groups\n   */\n  const updateCompareGroups = useCallback(\n    (compareGroup: DifferenceCardConfigCompareGroup) => {\n      onStateChange((current) => {\n        const currentConfig = current as RunsChartsDifferenceCardConfig;\n        const compareGroups = currentConfig.compareGroups;\n        if (compareGroups.includes(compareGroup)) {\n          return {\n            ...(current as RunsChartsDifferenceCardConfig),\n            compareGroups: compareGroups.filter((group) => group !== compareGroup),\n          };\n        } else {\n          return { ...(current as RunsChartsDifferenceCardConfig), compareGroups: [...compareGroups, compareGroup] };\n        }\n      });\n    },\n    [onStateChange],\n  );\n\n  const updateChartName = useCallback(\n    (e) => onStateChange((current) => ({ ...(current as RunsChartsDifferenceCardConfig), chartName: e.target.value })),\n    [onStateChange],\n  );\n\n  const updateShowChangeFromBaseline = useCallback(\n    (showChangeFromBaseline: boolean) =>\n      onStateChange((current) => ({\n        ...(current as RunsChartsDifferenceCardConfig),\n        showChangeFromBaseline,\n      })),\n    [onStateChange],\n  );\n\n  const updateShowDifferencesOnly = useCallback(\n    (showDifferencesOnly: boolean) =>\n      onStateChange((current) => ({\n        ...(current as RunsChartsDifferenceCardConfig),\n        showDifferencesOnly,\n      })),\n    [onStateChange],\n  );\n\n  const { theme } = useDesignSystemTheme();\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Compare',\n          description:\n            'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Compare config section',\n        })}\n      >\n        <Checkbox.Group id=\"checkbox-group\" defaultValue={state.compareGroups}>\n          {Object.values(DifferenceCardConfigCompareGroup).map((group) => {\n            const groupedCondition = groupBy ? DISABLED_GROUP_WHEN_GROUPBY.includes(group) : false;\n            return (\n              <div css={{ display: 'inline-flex', alignItems: 'center' }} key={group}>\n                <Checkbox\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfiguredifferencechart.tsx_98\"\n                  key={group}\n                  value={group}\n                  isChecked={state.compareGroups?.includes(group)}\n                  onChange={() => updateCompareGroups(group)}\n                  disabled={groupedCondition}\n                >\n                  {group}\n                </Checkbox>\n                {groupedCondition && (\n                  <LegacyInfoTooltip\n                    title={\n                      <FormattedMessage\n                        defaultMessage=\"Disable grouped runs to compare\"\n                        description=\"Experiment tracking > components > runs-charts > RunsChartsConfigureDifferenceCharts > disable grouped runs info message\"\n                      />\n                    }\n                  />\n                )}\n              </div>\n            );\n          })}\n        </Checkbox.Group>\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            padding: `${theme.spacing.md}px 0px`,\n            gap: theme.spacing.sm,\n          }}\n        >\n          <Switch\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfiguredifferencechart.tsx_129\"\n            checked={state.showChangeFromBaseline}\n            onChange={updateShowChangeFromBaseline}\n            label={formatMessage({\n              defaultMessage: 'Show change from baseline',\n              description:\n                'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Show change from baseline toggle',\n            })}\n          />\n          <Switch\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfiguredifferencechart.tsx_138\"\n            checked={state.showDifferencesOnly}\n            onChange={updateShowDifferencesOnly}\n            label={formatMessage({\n              defaultMessage: 'Show differences only',\n              description:\n                'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Show differences only toggle',\n            })}\n          />\n        </div>\n      </RunsChartsConfigureField>\n\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Chart name',\n          description:\n            'Runs charts > components > config > RunsChartsConfigureDifferenceChart > Chart name config section',\n        })}\n      >\n        <Input\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfiguredifferencechart.tsx_157\"\n          value={state.chartName}\n          onChange={updateChartName}\n        />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import { useCallback } from 'react';\nimport { RunsChartsCardConfig, RunsChartsImageCardConfig } from '../../runs-charts.types';\nimport { Input } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { RunsChartsConfigureField } from './RunsChartsConfigure.common';\nimport { DialogCombobox } from '@databricks/design-system';\nimport { DialogComboboxContent } from '@databricks/design-system';\nimport { DialogComboboxTrigger } from '@databricks/design-system';\nimport { DialogComboboxOptionListCheckboxItem } from '@databricks/design-system';\nimport { DialogComboboxOptionList } from '@databricks/design-system';\nimport { useImageSliderStepMarks } from '../../hooks/useImageSliderStepMarks';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { LineSmoothSlider } from '@mlflow/mlflow/src/experiment-tracking/components/LineSmoothSlider';\n\nexport const RunsChartsConfigureImageChart = ({\n  previewData,\n  state,\n  onStateChange,\n  imageKeyList,\n}: {\n  previewData: RunsChartsRunData[];\n  imageKeyList: string[];\n  state: Partial<RunsChartsImageCardConfig>;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n}) => {\n  const IMAGE_CONFIG_WIDTH = 275;\n\n  const { stepMarks, maxMark, minMark } = useImageSliderStepMarks({\n    data: previewData,\n    selectedImageKeys: state.imageKeys || [],\n  });\n\n  const updateImageKeys = useCallback(\n    (imageKeys: string[]) => {\n      onStateChange((current) => {\n        return { ...(current as RunsChartsImageCardConfig), imageKeys };\n      });\n    },\n    [onStateChange],\n  );\n\n  const updateStep = useCallback(\n    (step: number) => {\n      onStateChange((current) => {\n        return { ...(current as RunsChartsImageCardConfig), step };\n      });\n    },\n    [onStateChange],\n  );\n\n  const { formatMessage } = useIntl();\n\n  const handleUpdate = (imageKey: string) => {\n    onStateChange((current) => {\n      const currentConfig = current as RunsChartsImageCardConfig;\n      if (currentConfig.imageKeys?.includes(imageKey)) {\n        return {\n          ...currentConfig,\n          imageKeys: currentConfig.imageKeys?.filter((key) => key !== imageKey),\n        };\n      } else {\n        return { ...currentConfig, imageKeys: [...(currentConfig.imageKeys || []), imageKey] };\n      }\n    });\n  };\n\n  const handleClear = () => {\n    onStateChange((current) => {\n      return { ...(current as RunsChartsImageCardConfig), imageKeys: [] };\n    });\n  };\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Images',\n          description: 'Runs charts > components > config > RunsChartsConfigureImageGrid > Images section',\n        })}\n      >\n        <DialogCombobox\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_config_runschartsconfigureimagechart.tsx_84\"\n          value={state.imageKeys}\n          label=\"Images\"\n          multiSelect\n        >\n          <DialogComboboxTrigger onClear={handleClear} minWidth={IMAGE_CONFIG_WIDTH} />\n          <DialogComboboxContent matchTriggerWidth>\n            <DialogComboboxOptionList>\n              {imageKeyList.map((imageKey) => {\n                return (\n                  <DialogComboboxOptionListCheckboxItem\n                    key={imageKey}\n                    value={imageKey}\n                    onChange={handleUpdate}\n                    checked={state.imageKeys?.includes(imageKey)}\n                  />\n                );\n              })}\n            </DialogComboboxOptionList>\n          </DialogComboboxContent>\n        </DialogCombobox>\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField title=\"Step\">\n        <LineSmoothSlider\n          max={maxMark}\n          min={minMark}\n          marks={stepMarks}\n          value={state.step}\n          disabled={Object.keys(stepMarks).length <= 1}\n          onChange={updateStep}\n        />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","import { RunsGroupByConfig } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsCardConfig, RunsChartsImageCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { ImageGridPlot } from '../charts/ImageGridPlot';\nimport { FormattedMessage } from 'react-intl';\nimport { Empty } from '@databricks/design-system';\nimport { LOG_IMAGE_TAG_INDICATOR } from '../../../../constants';\n\nexport const RunsChartsConfigureImageChartPreview = ({\n  previewData,\n  cardConfig,\n  setCardConfig,\n  groupBy,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  setCardConfig: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n  groupBy: RunsGroupByConfig | null;\n}) => {\n  const containsLoggedImages = previewData.some((run: RunsChartsRunData) => Boolean(run.tags[LOG_IMAGE_TAG_INDICATOR]));\n\n  if (containsLoggedImages && cardConfig?.imageKeys?.length === 0) {\n    return (\n      <Empty\n        title={\n          <FormattedMessage\n            defaultMessage=\"No images configured for preview\"\n            description=\"Title for the empty state when user did not configure any images for preview yet\"\n          />\n        }\n        description={\n          <FormattedMessage\n            defaultMessage=\"Please use controls on the left to select images to be compared\"\n            description=\"Description for the empty state when user did not configure any images for preview yet\"\n          />\n        }\n      />\n    );\n  }\n\n  const chartBody = (\n    <ImageGridPlot previewData={previewData} cardConfig={cardConfig} setCardConfig={setCardConfig} groupBy={groupBy} />\n  );\n\n  const cardBodyToRender = chartBody;\n\n  return <div css={{ width: '100%', overflow: 'auto hidden' }}>{cardBodyToRender}</div>;\n};\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport type {\n  RunsChartsCardConfig,\n  RunsChartsMetricByDatasetEntry,\n  RunsChartsScatterCardConfig,\n} from '../../runs-charts.types';\nimport { RunsChartsConfigureField, RunsChartsMetricParamSelectV2 } from './RunsChartsConfigure.common';\n\ntype ValidAxis = keyof Pick<RunsChartsScatterCardConfig, 'xaxis' | 'yaxis'>;\n\n/**\n * Form containing configuration controls for scatter runs compare chart.\n */\nexport const RunsChartsConfigureScatterChartWithDatasets = ({\n  state,\n  onStateChange,\n  paramKeyList,\n  metricKeysByDataset,\n}: {\n  paramKeyList: string[];\n  metricKeysByDataset: RunsChartsMetricByDatasetEntry[] | undefined;\n  state: RunsChartsScatterCardConfig;\n  onStateChange: (setter: (current: RunsChartsCardConfig) => RunsChartsScatterCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n\n  const metricOptions = useMemo(\n    () =>\n      metricKeysByDataset?.map(({ dataAccessKey, metricKey, datasetName }) => ({\n        key: JSON.stringify(['METRIC', dataAccessKey]),\n        dataAccessKey,\n        datasetName,\n        metricKey,\n      })) ?? [],\n    [metricKeysByDataset],\n  );\n\n  const paramOptions = useMemo(\n    () =>\n      paramKeyList?.map((paramKey) => ({\n        key: JSON.stringify(['PARAM', paramKey]),\n        paramKey,\n      })) ?? [],\n    [paramKeyList],\n  );\n\n  /**\n   * Callback for updating X or Y axis\n   */\n  const handleChange = useCallback(\n    (axis: ValidAxis) => (value: string) => {\n      const foundMetric = metricOptions.find(({ key }) => key === value);\n      if (foundMetric) {\n        const { dataAccessKey, datasetName, metricKey } = foundMetric;\n        onStateChange((current) => ({\n          ...(current as RunsChartsScatterCardConfig),\n          [axis]: { key: metricKey, type: 'METRIC', datasetName, dataAccessKey },\n        }));\n      }\n      const foundParam = paramOptions.find(({ key }) => key === value);\n      if (foundParam) {\n        onStateChange((current) => ({\n          ...(current as RunsChartsScatterCardConfig),\n          [axis]: { key: foundParam.paramKey, type: 'PARAM' },\n        }));\n      }\n    },\n    [onStateChange, metricOptions, paramOptions],\n  );\n\n  useEffect(() => {\n    // For each axis: if there is no selected value, select the first available option\n    for (const axis of ['xaxis', 'yaxis'] as const) {\n      if (!state[axis]?.key) {\n        if (metricOptions?.[0]) {\n          handleChange(axis)(metricOptions[0].key);\n        } else if (paramOptions?.[0]) {\n          handleChange(axis)(paramOptions[0].key);\n        }\n      }\n    }\n  }, [state, metricOptions, paramOptions, handleChange]);\n\n  const getSelectedValue = useCallback(\n    (axis: ValidAxis) => {\n      if (state[axis].type === 'METRIC') {\n        const foundMetricOption = metricOptions.find(\n          ({ dataAccessKey }) => dataAccessKey === state[axis].dataAccessKey,\n        );\n        if (foundMetricOption) {\n          return foundMetricOption.key;\n        }\n      }\n      if (state[axis].type === 'PARAM') {\n        const foundParamOption = paramOptions.find(({ paramKey }) => paramKey === state[axis].key);\n        if (foundParamOption) {\n          return foundParamOption.key;\n        }\n      }\n      return '';\n    },\n    [state, metricOptions, paramOptions],\n  );\n\n  const selectedXValue = useMemo(() => getSelectedValue('xaxis'), [getSelectedValue]);\n  const selectedYValue = useMemo(() => getSelectedValue('yaxis'), [getSelectedValue]);\n\n  return (\n    <>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'X axis',\n          description: 'Label for X axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelectV2\n          value={selectedXValue}\n          onChange={handleChange('xaxis')}\n          metricOptions={metricOptions}\n          paramOptions={paramOptions}\n          id=\"mlflow.charts.chart_configure.scatter.x_axis\"\n        />\n      </RunsChartsConfigureField>\n      <RunsChartsConfigureField\n        title={formatMessage({\n          defaultMessage: 'Y axis',\n          description: 'Label for Y axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsChartsMetricParamSelectV2\n          value={selectedYValue}\n          onChange={handleChange('yaxis')}\n          metricOptions={metricOptions}\n          paramOptions={paramOptions}\n          id=\"mlflow.charts.chart_configure.scatter.y_axis\"\n        />\n      </RunsChartsConfigureField>\n    </>\n  );\n};\n","/**\n * TODO: implement actual UI for this modal, it's a crude placeholder with minimal logic for now\n */\nimport { Modal, useDesignSystemTheme, SimpleSelect, SimpleSelectOption } from '@databricks/design-system';\nimport { Interpolation, Theme } from '@emotion/react';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartType,\n  RunsChartsLineCardConfig,\n  RunsChartsContourCardConfig,\n  RunsChartsScatterCardConfig,\n  RunsChartsParallelCardConfig,\n  RunsChartsDifferenceCardConfig,\n  RunsChartsImageCardConfig,\n  type RunsChartsMetricByDatasetEntry,\n} from '../runs-charts.types';\n\nimport { ReactComponent as ChartBarIcon } from '../../../../common/static/chart-bar.svg';\nimport { ReactComponent as ChartContourIcon } from '../../../../common/static/chart-contour.svg';\nimport { ReactComponent as ChartLineIcon } from '../../../../common/static/chart-line.svg';\nimport { ReactComponent as ChartParallelIcon } from '../../../../common/static/chart-parallel.svg';\nimport { ReactComponent as ChartScatterIcon } from '../../../../common/static/chart-scatter.svg';\nimport { ReactComponent as ChartDifferenceIcon } from '../../../../common/static/chart-difference.svg';\nimport { ReactComponent as ChartImageIcon } from '../../../../common/static/chart-image.svg';\nimport { RunsChartsConfigureBarChart } from './config/RunsChartsConfigureBarChart';\nimport { RunsChartsConfigureParallelChart } from './config/RunsChartsConfigureParallelChart';\nimport type { RunsChartsRunData } from './RunsCharts.common';\nimport { RunsChartsConfigureField } from './config/RunsChartsConfigure.common';\nimport { RunsChartsConfigureLineChart } from './config/RunsChartsConfigureLineChart';\nimport { RunsChartsConfigureLineChartPreview } from './config/RunsChartsConfigureLineChart.preview';\nimport { RunsChartsConfigureBarChartPreview } from './config/RunsChartsConfigureBarChart.preview';\nimport { RunsChartsConfigureContourChartPreview } from './config/RunsChartsConfigureContourChart.preview';\nimport { RunsChartsConfigureScatterChartPreview } from './config/RunsChartsConfigureScatterChart.preview';\nimport { RunsChartsConfigureParallelChartPreview } from './config/RunsChartsConfigureParallelChart.preview';\nimport { RunsChartsConfigureContourChart } from './config/RunsChartsConfigureContourChart';\nimport { RunsChartsConfigureScatterChart } from './config/RunsChartsConfigureScatterChart';\nimport { RunsChartsTooltipBody } from './RunsChartsTooltipBody';\nimport { RunsChartsTooltipWrapper } from '../hooks/useRunsChartsTooltip';\nimport { shouldEnableDifferenceViewCharts } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { RunsChartsConfigureDifferenceChart } from './config/RunsChartsConfigureDifferenceChart';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsConfigureImageChart } from './config/RunsChartsConfigureImageChart';\nimport { RunsChartsConfigureImageChartPreview } from './config/RunsChartsConfigureImageChart.preview';\nimport type { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isEmpty } from 'lodash';\nimport { RunsChartsConfigureScatterChartWithDatasets } from './config/RunsChartsConfigureScatterChartWithDatasets';\nimport { DifferenceViewPlot } from './charts/DifferenceViewPlot';\n\nconst previewComponentsMap: Record<\n  RunsChartType,\n  React.FC<{\n    previewData: RunsChartsRunData[];\n    cardConfig: any;\n    groupBy: RunsGroupByConfig | null;\n    globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n    setCardConfig: (\n      setter: (\n        current: RunsChartsCardConfig,\n      ) => RunsChartsDifferenceCardConfig | RunsChartsImageCardConfig | RunsChartsLineCardConfig,\n    ) => void;\n  }>\n> = {\n  [RunsChartType.BAR]: RunsChartsConfigureBarChartPreview,\n  [RunsChartType.CONTOUR]: RunsChartsConfigureContourChartPreview,\n  [RunsChartType.LINE]: RunsChartsConfigureLineChartPreview,\n  [RunsChartType.PARALLEL]: RunsChartsConfigureParallelChartPreview,\n  [RunsChartType.SCATTER]: RunsChartsConfigureScatterChartPreview,\n  [RunsChartType.DIFFERENCE]: DifferenceViewPlot,\n  [RunsChartType.IMAGE]: RunsChartsConfigureImageChartPreview,\n};\n\nexport const RunsChartsConfigureModal = ({\n  onCancel,\n  onSubmit,\n  config,\n  chartRunData,\n  metricKeyList,\n  metricKeysByDataset,\n  paramKeyList,\n  groupBy,\n  supportedChartTypes,\n  globalLineChartConfig,\n}: {\n  metricKeyList: string[];\n  metricKeysByDataset?: RunsChartsMetricByDatasetEntry[];\n  paramKeyList: string[];\n  config: RunsChartsCardConfig;\n  chartRunData: RunsChartsRunData[];\n  onCancel: () => void;\n  groupBy: RunsGroupByConfig | null;\n  onSubmit: (formData: Partial<RunsChartsCardConfig>) => void;\n  supportedChartTypes?: RunsChartType[] | undefined;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n}) => {\n  const isChartTypeSupported = (type: RunsChartType) => !supportedChartTypes || supportedChartTypes.includes(type);\n  const { theme } = useDesignSystemTheme();\n  const borderStyle = `1px solid ${theme.colors.actionDefaultBorderDefault}`;\n  const [currentFormState, setCurrentFormState] = useState<RunsChartsCardConfig>(config);\n\n  const isEditing = Boolean(currentFormState.uuid);\n\n  const updateChartType = useCallback((type?: RunsChartType) => {\n    if (!type) {\n      return;\n    }\n    const emptyChartCard = RunsChartsCardConfig.getEmptyChartCardByType(type, true);\n    if (emptyChartCard) {\n      setCurrentFormState(emptyChartCard);\n    }\n  }, []);\n\n  const previewData = useMemo(() => chartRunData.filter(({ hidden }) => !hidden).reverse(), [chartRunData]);\n\n  const imageKeyList = useMemo(() => {\n    const imageKeys = new Set<string>();\n    previewData.forEach((run) => {\n      Object.keys(run.images).forEach((imageKey) => {\n        imageKeys.add(imageKey);\n      });\n    });\n    return Array.from(imageKeys).sort();\n  }, [previewData]);\n\n  const renderConfigOptionsforChartType = (type?: RunsChartType) => {\n    if (type === RunsChartType.BAR) {\n      return (\n        <RunsChartsConfigureBarChart\n          metricKeyList={metricKeyList}\n          metricKeysByDataset={metricKeysByDataset}\n          state={currentFormState as RunsChartsBarCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.CONTOUR) {\n      return (\n        <RunsChartsConfigureContourChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsContourCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.LINE) {\n      return (\n        <RunsChartsConfigureLineChart\n          metricKeyList={metricKeyList}\n          state={currentFormState as RunsChartsLineCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.PARALLEL) {\n      return (\n        <RunsChartsConfigureParallelChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsParallelCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsChartType.SCATTER) {\n      if (!isEmpty(metricKeysByDataset)) {\n        return (\n          <RunsChartsConfigureScatterChartWithDatasets\n            paramKeyList={paramKeyList}\n            metricKeysByDataset={metricKeysByDataset}\n            state={currentFormState as RunsChartsScatterCardConfig}\n            onStateChange={setCurrentFormState}\n          />\n        );\n      }\n      return (\n        <RunsChartsConfigureScatterChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsScatterCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (shouldEnableDifferenceViewCharts() && type === RunsChartType.DIFFERENCE) {\n      return (\n        <RunsChartsConfigureDifferenceChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsChartsDifferenceCardConfig}\n          onStateChange={setCurrentFormState}\n          groupBy={groupBy}\n        />\n      );\n    }\n    if (type === RunsChartType.IMAGE) {\n      return (\n        <RunsChartsConfigureImageChart\n          previewData={previewData}\n          imageKeyList={imageKeyList}\n          state={currentFormState as RunsChartsImageCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    return null;\n  };\n\n  const renderPreviewChartType = (type?: RunsChartType) => {\n    if (!type) {\n      return null;\n    }\n    const PreviewComponent = previewComponentsMap[type];\n    if (!PreviewComponent) {\n      return null;\n    }\n    return (\n      <PreviewComponent\n        previewData={previewData}\n        cardConfig={currentFormState}\n        groupBy={groupBy}\n        setCardConfig={setCurrentFormState}\n        globalLineChartConfig={globalLineChartConfig}\n      />\n    );\n  };\n\n  const { formatMessage } = useIntl();\n\n  let disableSaveButton = false;\n  if (currentFormState.type === RunsChartType.LINE) {\n    const lineCardConfig = currentFormState as RunsChartsLineCardConfig;\n    disableSaveButton = (lineCardConfig.selectedMetricKeys ?? []).length === 0;\n  }\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsconfiguremodal.tsx_232\"\n      visible\n      onCancel={onCancel}\n      onOk={() => onSubmit(currentFormState)}\n      title={\n        isEditing\n          ? formatMessage({\n              defaultMessage: 'Edit chart',\n              description: 'Title of the modal when editing a runs comparison chart',\n            })\n          : formatMessage({\n              defaultMessage: 'Add new chart',\n              description: 'Title of the modal when adding a new runs comparison chart',\n            })\n      }\n      okButtonProps={{\n        'data-testid': 'experiment-view-compare-runs-chart-modal-confirm',\n        disabled: disableSaveButton,\n      }}\n      cancelText={formatMessage({\n        defaultMessage: 'Cancel',\n        description: 'Cancel button label within a modal for adding/editing a new runs comparison chart',\n      })}\n      okText={\n        isEditing\n          ? formatMessage({\n              defaultMessage: 'Save changes',\n              description: 'Confirm button label within a modal when editing a runs comparison chart',\n            })\n          : formatMessage({\n              defaultMessage: 'Add chart',\n              description: 'Confirm button label within a modal when adding a new runs comparison chart',\n            })\n      }\n      size=\"wide\"\n      css={{ width: 1280 }}\n      dangerouslySetAntdProps={{\n        bodyStyle: {\n          overflowY: 'hidden',\n          display: 'flex',\n        },\n      }}\n    >\n      <div\n        css={{\n          // TODO: wait for modal dimensions decision\n          display: 'flex',\n          width: '100%',\n          gridTemplateColumns: '300px 1fr',\n          gap: theme.spacing.md,\n          borderTop: borderStyle,\n          borderBottom: borderStyle,\n        }}\n      >\n        <div\n          css={{\n            overflowY: 'auto',\n            borderRight: borderStyle,\n            padding: `${theme.spacing.md}px ${theme.spacing.md}px ${theme.spacing.md}px 0px`,\n            width: '300px',\n          }}\n        >\n          {!isEditing && (\n            <RunsChartsConfigureField title=\"Chart type\">\n              <SimpleSelect\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsconfiguremodal.tsx_296\"\n                id=\"chart-type-select\"\n                css={{ width: '100%' }}\n                value={currentFormState.type}\n                onChange={({ target }) => {\n                  const chartType = target.value as RunsChartType;\n                  Object.values(RunsChartType).includes(chartType) && updateChartType(chartType);\n                }}\n              >\n                {isChartTypeSupported(RunsChartType.BAR) && (\n                  <SimpleSelectOption value={RunsChartType.BAR}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartBarIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Bar chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > bar chart\"\n                      />\n                    </div>\n                  </SimpleSelectOption>\n                )}\n                {isChartTypeSupported(RunsChartType.SCATTER) && (\n                  <SimpleSelectOption value={RunsChartType.SCATTER}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartScatterIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Scatter chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > scatter plot\"\n                      />\n                    </div>\n                  </SimpleSelectOption>\n                )}\n                {isChartTypeSupported(RunsChartType.LINE) && (\n                  <SimpleSelectOption value={RunsChartType.LINE}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartLineIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Line chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > line chart\"\n                      />\n                    </div>\n                  </SimpleSelectOption>\n                )}\n                {isChartTypeSupported(RunsChartType.PARALLEL) && (\n                  <SimpleSelectOption value={RunsChartType.PARALLEL}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartParallelIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Parallel coordinates\"\n                        description=\"Experiment tracking > runs charts > add chart menu > parallel coordinates\"\n                      />\n                    </div>\n                  </SimpleSelectOption>\n                )}\n                {isChartTypeSupported(RunsChartType.CONTOUR) && (\n                  <SimpleSelectOption value={RunsChartType.CONTOUR}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartContourIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Contour chart\"\n                        description=\"Experiment tracking > runs charts > add chart menu > contour chart\"\n                      />\n                    </div>\n                  </SimpleSelectOption>\n                )}\n                {shouldEnableDifferenceViewCharts() && isChartTypeSupported(RunsChartType.DIFFERENCE) && (\n                  <SimpleSelectOption value={RunsChartType.DIFFERENCE}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartDifferenceIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Difference view\"\n                        description=\"Experiment tracking > runs charts > add chart menu > difference view\"\n                      />\n                    </div>\n                  </SimpleSelectOption>\n                )}\n                {isChartTypeSupported(RunsChartType.IMAGE) && (\n                  <SimpleSelectOption value={RunsChartType.IMAGE}>\n                    <div css={styles.chartTypeOption(theme)}>\n                      <ChartImageIcon />\n                      <FormattedMessage\n                        defaultMessage=\"Image grid\"\n                        description=\"Experiment tracking > runs charts > add chart menu > image grid\"\n                      />\n                    </div>\n                  </SimpleSelectOption>\n                )}\n              </SimpleSelect>\n            </RunsChartsConfigureField>\n          )}\n          {renderConfigOptionsforChartType(currentFormState.type)}\n        </div>\n        <div css={{ overflow: 'auto', flexGrow: 1 }}>\n          <RunsChartsTooltipWrapper contextData={{ runs: chartRunData }} component={RunsChartsTooltipBody} hoverOnly>\n            <div\n              css={{\n                minHeight: 500,\n                height: '100%',\n                width: 500,\n                padding: '32px 0px',\n              }}\n            >\n              {renderPreviewChartType(currentFormState.type)}\n            </div>\n          </RunsChartsTooltipWrapper>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nconst styles = {\n  chartTypeOption: (theme: Theme) =>\n    ({\n      display: 'grid',\n      gridTemplateColumns: `${theme.general.iconSize + theme.spacing.xs}px 1fr`,\n      gap: theme.spacing.xs,\n      alignItems: 'center',\n    } as Interpolation<Theme>),\n  field: {\n    // TODO: wait for modal dimensions decision\n    display: 'grid',\n    gridTemplateColumns: '80px 1fr',\n    marginBottom: 16,\n  } as Interpolation<Theme>,\n};\n","import { barChartCardDefaultMargin } from '../cards/RunsChartsBarChartCard';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsMetricsBarPlot } from '../RunsMetricsBarPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsBarCardConfig } from '../../runs-charts.types';\n\nexport const RunsChartsConfigureBarChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsBarCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useRunsChartsTooltip(cardConfig);\n\n  const dataKey = cardConfig.dataAccessKey ?? cardConfig.metricKey;\n\n  return (\n    <RunsMetricsBarPlot\n      useDefaultHoverBox={false}\n      displayRunNames={false}\n      displayMetricKey={false}\n      metricKey={dataKey}\n      runsData={previewData}\n      margin={barChartCardDefaultMargin}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n    />\n  );\n};\n","import { useMemo } from 'react';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsContourPlot } from '../RunsContourPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsContourCardConfig } from '../../runs-charts.types';\n\nexport const RunsChartsConfigureContourChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsContourCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useRunsChartsTooltip(cardConfig);\n\n  // We need to re-render the chart when any axis config changes.\n  // Plotly tries to determine axis format based on values and is not capable\n  // of dynamic switching between different axis types, so we need to make sure\n  // that we re-mount the chart when config changes.\n  const key = useMemo(() => {\n    const { xaxis, yaxis, zaxis } = cardConfig;\n    return JSON.stringify({ xaxis, yaxis, zaxis });\n  }, [cardConfig]);\n\n  return (\n    <RunsContourPlot\n      xAxis={cardConfig.xaxis}\n      yAxis={cardConfig.yaxis}\n      zAxis={cardConfig.zaxis}\n      runsData={previewData}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n      key={key}\n    />\n  );\n};\n","import { useMemo } from 'react';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsScatterPlot } from '../RunsScatterPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport { RunsChartsScatterCardConfig } from '../../runs-charts.types';\n\nexport const RunsChartsConfigureScatterChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsScatterCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useRunsChartsTooltip(cardConfig);\n\n  // We need to re-render the chart when the x or y axis changes.\n  // Plotly tries to determine axis format based on values and is not capable\n  // of dynamic switching between different axis types, so we need to make sure\n  // that we re-mount the chart when config changes.\n  const key = useMemo(() => {\n    const { xaxis, yaxis } = cardConfig;\n    return JSON.stringify({ xaxis, yaxis });\n  }, [cardConfig]);\n\n  return (\n    <RunsScatterPlot\n      xAxis={cardConfig.xaxis}\n      yAxis={cardConfig.yaxis}\n      runsData={previewData}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n      key={key}\n    />\n  );\n};\n","export const RUNS_CHARTS_UI_Z_INDEX = {\n  CARD_PREVIEW: 1,\n  CARD_DRAGGED: 2,\n  TOOLTIP_CONTAINER: 3,\n  SEARCH_BAR: 3,\n  TOOLTIP: 4,\n};\n","import { LegacySkeleton } from '@databricks/design-system';\nimport React, { Suspense } from 'react';\n\nconst ParallelCoordinatesPlot = React.lazy(() => import('./ParallelCoordinatesPlot'));\n\nconst LazyParallelCoordinatesPlot = ({ fallback, ...props }: any) => {\n  return (\n    <Suspense fallback={fallback ?? <LegacySkeleton />}>\n      <ParallelCoordinatesPlot {...props}></ParallelCoordinatesPlot>\n    </Suspense>\n  );\n};\n\nexport default LazyParallelCoordinatesPlot;\n","import React, { ReactNode, useMemo } from 'react';\nimport { ExperimentPageUIState, createExperimentPageUIState } from '../models/ExperimentPageUIState';\n\nconst ExperimentPageUISetStateContext = React.createContext<\n  React.Dispatch<React.SetStateAction<ExperimentPageUIState>>\n>((state) => state);\n\n// Creates contexts for setting current UI state\nexport const ExperimentPageUIStateContextProvider = ({\n  children,\n  setUIState,\n}: {\n  children: ReactNode;\n  setUIState: React.Dispatch<React.SetStateAction<ExperimentPageUIState>>;\n}) => (\n  <ExperimentPageUISetStateContext.Provider value={setUIState}>{children}</ExperimentPageUISetStateContext.Provider>\n);\n\nexport const useUpdateExperimentViewUIState = () => React.useContext(ExperimentPageUISetStateContext);\n","import { useCallback, useRef } from 'react';\nimport { useUpdateExperimentViewUIState } from '../contexts/ExperimentPageUIStateContext';\nimport { RUNS_VISIBILITY_MODE } from '../models/ExperimentPageUIState';\nimport type { RunRowType } from '../utils/experimentPage.row-types';\nimport {\n  shouldEnableToggleIndividualRunsInGroups,\n  shouldUseRunRowsVisibilityMap,\n} from '../../../../common/utils/FeatureUtils';\n\nexport const useToggleRowVisibilityCallback = (tableRows: RunRowType[], useGroupedValuesInCharts = true) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  // We're going to use current state of the table rows to determine which rows are hidden.\n  // Since we're interested only in the latest data, we avoid using state here to avoid unnecessary re-renders.\n  const immediateTableRows = useRef(tableRows);\n  immediateTableRows.current = tableRows;\n\n  const toggleRowUsingVisibilityMap = useCallback(\n    (mode: RUNS_VISIBILITY_MODE, groupOrRunUuid?: string, isCurrentlyVisible?: boolean) => {\n      updateUIState((currentUIState) => {\n        // If user has toggled a run or a group manually, we need to update the visibility map\n        if (mode === RUNS_VISIBILITY_MODE.CUSTOM && groupOrRunUuid) {\n          const newRunsVisibilityMap = {\n            ...currentUIState.runsVisibilityMap,\n          };\n\n          // Check if the toggles row is a run group\n          const currentToggledGroupInfo = immediateTableRows.current.find(\n            ({ rowUuid, groupParentInfo }) => rowUuid === groupOrRunUuid && groupParentInfo,\n          )?.groupParentInfo;\n\n          // If we're toggling a group and we're not using grouped values in charts,\n          // then toggle all runs in the group\n          if (\n            currentToggledGroupInfo &&\n            shouldEnableToggleIndividualRunsInGroups() &&\n            useGroupedValuesInCharts === false\n          ) {\n            for (const runUuid of currentToggledGroupInfo.runUuids) {\n              newRunsVisibilityMap[runUuid] = !isCurrentlyVisible;\n            }\n          } else {\n            newRunsVisibilityMap[groupOrRunUuid] = !isCurrentlyVisible;\n          }\n\n          return {\n            ...currentUIState,\n            runsVisibilityMap: newRunsVisibilityMap,\n          };\n        }\n        // Otherwise, we're toggling a predefined visibility mode\n        // and clearing the visibility map\n        if (\n          [\n            RUNS_VISIBILITY_MODE.SHOWALL,\n            RUNS_VISIBILITY_MODE.HIDEALL,\n            RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n            RUNS_VISIBILITY_MODE.FIRST_20_RUNS,\n          ].includes(mode)\n        ) {\n          return {\n            ...currentUIState,\n            runsHiddenMode: mode,\n            runsHidden: [],\n            runsVisibilityMap: {},\n          };\n        }\n\n        return currentUIState;\n      });\n    },\n    [updateUIState, useGroupedValuesInCharts],\n  );\n\n  /**\n   * @deprecated `toggleRowUsingVisibilityMap` replaces this function.\n   * This one should be removed after ramping up `runsVisibility` field.\n   */\n  const toggleRowVisibility = useCallback(\n    (mode: RUNS_VISIBILITY_MODE, groupOrRunUuid?: string) => {\n      updateUIState((currentUIState) => {\n        if (mode === RUNS_VISIBILITY_MODE.SHOWALL) {\n          // Case #1: Showing all runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.SHOWALL,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.HIDEALL) {\n          // Case #2: Hiding all runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.HIDEALL,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.FIRST_10_RUNS) {\n          // Case #3: Showing only first 10 runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.FIRST_20_RUNS) {\n          // Case #4: Showing only first 20 runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_20_RUNS,\n            runsHidden: [],\n          };\n        }\n\n        // Case #5: Custom visibility mode enabled by manually toggling visibility of a run or a group\n        if (groupOrRunUuid) {\n          // Determine which runs are hidden at the moment\n          const currentlyHiddenRows = immediateTableRows.current\n            .filter(({ hidden }) => hidden)\n            .map(({ groupParentInfo, rowUuid, runUuid }) => (groupParentInfo ? rowUuid : runUuid));\n\n          // Check if the toggles row is a run group\n          const currentToggledGroupInfo = immediateTableRows.current.find(\n            ({ rowUuid, groupParentInfo }) => rowUuid === groupOrRunUuid && groupParentInfo,\n          )?.groupParentInfo;\n\n          // If we're toggling a group and we're not using grouped values in charts,\n          // then toggle all runs in the group\n          if (\n            currentToggledGroupInfo &&\n            shouldEnableToggleIndividualRunsInGroups() &&\n            useGroupedValuesInCharts === false\n          ) {\n            let newHiddenRows: string[] = [];\n\n            // Depending on the current state of the group, we either show all runs or hide all runs\n            if (currentToggledGroupInfo.allRunsHidden) {\n              newHiddenRows = currentlyHiddenRows.filter(\n                (currentGroupOrRunUuid) => !currentToggledGroupInfo.runUuids.includes(currentGroupOrRunUuid),\n              );\n            } else {\n              newHiddenRows = currentlyHiddenRows.concat(\n                currentToggledGroupInfo.runUuids.filter((runUuid) => !currentlyHiddenRows.includes(runUuid)),\n              );\n            }\n            return {\n              ...currentUIState,\n              // Set mode to \"custom\"\n              runsHiddenMode: RUNS_VISIBILITY_MODE.CUSTOM,\n              runsHidden: newHiddenRows,\n            };\n          }\n\n          // Toggle visibility of a run/group by either adding or removing from the array\n          const newHiddenRows = currentlyHiddenRows.includes(groupOrRunUuid)\n            ? currentlyHiddenRows.filter((currentGroupOrRunUuid) => currentGroupOrRunUuid !== groupOrRunUuid)\n            : [...currentlyHiddenRows, groupOrRunUuid];\n\n          return {\n            ...currentUIState,\n            // Set mode to \"custom\"\n            runsHiddenMode: RUNS_VISIBILITY_MODE.CUSTOM,\n            runsHidden: newHiddenRows,\n          };\n        }\n\n        return currentUIState;\n      });\n    },\n    [updateUIState, useGroupedValuesInCharts],\n  );\n\n  return shouldUseRunRowsVisibilityMap() ? toggleRowUsingVisibilityMap : toggleRowVisibility;\n};\n","import React from 'react';\n\nimport RunsMetricsLegend, { LegendLabelData } from './RunsMetricsLegend';\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nconst RunsMetricsLegendWrapper = ({\n  labelData,\n  fullScreen,\n  children,\n}: React.PropsWithChildren<{\n  labelData: LegendLabelData[];\n  fullScreen?: boolean;\n}>) => {\n  const { theme } = useDesignSystemTheme();\n\n  const FULL_SCREEN_LEGEND_HEIGHT = 100;\n  const LEGEND_HEIGHT = 32;\n\n  const height = fullScreen ? FULL_SCREEN_LEGEND_HEIGHT : LEGEND_HEIGHT;\n  const heightBuffer = fullScreen ? theme.spacing.lg : theme.spacing.md;\n\n  return (\n    <>\n      <div css={{ height: `calc(100% - ${height + heightBuffer}px)` }}>{children}</div>\n      <RunsMetricsLegend labelData={labelData} height={height} fullScreen={fullScreen} />\n    </>\n  );\n};\n\nexport default RunsMetricsLegendWrapper;\n","import { gql, NetworkStatus } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL } from '../../../utils/MetricsUtils';\nimport { groupBy, keyBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport type { SampledMetricsByRun } from './useSampledMetricHistory';\nimport { GetMetricHistoryBulkInterval } from '../../../../graphql/__generated__/graphql';\nimport Utils from '../../../../common/utils/Utils';\nimport { useIntl } from 'react-intl';\n\nconst GET_METRIC_HISTORY_BULK_INTERVAL = gql`\n  query GetMetricHistoryBulkInterval($data: MlflowGetMetricHistoryBulkIntervalInput!)\n  @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetMetricHistoryBulkInterval(input: $data) {\n      __typename\n      metrics {\n        timestamp\n        step\n        runId\n        key\n        value\n      }\n      apiError {\n        code\n        message\n      }\n    }\n  }\n`;\n\nexport const useSampledMetricHistoryGraphQL = ({\n  metricKey,\n  runUuids,\n  autoRefreshEnabled,\n  enabled,\n  maxResults = 320,\n  range,\n}: {\n  runUuids: string[];\n  metricKey: string;\n  maxResults?: number;\n  range?: [number, number];\n  enabled?: boolean;\n  autoRefreshEnabled?: boolean;\n}) => {\n  const intl = useIntl();\n  const { data, refetch, startPolling, stopPolling, networkStatus, error } = useQuery<GetMetricHistoryBulkInterval>(\n    GET_METRIC_HISTORY_BULK_INTERVAL,\n    {\n      skip: !enabled,\n      notifyOnNetworkStatusChange: true,\n      pollInterval: autoRefreshEnabled ? EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL : undefined,\n      onCompleted(data) {\n        if (data.mlflowGetMetricHistoryBulkInterval?.apiError?.code === 'RESOURCE_DOES_NOT_EXIST') {\n          Utils.displayGlobalErrorNotification(\n            intl.formatMessage({\n              defaultMessage: 'Requested resource does not exist',\n              description:\n                'Error message displayed when a requested run does not exist while fetching sampled metric data',\n            }),\n          );\n        } else if (data.mlflowGetMetricHistoryBulkInterval?.apiError?.message) {\n          Utils.logErrorAndNotifyUser(new Error(data.mlflowGetMetricHistoryBulkInterval.apiError.message));\n        }\n      },\n      variables: {\n        data: {\n          runIds: runUuids,\n          metricKey,\n          startStep: range?.[0] ?? null,\n          endStep: range?.[1] ?? null,\n          maxResults,\n        },\n      },\n    },\n  );\n\n  useEffect(() => {\n    if (autoRefreshEnabled) {\n      startPolling(EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL);\n    } else {\n      stopPolling();\n    }\n  }, [autoRefreshEnabled, startPolling, stopPolling]);\n\n  const resultsByRunUuid = useMemo<Record<string, SampledMetricsByRun>>(() => {\n    if (data) {\n      const metrics = data?.mlflowGetMetricHistoryBulkInterval?.metrics;\n      const metricsByRunId = groupBy(metrics, 'runId');\n\n      // Transform the data into the already existing format\n      return keyBy(\n        runUuids.map(\n          (runId) =>\n            ({\n              runUuid: runId,\n              [metricKey]: {\n                metricsHistory: metricsByRunId[runId]?.map(({ key, step, timestamp, value }) => ({\n                  key: key ?? undefined,\n                  step: Number(step),\n                  timestamp: Number(timestamp),\n                  value: value ?? undefined,\n                })),\n              },\n            } as SampledMetricsByRun),\n        ),\n        'runUuid',\n      );\n    }\n\n    return {};\n  }, [data, metricKey, runUuids]);\n\n  const isLoading = networkStatus === NetworkStatus.loading || networkStatus === NetworkStatus.setVariables;\n  const isRefreshing = networkStatus === NetworkStatus.poll;\n  return {\n    resultsByRunUuid,\n    isLoading,\n    isRefreshing,\n    refresh: refetch,\n    error,\n    apiError: data?.mlflowGetMetricHistoryBulkInterval?.apiError,\n  };\n};\n","import { chunk, isEqual, keyBy } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { createChartAxisRangeKey } from '../components/RunsCharts.common';\nimport { getSampledMetricHistoryBulkAction } from '../../../sdk/SampledMetricHistoryService';\nimport type { SampledMetricsByRunUuidState } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL } from '../../../utils/MetricsUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport { shouldEnableGraphQLSampledMetrics } from '../../../../common/utils/FeatureUtils';\nimport { useSampledMetricHistoryGraphQL } from './useSampledMetricHistoryGraphQL';\n\ntype SampledMetricData = SampledMetricsByRunUuidState[string][string][string];\n\nexport type SampledMetricsByRun = {\n  runUuid: string;\n} & {\n  [metricKey: string]: SampledMetricData;\n};\n\nconst SAMPLED_METRIC_HISTORY_API_RUN_LIMIT = 100;\n\n/**\n * Automatically fetches sampled metric history for runs, used in run runs charts.\n * After updating list of metrics or runs, optimizes the request and fetches\n * only the missing entries.\n *\n * REST-based implementation.\n */\nconst useSampledMetricHistoryREST = (params: {\n  runUuids: string[];\n  metricKeys: string[];\n  maxResults?: number;\n  range?: [number, number];\n  enabled?: boolean;\n  autoRefreshEnabled?: boolean;\n}) => {\n  const { metricKeys, runUuids, enabled, maxResults, range, autoRefreshEnabled } = params;\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const { resultsByRunUuid, isLoading, isRefreshing } = useSelector(\n    (store: ReduxState) => {\n      const rangeKey = createChartAxisRangeKey(range);\n\n      let anyRunRefreshing = false;\n      let anyRunLoading = false;\n\n      const returnValues: SampledMetricsByRun[] = runUuids.map((runUuid) => {\n        const metricsByMetricKey = metricKeys.reduce(\n          (dataByMetricKey: { [key: string]: SampledMetricData }, metricKey: string) => {\n            const runMetricData = store.entities.sampledMetricsByRunUuid[runUuid]?.[metricKey]?.[rangeKey];\n\n            if (!runMetricData) {\n              return dataByMetricKey;\n            }\n\n            anyRunLoading = anyRunLoading || Boolean(runMetricData.loading);\n            anyRunRefreshing = anyRunRefreshing || Boolean(runMetricData.refreshing);\n\n            dataByMetricKey[metricKey] = runMetricData;\n            return dataByMetricKey;\n          },\n          {},\n        );\n\n        return {\n          runUuid,\n          ...metricsByMetricKey,\n        };\n      });\n\n      return {\n        isLoading: anyRunLoading,\n        isRefreshing: anyRunRefreshing,\n        resultsByRunUuid: keyBy(returnValues, 'runUuid'),\n      };\n    },\n    (left, right) =>\n      isEqual(left.resultsByRunUuid, right.resultsByRunUuid) &&\n      left.isLoading === right.isLoading &&\n      left.isRefreshing === right.isRefreshing,\n  );\n\n  const refreshFn = useCallback(() => {\n    metricKeys.forEach((metricKey) => {\n      chunk(runUuids, SAMPLED_METRIC_HISTORY_API_RUN_LIMIT).forEach((runUuidsChunk) => {\n        const action = getSampledMetricHistoryBulkAction(runUuidsChunk, metricKey, maxResults, range, 'all');\n        dispatch(action);\n      });\n    });\n  }, [dispatch, maxResults, runUuids, metricKeys, range]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && params.enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled && params.enabled;\n\n  // Serialize runUuids to a string to use as a dependency in the effect,\n  // directly used runUuids can cause unnecessary re-fetches\n  const runUuidsSerialized = useMemo(() => runUuids.join(','), [runUuids]);\n\n  // Regular single fetch effect with no auto-refresh capabilities. Used if auto-refresh is disabled.\n  useEffect(() => {\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    metricKeys.forEach((metricKey) => {\n      chunk(runUuids, SAMPLED_METRIC_HISTORY_API_RUN_LIMIT).forEach((runUuidsChunk) => {\n        const action = getSampledMetricHistoryBulkAction(runUuidsChunk, metricKey, maxResults, range);\n        dispatch(action);\n      });\n    });\n  }, [dispatch, maxResults, runUuids, metricKeys, range, enabled, autoRefreshEnabled]);\n\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    // Base fetching function, used for both initial call and subsequent auto-refresh calls\n    const fetchMetricsFn = async (isAutoRefreshing = false) => {\n      const runUuids = runUuidsSerialized.split(',').filter((runUuid: string) => runUuid !== '');\n      await Promise.all(\n        metricKeys.map(async (metricKey) =>\n          Promise.all(\n            chunk(runUuids, SAMPLED_METRIC_HISTORY_API_RUN_LIMIT).map(async (runUuidsChunk) =>\n              dispatch(\n                getSampledMetricHistoryBulkAction(\n                  runUuidsChunk,\n                  metricKey,\n                  maxResults,\n                  range,\n                  isAutoRefreshing ? 'auto' : undefined,\n                ),\n              ),\n            ),\n          ),\n        ),\n      );\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchMetricsFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchMetricsFn().then(scheduleRefresh);\n\n    return () => {\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, maxResults, runUuidsSerialized, metricKeys, range, enabled, autoRefreshEnabled]);\n\n  return { isLoading, isRefreshing, resultsByRunUuid, refresh: refreshFn };\n};\n\n/**\n * A switcher hook that selects between the REST and GraphQL implementations of the\n * `useSampledMetricHistory` hook based on flags and parameter context.\n */\nexport const useSampledMetricHistory = (params: {\n  runUuids: string[];\n  metricKeys: string[];\n  maxResults?: number;\n  range?: [number, number];\n  enabled?: boolean;\n  autoRefreshEnabled?: boolean;\n}) => {\n  const { metricKeys, enabled, autoRefreshEnabled, runUuids } = params;\n\n  // We should use the apollo hook if there is only one metric key and the number of runUuids is less than 100.\n  // To be improved after endpoint will start supporting multiple metric keys.\n  const shouldUseGraphql = shouldEnableGraphQLSampledMetrics() && metricKeys.length === 1 && runUuids.length <= 100;\n\n  const legacyResult = useSampledMetricHistoryREST({\n    ...params,\n    enabled: enabled && !shouldUseGraphql,\n    autoRefreshEnabled: autoRefreshEnabled && !shouldUseGraphql,\n  });\n\n  const graphQlResult = useSampledMetricHistoryGraphQL({\n    ...params,\n    metricKey: metricKeys[0],\n    enabled: enabled && shouldUseGraphql,\n    autoRefreshEnabled: autoRefreshEnabled && shouldUseGraphql,\n  });\n\n  return shouldUseGraphql ? graphQlResult : legacyResult;\n};\n","import qs from 'qs';\nimport { useMemo } from 'react';\nimport { useParams, useLocation } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\n\nexport type UseExperimentIdsResult = string[];\n\n/**\n * Hook that returns requested experiment IDs basing on the URL.\n * It extracts ids basing on either route match (in case of a single experiment)\n * or query params (in case of comparing experiments.).\n *\n * @returns array of strings with experiment IDs\n */\n\nexport const useExperimentIds = (): UseExperimentIdsResult => {\n  const params = useParams<{ experimentId?: string }>();\n  const location = useLocation();\n\n  const normalizedLocationSearch = useMemo(() => decodeURIComponent(location.search), [location.search]);\n\n  /**\n   * Memoized string containing experiment IDs for comparison (\"?experiments=...\")\n   */\n  const compareExperimentIdsQueryParam = useMemo(() => {\n    const queryParams = qs.parse(normalizedLocationSearch.substring(1));\n    if (queryParams['experiments']) {\n      const experimentIdsRaw = queryParams['experiments'];\n      return experimentIdsRaw?.toString() || '';\n    }\n\n    return '';\n  }, [normalizedLocationSearch]);\n\n  return useMemo(() => {\n    // Case #1: single experiment\n    if (params?.experimentId) {\n      return [params?.experimentId];\n    }\n\n    // Case #2: multiple (compare) experiments\n    if (compareExperimentIdsQueryParam) {\n      try {\n        return JSON.parse(compareExperimentIdsQueryParam);\n      } catch {\n        // Apparently URL is malformed\n        Utils.logErrorAndNotifyUser(`Could not parse experiment query parameter ${compareExperimentIdsQueryParam}`);\n        return '';\n      }\n    }\n\n    return [];\n  }, [compareExperimentIdsQueryParam, params?.experimentId]);\n};\n","import { isUndefined, noop } from 'lodash';\nimport {\n  type PropsWithChildren,\n  createContext,\n  createElement,\n  useContext,\n  useMemo,\n  useRef,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport { shouldEnableUnifiedChartDataTraceHighlight } from '../../../../common/utils/FeatureUtils';\n\n/**\n * Function used to highlight particular trace in the experiment runs chart,\n * for both hover and select scenarios.\n * Since implementation varies across chart types, the function is curryable where\n * two first-level parameters determine the target SVG selector paths to the trace within\n * target chart type.\n *\n * @param traceSelector selector path to the trace for a particular chart type\n * @param parentSelector selector path to the traces container for a particular chart type\n */\nconst highlightChartTracesFn =\n  (traceSelector: string, parentSelector: string) =>\n  /**\n   * @param parent a HTML element containing the chart\n   * @param hoverIndex index of a trace that should be hover-higlighted, set -1 to remove highlight\n   * @param selectIndex index of a trace that should be select-higlighted, set -1 to remove highlight\n   */\n  (parent: HTMLElement, hoverIndex: number, selectIndex: number, numberOfBands = 0) => {\n    const deselected = hoverIndex === -1 && selectIndex === -1;\n\n    parent.querySelector('.is-hover-highlight')?.classList.remove('is-hover-highlight');\n    if (hoverIndex > -1) {\n      parent.querySelectorAll(traceSelector)[hoverIndex]?.classList.add('is-hover-highlight');\n    }\n\n    parent.querySelector('.is-selection-highlight')?.classList.remove('is-selection-highlight');\n    if (selectIndex > -1) {\n      parent.querySelectorAll(traceSelector)[selectIndex]?.classList.add('is-selection-highlight');\n    }\n\n    if (numberOfBands > 0) {\n      const bandTraceIndex =\n        selectIndex > -1 ? selectIndex - numberOfBands : hoverIndex > -1 ? hoverIndex - numberOfBands : -1;\n      parent.querySelectorAll(traceSelector).forEach((e, index) => {\n        e.classList.toggle('is-band', index >= 0 && index < numberOfBands);\n        e.classList.toggle('is-band-highlighted', index === bandTraceIndex);\n      });\n    } else {\n      parent.querySelectorAll(traceSelector).forEach((e) => e.classList.remove('is-band'));\n    }\n\n    if (deselected) {\n      parent.querySelector(parentSelector)?.classList.remove('is-highlight');\n    } else {\n      parent.querySelector(parentSelector)?.classList.add('is-highlight');\n    }\n  };\n\n/**\n * Type-specific implementation of highlightChartTracesFn for bar charts\n */\nexport const highlightBarTraces = highlightChartTracesFn('svg .trace.bars g.point', '.trace.bars');\n\n/**\n * Type-specific implementation of highlightChartTracesFn for line charts\n */\nexport const highlightLineTraces = highlightChartTracesFn('svg .scatterlayer g.trace', '.scatterlayer');\n\n/**\n * Type-specific implementation of highlightChartTracesFn for scatter and contour charts\n */\nexport const highlightScatterTraces = highlightChartTracesFn('svg .scatterlayer path.point', '.trace.scatter');\n\n/**\n * This hook provides mechanisms necessary for highlighting SVG trace paths\n * in experiment runs charts.\n *\n * @param containerDiv HTML element containing the chart\n * @param selectedRunUuid currently selected run UUID (set to -1 if none)\n * @param runsData array containing run informations, should be the same order as provided to the chart\n * @param highlightFn a styling function that will be called when the trace should be (un)highlighted, please refer to `highlightCallbackFn()`\n */\nexport const useRenderRunsChartTraceHighlight = (\n  containerDiv: HTMLElement | null,\n  selectedRunUuid: string | null | undefined,\n  runsData: { uuid?: string }[],\n  highlightFn: ReturnType<typeof highlightChartTracesFn>,\n  numberOfBands = 0,\n) => {\n  // Save the last runs data to be available immediately on non-stateful callbacks\n  const lastRunsData = useRef(runsData);\n  lastRunsData.current = runsData;\n\n  const selectedTraceIndex = useMemo(() => {\n    if (!containerDiv || !selectedRunUuid) {\n      return -1;\n    }\n    return runsData.findIndex(({ uuid }) => uuid === selectedRunUuid);\n  }, [runsData, containerDiv, selectedRunUuid]);\n\n  const [hoveredPointIndex, setHoveredPointIndex] = useState(-1);\n  const { onHighlightChange } = useRunsChartTraceHighlight();\n\n  useEffect(() => {\n    // Disable this hook variant if new highlight model is enabled\n    if (shouldEnableUnifiedChartDataTraceHighlight()) {\n      return;\n    }\n    if (!containerDiv) {\n      return;\n    }\n    highlightFn(containerDiv, hoveredPointIndex, selectedTraceIndex, numberOfBands);\n  }, [highlightFn, containerDiv, selectedTraceIndex, hoveredPointIndex, numberOfBands]);\n\n  useEffect(() => {\n    // Use this hook variant only if new highlight model is enabled\n    if (!shouldEnableUnifiedChartDataTraceHighlight()) {\n      return;\n    }\n    if (!containerDiv) {\n      return;\n    }\n    // Here, we don't report stateful hovered run UUID since it's handled by the new highlight model\n    highlightFn(containerDiv, -1, selectedTraceIndex, numberOfBands);\n  }, [highlightFn, containerDiv, selectedTraceIndex, numberOfBands]);\n\n  // Save the last selected trace index to be available immediately on non-stateful callbacks\n  const lastSelectedTraceIndex = useRef(selectedTraceIndex);\n  lastSelectedTraceIndex.current = selectedTraceIndex;\n\n  const highlightChangeListener = useCallback(\n    (newExtern: string | null) => {\n      if (!containerDiv) {\n        return;\n      }\n\n      const externallyHighlightedRunIndex = lastRunsData.current.findIndex(({ uuid }) => uuid === newExtern);\n      highlightFn(containerDiv, externallyHighlightedRunIndex, lastSelectedTraceIndex.current, numberOfBands);\n    },\n    [highlightFn, containerDiv, numberOfBands],\n  );\n\n  // Listen to the highlight change event\n  useEffect(() => onHighlightChange(highlightChangeListener), [onHighlightChange, highlightChangeListener]);\n\n  return {\n    selectedTraceIndex,\n    hoveredPointIndex,\n    // With the unified chart data trace highlight, we don't need to do costly state updates anymore\n    setHoveredPointIndex: shouldEnableUnifiedChartDataTraceHighlight() ? noop : setHoveredPointIndex,\n  };\n};\n\nexport enum ChartsTraceHighlightSource {\n  NONE,\n  CHART,\n  TABLE,\n}\n\ninterface RunsChartsSetHighlightContextType {\n  highlightDataTrace: (\n    traceUuid: string | null,\n    options?: { source?: ChartsTraceHighlightSource; shouldBlock?: boolean },\n  ) => void;\n  onHighlightChange: (fn: (traceUuid: string | null, source?: ChartsTraceHighlightSource) => void) => () => void;\n}\n\nconst RunsChartsSetHighlightContext = createContext<RunsChartsSetHighlightContextType>({\n  highlightDataTrace: () => {},\n  onHighlightChange: () => () => {},\n});\n\nexport const RunsChartsSetHighlightContextProvider = ({ children }: PropsWithChildren<unknown>) => {\n  const highlightListenerFns = useRef<((traceUuid: string | null, source?: ChartsTraceHighlightSource) => void)[]>([]);\n  const block = useRef(false);\n\n  // Stable and memoized context value\n  const contextValue = useMemo<RunsChartsSetHighlightContextType>(() => {\n    // If new highlight model is disabled, disable entire feature by providint empty logic to the context\n    if (!shouldEnableUnifiedChartDataTraceHighlight()) {\n      return {\n        highlightDataTrace: () => {},\n        onHighlightChange: () => () => {},\n      };\n    }\n\n    const notifyListeners = (traceUuid: string | null, source?: ChartsTraceHighlightSource) => {\n      for (const fn of highlightListenerFns.current) {\n        fn(traceUuid, source);\n      }\n    };\n\n    const highlightDataTrace = (\n      traceUuid: string | null,\n      { shouldBlock, source }: { source?: ChartsTraceHighlightSource; shouldBlock?: boolean } = {},\n    ) => {\n      if (!isUndefined(shouldBlock)) {\n        block.current = shouldBlock;\n      } else if (block.current) {\n        return;\n      }\n      notifyListeners(traceUuid, source);\n    };\n\n    const onHighlightChange = (listener: (traceUuid: string | null, source?: ChartsTraceHighlightSource) => void) => {\n      highlightListenerFns.current.push(listener);\n      return () => {\n        highlightListenerFns.current = highlightListenerFns.current.filter((fn) => fn !== listener);\n      };\n    };\n\n    return {\n      highlightDataTrace,\n      onHighlightChange,\n    };\n  }, []);\n\n  return createElement(RunsChartsSetHighlightContext.Provider, { value: contextValue }, children);\n};\n\nexport const useRunsChartTraceHighlight = () => useContext(RunsChartsSetHighlightContext);\n","export function coerceToEnum<T extends Record<string, string>, K extends keyof T, V extends T[K] | undefined>(\n  enumObj: T,\n  value: any,\n  fallback: V,\n): V | T[keyof T] {\n  if (value === undefined || value === null || typeof value !== 'string') {\n    return fallback;\n  }\n  for (const v in enumObj) {\n    if (enumObj[v] === value) return enumObj[v];\n  }\n  return fallback;\n}\n","import { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","import { type RefObject, useCallback, useEffect } from 'react';\nimport { ChartsTraceHighlightSource, useRunsChartTraceHighlight } from './useRunsChartTraceHighlight';\nimport { CellMouseOverEvent } from '@ag-grid-community/core';\n\nconst DEFAULT_HIGH_LIGHT_CLASS_NAME = 'is-highlighted';\n\n/**\n * Helper hook adding support for useRunsChartTraceSetHighlight() logic to a ag-grid table rows\n */\nexport const useRunsHighlightTableRow = (\n  /**\n   * Reference to the container element of the table.\n   */\n  containerElementRef: RefObject<HTMLDivElement>,\n  /**\n   * Class name to be added to the highlighted row.\n   */\n  highlightedClassName = DEFAULT_HIGH_LIGHT_CLASS_NAME,\n  /**\n   * Additional selector prefix to be used to find the row element.\n   */\n  findInFlexColumns = false,\n  /**\n   * Optional function to extract the row UUID from the table data, used in row hover callback.\n   */\n  getRowUuid?: (data: any) => string | undefined,\n) => {\n  const { onHighlightChange, highlightDataTrace } = useRunsChartTraceHighlight();\n  /**\n   * Listener function that highlights a row in the table by adding a class to it.\n   */\n  const highlightFn = useCallback(\n    (rowUuid: string | null, source?: ChartsTraceHighlightSource) => {\n      // First, quickly remove the highlight class from the previous highlighted row\n      const existingHighlightedRowElement = containerElementRef.current?.querySelector(`.${highlightedClassName}`);\n\n      const additionalSelectorPrefix = findInFlexColumns ? '.ag-center-cols-viewport' : '';\n\n      // Find the new row element and add the highlight class to it\n      const rowElement = containerElementRef.current?.querySelector(\n        `${additionalSelectorPrefix} .ag-row[row-id=\"${rowUuid}\"]`,\n      );\n      if (existingHighlightedRowElement && existingHighlightedRowElement !== rowElement) {\n        existingHighlightedRowElement.classList.remove(highlightedClassName);\n      }\n\n      // Do not highlight the row if the source of highlight event is the table itself\n      if (source === ChartsTraceHighlightSource.TABLE) {\n        return;\n      }\n\n      rowElement && rowElement.classList.add(highlightedClassName);\n    },\n    [containerElementRef, highlightedClassName, findInFlexColumns],\n  );\n\n  // Subscribe to the highlight change event\n  useEffect(() => onHighlightChange(highlightFn), [highlightFn, onHighlightChange]);\n\n  // Create event handlers for table cell mouse over and out events\n  const cellMouseOverHandler = useCallback(\n    ({ data }: CellMouseOverEvent) => {\n      const isGroupRow = 'groupParentInfo' in data;\n      // Extract the trace UUID from the data\n      // Use runUuid for non-group rows and rowUuid for group rows\n      const dataTraceUuid = getRowUuid ? getRowUuid({ data }) : isGroupRow ? data.rowUuid : data.runUuid;\n\n      highlightDataTrace(dataTraceUuid, {\n        source: ChartsTraceHighlightSource.TABLE,\n      });\n    },\n    [highlightDataTrace, getRowUuid],\n  );\n\n  const cellMouseOutHandler = useCallback(() => highlightDataTrace(null), [highlightDataTrace]);\n\n  return { cellMouseOverHandler, cellMouseOutHandler };\n};\n","import { SortAscendingIcon, SortDescendingIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { useUpdateExperimentPageSearchFacets } from '../../../hooks/useExperimentPageSearchFacets';\n\nexport interface ColumnHeaderCellProps {\n  enableSorting: boolean;\n  displayName: string;\n  canonicalSortKey: string;\n  context: {\n    orderByKey: string;\n    orderByAsc: boolean;\n  };\n}\n\nexport const ColumnHeaderCell = ({\n  enableSorting,\n  canonicalSortKey,\n  displayName,\n  context: tableContext,\n}: ColumnHeaderCellProps) => {\n  const { orderByKey, orderByAsc } = tableContext || {};\n  const updateSearchFacets = useUpdateExperimentPageSearchFacets();\n  const selectedCanonicalSortKey = canonicalSortKey;\n\n  const handleSortBy = () => {\n    let newOrderByAsc = !orderByAsc;\n\n    // If the new sortKey is not equal to the previous sortKey, reset the orderByAsc\n    if (selectedCanonicalSortKey !== orderByKey) {\n      newOrderByAsc = false;\n    }\n    updateSearchFacets({ orderByKey: selectedCanonicalSortKey, orderByAsc: newOrderByAsc });\n  };\n\n  const { theme } = useDesignSystemTheme();\n  const isOrderedByClassName = 'is-ordered-by';\n\n  return (\n    <div\n      role=\"columnheader\"\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}\n    >\n      <div\n        css={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          overflow: 'hidden',\n          paddingLeft: theme.spacing.xs + theme.spacing.sm,\n          paddingRight: theme.spacing.xs + theme.spacing.sm,\n          gap: theme.spacing.sm,\n          svg: {\n            color: theme.colors.textSecondary,\n          },\n          '&:hover': {\n            color: enableSorting ? theme.colors.actionTertiaryTextHover : 'unset',\n            svg: {\n              color: theme.colors.actionTertiaryTextHover,\n            },\n          },\n        }}\n        className={selectedCanonicalSortKey === orderByKey ? isOrderedByClassName : ''}\n        onClick={enableSorting ? handleSortBy : undefined}\n      >\n        <span data-test-id={`sort-header-${displayName}`}>{displayName}</span>\n        {enableSorting && selectedCanonicalSortKey === orderByKey ? (\n          orderByAsc ? (\n            <SortAscendingIcon />\n          ) : (\n            <SortDescendingIcon />\n          )\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","import { Theme } from '@emotion/react';\nimport React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowDateAndNestInfo } from '../../../utils/experimentPage.row-types';\nimport { RunStatusIcon } from '../../../../RunStatusIcon';\nimport { useIntl } from 'react-intl';\n\nexport interface DateCellRendererProps {\n  value: RunRowDateAndNestInfo;\n}\n\nexport const DateCellRenderer = React.memo(({ value }: DateCellRendererProps) => {\n  const { startTime, referenceTime, runStatus } = value || {};\n  const intl = useIntl();\n  if (!startTime) {\n    return <>-</>;\n  }\n\n  return (\n    <span css={styles.cellWrapper} title={Utils.formatTimestamp(startTime, intl)}>\n      <RunStatusIcon status={runStatus} />\n      {Utils.timeSinceStr(startTime, referenceTime)}\n    </span>\n  );\n});\n\nconst styles = {\n  cellWrapper: (theme: Theme) => ({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing.sm,\n  }),\n};\n","import React, { useState } from 'react';\nimport { Button } from '@databricks/design-system';\n\ntype Props = {\n  text: string;\n  maxSize: number;\n  className?: string;\n  allowShowMore?: boolean;\n  dataTestId?: string;\n};\n\nexport const TrimmedText = ({ text, maxSize, className, allowShowMore = false, dataTestId }: Props) => {\n  if (text.length <= maxSize) {\n    return (\n      <span className={className} data-testid={dataTestId}>\n        {text}\n      </span>\n    );\n  }\n  const trimmedText = `${text.substr(0, maxSize)}...`;\n  // Reported during ESLint upgrade\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <span className={className} data-testid={dataTestId}>\n      {showMore ? text : trimmedText}\n      {allowShowMore && (\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_components_trimmedtext.tsx_30\"\n          type=\"link\"\n          onClick={() => setShowMore(!showMore)}\n          size=\"small\"\n          css={styles.expandButton}\n          data-testid=\"trimmed-text-button\"\n        >\n          {showMore ? 'collapse' : 'expand'}\n        </Button>\n      )}\n    </span>\n  );\n};\n\nconst styles = {\n  expandButton: {\n    display: 'inline-block',\n  },\n};\n","import React from 'react';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { TrimmedText } from '../../../../../../common/components/TrimmedText';\n\nexport const RunDescriptionCellRenderer = React.memo(({ value }: { value: RunRowType['tags'] }) => {\n  const description = Utils.getRunDescriptionFromTags(value) || '-';\n  return (\n    <>\n      <LegacyTooltip title={description}>\n        <span>\n          <TrimmedText text={description} maxSize={50} />\n        </span>\n      </LegacyTooltip>\n    </>\n  );\n});\n","import React from 'react';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../../routes';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport interface ExperimentNameCellRendererProps {\n  value: {\n    name: string;\n    basename: string;\n  };\n  data: RunRowType;\n}\n\nexport const ExperimentNameCellRenderer = React.memo(({ data, value }: ExperimentNameCellRendererProps) =>\n  !data.experimentId ? null : (\n    <Link to={Routes.getExperimentPageRoute(data.experimentId)} title={value.name}>\n      {value.basename}\n    </Link>\n  ),\n);\n","import React from 'react';\nimport { ModelsIcon, Overflow, Tag, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { ModelRegistryRoutes } from '../../../../../../model-registry/routes';\nimport Routes from '../../../../../routes';\nimport { RunRowModelsInfo } from '../../../utils/experimentPage.row-types';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../../../common/static/registered-model-grey-ok.svg';\nimport { FormattedMessage } from 'react-intl';\n\nconst EMPTY_CELL_PLACEHOLDER = '-';\n\nexport interface ModelsCellRendererProps {\n  value: RunRowModelsInfo;\n}\n\n/**\n * Backfill Typescript type for the value returned from Utils.mergeLoggedAndRegisteredModels\n */\ninterface CombinedModelType {\n  registeredModelName?: string;\n  isUc?: string;\n  registeredModelVersion?: string;\n  artifactPath?: string;\n  flavors?: string[];\n}\n\n/**\n * Icon, label and link for a single model\n */\nconst ModelLink = ({\n  model: { isUc, registeredModelName, registeredModelVersion, flavors, artifactPath } = {},\n  experimentId,\n  runUuid,\n}: {\n  model?: CombinedModelType;\n  experimentId: string;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Renders a model name based on whether it's a registered model or not\n  const renderModelName = () => {\n    const displayFullName = `${registeredModelName} v${registeredModelVersion}`;\n    if (registeredModelName) {\n      return (\n        <LegacyTooltip title={displayFullName} placement=\"topLeft\">\n          <span css={{ verticalAlign: 'middle' }}>{registeredModelName}</span>{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_modelscellrenderer.tsx_49\"\n            css={{ marginRight: 0, verticalAlign: 'middle' }}\n          >\n            v{registeredModelVersion}\n          </Tag>\n        </LegacyTooltip>\n      );\n    }\n\n    const firstFlavorName = flavors?.[0];\n\n    return (\n      firstFlavorName || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Experiment page > runs table > models column > default label for no specific model\"\n        />\n      )\n    );\n  };\n\n  // Renders a link to either the model registry or the run artifacts page\n  const renderModelLink = () => {\n    if (registeredModelName && registeredModelVersion) {\n      return ModelRegistryRoutes.getModelVersionPageRoute(registeredModelName, registeredModelVersion);\n    }\n    return Routes.getRunPageRoute(experimentId, runUuid, artifactPath);\n  };\n\n  // Renders an icon based on whether it's a registered model or not\n  const renderModelIcon = () => {\n    if (registeredModelName) {\n      return <RegisteredModelOkIcon css={{ color: theme.colors.actionPrimaryBackgroundDefault }} />;\n    }\n    return <ModelsIcon css={{ color: theme.colors.actionPrimaryBackgroundDefault }} />;\n  };\n\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs, overflow: 'hidden' }}>\n      <div css={{ width: 20, display: 'flex', alignItems: 'center', justifyContent: 'flex-start', flexShrink: 0 }}>\n        {renderModelIcon()}\n      </div>\n      <Link\n        to={renderModelLink()}\n        target=\"_blank\"\n        css={{ textOverflow: 'ellipsis', overflow: 'hidden', cursor: 'pointer' }}\n      >\n        {renderModelName()}\n      </Link>\n    </div>\n  );\n};\n\nexport const ModelsCellRenderer = React.memo((props: ModelsCellRendererProps) => {\n  if (!props.value) {\n    return <>{EMPTY_CELL_PLACEHOLDER}</>;\n  }\n  const { registeredModels, loggedModels, experimentId, runUuid } = props.value;\n  const models: CombinedModelType[] = Utils.mergeLoggedAndRegisteredModels(loggedModels, registeredModels) as any[];\n\n  const containsModels = Boolean(models?.length);\n\n  if (containsModels) {\n    return (\n      // <Overflow /> component does not ideally fit within ag-grid cell so we need to override its styles a bit\n      <div css={{ width: '100%', '&>div': { maxWidth: '100%', display: 'flex' } }}>\n        <Overflow>\n          {models.map((model, index) => (\n            <ModelLink model={model} key={model.artifactPath || index} experimentId={experimentId} runUuid={runUuid} />\n          ))}\n        </Overflow>\n      </div>\n    );\n  }\n  return <>{EMPTY_CELL_PLACEHOLDER}</>;\n});\n","import React from 'react';\nimport { SortAscendingIcon, SortDescendingIcon, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ATTRIBUTE_COLUMN_LABELS } from '../../../../../constants';\n\nexport const ModelsHeaderCellRenderer = React.memo(() => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      role=\"columnheader\"\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: '0 12px',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <LegacyTooltip\n        title={\n          <FormattedMessage\n            defaultMessage=\"Click into an individual run to see all models associated with it\"\n            description='MLflow experiment detail page > runs table > tooltip on ML \"Models\" column header'\n          />\n        }\n      >\n        {ATTRIBUTE_COLUMN_LABELS.MODELS}\n      </LegacyTooltip>\n    </div>\n  );\n});\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowVersionInfo } from '../../../utils/experimentPage.row-types';\n\nexport const VersionCellRenderer = React.memo(({ value }: { value?: RunRowVersionInfo }) => {\n  if (!value) {\n    return <>-</>;\n  }\n  const {\n    // Run row version object parameters\n    version,\n    name,\n    type,\n  } = value;\n\n  return (\n    Utils.renderSourceVersion(\n      // Using function from utils to render the source link\n      version,\n      name,\n      type,\n    ) || <>-</>\n  );\n});\n","import { Icon, LegacyTooltip, VisibleOffIcon, useDesignSystemTheme, visuallyHidden } from '@databricks/design-system';\nimport { RUNS_VISIBILITY_MODE } from '../../../models/ExperimentPageUIState';\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport { Theme } from '@emotion/react';\n\nconst VisibleIcon = () => <Icon component={VisibleFillIcon} />;\n\ninterface RunVisibilityControlButtonProps {\n  className?: string;\n  runUuid: string;\n  rowHidden: boolean;\n  buttonHidden: boolean;\n  disabled: boolean;\n  onClick: (runUuidOrToggle: string | RUNS_VISIBILITY_MODE, runUuid?: string, isRowVisible?: boolean) => void;\n  label: React.ReactNode;\n}\n\n// Mouse enter/leave delays passed to tooltips are set to 0 so swift toggling/pinning runs is not hampered\nconst MOUSE_DELAYS = { mouseEnterDelay: 0, mouseLeaveDelay: 0 };\n\nexport const RunVisibilityControlButton = ({\n  runUuid,\n  className,\n  rowHidden,\n  buttonHidden,\n  disabled,\n  onClick,\n  label,\n}: RunVisibilityControlButtonProps) => {\n  const { theme } = useDesignSystemTheme();\n  if (buttonHidden) {\n    return <div className={className} css={[styles.button(theme)]} />;\n  }\n  if (disabled) {\n    return (\n      <VisibleOffIcon\n        className={className}\n        css={[\n          styles.button(theme),\n          {\n            opacity: 0.25,\n            color: theme.colors.grey400,\n          },\n        ]}\n      />\n    );\n  }\n  return (\n    <LegacyTooltip dangerouslySetAntdProps={MOUSE_DELAYS} placement=\"right\" title={label}>\n      <label className={className} css={styles.button(theme)}>\n        <span css={visuallyHidden}>{label}</span>\n        <input\n          type=\"checkbox\"\n          className=\"is-visibility-toggle-checkbox\"\n          checked={!rowHidden}\n          onChange={() => {\n            if (runUuid) {\n              const isRowVisible = !rowHidden;\n              onClick(RUNS_VISIBILITY_MODE.CUSTOM, runUuid, isRowVisible);\n            }\n          }}\n        />\n        {!rowHidden ? <VisibleIcon /> : <VisibleOffIcon />}\n      </label>\n    </LegacyTooltip>\n  );\n};\n\nconst styles = {\n  button: (theme: Theme) => ({\n    width: theme.general.iconFontSize,\n    color: theme.colors.grey400,\n    '.ag-row:hover &': {\n      color: theme.colors.grey500,\n    },\n  }),\n};\n","import React, { useMemo } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../models/ExperimentPageUIState';\n\nconst ExperimentViewRunsTableHeaderContext = React.createContext({\n  runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n  useGroupedValuesInCharts: true,\n  usingCustomVisibility: false,\n  allRunsHidden: false,\n});\n\n/**\n * A tiny context that passes the current runs hidden mode to the header cell renderer.\n *\n * This is needed because ag-grid context is unreliable and does not always update when the\n * runs hidden mode changes. The solution below is way more performant than recreating column definitions\n * based on a new value.\n */\nexport const ExperimentViewRunsTableHeaderContextProvider = ({\n  children,\n  runsHiddenMode,\n  useGroupedValuesInCharts,\n  usingCustomVisibility,\n  allRunsHidden,\n}: {\n  children: React.ReactNode;\n  runsHiddenMode: RUNS_VISIBILITY_MODE;\n  useGroupedValuesInCharts?: boolean;\n  /**\n   * Whether the user is using custom visibility settings (at least one row is configured manually)\n   */\n  usingCustomVisibility?: boolean;\n  /**\n   * Whether all runs are hidden\n   */\n  allRunsHidden?: boolean;\n}) => {\n  const contextValue = useMemo(\n    () => ({\n      runsHiddenMode,\n      useGroupedValuesInCharts: useGroupedValuesInCharts ?? true,\n      usingCustomVisibility: usingCustomVisibility ?? false,\n      allRunsHidden: allRunsHidden ?? false,\n    }),\n    [runsHiddenMode, useGroupedValuesInCharts, usingCustomVisibility, allRunsHidden],\n  );\n  return (\n    <ExperimentViewRunsTableHeaderContext.Provider value={contextValue}>\n      {children}\n    </ExperimentViewRunsTableHeaderContext.Provider>\n  );\n};\n\nexport const useExperimentViewRunsTableHeaderContext = () => React.useContext(ExperimentViewRunsTableHeaderContext);\n","import {\n  PinIcon,\n  PinFillIcon,\n  LegacyTooltip,\n  VisibleIcon as VisibleHollowIcon,\n  VisibleOffIcon,\n  useDesignSystemTheme,\n  Icon,\n  visuallyHidden,\n} from '@databricks/design-system';\nimport type { SuppressKeyboardEventParams } from '@ag-grid-community/core';\n\n// TODO: Import this icon from design system when added\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport { Theme } from '@emotion/react';\nimport React, { useMemo } from 'react';\nimport { FormattedMessage, defineMessages } from 'react-intl';\nimport { RunRowType, RunRowVisibilityControl } from '../../../utils/experimentPage.row-types';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../../common/utils/FeatureUtils';\nimport { useUpdateExperimentViewUIState } from '../../../contexts/ExperimentPageUIStateContext';\nimport { RUNS_VISIBILITY_MODE } from '../../../models/ExperimentPageUIState';\nimport { isRemainingRunsGroup } from '../../../utils/experimentPage.group-row-utils';\nimport { RunVisibilityControlButton } from './RunVisibilityControlButton';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nconst labels = {\n  visibility: {\n    groups: defineMessages({\n      unhide: {\n        defaultMessage: 'Unhide group',\n        description: 'A tooltip for the visibility icon button in the runs table next to the hidden run group',\n      },\n      hide: {\n        defaultMessage: 'Hide group',\n        description: 'A tooltip for the visibility icon button in the runs table next to the visible run group',\n      },\n    }),\n    runs: defineMessages({\n      unhide: {\n        defaultMessage: 'Unhide run',\n        description: 'A tooltip for the visibility icon button in the runs table next to the hidden run',\n      },\n      hide: {\n        defaultMessage: 'Hide run',\n        description: 'A tooltip for the visibility icon button in the runs table next to the visible run',\n      },\n    }),\n  },\n  pinning: {\n    groups: defineMessages({\n      unpin: {\n        defaultMessage: 'Unpin group',\n        description: 'A tooltip for the pin icon button in the runs table next to the pinned run group',\n      },\n      pin: {\n        defaultMessage: 'Pin group',\n        description: 'A tooltip for the pin icon button in the runs table next to the not pinned run group',\n      },\n    }),\n    runs: defineMessages({\n      unpin: {\n        defaultMessage: 'Unpin run',\n        description: 'A tooltip for the pin icon button in the runs table next to the pinned run',\n      },\n      pin: {\n        defaultMessage: 'Pin run',\n        description: 'A tooltip for the pin icon button in the runs table next to the not pinned run',\n      },\n    }),\n  },\n};\n\n// Mouse enter/leave delays passed to tooltips are set to 0 so swift toggling/pinning runs is not hampered\nconst MOUSE_DELAYS = { mouseEnterDelay: 0, mouseLeaveDelay: 0 };\n\nexport const RowActionsCellRenderer = React.memo(\n  (props: {\n    data: RunRowType;\n    value: { pinned: boolean; hidden: boolean };\n    onTogglePin: (runUuid: string) => void;\n    onToggleVisibility: (runUuidOrToggle: string | RUNS_VISIBILITY_MODE, runUuid?: string) => void;\n  }) => {\n    const updateUIState = useUpdateExperimentViewUIState();\n    const { theme } = useDesignSystemTheme();\n    const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n\n    const { groupParentInfo, runDateAndNestInfo, visibilityControl } = props.data;\n    const { belongsToGroup } = runDateAndNestInfo || {};\n    const isGroupRow = Boolean(groupParentInfo);\n    const isVisibilityButtonDisabled =\n      shouldEnableToggleIndividualRunsInGroups() && visibilityControl === RunRowVisibilityControl.Disabled;\n    const { pinned, hidden } = props.value;\n    const { runUuid, rowUuid } = props.data;\n\n    // If a row is a run group, we use its rowUuid for setting visibility.\n    // If this is a run, use runUuid.\n    const runUuidToToggle = groupParentInfo ? rowUuid : runUuid;\n\n    const isRowHidden = (() => {\n      // If \"Use grouping from the runs table in charts\" option is off and we're displaying a group,\n      // we should check if all runs in the group are hidden in order to determine visibility toggle.\n      if (shouldEnableToggleIndividualRunsInGroups() && useGroupedValuesInCharts === false && groupParentInfo) {\n        return Boolean(groupParentInfo.allRunsHidden);\n      }\n\n      // Otherwise, we should use the hidden flag from the row itself.\n      return hidden;\n    })();\n\n    const visibilityMessageDescriptor = isGroupRow\n      ? isRowHidden\n        ? labels.visibility.groups.unhide\n        : labels.visibility.groups.hide\n      : isRowHidden\n      ? labels.visibility.runs.unhide\n      : labels.visibility.runs.hide;\n\n    const pinningMessageDescriptor = isGroupRow\n      ? pinned\n        ? labels.pinning.groups.unpin\n        : labels.pinning.groups.pin\n      : pinned\n      ? labels.pinning.runs.unpin\n      : labels.pinning.runs.pin;\n\n    const isVisibilityButtonHidden = useMemo(() => {\n      if (shouldEnableToggleIndividualRunsInGroups()) {\n        return visibilityControl === RunRowVisibilityControl.Hidden;\n      }\n      return !((groupParentInfo && !isRemainingRunsGroup(groupParentInfo)) || (Boolean(runUuid) && !belongsToGroup));\n    }, [groupParentInfo, belongsToGroup, runUuid, visibilityControl]);\n\n    return (\n      <div css={styles.actionsContainer}>\n        <RunVisibilityControlButton\n          rowHidden={isRowHidden}\n          buttonHidden={isVisibilityButtonHidden}\n          disabled={isVisibilityButtonDisabled}\n          label={<FormattedMessage {...visibilityMessageDescriptor} />}\n          onClick={props.onToggleVisibility}\n          runUuid={runUuidToToggle}\n          css={[\n            styles.actionCheckbox(theme),\n            // We show this button only in the runs compare mode\n            styles.showOnlyInCompareMode,\n          ]}\n        />\n        {((props.data.pinnable && runUuid) || groupParentInfo) && (\n          <LegacyTooltip\n            dangerouslySetAntdProps={MOUSE_DELAYS}\n            placement=\"right\"\n            // We have to force remount of the tooltip with every rerender, otherwise it will jump\n            // around when the row order changes.\n            key={Math.random()}\n            title={<FormattedMessage {...pinningMessageDescriptor} />}\n          >\n            <label css={styles.actionCheckbox(theme)} className=\"is-pin-toggle\" data-testid=\"column-pin-toggle\">\n              <span css={visuallyHidden}>\n                <FormattedMessage {...pinningMessageDescriptor} />\n              </span>\n              <input\n                type=\"checkbox\"\n                checked={pinned}\n                onChange={() => {\n                  const uuidToPin = groupParentInfo ? props.data.rowUuid : runUuid;\n                  updateUIState((existingState) => {\n                    if (uuidToPin) {\n                      return {\n                        ...existingState,\n                        runsPinned: !existingState.runsPinned.includes(uuidToPin)\n                          ? [...existingState.runsPinned, uuidToPin]\n                          : existingState.runsPinned.filter((r) => r !== uuidToPin),\n                      };\n                    }\n                    return existingState;\n                  });\n                }}\n              />\n              {pinned ? <PinFillIcon /> : <PinIcon />}\n            </label>\n          </LegacyTooltip>\n        )}\n      </div>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.value.hidden === nextProps.value.hidden &&\n    prevProps.value.pinned === nextProps.value.pinned &&\n    prevProps.data.visibilityControl === nextProps.data.visibilityControl &&\n    prevProps.data.groupParentInfo?.allRunsHidden === nextProps.data.groupParentInfo?.allRunsHidden,\n);\n\n/**\n * A utility function that enables custom keyboard navigation for the row actions cell renderer by providing\n * conditional suppression of default events.\n */\nexport const RowActionsCellRendererSuppressKeyboardEvents = ({ event }: SuppressKeyboardEventParams) => {\n  if (\n    event.key === 'Tab' &&\n    event.target instanceof HTMLElement &&\n    // Let's suppress the default action if the focus is on cell or on visibility toggle checkbox, allowing\n    // tab to move to the next focusable element.\n    (event.target.classList.contains('ag-cell') || event.target.classList.contains('is-visibility-toggle-checkbox'))\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst styles = {\n  actionsContainer: {\n    display: 'flex',\n    gap: 18, // In design there's 20 px of gutter, it's minus 2 px due to pin icon's internal padding\n  },\n  showOnlyInCompareMode: {\n    display: 'none',\n    '.is-table-comparing-runs-mode &': {\n      display: 'flex',\n    },\n  },\n  actionCheckbox: (theme: Theme) => ({\n    input: { width: 0, appearance: 'none' as const },\n    cursor: 'pointer',\n    display: 'flex',\n    svg: {\n      width: theme.general.iconFontSize,\n      height: theme.general.iconFontSize,\n      cursor: 'pointer',\n    },\n    // Styling for the pin button - it's transparent when unpinned and not hovered\n    '&.is-pin-toggle svg': {\n      color: 'transparent',\n      '.ag-row:hover &': {\n        color: theme.colors.grey500,\n      },\n    },\n    '& input:checked + span svg': {\n      color: theme.colors.grey500,\n    },\n    '& input:focus-visible + span svg': {\n      color: theme.colors.grey500,\n    },\n  }),\n};\n","import { DashIcon, DropdownMenu, Icon, VisibleOffIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RUNS_VISIBILITY_MODE } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/models/ExperimentPageUIState';\n// TODO: Import this icon from design system when added\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nconst VisibleIcon = () => <Icon component={VisibleFillIcon} />;\n\nconst RowActionsHeaderCellRendererV2 = React.memo(\n  ({\n    onToggleVisibility,\n  }: {\n    onToggleVisibility: (mode: RUNS_VISIBILITY_MODE | string, runOrGroupUuid?: string) => void;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    const intl = useIntl();\n    const { runsHiddenMode, usingCustomVisibility, allRunsHidden } = useExperimentViewRunsTableHeaderContext();\n\n    return (\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <button\n            css={[\n              styles.actionButton(theme),\n              // We show this button only in the runs compare mode\n              styles.showOnlyInCompareMode,\n            ]}\n            data-testid=\"experiment-view-runs-visibility-column-header\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Toggle visibility of runs',\n              description: 'Experiment page > runs table > toggle visibility of runs > accessible label',\n            })}\n          >\n            {runsHiddenMode === RUNS_VISIBILITY_MODE.HIDEALL || allRunsHidden ? <VisibleOffIcon /> : <VisibleIcon />}\n          </button>\n        </DropdownMenu.Trigger>\n\n        <DropdownMenu.Content>\n          <DropdownMenu.RadioGroup\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_rowactionsheadercellrenderer.tsx_52\"\n            value={runsHiddenMode}\n            onValueChange={(e) => onToggleVisibility(e)}\n          >\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_10_RUNS}>\n              {/* Dropdown menu does not support indeterminate state, so we're doing it manually */}\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Show first 10\"\n                description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_20_RUNS}>\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Show first 20\"\n                description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.SHOWALL}>\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Show all runs\"\n                description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.HIDEALL}>\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Hide all runs\"\n                description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n          </DropdownMenu.RadioGroup>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n\n/**\n * A component used to render \"eye\" icon in the table header used to hide/show all runs\n */\nexport const RowActionsHeaderCellRenderer = React.memo(\n  (props: {\n    allRunsHidden?: boolean;\n    usingCustomVisibility?: boolean;\n    onToggleVisibility: (runUuidOrToggle: string) => void;\n    eGridHeader?: HTMLElement;\n  }) => {\n    const intl = useIntl();\n\n    // Since ag-grid does not add accessible labels to its checkboxes, we do it manually.\n    // This is executed once per table lifetime.\n    useEffect(() => {\n      // Find a checkbox in the header\n      const selectAllCheckbox = props.eGridHeader?.querySelector('input');\n\n      // If found, assign aria-label attribute\n      if (selectAllCheckbox) {\n        selectAllCheckbox.ariaLabel = intl.formatMessage({\n          defaultMessage: 'Select all runs',\n          description: 'Experiment page > runs table > select all rows > accessible label',\n        });\n      }\n    }, [props.eGridHeader, intl]);\n\n    return <RowActionsHeaderCellRendererV2 {...props} />;\n  },\n);\n\nconst styles = {\n  actionButton: (theme: Theme) => ({\n    background: 'transparent',\n    border: 'none',\n    cursor: 'pointer',\n    padding: '8px',\n    // When visibility icon is next to the ag-grid checkbox, remove the bonus padding\n    '.ag-checkbox:not(.ag-hidden) + &': { padding: '0 1px' },\n    svg: {\n      width: theme.general.iconFontSize,\n      height: theme.general.iconFontSize,\n      cursor: 'pointer',\n      color: theme.colors.grey500,\n    },\n  }),\n  showOnlyInCompareMode: {\n    display: 'none',\n    '.is-table-comparing-runs-mode &': {\n      display: 'flex',\n    },\n  },\n};\n","import { ICellRendererParams } from '@ag-grid-community/core';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  NewWindowIcon,\n  Tag,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport {\n  createSearchFilterFromRunGroupInfo,\n  getRunGroupDisplayName,\n  isRemainingRunsGroup,\n} from '../../../utils/experimentPage.group-row-utils';\nimport { useUpdateExperimentViewUIState } from '../../../contexts/ExperimentPageUIStateContext';\nimport { useCallback, useMemo } from 'react';\nimport { RunColorPill } from '../../RunColorPill';\nimport invariant from 'invariant';\nimport { FormattedMessage } from 'react-intl';\nimport { useGetExperimentRunColor, useSaveExperimentRunColor } from '../../../hooks/useExperimentRunColor';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../../common/utils/FeatureUtils';\nimport { Link, To, useLocation } from '../../../../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW } from '../../../hooks/useExperimentPageSearchFacets';\n\nexport interface GroupParentCellRendererProps extends ICellRendererParams {\n  data: RunRowType;\n  isComparingRuns?: boolean;\n}\n\nexport const GroupParentCellRenderer = ({ data, isComparingRuns }: GroupParentCellRendererProps) => {\n  const groupParentInfo = data.groupParentInfo;\n  const hidden = data.hidden;\n  invariant(groupParentInfo, 'groupParentInfo should be defined');\n  const { theme } = useDesignSystemTheme();\n  const location = useLocation();\n\n  const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n  const getRunColor = useGetExperimentRunColor();\n  const saveRunColor = useSaveExperimentRunColor();\n  const updateUIState = useUpdateExperimentViewUIState();\n  const onExpandToggle = useCallback(\n    (groupId: string, doOpen: boolean) => {\n      updateUIState((current) => {\n        const { groupsExpanded } = current;\n        return {\n          ...current,\n          groupsExpanded: { ...groupsExpanded, [groupId]: doOpen },\n        };\n      });\n    },\n    [updateUIState],\n  );\n\n  const groupName = getRunGroupDisplayName(groupParentInfo);\n  const groupIsDisplayedInCharts = useMemo(() => {\n    if (shouldEnableToggleIndividualRunsInGroups()) {\n      return useGroupedValuesInCharts && !isRemainingRunsGroup(groupParentInfo);\n    }\n\n    return !isRemainingRunsGroup(groupParentInfo);\n  }, [groupParentInfo, useGroupedValuesInCharts]);\n\n  const urlToRunUuidsFilter = useMemo(() => {\n    const filter = createSearchFilterFromRunGroupInfo(groupParentInfo);\n\n    const searchParams = new URLSearchParams(location.search);\n    searchParams.set('searchFilter', filter);\n    searchParams.set(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW, 'true');\n    const destination: To = {\n      ...location,\n      search: searchParams.toString(),\n    };\n\n    return destination;\n  }, [groupParentInfo, location]);\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      {groupParentInfo.expanderOpen ? (\n        <ChevronDownIcon\n          role=\"button\"\n          onClick={() => {\n            onExpandToggle(groupParentInfo.groupId, false);\n          }}\n        />\n      ) : (\n        <ChevronRightIcon\n          role=\"button\"\n          onClick={() => {\n            onExpandToggle(groupParentInfo.groupId, true);\n          }}\n        />\n      )}\n      {/* Display color pill only when it's displayed in chart area */}\n      {groupIsDisplayedInCharts && (\n        <RunColorPill\n          color={getRunColor(groupParentInfo.groupId)}\n          hidden={isComparingRuns && hidden}\n          onChangeColor={(colorValue) => {\n            saveRunColor({ groupUuid: groupParentInfo.groupId, colorValue });\n          }}\n        />\n      )}\n      <div\n        css={{\n          display: 'inline-flex',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n        }}\n      >\n        {isRemainingRunsGroup(groupParentInfo) ? (\n          <FormattedMessage\n            defaultMessage=\"Additional runs\"\n            description=\"Experiment page > grouped runs table > label for group with additional, ungrouped runs\"\n          />\n        ) : (\n          <span title={groupName} css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n            <FormattedMessage\n              defaultMessage=\"Group: {groupName}\"\n              description=\"Experiment page > grouped runs table > run group header label\"\n              values={{ groupName }}\n            />\n          </span>\n        )}\n        <Tag\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_groupparentcellrenderer.tsx_109\"\n          css={{ marginLeft: 0, marginRight: 0 }}\n        >\n          {groupParentInfo.runUuids.length}\n        </Tag>\n        <Tooltip\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_groupparentcellrenderer.tsx_136\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Open runs in this group in the new tab\"\n              description=\"Experiment page > grouped runs table > tooltip for a button that opens runs in a group in a new tab\"\n            />\n          }\n        >\n          <Link\n            to={urlToRunUuidsFilter}\n            target=\"_blank\"\n            css={{\n              marginLeft: -theme.spacing.xs,\n              display: 'none',\n              '.ag-row-hover &': {\n                display: 'inline-flex',\n              },\n            }}\n          >\n            <Button\n              type=\"link\"\n              componentId=\"mlflow.experiment_page.grouped_runs.open_runs_in_new_tab\"\n              size=\"small\"\n              icon={<NewWindowIcon css={{ svg: { width: 12, height: 12 } }} />}\n            />\n          </Link>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button, MinusSquareIcon, PlusSquareIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useMemo } from 'react';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../../routes';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { GroupParentCellRenderer } from './GroupParentCellRenderer';\nimport invariant from 'invariant';\nimport { RunColorPill } from '../../RunColorPill';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../../common/utils/FeatureUtils';\nimport { useGetExperimentRunColor, useSaveExperimentRunColor } from '../../../hooks/useExperimentRunColor';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nexport interface RunNameCellRendererProps extends ICellRendererParams {\n  data: RunRowType;\n  isComparingRuns?: boolean;\n  onExpand: (runUuid: string, childrenIds?: string[]) => void;\n}\n\nexport const RunNameCellRenderer = React.memo((props: RunNameCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const saveRunColor = useSaveExperimentRunColor();\n  const getRunColor = useGetExperimentRunColor();\n  const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n\n  // If we're rendering a group row, use relevant component\n  if (props.data.groupParentInfo) {\n    return <GroupParentCellRenderer {...props} />;\n  }\n  const { onExpand, data } = props;\n  const { runName, experimentId, runUuid, runDateAndNestInfo, hidden } = data;\n\n  // If we are not rendering a group, assert existence of necessary fields\n  invariant(experimentId, 'experimentId should be set for run rows');\n  invariant(runUuid, 'runUuid should be set for run rows');\n  invariant(runDateAndNestInfo, 'runDateAndNestInfo should be set for run rows');\n\n  const { hasExpander, expanderOpen, childrenIds, level, belongsToGroup } = runDateAndNestInfo;\n\n  const renderingAsParent = !isNaN(level) && hasExpander;\n  const hideRunColorControl = (() => {\n    if (shouldEnableToggleIndividualRunsInGroups()) {\n      return belongsToGroup && useGroupedValuesInCharts;\n    }\n    return belongsToGroup;\n  })();\n\n  return (\n    <div css={styles.cellWrapper}>\n      <div css={styles.expanderWrapper}>\n        <div\n          css={styles.nestLevel(theme)}\n          style={{\n            width: (level + 1) * theme.spacing.lg,\n          }}\n        >\n          {renderingAsParent && (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_runnamecellrenderer.tsx_46\"\n              css={styles.expanderButton}\n              size=\"small\"\n              onClick={() => {\n                onExpand(runUuid, childrenIds);\n              }}\n              key={'Expander-' + runUuid}\n              type=\"link\"\n              icon={expanderOpen ? <MinusSquareIcon /> : <PlusSquareIcon />}\n            />\n          )}\n        </div>\n      </div>\n      <div css={styles.runLink}>\n        {hideRunColorControl ? (\n          // Render empty color pills for grouped runs\n          <div css={{ width: 12, height: 12, flexShrink: 0 }} />\n        ) : (\n          <RunColorPill\n            color={getRunColor(runUuid)}\n            hidden={props.isComparingRuns && hidden}\n            data-testid=\"experiment-view-table-run-color\"\n            onChangeColor={(colorValue) => saveRunColor({ runUuid, colorValue })}\n          />\n        )}\n        <Link to={Routes.getRunPageRoute(experimentId, runUuid)} css={styles.runLink} tabIndex={0}>\n          <span css={styles.runName}>{runName}</span>\n        </Link>\n      </div>\n    </div>\n  );\n});\n\nconst styles = {\n  link: (theme: Theme) => ({\n    display: 'inline-block',\n    minWidth: theme.typography.fontSizeBase,\n    minHeight: theme.typography.fontSizeBase,\n  }),\n  cellWrapper: {\n    display: 'flex',\n  },\n  expanderButton: {\n    svg: {\n      width: 12,\n      height: 12,\n    },\n  },\n  runLink: {\n    overflow: 'hidden',\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    '&:focus-visible': {\n      textDecoration: 'underline',\n    },\n  },\n  runName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  expanderWrapper: {\n    display: 'none',\n    '.ag-grid-expanders-visible &': {\n      display: 'block',\n    },\n  },\n  nestLevel: (theme: Theme) => ({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    height: theme.spacing.lg,\n  }),\n};\n","import type { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button } from '@databricks/design-system';\nimport { uniqueId } from 'lodash';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const createLoadMoreRow = () => ({\n  runUuid: '',\n  rowUuid: uniqueId('load_more'),\n  isLoadMoreRow: true,\n});\n\n/**\n * A cell renderer for special type of full width rows housing \"Load more\"\n * button displayed at the bottom of the grid\n */\nexport const LoadMoreRowRenderer = React.memo(\n  ({ loadMoreRunsFunc }: ICellRendererParams & { loadMoreRunsFunc: () => void }) => (\n    <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 32 }}>\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_loadmorerowrenderer.tsx_20\"\n        type=\"primary\"\n        onClick={loadMoreRunsFunc}\n        size=\"small\"\n      >\n        <FormattedMessage defaultMessage=\"Load more\" description=\"Load more button text to load more experiment runs\" />\n      </Button>\n    </div>\n  ),\n);\n","import { throttle } from 'lodash';\nimport { Button, Popover, TableIcon, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../../constants';\nimport type { RunDatasetWithTags } from '../../../../../types';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { EXPERIMENT_RUNS_TABLE_ROW_HEIGHT } from '../../../utils/experimentPage.common-utils';\nimport type { SuppressKeyboardEventParams } from '@ag-grid-community/core';\nconst MAX_DATASETS_VISIBLE = 3;\n\n/**\n * Local component, used to render a single dataset within a cell\n * or a context menu\n */\nconst SingleDataset = ({\n  datasetWithTags,\n  onDatasetSelected,\n  appendComma = false,\n  inPopover = false,\n}: {\n  datasetWithTags: RunDatasetWithTags;\n  onDatasetSelected: () => void;\n  appendComma?: boolean;\n  inPopover?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { dataset, tags } = datasetWithTags;\n  if (!dataset) {\n    return null;\n  }\n  const contextTag = tags?.find(({ key }) => key === MLFLOW_RUN_DATASET_CONTEXT_TAG);\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        overflow: 'hidden',\n        marginRight: theme.spacing.xs,\n      }}\n    >\n      <TableIcon css={{ color: theme.colors.textSecondary, marginRight: theme.spacing.xs }} />{' '}\n      <span\n        css={{ minWidth: 32, marginRight: theme.spacing.xs, flexShrink: 0 }}\n        title={`${dataset.name} (${dataset.digest})`}\n      >\n        {inPopover ? (\n          <Popover.Close asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_49\"\n              type=\"link\"\n              onClick={onDatasetSelected}\n              tabIndex={0}\n            >\n              <span css={{ fontSize: 12 }}>\n                {dataset.name} ({dataset.digest})\n              </span>\n            </Button>\n          </Popover.Close>\n        ) : (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_56\"\n            type=\"link\"\n            onClick={onDatasetSelected}\n            data-testid=\"open-dataset-drawer\"\n            tabIndex={0}\n          >\n            <span>\n              {dataset.name} ({dataset.digest})\n            </span>\n          </Button>\n        )}\n      </span>\n      {contextTag && (\n        <Tag\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_75\"\n          css={{ textTransform: 'capitalize', marginRight: theme.spacing.xs }}\n        >\n          <span css={{ fontSize: 12 }}>{contextTag.value}</span>\n        </Tag>\n      )}\n      {appendComma && <>,</>}\n    </div>\n  );\n};\n\nexport interface DatasetsCellRendererProps {\n  value: RunDatasetWithTags[];\n  data: RunRowType;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows: boolean;\n}\n\nexport const DatasetsCellRenderer = React.memo(\n  ({ value: datasets, data, onDatasetSelected, expandRows }: DatasetsCellRendererProps) => {\n    const containerElement = useRef<HTMLDivElement>(null);\n    const [datasetsVisible, setDatasetsVisible] = useState(0);\n    const [ellipsisVisible, setEllipsisVisible] = useState(false);\n    const clampedDatasets = useMemo(() => (datasets || []).slice(0, MAX_DATASETS_VISIBLE), [datasets]);\n    const { theme } = useDesignSystemTheme();\n\n    const datasetsLength = (datasets || []).length;\n\n    useEffect(() => {\n      if (!containerElement.current) {\n        return () => {};\n      }\n      const callback: ResizeObserverCallback = throttle(([entry]) => {\n        if (expandRows) {\n          const availableHeight = entry.contentRect.height;\n          let elementsFit = 0;\n          let stackedHeight = 0;\n          for (let i = 0; i < entry.target.children.length; i++) {\n            const item = entry.target.children.item(i) as Element;\n            if (stackedHeight + item.clientHeight > availableHeight) {\n              break;\n            }\n            stackedHeight += item.clientHeight;\n            elementsFit++;\n          }\n          setDatasetsVisible(elementsFit);\n          setEllipsisVisible(elementsFit < datasetsLength);\n        } else {\n          const availableWidth = entry.contentRect.width;\n          if (availableWidth === 0 && datasetsLength) {\n            setDatasetsVisible(0);\n            setEllipsisVisible(true);\n            return;\n          }\n          let elementsFit = 0;\n          let stackedWidth = 0;\n          for (let i = 0; i < entry.target.children.length; i++) {\n            const item = entry.target.children.item(i) as Element;\n            if (stackedWidth + item.clientWidth >= availableWidth) {\n              break;\n            }\n            stackedWidth += item.clientWidth;\n            elementsFit++;\n          }\n          const partiallyVisibleDatasets = Math.min(datasetsLength, elementsFit + 1);\n          setDatasetsVisible(partiallyVisibleDatasets);\n          setEllipsisVisible(elementsFit < datasetsLength);\n        }\n      }, 100);\n\n      const resizeObserver = new ResizeObserver(callback);\n\n      resizeObserver.observe(containerElement.current);\n      return () => resizeObserver.disconnect();\n    }, [expandRows, datasetsLength]);\n\n    const moreItemsToShow = datasetsLength - datasetsVisible;\n    if (!datasets || datasetsLength < 1) {\n      return <>-</>;\n    }\n\n    const datasetsToShow = expandRows ? clampedDatasets : datasets;\n\n    return (\n      <div css={{ display: 'flex' }}>\n        <div\n          css={{\n            overflow: 'hidden',\n            display: 'flex',\n            flexDirection: expandRows ? 'column' : 'row',\n          }}\n          ref={containerElement}\n        >\n          {datasetsToShow.map((datasetWithTags, index) => (\n            <SingleDataset\n              appendComma={expandRows ? false : index < datasetsToShow.length - 1}\n              key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n              datasetWithTags={datasetWithTags}\n              onDatasetSelected={() => onDatasetSelected?.(datasetWithTags, data)}\n            />\n          ))}\n        </div>\n        {(moreItemsToShow > 0 || ellipsisVisible) && (\n          <div css={{ display: 'flex', alignItems: 'flex-end' }}>\n            {!expandRows && ellipsisVisible && (\n              <span css={{ paddingLeft: 0, paddingRight: theme.spacing.xs }}>&hellip;</span>\n            )}\n            {moreItemsToShow > 0 && (\n              <Popover.Root\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_184\"\n                modal={false}\n              >\n                <Popover.Trigger asChild>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_172\"\n                    size=\"small\"\n                    style={{ borderRadius: '8px', width: '40px' }}\n                    tabIndex={0}\n                  >\n                    <Typography.Text color=\"secondary\">+{moreItemsToShow}</Typography.Text>\n                  </Button>\n                </Popover.Trigger>\n                <Popover.Content align=\"start\" css={{ maxHeight: '400px', overflow: 'auto' }}>\n                  {datasets.slice(datasetsLength - moreItemsToShow).map((datasetWithTags) => (\n                    <div\n                      css={{\n                        height: theme.general.heightSm,\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                      key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n                    >\n                      <SingleDataset\n                        datasetWithTags={datasetWithTags}\n                        onDatasetSelected={() => onDatasetSelected?.(datasetWithTags, data)}\n                        inPopover\n                      />\n                    </div>\n                  ))}\n                </Popover.Content>\n              </Popover.Root>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nexport const getDatasetsCellHeight = (datasetColumnShown: boolean, row: { data: RunRowType }) => {\n  if (datasetColumnShown) {\n    const { data } = row;\n\n    // Display at least 1, but at most 5 text lines in the cell.\n    const datasetsCount = Math.min(data.datasets?.length || 1, MAX_DATASETS_VISIBLE);\n    return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT * datasetsCount;\n  }\n  return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT;\n};\n\n/**\n * A utility function that enables custom keyboard navigation for the datasets cell renderer by providing\n * conditional suppression of default events.\n *\n * This cell needs specific handling since it's the only one that displays multiple buttons simultaneously.\n */\nexport const DatasetsCellRendererSuppressKeyboardEvents = ({ event }: SuppressKeyboardEventParams) => {\n  return (\n    event.key === 'Tab' &&\n    event.target instanceof HTMLElement &&\n    // Let's suppress the default action if the focus is on cell or on the dataset button, allowing\n    // tab to move to the next focusable element.\n    (event.target.classList.contains('ag-cell') || event.target instanceof HTMLButtonElement)\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport const AggregateMetricValueCell = ({\n  value,\n  data,\n  valueFormatted,\n}: {\n  value: string;\n  valueFormatted: null | string;\n  data: RunRowType;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  if (data.groupParentInfo?.aggregateFunction) {\n    return (\n      <Typography.Text>\n        {valueFormatted ?? value}{' '}\n        <span css={{ color: theme.colors.textSecondary }}>({data.groupParentInfo.aggregateFunction})</span>\n      </Typography.Text>\n    );\n  }\n  return value;\n};\n","import type {\n  CellClassParams,\n  ColDef,\n  ColGroupDef,\n  ColumnApi,\n  IsFullWidthRowParams,\n  SuppressKeyboardEventParams,\n} from '@ag-grid-community/core';\nimport { Spinner, SpinnerProps, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { isEqual } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_LABELS, ATTRIBUTE_COLUMN_SORT_KEY, COLUMN_TYPES } from '../../../constants';\nimport { ColumnHeaderCell } from '../components/runs/cells/ColumnHeaderCell';\nimport { DateCellRenderer } from '../components/runs/cells/DateCellRenderer';\nimport { RunDescriptionCellRenderer } from '../components/runs/cells/RunDescriptionCellRenderer';\nimport { ExperimentNameCellRenderer } from '../components/runs/cells/ExperimentNameCellRenderer';\nimport { ModelsCellRenderer } from '../components/runs/cells/ModelsCellRenderer';\nimport { ModelsHeaderCellRenderer } from '../components/runs/cells/ModelsHeaderCellRenderer';\nimport { SourceCellRenderer } from '../components/runs/cells/SourceCellRenderer';\nimport { VersionCellRenderer } from '../components/runs/cells/VersionCellRenderer';\nimport {\n  EXPERIMENT_FIELD_PREFIX_METRIC,\n  EXPERIMENT_FIELD_PREFIX_PARAM,\n  EXPERIMENT_FIELD_PREFIX_TAG,\n  getQualifiedEntityName,\n  makeCanonicalSortKey,\n} from './experimentPage.common-utils';\nimport { RunRowType } from './experimentPage.row-types';\nimport {\n  RowActionsCellRenderer,\n  RowActionsCellRendererSuppressKeyboardEvents,\n} from '../components/runs/cells/RowActionsCellRenderer';\nimport { RowActionsHeaderCellRenderer } from '../components/runs/cells/RowActionsHeaderCellRenderer';\nimport { RunNameCellRenderer } from '../components/runs/cells/RunNameCellRenderer';\nimport { LoadMoreRowRenderer } from '../components/runs/cells/LoadMoreRowRenderer';\nimport {\n  DatasetsCellRenderer,\n  DatasetsCellRendererSuppressKeyboardEvents,\n} from '../components/runs/cells/DatasetsCellRenderer';\nimport { RunDatasetWithTags } from '../../../types';\nimport { AggregateMetricValueCell } from '../components/runs/cells/AggregateMetricValueCell';\nimport { type RUNS_VISIBILITY_MODE } from '../models/ExperimentPageUIState';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { customMetricBehaviorDefs } from './customMetricBehaviorUtils';\n\nconst cellClassIsOrderedBy = ({ colDef, context }: CellClassParams) => {\n  return context.orderByKey === colDef.headerComponentParams?.canonicalSortKey;\n};\n\n/**\n * Width for \"run name\" column.\n */\nconst RUN_NAME_COLUMN_WIDTH = 190;\n\n/**\n * Width for \"run actions\" column.\n */\nconst BASE_RUN_ACTIONS_COLUMN_WIDTH = 105;\nconst VISIBILITY_TOGGLE_WIDTH = 32;\n\n/**\n * Calculates width for \"actions\" column. \"compactMode\" should be set to true\n * for compare runs mode when checkboxes are hidden.\n */\nconst getActionsColumnWidth = (isComparingRuns?: boolean) => {\n  return isComparingRuns ? BASE_RUN_ACTIONS_COLUMN_WIDTH : BASE_RUN_ACTIONS_COLUMN_WIDTH - VISIBILITY_TOGGLE_WIDTH;\n};\n\n/*\n * Functions used to generate grid field names for params, metrics and prefixes\n */\nexport const createParamFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_PARAM}-${key}`;\nconst createMetricFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_METRIC}-${key}`;\nconst createTagFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_TAG}-${key}`;\n\nconst UntrackedSpinner: React.FC<SpinnerProps> = ({ loading, ...props }) => {\n  return Spinner({ loading: false, ...props });\n};\n\n/**\n * A default listener that suppresses default agGrid keyboard events on the row actions cell renderer.\n * If the focus is on a cell, the tab key should be allowed to navigate to the next focusable element instead of a next cell.\n */\nconst defaultKeyboardNavigationSuppressor = ({ event }: SuppressKeyboardEventParams) =>\n  event.key === 'Tab' && event.target instanceof HTMLElement && event.target.classList.contains('ag-cell');\n\n/**\n * Functions returns all framework components to be used by agGrid\n */\nexport const getFrameworkComponents = () => ({\n  agColumnHeader: ColumnHeaderCell,\n\n  // A workaround for https://github.com/ag-grid/ag-grid/issues/7028.\n  // The page will add an interaction hold directly instead of relying on DuBois' Spinner\n  // to do it.\n  loadingOverlayComponent: UntrackedSpinner,\n\n  /**\n   * We're saving cell renderer component references, otherwise\n   * agGrid will unnecessarily flash cells' content (e.g. when changing sort order)\n   */\n  LoadMoreRowRenderer,\n  SourceCellRenderer,\n  ModelsCellRenderer,\n  ModelsHeaderCellRenderer,\n  VersionCellRenderer,\n  DateCellRenderer,\n  ExperimentNameCellRenderer,\n  RunDescriptionCellRenderer,\n  RowActionsCellRenderer,\n  RowActionsHeaderCellRenderer,\n  RunNameCellRenderer,\n  DatasetsCellRenderer,\n  AggregateMetricValueCell,\n});\n\n/**\n * Certain columns are described as run attributes (opposed to metrics, params etc.), however\n * they actually source their data from the run tags. This objects maps tag names to column identifiers.\n */\nconst TAGS_TO_COLUMNS_MAP = {\n  [ATTRIBUTE_COLUMN_SORT_KEY.USER]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'User'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Run Name'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.SOURCE]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Source'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.VERSION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Version'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Description'),\n};\n\n/**\n * Function returns unique row ID to be used in runs table\n */\nexport const getRowId = ({ data }: { data: RunRowType }) => data.rowUuid;\n\n/**\n * Determines if a data row houses \"load more\" button\n */\nexport const getRowIsLoadMore = ({ rowNode }: IsFullWidthRowParams) => rowNode.data.isLoadMoreRow;\n\n/**\n * Parameters used by `useRunsColumnDefinitions()` hook\n */\nexport interface UseRunsColumnDefinitionsParams {\n  selectedColumns: string[];\n  onExpand: (parentUuid: string, childrenIds: string[]) => void;\n  onTogglePin: (runUuid: string) => void;\n  onToggleVisibility:\n    | ((runUuidOrToggle: string) => void)\n    | ((mode: RUNS_VISIBILITY_MODE, runOrGroupUuid: string) => void);\n  compareExperiments: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  tagKeyList: string[];\n  columnApi?: ColumnApi;\n  isComparingRuns?: boolean;\n  onDatasetSelected?: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows?: boolean;\n  allRunsHidden?: boolean;\n  usingCustomVisibility?: boolean;\n  runsHiddenMode?: RUNS_VISIBILITY_MODE;\n}\n\n/**\n * List of all attribute columns that can be shown/hidden by user\n * - when displaying a single experiment (ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT)\n * - when comparing experiments (ADJUSTABLE_ATTRIBUTE_COLUMNS)\n */\n\nexport const getAdjustableAttributeColumns = (isComparingExperiments = false) => {\n  const result = [\n    ATTRIBUTE_COLUMN_LABELS.USER,\n    ATTRIBUTE_COLUMN_LABELS.SOURCE,\n    ATTRIBUTE_COLUMN_LABELS.VERSION,\n    ATTRIBUTE_COLUMN_LABELS.MODELS,\n    ATTRIBUTE_COLUMN_LABELS.DATASET,\n    ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n  ];\n\n  if (isComparingExperiments) {\n    result.push(ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME);\n  }\n  return result;\n};\n\n/**\n * This internal hook passes through the list of all metric/param/tag keys.\n * The lists are memoized internally so if somehow a particular param/metric/tag key is not present\n * in the new runs set (e.g. due to reverse sorting), the relevant column will be still displayed.\n * This prevents weirdly disappearing columns on exotic run sets.\n */\nconst useCumulativeColumnKeys = ({\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n}: Pick<UseRunsColumnDefinitionsParams, 'tagKeyList' | 'metricKeyList' | 'paramKeyList'>) => {\n  const cachedMetricKeys = useRef<Set<string>>(new Set());\n  const cachedParamKeys = useRef<Set<string>>(new Set());\n  const cachedTagKeys = useRef<Set<string>>(new Set());\n\n  const paramKeys = useMemo(() => {\n    paramKeyList.forEach((key) => cachedParamKeys.current.add(key));\n    return Array.from(cachedParamKeys.current);\n  }, [paramKeyList]);\n\n  const metricKeys = useMemo(() => {\n    metricKeyList.forEach((key) => cachedMetricKeys.current.add(key));\n    return Array.from(cachedMetricKeys.current);\n  }, [metricKeyList]);\n\n  const tagKeys = useMemo(() => {\n    tagKeyList.forEach((key) => cachedTagKeys.current.add(key));\n    return Array.from(cachedTagKeys.current);\n  }, [tagKeyList]);\n\n  const cumulativeColumns = useMemo(\n    () => ({\n      paramKeys,\n      metricKeys,\n      tagKeys,\n    }),\n    [metricKeys, paramKeys, tagKeys],\n  );\n\n  return cumulativeColumns;\n};\n\n/**\n * This hook creates a agGrid-compatible column set definition basing on currently\n * used sort-filter model and provided list of metrics, params and tags.\n *\n * Internally, it reacts to changes to `selectedColumns` and hides/shows relevant columns\n * if necessary.\n *\n * @param params see UseRunsColumnDefinitionsParams\n */\nexport const useRunsColumnDefinitions = ({\n  selectedColumns,\n  compareExperiments,\n  onTogglePin,\n  onToggleVisibility,\n  onExpand,\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n  columnApi,\n  onDatasetSelected,\n  isComparingRuns,\n  expandRows,\n  runsHiddenMode,\n}: UseRunsColumnDefinitionsParams) => {\n  const { theme } = useDesignSystemTheme();\n\n  const cumulativeColumns = useCumulativeColumnKeys({\n    metricKeyList,\n    tagKeyList,\n    paramKeyList,\n  });\n\n  // Generate columns differently on super small viewport sizes\n  const usingCompactViewport = useMediaQuery(`(max-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const columnSet = useMemo(() => {\n    const columns: (ColDef | ColGroupDef)[] = [];\n\n    // Checkbox selection column\n    columns.push({\n      valueGetter: ({ data: { pinned, hidden } }) => ({ pinned, hidden }),\n      checkboxSelection: true,\n      headerComponent: 'RowActionsHeaderCellRenderer',\n      headerComponentParams: { onToggleVisibility },\n      headerCheckboxSelection: true,\n      headerName: '',\n      cellClass: 'is-checkbox-cell',\n      cellRenderer: 'RowActionsCellRenderer',\n      cellRendererParams: { onTogglePin, onToggleVisibility },\n      pinned: usingCompactViewport ? undefined : 'left',\n      minWidth: getActionsColumnWidth(isComparingRuns),\n      width: getActionsColumnWidth(isComparingRuns),\n      maxWidth: getActionsColumnWidth(isComparingRuns),\n      resizable: false,\n      suppressKeyboardEvent: RowActionsCellRendererSuppressKeyboardEvents,\n    });\n\n    const isRunColumnDynamicSized = isComparingRuns;\n\n    // Run name column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.RUN_NAME,\n      colId: isRunColumnDynamicSized ? undefined : TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      pinned: usingCompactViewport ? undefined : 'left',\n      sortable: true,\n      cellRenderer: 'RunNameCellRenderer',\n      cellRendererParams: { onExpand, isComparingRuns },\n      equals: (runA: RunRowType, runB: RunRowType) =>\n        runA?.rowUuid === runB?.rowUuid && runA?.groupParentInfo?.expanderOpen === runB?.groupParentInfo?.expanderOpen,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialWidth: isRunColumnDynamicSized ? undefined : RUN_NAME_COLUMN_WIDTH,\n      flex: isRunColumnDynamicSized ? 1 : undefined,\n      resizable: !isComparingRuns,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    // If we are only comparing runs, that's it - we cut off the list after the run name column.\n    // This behavior might be revisited and changed later.\n    if (isComparingRuns) {\n      return columns;\n    }\n\n    // Date and expander selection column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATE,\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      pinned: usingCompactViewport ? undefined : 'left',\n      sortable: true,\n      field: 'runDateAndNestInfo',\n      cellRenderer: 'DateCellRenderer',\n      cellRendererParams: { onExpand },\n      equals: (dateInfo1, dateInfo2) => isEqual(dateInfo1, dateInfo2),\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialWidth: 150,\n    });\n\n    // Datasets column - guarded by a feature flag\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATASET,\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.DATASET),\n      headerTooltip: ATTRIBUTE_COLUMN_LABELS.DATASET,\n      sortable: false,\n      field: 'datasets',\n      cellRenderer: 'DatasetsCellRenderer',\n      cellRendererParams: { onDatasetSelected, expandRows },\n      cellClass: 'is-multiline-cell',\n      initialWidth: 300,\n      suppressKeyboardEvent: DatasetsCellRendererSuppressKeyboardEvents,\n    });\n\n    // Duration column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DURATION,\n      field: 'duration',\n      initialWidth: 80,\n    });\n\n    // Experiment name column\n    if (compareExperiments) {\n      columns.push({\n        headerName: ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n        colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME),\n        field: 'experimentName',\n        cellRenderer: 'ExperimentNameCellRenderer',\n        equals: (experimentName1, experimentName2) => isEqual(experimentName1, experimentName2),\n        initialWidth: 140,\n        initialHide: true,\n        suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n      });\n    }\n\n    // User column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.USER,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.USER],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      field: 'user',\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n    });\n\n    // Source column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.SOURCE,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.SOURCE],\n      field: 'tags',\n      cellRenderer: 'SourceCellRenderer',\n      equals: (tags1 = {}, tags2 = {}) => Utils.getSourceName(tags1) === Utils.getSourceName(tags2),\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.SOURCE,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    // Version column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.VERSION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.VERSION],\n      field: 'version',\n      cellRenderer: 'VersionCellRenderer',\n      equals: (version1 = {}, version2 = {}) => isEqual(version1, version2),\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.VERSION,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n    });\n\n    // Models column\n    columns.push({\n      headerComponent: 'ModelsHeaderCellRenderer',\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.MODELS),\n      field: 'models',\n      cellRenderer: 'ModelsCellRenderer',\n      initialWidth: 200,\n      equals: (models1 = {}, models2 = {}) => isEqual(models1, models2),\n      initialHide: true,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION],\n      field: 'tags',\n      cellRenderer: 'RunDescriptionCellRenderer',\n      initialWidth: 300,\n      initialHide: true,\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n    });\n\n    const { metricKeys, paramKeys, tagKeys } = cumulativeColumns;\n\n    // Metrics columns\n    if (metricKeys.length) {\n      columns.push({\n        headerName: 'Metrics',\n        groupId: COLUMN_TYPES.METRICS,\n        children: metricKeys.map((metricKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey);\n          const customMetricColumnDef = customMetricBehaviorDefs[metricKey];\n          const displayName = customMetricColumnDef?.displayName ?? metricKey;\n          const fieldName = createMetricFieldName(metricKey);\n          const tooltip = getQualifiedEntityName(COLUMN_TYPES.METRICS, metricKey);\n          return {\n            headerName: displayName,\n            colId: canonicalSortKey,\n            headerTooltip: tooltip,\n            field: fieldName,\n            tooltipValueGetter: (params) => {\n              return params.data?.[fieldName];\n            },\n            initialWidth: customMetricColumnDef?.initialColumnWidth ?? 100,\n            initialHide: true,\n            sortable: true,\n            headerComponentParams: {\n              canonicalSortKey,\n            },\n            valueFormatter: customMetricColumnDef?.valueFormatter,\n            cellRendererSelector: ({ data: { groupParentInfo } }) =>\n              groupParentInfo ? { component: 'AggregateMetricValueCell' } : undefined,\n            cellClassRules: {\n              'is-previewable-cell': () => true,\n              'is-ordered-by': cellClassIsOrderedBy,\n            },\n          };\n        }),\n      });\n    }\n\n    // Parameter columns\n    if (paramKeys.length) {\n      columns.push({\n        headerName: 'Parameters',\n        groupId: COLUMN_TYPES.PARAMS,\n        children: paramKeys.map((paramKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: paramKey,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.PARAMS, paramKey),\n            field: createParamFieldName(paramKey),\n            tooltipField: createParamFieldName(paramKey),\n            initialHide: true,\n            initialWidth: 100,\n            sortable: true,\n            headerComponentParams: {\n              canonicalSortKey,\n            },\n            cellClassRules: {\n              'is-previewable-cell': () => true,\n              'is-ordered-by': cellClassIsOrderedBy,\n            },\n          };\n        }),\n      });\n    }\n\n    // Tags columns\n    if (tagKeys.length) {\n      columns.push({\n        headerName: 'Tags',\n        colId: COLUMN_TYPES.TAGS,\n        children: tagKeys.map((tagKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: tagKey,\n            initialHide: true,\n            initialWidth: 100,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.TAGS, tagKey),\n            field: createTagFieldName(tagKey),\n            tooltipField: createTagFieldName(tagKey),\n          };\n        }),\n      });\n    }\n\n    return columns;\n  }, [\n    onTogglePin,\n    onToggleVisibility,\n    onExpand,\n    compareExperiments,\n    cumulativeColumns,\n    isComparingRuns,\n    onDatasetSelected,\n    expandRows,\n    usingCompactViewport,\n  ]);\n\n  const canonicalSortKeys = useMemo(\n    () => [\n      ...getAdjustableAttributeColumns(true).map((key) => makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key)),\n      ...cumulativeColumns.paramKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key)),\n      ...cumulativeColumns.metricKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.METRICS, key)),\n      ...cumulativeColumns.tagKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n    ],\n    [cumulativeColumns],\n  );\n\n  useEffect(() => {\n    if (!columnApi || isComparingRuns) {\n      return;\n    }\n    for (const canonicalKey of canonicalSortKeys) {\n      const visible = selectedColumns.includes(canonicalKey);\n      columnApi.setColumnVisible(canonicalKey, visible);\n    }\n  }, [selectedColumns, columnApi, canonicalSortKeys, isComparingRuns]);\n\n  return columnSet;\n};\n\nexport const EXPERIMENTS_DEFAULT_COLUMN_SETUP = {\n  initialWidth: 100,\n  autoSizePadding: 0,\n  headerComponentParams: { menuIcon: 'fa-bars' },\n  resizable: true,\n  filter: true,\n  suppressMenu: true,\n  suppressMovable: true,\n};\n","import { BeakerIcon, Button, Empty, FilterIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { LoggingRunsDocUrl } from '../../../../../common/constants';\n\n/**\n * This component displays information about no results being displayed in runs tample,\n * either due to no runs recorded in an experiment at all or due to currently used filters.\n */\nexport const ExperimentViewRunsEmptyTable = ({\n  isFiltered,\n  onClearFilters,\n}: {\n  onClearFilters: () => void;\n  isFiltered: boolean;\n}) => {\n  const getLearnMoreLinkUrl = () => LoggingRunsDocUrl;\n\n  return (\n    <div css={styles.noResultsWrapper}>\n      <div css={styles.noResults}>\n        {isFiltered ? (\n          <Empty\n            button={\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsemptytable.tsx_35\"\n                type=\"primary\"\n                onClick={onClearFilters}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Clear filters\"\n                  description=\"Label for a button that clears all filters, visible on a experiment runs page next to a empty state when all runs have been filtered out\"\n                />\n              </Button>\n            }\n            description={\n              <FormattedMessage\n                defaultMessage=\"All runs in this experiment have been filtered. Change or clear filters to view runs.\"\n                description=\"Empty state description text for experiment runs page when all runs have been filtered out\"\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"All runs are filtered\"\n                description=\"Empty state title text for experiment runs page when all runs have been filtered out\"\n              />\n            }\n            image={<FilterIcon />}\n          />\n        ) : (\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No runs have been logged yet. <link>Learn more</link> about how to create ML model training runs in this experiment.\"\n                description=\"Empty state description text for experiment runs page when no runs are logged in the experiment\"\n                values={{\n                  link: (chunks: any) => (\n                    <a target=\"_blank\" href={getLearnMoreLinkUrl()} rel=\"noreferrer\">\n                      {chunks}\n                    </a>\n                  ),\n                }}\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"No runs logged\"\n                description=\"Empty state title text for experiment runs page when no runs are logged in the experiment\"\n              />\n            }\n            image={<BeakerIcon />}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  noResults: {\n    maxWidth: 360,\n  },\n  noResultsWrapper: (theme: Theme) => ({\n    marginTop: theme.spacing.lg,\n    inset: 0,\n    backgroundColor: theme.colors.backgroundPrimary,\n    position: 'absolute' as const,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n};\n","import { Button, PlusCircleIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Width of the CTA column\n */\nconst COLUMN_CTA_WIDTH = 180;\n\n/**\n * CSS classes used internally\n */\nconst CLASS_OUT_OF_VIEWPORT = 'is-out-of-viewport';\nconst CLASS_IS_HIDDEN = 'is-hidden';\nconst CLASS_IS_MINIMIZED = 'is-minimized';\n\n/**\n * List all necessary agGrid sub-element classes\n */\nconst AG_GRID_CLS = {\n  ROOT: '.ag-root',\n  LEFT_COLS_CONTAINER: '.ag-pinned-left-cols-container',\n  FULL_WIDTH_ROW: '.ag-full-width-row',\n  COLS_CONTAINER: '.ag-center-cols-container',\n  HEADER: '.ag-header',\n  BODY_VIEWPORT: '.ag-body-viewport',\n};\n\ninterface ExperimentViewRunsTableAddColumnCTAProps {\n  onClick: () => void;\n  gridContainerElement: HTMLElement | null;\n  isInitialized: boolean;\n  visible?: boolean;\n  moreRunsAvailable?: boolean;\n  moreAvailableRunsTableColumnCount?: number;\n}\n\n/**\n * Component displaying dynamic table column with \"add metrics and parameters\" CTA.\n *\n * Sample usage:\n *\n * const [gridInitialized, setGridInitialized] = useState(false);\n *\n * return (\n *   <div ref={containerElement}>\n *     <AgGrid onGridReady={() => setGridInitialized(true)} {...} />\n *     <ExperimentViewRunsTableAddColumnCTA\n *       gridContainerElement={containerElement.current}\n *       isInitialized={gridInitialized}\n *       onAddColumnClicked={onAddColumnClicked}\n *       visible={!isLoading}\n *       moreAvailableRunsTableColumnCount={3}\n *     />\n *   </div>\n * );\n */\nexport const ExperimentViewRunsTableAddColumnCTA = ({\n  onClick,\n  gridContainerElement,\n  isInitialized,\n  visible,\n  moreRunsAvailable,\n  moreAvailableRunsTableColumnCount = 0,\n}: ExperimentViewRunsTableAddColumnCTAProps) => {\n  const ctaRef = useRef<HTMLDivElement>(null);\n\n  const savedContainerRef = useRef<HTMLElement>();\n  const immediateMoreRunsAvailable = useRef<boolean>(Boolean(moreRunsAvailable));\n\n  // Save immediate value of \"moreRunsAvailable\" so the fresh version\n  // will be accessible within the resize observer\n  useEffect(() => {\n    immediateMoreRunsAvailable.current = Boolean(moreRunsAvailable);\n  }, [moreRunsAvailable]);\n\n  const initialize = useCallback((containerElement: HTMLElement) => {\n    if (!ctaRef.current || !window.ResizeObserver || !containerElement) {\n      return undefined;\n    }\n\n    const targetElement = ctaRef.current;\n\n    /**\n     * On initialization, first gather all the agGrid sub-elements\n     */\n    const rootElement = containerElement.querySelector(AG_GRID_CLS.ROOT);\n    const refLeftElem = containerElement.querySelector(AG_GRID_CLS.LEFT_COLS_CONTAINER);\n    const refCenterElem = containerElement.querySelector(AG_GRID_CLS.COLS_CONTAINER);\n    const refHeaderElem = containerElement.querySelector(AG_GRID_CLS.HEADER);\n    const refBodyViewport = containerElement.querySelector(AG_GRID_CLS.BODY_VIEWPORT);\n\n    /**\n     * Initialize variables used for position calculation\n     */\n    let gridAreaWidth = 0;\n    let leftColContainerWidth = 0;\n    let leftColContainerHeight = 0;\n    let centerColContainerWidth = 0;\n    let colContainerHeight = 0;\n    let headerHeight = 0;\n\n    /**\n     * Execute only if all elements are in place\n     */\n    if (refLeftElem && refCenterElem && refHeaderElem && rootElement && refBodyViewport) {\n      /**\n       * Hook up an resize observer\n       */\n      const resizeObserver = new ResizeObserver((entries) => {\n        /**\n         * For every changed element, gather the exact dimensions\n         */\n        for (const entry of entries) {\n          if (entry.target === rootElement) {\n            gridAreaWidth = entry.contentRect.width;\n          }\n          if (entry.target === refLeftElem) {\n            leftColContainerWidth = entry.contentRect.width;\n            leftColContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refBodyViewport) {\n            colContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refHeaderElem) {\n            headerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refCenterElem) {\n            centerColContainerWidth = entry.contentRect.width;\n          }\n        }\n\n        /**\n         * Our \"left\" position will be offset by column container widths\n         */\n        const calculatedLeft = leftColContainerWidth + centerColContainerWidth;\n\n        /**\n         * Our \"top\"  position will be offset by the header height\n         */\n        const calculatedTop = headerHeight;\n\n        /**\n         * If the column is out of viewport (expanding out of the root element),\n         * add proper CSS class to hide it\n         */\n        const isOutOfViewport = calculatedLeft + COLUMN_CTA_WIDTH >= gridAreaWidth;\n        isOutOfViewport\n          ? savedContainerRef.current?.classList.add(CLASS_OUT_OF_VIEWPORT)\n          : savedContainerRef.current?.classList.remove(CLASS_OUT_OF_VIEWPORT);\n\n        // Check if \"load more\" button is visible\n        const loadMoreRowHeight = immediateMoreRunsAvailable.current ? 32 : 0;\n\n        // If the visible row set takes only portion of the table height-wise (leftColContainerHeight < colContainerHeight),\n        // let's contract our CTA a little so \"load more\" button will fit in. If it takes whole area, do not reduce its height.\n        const calculatedHeight =\n          leftColContainerHeight < colContainerHeight ? leftColContainerHeight - loadMoreRowHeight : colContainerHeight;\n\n        /**\n         * If the available height is too low, add a class that indicates\n         * that we should display minimized version\n         */\n        const shouldBeMinimized = calculatedHeight < 100;\n        shouldBeMinimized\n          ? savedContainerRef.current?.classList.add(CLASS_IS_MINIMIZED)\n          : savedContainerRef.current?.classList.remove(CLASS_IS_MINIMIZED);\n\n        /**\n         * Finally, set proper values as CSS transform property. Use 3d transform\n         * to ensure hardware acceleration.\n         */\n        targetElement.style.transform = `translate3d(${calculatedLeft}px, ${calculatedTop}px, 0)`;\n\n        /**\n         * Set target height and add 1px to accomodate the border.\n         */\n        targetElement.style.height = `${calculatedHeight + 1}px`;\n      });\n\n      /**\n       * Setup observer with all the necessary elements.\n       */\n      resizeObserver.observe(refLeftElem);\n      resizeObserver.observe(refCenterElem);\n      resizeObserver.observe(refHeaderElem);\n      resizeObserver.observe(rootElement);\n      resizeObserver.observe(refBodyViewport);\n\n      /**\n       * After cleanup, disconnect the observer.\n       */\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, []);\n\n  useEffect(() => {\n    if (isInitialized && gridContainerElement) {\n      savedContainerRef.current = gridContainerElement;\n      initialize(gridContainerElement);\n    }\n  }, [initialize, isInitialized, gridContainerElement]);\n\n  /**\n   * This component works only if ResizeObserver is supported by the browser.\n   * If it's not supported, return nothing.\n   */\n  if (!window.ResizeObserver) {\n    return null;\n  }\n\n  return (\n    <div ref={ctaRef} css={styles.columnContainer} className={visible ? '' : CLASS_IS_HIDDEN}>\n      {visible && (\n        <div css={styles.buttonContainer}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunstableaddcolumncta.tsx_218\"\n            css={styles.button}\n            type=\"link\"\n            onClick={onClick}\n          >\n            <PlusCircleIcon css={styles.buttonIcon} />\n            <div css={styles.caption}>\n              <FormattedMessage\n                defaultMessage=\"Show more columns {count, select, 0 {} other {({count} total)}}\"\n                description=\"Label for a CTA button in experiment runs table which invokes column management dropdown\"\n                values={{\n                  count: moreAvailableRunsTableColumnCount,\n                }}\n              />\n            </div>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  columnContainer: (theme: Theme) => ({\n    width: COLUMN_CTA_WIDTH,\n    height: 0,\n    position: 'absolute' as const,\n    border: `1px solid ${theme.colors.borderDecorative}`,\n    borderTop: 0,\n    top: 0,\n    left: 0,\n    willChange: 'transform' as const,\n    transform: 'translate3d(0, 0, 0)',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'flex',\n      alignItems: 'center' as const,\n    },\n    [`&.${CLASS_IS_HIDDEN}, .${CLASS_OUT_OF_VIEWPORT} &`]: {\n      display: 'none',\n    },\n    pointerEvents: 'none' as const,\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  buttonContainer: (theme: Theme) => ({\n    top: 0,\n    paddingLeft: theme.spacing.lg,\n    paddingRight: theme.spacing.lg,\n    width: '100%',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      paddingTop: theme.spacing.xs,\n    },\n    pointerEvents: 'all' as const,\n  }),\n  button: { whiteSpace: 'pre-wrap' as const, width: '100%' },\n  buttonIcon: (theme: Theme) => ({ color: theme.colors.textSecondary }),\n  caption: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'none',\n    },\n  }),\n};\n","import { Spinner, Typography } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ExperimentViewRunsTableStatusBarProps {\n  isLoading: boolean;\n  allRunsCount: number;\n}\n\n// Strongifies the i18n string, used in <FormattedMessage> below\nconst strong = (text: string) => <strong>{text}</strong>;\n\nexport const ExperimentViewRunsTableStatusBar = ({\n  isLoading,\n  allRunsCount,\n}: ExperimentViewRunsTableStatusBarProps) => (\n  <div css={styles.statusBar}>\n    <Typography.Text size=\"sm\" color={isLoading ? 'secondary' : undefined}>\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage=\"<strong>{length}</strong> matching {length, plural, =0 {runs} =1 {run} other {runs}}\"\n        // eslint-disable-next-line max-len\n        description=\"Message for displaying how many runs match search criteria on experiment page\"\n        values={{\n          strong,\n          length: allRunsCount,\n        }}\n      />\n    </Typography.Text>\n    {isLoading && <Spinner size=\"small\" />}\n  </div>\n);\n\nconst styles = {\n  statusBar: (theme: Theme) => ({\n    height: 28,\n    display: 'flex',\n    gap: 8,\n    marginTop: -1,\n    position: 'relative' as const,\n    alignItems: 'center',\n    borderTop: `1px solid ${theme.colors.border}`,\n  }),\n};\n","import { GridApi, RowSelectedEvent, SelectionChangedEvent } from '@ag-grid-community/core';\nimport { useCallback, useRef } from 'react';\nimport { ExperimentPageViewState } from '../models/ExperimentPageViewState';\nimport { RunRowType } from '../utils/experimentPage.row-types';\nimport { uniqBy } from 'lodash';\n\n/**\n * Helper function that select particular run rows in the ag-grid.\n */\nconst agGridSelectRunRows = (runUuids: string[], isSelected: boolean, gridApi: GridApi) => {\n  gridApi.forEachNode((node) => {\n    if (node.data?.isLoadMoreRow) {\n      return;\n    }\n    const { runInfo, runDateAndNestInfo: childRunDateInfo } = node.data as RunRowType;\n\n    if (!runInfo) {\n      return;\n    }\n\n    const childrenRunUuid = runInfo.runUuid;\n    if (runUuids.includes(childrenRunUuid)) {\n      // If we found children being parents, mark their children\n      // to be selected as well.\n      if (childRunDateInfo?.childrenIds) {\n        runUuids.push(...childRunDateInfo.childrenIds);\n      }\n\n      node.setSelected(isSelected, false, true);\n    }\n  });\n};\n\n/**\n * Helper function that select particular group rows in the ag-grid.\n */\nconst agGridSelectGroupRows = (rowData: RunRowType[], gridApi: GridApi) => {\n  gridApi.forEachNode((node) => {\n    const data: RunRowType = node.data;\n    if (!data.groupParentInfo) {\n      return;\n    }\n\n    // If all runs belonging to the group are selected, select the group\n    if (data.groupParentInfo.runUuids.every((runUuid) => rowData.some((row) => row.runUuid === runUuid))) {\n      node.setSelected(true, false, true);\n    }\n\n    // If none of the runs belonging to the group are selected, deselect the group\n    if (!data.groupParentInfo.runUuids.some((runUuid) => rowData.some((row) => row.runUuid === runUuid))) {\n      node.setSelected(false, false, true);\n    }\n  });\n};\n\n/**\n * Returns handlers for row selection in the experiment runs table.\n * Supports groups, nested runs and regular flat hierarchy.\n */\nexport const useExperimentTableSelectRowHandler = (\n  updateViewState: (newPartialViewState: Partial<ExperimentPageViewState>) => void,\n) => {\n  const onSelectionChange = useCallback(\n    ({ api }: SelectionChangedEvent) => {\n      const selectedUUIDs: string[] = api\n        .getSelectedRows()\n        // Filter out \"load more\" and group rows\n        .filter((row) => row.runInfo)\n        .map(({ runInfo }) => runInfo.runUuid);\n      updateViewState({\n        runsSelected: selectedUUIDs.reduce((aggregate, curr) => ({ ...aggregate, [curr]: true }), {}),\n      });\n    },\n    [updateViewState],\n  );\n\n  const handleRowSelected = useCallback((event: RowSelectedEvent) => {\n    // Let's check if the actual number of selected rows have changed\n    // to avoid empty runs\n    const isSelected = Boolean(event.node.isSelected());\n\n    // We will continue only if the selected row has properly set runDateInfo\n    const { runDateAndNestInfo, runInfo, groupParentInfo } = event.data as RunRowType;\n\n    if (groupParentInfo) {\n      agGridSelectRunRows(groupParentInfo.runUuids, isSelected, event.api);\n    }\n\n    if (!runDateAndNestInfo) {\n      return;\n    }\n    const { isParent, expanderOpen, childrenIds } = runDateAndNestInfo;\n\n    // We will continue only if the selected row is a parent containing\n    // children and is actually expanded\n    if (isParent && expanderOpen && childrenIds) {\n      const childrenIdsToSelect = childrenIds;\n      agGridSelectRunRows(childrenIdsToSelect, isSelected, event.api);\n    } else if (runInfo) {\n      // If we are selecting a run row, we need to select other runs with the same UUID\n      agGridSelectRunRows([runInfo.runUuid], isSelected, event.api);\n\n      // Next, we need to (de)select the group row if all runs belonging to the group are (de)selected\n      const selectedRunRows = uniqBy(\n        event.api.getSelectedRows().filter((row) => Boolean(row.runUuid)),\n        'runUuid',\n      );\n      agGridSelectGroupRows(selectedRunRows, event.api);\n    }\n  }, []);\n\n  return { handleRowSelected, onSelectionChange };\n};\n","import type { CellClickedEvent, ColumnApi, GridApi, GridReadyEvent } from '@ag-grid-community/core';\nimport { type CSSObject, Interpolation, Theme } from '@emotion/react';\nimport cx from 'classnames';\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { MLFlowAgGridLoader } from '../../../../../common/components/ag-grid/AgGridLoader';\nimport Utils from '../../../../../common/utils/Utils';\nimport {\n  ExperimentEntity,\n  UpdateExperimentViewStateFn,\n  RunDatasetWithTags,\n  ExperimentViewRunsCompareMode,\n} from '../../../../types';\n\nimport { isSearchFacetsFilterUsed } from '../../utils/experimentPage.fetch-utils';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport {\n  EXPERIMENTS_DEFAULT_COLUMN_SETUP,\n  getFrameworkComponents,\n  getRowIsLoadMore,\n  getRowId,\n  useRunsColumnDefinitions,\n  getAdjustableAttributeColumns,\n} from '../../utils/experimentPage.column-utils';\nimport { makeCanonicalSortKey } from '../../utils/experimentPage.common-utils';\nimport { EXPERIMENT_RUNS_TABLE_ROW_HEIGHT } from '../../utils/experimentPage.common-utils';\nimport { RunRowType } from '../../utils/experimentPage.row-types';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { createLoadMoreRow } from './cells/LoadMoreRowRenderer';\nimport { ExperimentViewRunsEmptyTable } from './ExperimentViewRunsEmptyTable';\nimport { ExperimentViewRunsTableAddColumnCTA } from './ExperimentViewRunsTableAddColumnCTA';\nimport { ExperimentViewRunsTableStatusBar } from './ExperimentViewRunsTableStatusBar';\nimport { shouldUseRunRowsVisibilityMap } from '../../../../../common/utils/FeatureUtils';\nimport { getDatasetsCellHeight } from './cells/DatasetsCellRenderer';\nimport { PreviewSidebar } from '../../../../../common/components/PreviewSidebar';\nimport { ATTRIBUTE_COLUMN_LABELS, COLUMN_TYPES } from '../../../../constants';\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport {\n  createExperimentPageSearchFacetsState,\n  ExperimentPageSearchFacetsState,\n} from '../../models/ExperimentPageSearchFacetsState';\nimport { useExperimentTableSelectRowHandler } from '../../hooks/useExperimentTableSelectRowHandler';\nimport { useToggleRowVisibilityCallback } from '../../hooks/useToggleRowVisibilityCallback';\nimport { ExperimentViewRunsTableHeaderContextProvider } from './ExperimentViewRunsTableHeaderContext';\nimport { useRunsHighlightTableRow } from '../../../runs-charts/hooks/useRunsHighlightTableRow';\nimport { isEmpty } from 'lodash';\n\nconst ROW_BUFFER = 101; // How many rows to keep rendered, even ones not visible\n\nexport interface ExperimentViewRunsTableProps {\n  /**\n   * Actual set of prepared row data to be rendered\n   */\n  rowsData: RunRowType[];\n\n  /**\n   * Helper data set with metric, param and tag keys\n   */\n  runsData: ExperimentRunsSelectorResult;\n\n  experiments: ExperimentEntity[];\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  isLoading: boolean;\n  moreRunsAvailable: boolean;\n  onAddColumnClicked: () => void;\n  loadMoreRunsFunc: () => void;\n  onDatasetSelected?: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows: boolean;\n  uiState: ExperimentPageUIState;\n  compareRunsMode: ExperimentViewRunsCompareMode;\n}\n\nexport const ExperimentViewRunsTable = React.memo(\n  // eslint-disable-next-line complexity\n  ({\n    experiments,\n    searchFacetsState,\n    runsData,\n    isLoading,\n    moreRunsAvailable,\n    updateViewState,\n    onAddColumnClicked,\n    rowsData,\n    loadMoreRunsFunc,\n    onDatasetSelected,\n    expandRows,\n    viewState,\n    uiState,\n    compareRunsMode,\n  }: ExperimentViewRunsTableProps) => {\n    const { theme } = useDesignSystemTheme();\n    const updateUIState = useUpdateExperimentViewUIState();\n    const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n\n    const { orderByKey, orderByAsc } = searchFacetsState;\n\n    // If using new view state model, use `uiState` instead of `searchFacetsState`\n    const {\n      // Get relevant column and run info from persisted UI state\n      selectedColumns,\n      runsPinned,\n      runsHidden,\n      runListHidden,\n    } = uiState;\n\n    const isComparingRuns = compareRunsMode !== 'TABLE';\n\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n\n    const [gridApi, setGridApi] = useState<GridApi>();\n    const [columnApi, setColumnApi] = useState<ColumnApi>();\n    const prevSelectRunUuids = useRef<string[]>([]);\n\n    const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(tagsList), [tagsList]);\n\n    const containerElement = useRef<HTMLDivElement>(null);\n    // Flag indicating if there are any rows that can be expanded\n    const expandersVisible = useMemo(() => rowsData.some((row) => row.runDateAndNestInfo?.hasExpander), [rowsData]);\n\n    const toggleRowExpanded = useCallback(\n      (parentId: string) =>\n        updateUIState(({ runsExpanded: currentRunsExpanded, ...state }: ExperimentPageUIState) => ({\n          ...state,\n          runsExpanded: { ...currentRunsExpanded, [parentId]: !currentRunsExpanded[parentId] },\n        })),\n      [updateUIState],\n    );\n\n    const togglePinnedRow = useCallback(\n      (uuid: string) => {\n        updateUIState((existingFacets: ExperimentPageUIState) => ({\n          ...existingFacets,\n          runsPinned: !existingFacets.runsPinned.includes(uuid)\n            ? [...existingFacets.runsPinned, uuid]\n            : existingFacets.runsPinned.filter((r) => r !== uuid),\n        }));\n      },\n      [updateUIState],\n    );\n\n    // A modern version of row visibility toggle function, supports \"show all\", \"show first n runs\" options\n    const toggleRowVisibility = useToggleRowVisibilityCallback(rowsData, uiState.useGroupedValuesInCharts);\n\n    const gridReadyHandler = useCallback((params: GridReadyEvent) => {\n      setGridApi(params.api);\n      setColumnApi(params.columnApi);\n    }, []);\n\n    const { handleRowSelected, onSelectionChange } = useExperimentTableSelectRowHandler(updateViewState);\n\n    const allRunsHidden = useMemo(() => {\n      if (shouldUseRunRowsVisibilityMap()) {\n        return rowsData.every((row) => row.hidden);\n      }\n      return runsData.runInfos.every(({ runUuid }) => runsHidden.includes(runUuid));\n    }, [runsData, rowsData, runsHidden]);\n\n    // Check if at least one run has custom visibility settings\n    const usingCustomVisibility = shouldUseRunRowsVisibilityMap() && !isEmpty(uiState.runsVisibilityMap);\n\n    const columnDefs = useRunsColumnDefinitions({\n      selectedColumns,\n      onExpand: toggleRowExpanded,\n      compareExperiments: experiments.length > 1,\n      onTogglePin: togglePinnedRow,\n      onToggleVisibility: toggleRowVisibility,\n      metricKeyList,\n      paramKeyList,\n      tagKeyList: filteredTagKeys,\n      columnApi,\n      isComparingRuns,\n      onDatasetSelected,\n      expandRows,\n      runsHiddenMode: uiState.runsHiddenMode,\n    });\n\n    const gridSizeHandler = useCallback(\n      (api: GridApi) => {\n        if (api && isComparingRuns) {\n          try {\n            api.sizeColumnsToFit();\n          } catch {\n            // ag-grid occasionally throws an error when trying to size columns while its internal ref is lost\n            // We can't do much about it, so the exception is consumed\n          }\n        }\n      },\n      [isComparingRuns],\n    );\n\n    useEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n\n      if (isLoading) {\n        gridApi.showLoadingOverlay();\n      } else {\n        gridApi.hideOverlay();\n\n        // If there are more runs available in the API, append\n        // additional special row that will display \"Load more\" button\n        if (rowsData.length && moreRunsAvailable) {\n          gridApi.setRowData([...rowsData, createLoadMoreRow()]);\n          gridSizeHandler(gridApi);\n          return;\n        }\n\n        gridApi.setRowData(rowsData);\n        gridSizeHandler(gridApi);\n      }\n    }, [gridApi, rowsData, isLoading, moreRunsAvailable, loadMoreRunsFunc, gridSizeHandler]);\n\n    // Count all columns available for selection\n    const allAvailableColumnsCount = useMemo(() => {\n      const attributeColumnCount = getAdjustableAttributeColumns(experiments.length > 1).length;\n\n      const valuesColumnCount = metricKeyList.length + paramKeyList.length + filteredTagKeys.length;\n\n      return attributeColumnCount + valuesColumnCount;\n    }, [experiments.length, filteredTagKeys.length, metricKeyList.length, paramKeyList.length]);\n\n    const hasSelectedAllColumns = selectedColumns.length >= allAvailableColumnsCount;\n\n    const moreAvailableRunsTableColumnCount = Math.max(0, allAvailableColumnsCount - selectedColumns.length);\n\n    const allRunsCount = useMemo(\n      () =>\n        runsData.runInfos.filter(\n          (r) => runsPinned.includes(r.runUuid) || runsData.runUuidsMatchingFilter.includes(r.runUuid),\n        ).length,\n      [runsData, runsPinned],\n    );\n\n    useLayoutEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n      // Each time we switch to \"compare runs\" mode, we should\n      // maximize columns so \"run name\" column will take up all remaining space\n      if (isComparingRuns) {\n        // Selection feature is not supported in compare runs mode so we should deselect all\n        gridApi.deselectAll();\n        gridApi.sizeColumnsToFit();\n      }\n      gridApi.resetRowHeights();\n    }, [gridApi, isComparingRuns]);\n\n    /**\n     * Function used by ag-grid to calculate each row's height.\n     * In this case, it's based on a datasets cell size.\n     */\n\n    const rowHeightGetterFn = useCallback(\n      // if is comparing runs, use the default row height\n      (row: { data: RunRowType }) => {\n        if (isComparingRuns || !expandRows) {\n          return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT;\n        }\n        const datasetColumnId = makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.DATASET);\n        const datasetColumnShown = selectedColumns.includes(datasetColumnId);\n        // if not comparing runs, use the datasets cell height\n        return getDatasetsCellHeight(datasetColumnShown, row);\n      },\n      [selectedColumns, isComparingRuns, expandRows],\n    );\n\n    useEffect(() => {\n      // Enabling certain columns (datasets) will change our row height calculation,\n      // let's recalculate them\n      gridApi?.resetRowHeights();\n    }, [gridApi, selectedColumns, expandRows]);\n\n    const [sidebarPreviewData, setSidebarPreviewData] = useState<{\n      value: string;\n      header: string;\n    } | null>(null);\n\n    const handleCellClicked = useCallback(\n      ({ column, data, value }: CellClickedEvent) => {\n        const columnGroupId = column.getParent()?.getGroupId();\n        const shouldInvokePreviewSidebar =\n          columnGroupId === COLUMN_TYPES.METRICS || columnGroupId === COLUMN_TYPES.PARAMS;\n\n        if (shouldInvokePreviewSidebar) {\n          setSidebarPreviewData({\n            value,\n            header: `Run name: ${data.runName}, Column name: ${column.getColDef().headerTooltip}`,\n          });\n          updateViewState({ previewPaneVisible: true });\n        }\n      },\n      [updateViewState],\n    );\n\n    const displayAddColumnsCTA = !hasSelectedAllColumns && !isComparingRuns && rowsData.length > 0;\n    const displayPreviewSidebar = !isComparingRuns && viewState.previewPaneVisible;\n    const displayRunsTable = !runListHidden || !isComparingRuns;\n    const displayStatusBar = !runListHidden;\n    const displayEmptyState = rowsData.length < 1 && !isLoading && displayRunsTable;\n\n    const tableContext = useMemo(() => ({ orderByAsc, orderByKey }), [orderByAsc, orderByKey]);\n\n    const { cellMouseOverHandler, cellMouseOutHandler } = useRunsHighlightTableRow(containerElement);\n\n    const gridStyles = useExperimentAgGridTableStyles();\n\n    return (\n      <div\n        css={(theme) => ({\n          display: 'grid',\n          flex: 1,\n          gridTemplateColumns: displayPreviewSidebar ? '1fr auto' : '1fr',\n          borderTop: `1px solid ${theme.colors.border}`,\n        })}\n        className={isComparingRuns ? 'is-table-comparing-runs-mode' : undefined}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            position: 'relative',\n          }}\n        >\n          <div\n            ref={containerElement}\n            className={cx('ag-theme-balham ag-grid-sticky', {\n              'ag-grid-expanders-visible': expandersVisible,\n              'is-table-comparing-runs-mode': isComparingRuns,\n            })}\n            css={[gridStyles, { display: displayRunsTable ? 'block' : 'hidden', height: '100%' }]}\n            aria-hidden={!displayRunsTable}\n          >\n            <ExperimentViewRunsTableHeaderContextProvider\n              runsHiddenMode={uiState.runsHiddenMode}\n              usingCustomVisibility={usingCustomVisibility}\n              useGroupedValuesInCharts={Boolean(uiState.groupBy) && uiState.useGroupedValuesInCharts}\n              allRunsHidden={allRunsHidden}\n            >\n              <MLFlowAgGridLoader\n                context={tableContext}\n                defaultColDef={EXPERIMENTS_DEFAULT_COLUMN_SETUP}\n                columnDefs={columnDefs}\n                rowSelection=\"multiple\"\n                onGridReady={gridReadyHandler}\n                onSelectionChanged={onSelectionChange}\n                getRowHeight={rowHeightGetterFn}\n                headerHeight={EXPERIMENT_RUNS_TABLE_ROW_HEIGHT}\n                onRowSelected={handleRowSelected}\n                suppressRowClickSelection\n                suppressColumnMoveAnimation\n                suppressScrollOnNewData\n                isFullWidthRow={getRowIsLoadMore}\n                fullWidthCellRenderer=\"LoadMoreRowRenderer\"\n                fullWidthCellRendererParams={{ loadMoreRunsFunc }}\n                suppressFieldDotNotation\n                enableCellTextSelection\n                components={getFrameworkComponents()}\n                suppressNoRowsOverlay\n                loadingOverlayComponent=\"loadingOverlayComponent\"\n                loadingOverlayComponentParams={{ showImmediately: true }}\n                getRowId={getRowId}\n                rowBuffer={ROW_BUFFER}\n                onCellClicked={handleCellClicked}\n                onGridSizeChanged={({ api }) => gridSizeHandler(api)}\n                onCellMouseOver={cellMouseOverHandler}\n                onCellMouseOut={cellMouseOutHandler}\n              />\n            </ExperimentViewRunsTableHeaderContextProvider>\n            {displayAddColumnsCTA && (\n              <ExperimentViewRunsTableAddColumnCTA\n                gridContainerElement={containerElement.current}\n                isInitialized={Boolean(gridApi)}\n                onClick={onAddColumnClicked}\n                visible={!isLoading}\n                moreRunsAvailable={moreRunsAvailable}\n                moreAvailableRunsTableColumnCount={moreAvailableRunsTableColumnCount}\n              />\n            )}\n          </div>\n          {displayEmptyState && (\n            <ExperimentViewRunsEmptyTable\n              onClearFilters={() => {\n                setUrlSearchFacets(createExperimentPageSearchFacetsState());\n              }}\n              isFiltered={isSearchFacetsFilterUsed(searchFacetsState)}\n            />\n          )}\n          {displayStatusBar && <ExperimentViewRunsTableStatusBar allRunsCount={allRunsCount} isLoading={isLoading} />}\n        </div>\n        {displayPreviewSidebar && (\n          <PreviewSidebar\n            content={sidebarPreviewData?.value}\n            copyText={sidebarPreviewData?.value}\n            headerText={sidebarPreviewData?.header}\n            onClose={() => updateViewState({ previewPaneVisible: false })}\n            empty={\n              <Empty\n                description={\n                  <FormattedMessage\n                    defaultMessage=\"Select a cell to display preview\"\n                    description=\"Experiment page > table view > preview sidebar > nothing selected\"\n                  />\n                }\n              />\n            }\n          />\n        )}\n      </div>\n    );\n  },\n);\n\n/**\n * Concrete named definitions for colors used in this agGrid\n */\nconst getGridColors = (theme: Theme) => ({\n  rowForeground: theme.colors.textPrimary, // regular row background\n  rowBackground: theme.colors.backgroundPrimary, // regular row background\n  rowBackgroundHover: theme.colors.tableBackgroundUnselectedHover,\n  rowBackgroundSelected: theme.colors.tableBackgroundSelectedDefault,\n  rowBackgroundHoverSelected: theme.colors.tableBackgroundSelectedHover,\n  columnSortedBy: `${theme.colors.blue400}1F`,\n  headerBackground: theme.colors.backgroundSecondary,\n  headerTextColor: theme.colors.textSecondary, // directly from Figma design\n  headerGroupTextColor: theme.colors.textSecondary, // directly from Figma design\n  borderColor: theme.colors.borderDecorative, // border between header and content and scrollable areas\n  headerBorderColor: 'transparent', // borders inside the header\n  checkboxBorderColor: theme.colors.actionDefaultBorderDefault,\n  checkboxBorderColorChecked: theme.colors.backgroundPrimary,\n  checkboxBackgroundColorChecked: theme.colors.actionPrimaryBackgroundDefault,\n  overlayBackground: `${theme.colors.backgroundSecondary}99`, // color for the loading overlay\n});\n\nconst styles = {\n  agGridOverrides: (theme: Theme, usingCustomHeaderComponent = true): CSSObject => {\n    const gridColors = getGridColors(theme);\n    return {\n      height: '100%',\n      position: 'relative',\n      '&.ag-theme-balham': {\n        // Set up internal variable values\n        '--ag-border-color': gridColors.borderColor,\n        '--ag-row-border-color': gridColors.borderColor,\n        '--ag-foreground-color': gridColors.rowForeground,\n        '--ag-background-color': gridColors.rowBackground,\n        '--ag-odd-row-background-color': gridColors.rowBackground,\n        '--ag-row-hover-color': gridColors.rowBackgroundHover,\n        '--ag-selected-row-background-color': gridColors.rowBackgroundSelected,\n        '--ag-header-foreground-color': gridColors.headerTextColor,\n        '--ag-header-background-color': gridColors.headerBackground,\n        '--ag-modal-overlay-background-color': gridColors.overlayBackground,\n\n        // Makes row header sticky\n        '&.ag-grid-sticky .ag-header': {\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        },\n        '&.ag-grid-sticky .ag-root': {\n          overflow: 'visible',\n        },\n        '&.ag-grid-sticky .ag-root-wrapper': {\n          border: '0',\n          borderRadius: '4px',\n          overflow: 'visible',\n        },\n\n        // When scrollbars are forced to be visible in the system, ag-grid will sometimes\n        // display a scrollbar that is not needed. We hide it here on compact mode.\n        '.is-table-comparing-runs-mode & .ag-body-horizontal-scroll.ag-scrollbar-invisible': {\n          display: 'none',\n        },\n\n        // Adds a static line between column group header row and column headers\n        '.ag-header::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: EXPERIMENT_RUNS_TABLE_ROW_HEIGHT,\n          left: 0,\n          right: 0,\n          height: 1,\n          backgroundColor: gridColors.borderColor,\n        },\n\n        // Line height for cell contents is the row height minus the border\n        '.ag-cell': {\n          // lineHeight: `min(var(--ag-line-height, ${ROW_HEIGHT - 2}px), ${ROW_HEIGHT - 2}px)`,\n          display: 'flex',\n          overflow: 'hidden',\n          '& > .ag-cell-wrapper': {\n            overflow: 'hidden',\n          },\n        },\n\n        // Padding fixes for the header (if custom header component is used)\n        '.ag-header-cell': usingCustomHeaderComponent\n          ? {\n              padding: 0,\n            }\n          : undefined,\n\n        '.ag-header-cell .ag-checkbox': usingCustomHeaderComponent\n          ? {\n              padding: '0 7px',\n              borderLeft: '1px solid transparent', // to match it with the cell sizing\n            }\n          : undefined,\n\n        '.ag-cell.is-ordered-by, .ag-header-cell > .is-ordered-by': {\n          backgroundColor: gridColors.columnSortedBy,\n        },\n        '.ag-header-row': {\n          '--ag-border-color': gridColors.headerBorderColor,\n        },\n        '.ag-header-row.ag-header-row-column-group': {\n          '--ag-header-foreground-color': gridColors.headerGroupTextColor,\n        },\n        '.ag-row.ag-row-selected.ag-row-hover': {\n          backgroundColor: gridColors.rowBackgroundHoverSelected,\n        },\n        '.ag-row.is-highlighted': {\n          backgroundColor: gridColors.rowBackgroundHoverSelected,\n        },\n        // Hides resize guidelines when header is not hovered\n        '.ag-header:not(:hover) .ag-header-cell::after, .ag-header:not(:hover) .ag-header-group-cell::after': {\n          opacity: 0,\n        },\n        '.ag-pinned-left-header': {\n          borderRight: 'none',\n        },\n\n        // Fixed for loading overlay, should be above \"load more\" button\n        '.ag-overlay-loading-wrapper': {\n          paddingTop: theme.spacing.md * 4,\n          alignItems: 'center',\n          zIndex: 2,\n        },\n        '.ag-overlay-loading-wrapper .ag-react-container': {\n          flex: 1,\n        },\n\n        // Adds border after the last column to separate contents from \"Add columns\" CTA\n        '.ag-center-cols-container': {\n          minHeight: 0,\n        },\n\n        '.ag-full-width-row': {\n          borderBottom: 0,\n          backgroundColor: 'transparent',\n          zIndex: 1,\n          '&.ag-row-hover': {\n            backgroundColor: 'transparent',\n          },\n        },\n\n        // Centers vertically and styles the checkbox cell\n        '.is-checkbox-cell': {\n          display: 'flex',\n          alignItems: 'center',\n          paddingLeft: 7, // will end up in 8px due to 1px of transparent border on the left\n          '.is-multiline-cell .ag-cell-value': {\n            height: '100%',\n          },\n        },\n\n        // Change appearance of the previewable cells\n        '.is-previewable-cell': {\n          cursor: 'pointer',\n        },\n\n        // Header checkbox cell will get the same background as header only if it's unchecked\n        '.ag-header-cell .ag-checkbox .ag-input-wrapper:not(.ag-indeterminate):not(.ag-checked)': {\n          '--ag-checkbox-background-color': gridColors.headerBackground,\n        },\n\n        // Distance from the checkbox to other icons (pin, visibility etc.)\n        '.ag-cell-wrapper .ag-selection-checkbox': {\n          marginRight: 20,\n        },\n\n        // Header and cell checkboxes will get same colors from the palette\n        '.is-checkbox-cell, .ag-header-cell .ag-checkbox': {\n          '.ag-checkbox-input-wrapper::after': {\n            color: gridColors.checkboxBorderColor,\n          },\n          '.ag-checkbox-input-wrapper.ag-checked': {\n            '--ag-checkbox-background-color': gridColors.checkboxBackgroundColorChecked,\n            '--ag-checkbox-checked-color': gridColors.checkboxBorderColorChecked,\n            '&::after': {\n              color: gridColors.checkboxBorderColorChecked,\n            },\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * Returns common styles to be used in ag-grid powered tables\n */\nexport const useExperimentAgGridTableStyles = ({\n  usingCustomHeaderComponent = true,\n}: { usingCustomHeaderComponent?: boolean } = {}) => {\n  const { theme } = useDesignSystemTheme();\n  return useMemo(() => styles.agGridOverrides(theme, usingCustomHeaderComponent), [theme, usingCustomHeaderComponent]);\n};\n","import { MLFLOW_SYSTEM_METRIC_PREFIX } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { KeyValueEntity, MetricEntitiesByName } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { useCallback, useMemo } from 'react';\nimport { RunsChartsRunData } from '../components/RunsCharts.common';\nimport { DifferenceCardAttributes, RunsChartsDifferenceCardConfig } from '../runs-charts.types';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\n\nconst DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE = '-';\nconst DIFFERENCE_EPSILON = 1e-6;\nexport const getDifferenceChartDisplayedValue = (val: any, places = 2) => {\n  if (typeof val === 'number') {\n    return val.toFixed(places);\n  } else if (typeof val === 'string') {\n    return val;\n  }\n  try {\n    return JSON.stringify(val);\n  } catch {\n    return DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE;\n  }\n};\n\nexport enum DifferenceChartCellDirection {\n  POSITIVE,\n  NEGATIVE,\n  SAME,\n}\nexport const differenceView = (a: any, b: any) => {\n  if (typeof a !== 'number' || typeof b !== 'number') {\n    return undefined;\n  } else {\n    const diff = a - b;\n    if (diff === 0) {\n      return { label: getDifferenceChartDisplayedValue(diff).toString(), direction: DifferenceChartCellDirection.SAME };\n    } else if (diff > 0) {\n      return { label: `+${getDifferenceChartDisplayedValue(diff)}`, direction: DifferenceChartCellDirection.POSITIVE };\n    } else {\n      return {\n        label: getDifferenceChartDisplayedValue(diff).toString(),\n        direction: DifferenceChartCellDirection.NEGATIVE,\n      };\n    }\n  }\n};\n\nexport const isDifferent = (a: any, b: any) => {\n  if (a === DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE || b === DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE) {\n    return false;\n  }\n  // Check if type a and b are the same\n  if (typeof a !== typeof b) {\n    return true;\n  } else if (typeof a === 'number' && typeof b === 'number') {\n    return Math.abs(a - b) > DIFFERENCE_EPSILON;\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a !== b;\n  }\n  return false;\n};\n\nexport const getDifferenceViewDataGroups = (\n  previewData: RunsChartsRunData[],\n  cardConfig: RunsChartsDifferenceCardConfig,\n  headingColumnId: string,\n  groupBy: RunsGroupByConfig | null,\n) => {\n  const getMetrics = (\n    filterCondition: (metric: string) => boolean,\n    runDataKeys: (data: RunsChartsRunData) => string[],\n    runDataAttribute: (\n      data: RunsChartsRunData,\n    ) =>\n      | MetricEntitiesByName\n      | Record<string, KeyValueEntity>\n      | Record<string, { key: string; value: string | number }>,\n  ) => {\n    // Get array of sorted keys\n    const keys = Array.from(new Set(previewData.flatMap((runData) => runDataKeys(runData))))\n      .filter((key) => filterCondition(key))\n      .sort();\n    const values = keys.flatMap((key: string) => {\n      const data: Record<string, string | number> = {};\n      let hasDifference = false;\n\n      previewData.forEach((runData, index) => {\n        // Set the key as runData.uuid and the value as the metric's value or DEFAULT_EMPTY_VALUE\n        data[runData.uuid] = runDataAttribute(runData)[key]\n          ? runDataAttribute(runData)[key].value\n          : DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE;\n        if (index > 0) {\n          const prev = previewData[index - 1];\n          if (isDifferent(data[prev.uuid], data[runData.uuid])) {\n            hasDifference = true;\n          }\n        }\n      });\n      if (cardConfig.showDifferencesOnly && !hasDifference) {\n        return [];\n      }\n      return [\n        {\n          [headingColumnId]: key,\n          ...data,\n        },\n      ];\n    });\n    return values;\n  };\n\n  const modelMetrics = getMetrics(\n    (metric: string) => !metric.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX),\n    (runData: RunsChartsRunData) => Object.keys(runData.metrics),\n    (runData: RunsChartsRunData) => runData.metrics,\n  );\n\n  const systemMetrics = getMetrics(\n    (metric: string) => metric.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX),\n    (runData: RunsChartsRunData) => Object.keys(runData.metrics),\n    (runData: RunsChartsRunData) => runData.metrics,\n  );\n\n  if (groupBy) {\n    return { modelMetrics, systemMetrics, parameters: [], tags: [], attributes: [] };\n  }\n\n  const parameters = getMetrics(\n    () => true,\n    (runData: RunsChartsRunData) => Object.keys(runData.params),\n    (runData: RunsChartsRunData) => runData.params,\n  );\n\n  const tags = getMetrics(\n    () => true,\n    (runData: RunsChartsRunData) => Utils.getVisibleTagValues(runData.tags).map(([key]) => key),\n    (runData: RunsChartsRunData) => runData.tags,\n  );\n\n  // Get attributes\n  const attributeGroups = [\n    DifferenceCardAttributes.USER,\n    DifferenceCardAttributes.SOURCE,\n    DifferenceCardAttributes.VERSION,\n    DifferenceCardAttributes.MODELS,\n  ];\n  const attributes = attributeGroups.flatMap((attribute) => {\n    const attributeData: Record<string, string | number> = {};\n    let hasDifference = false;\n    previewData.forEach((runData, index) => {\n      if (attribute === DifferenceCardAttributes.USER) {\n        const user = Utils.getUser(runData.runInfo ?? {}, runData.tags);\n        attributeData[runData.uuid] = user;\n      } else if (attribute === DifferenceCardAttributes.SOURCE) {\n        const source = Utils.getSourceName(runData.tags);\n        attributeData[runData.uuid] = source;\n      } else if (attribute === DifferenceCardAttributes.VERSION) {\n        const version = Utils.getSourceVersion(runData.tags);\n        attributeData[runData.uuid] = version;\n      } else {\n        const models = Utils.getLoggedModelsFromTags(runData.tags);\n        attributeData[runData.uuid] = models.join(',');\n      }\n      if (index > 0) {\n        const prev = previewData[index - 1];\n        if (isDifferent(attributeData[prev.uuid], attributeData[runData.uuid])) {\n          hasDifference = true;\n        }\n      }\n    });\n    if (cardConfig.showDifferencesOnly && !hasDifference) {\n      return [];\n    }\n    return [\n      {\n        [headingColumnId]: attribute,\n        ...attributeData,\n      },\n    ];\n  });\n  return { modelMetrics, systemMetrics, parameters, tags, attributes };\n};\n\nexport const DIFFERENCE_PLOT_EXPAND_COLUMN_ID = 'expand';\nexport const DIFFERENCE_PLOT_HEADING_COLUMN_ID = 'headingColumn';\n\n/**\n * Transforms an array of objects into a format suitable for rendering in a table.\n * Each object in the array represents a row in the table.\n * If all values in a row are JSON objects with the same keys, the row is transformed into a parent row with child rows.\n * Each child row represents a key-value pair from the JSON objects.\n * If a value in a row is not a JSON object or the JSON objects don't have the same keys, the row is not transformed.\n *\n * @param data - An array of objects. Each object represents a row in the table.\n * @returns An array of objects. Each object represents a row or a parent row with child rows in the table.\n */\nexport const getDifferencePlotJSONRows = (data: { [key: string]: string | number }[]) => {\n  const validateParseJSON = (value: string) => {\n    try {\n      const parsed = JSON.parse(value);\n      if (parsed === null || typeof parsed !== 'object' || Array.isArray(parsed) || Object.keys(parsed).length === 0) {\n        return null;\n      }\n      return parsed;\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const extractMaximumCommonSchema = (schema1: Record<any, any> | undefined, schema2: Record<any, any> | undefined) => {\n    if (schema1 !== undefined && Object.keys(schema1).length === 0) {\n      // This may not be a suitable object, return null\n      return null;\n    } else if (schema2 !== undefined && Object.keys(schema2).length === 0) {\n      return null;\n    }\n\n    const schema: Record<string, unknown> = {};\n\n    const collectKeys = (target: Record<any, any>, source: Record<any, any>) => {\n      for (const key in source) {\n        if (!target.hasOwnProperty(key) || target[key]) {\n          if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            target[key] = target[key] || {};\n            collectKeys(target[key], source[key]);\n          } else if (source[key] === DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE) {\n            target[key] = true;\n          } else {\n            target[key] = false;\n          }\n        }\n      }\n    };\n\n    schema1 !== undefined && collectKeys(schema, schema1);\n    schema2 !== undefined && collectKeys(schema, schema2);\n\n    return schema;\n  };\n\n  const getChildren = (\n    parsedRowWithoutHeadingCol: { [key: string]: Record<any, any> | undefined },\n    schema: Record<any, any>,\n  ): Record<string, any>[] => {\n    return Object.keys(schema).map((key) => {\n      if (typeof schema[key] === 'boolean') {\n        let result = {\n          key: key,\n          [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: key,\n        };\n        Object.keys(parsedRowWithoutHeadingCol).forEach((runUuid) => {\n          const value = parsedRowWithoutHeadingCol[runUuid]?.[key];\n          result = {\n            ...result,\n            [runUuid]: value === undefined ? DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE : value,\n          };\n        });\n        return result;\n      }\n      // Recurse\n      const newParsedRow: { [key: string]: Record<any, any> | undefined } = {};\n      Object.keys(parsedRowWithoutHeadingCol).forEach((runUuid) => {\n        newParsedRow[runUuid] = parsedRowWithoutHeadingCol[runUuid]?.[key];\n      });\n\n      return {\n        key: key,\n        [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: key,\n        children: getChildren(newParsedRow, schema[key]),\n      };\n    });\n  };\n\n  const isAllElementsJSON = (row: { [key: string]: string | number }) => {\n    let jsonSchema: Record<any, any> | undefined = undefined;\n    let isAllJson = true;\n    const parsedRow: Record<string, any> = {};\n\n    Object.keys(row).forEach((runUuid) => {\n      if (runUuid !== DIFFERENCE_PLOT_HEADING_COLUMN_ID) {\n        if (row[runUuid] !== DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE) {\n          const json = validateParseJSON(row[runUuid] as string);\n          parsedRow[runUuid] = json;\n          if (json === null) {\n            isAllJson = false;\n          } else {\n            const commonSchema = extractMaximumCommonSchema(jsonSchema, json);\n            if (commonSchema === null) {\n              isAllJson = false;\n            } else {\n              jsonSchema = commonSchema;\n            }\n          }\n        }\n      }\n    });\n    if (isAllJson && jsonSchema !== undefined) {\n      try {\n        return {\n          [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: row[DIFFERENCE_PLOT_HEADING_COLUMN_ID],\n          children: getChildren(parsedRow, jsonSchema),\n          key: row[DIFFERENCE_PLOT_HEADING_COLUMN_ID],\n        };\n      } catch {\n        return row;\n      }\n    } else {\n      return row;\n    }\n  };\n  return data.map(isAllElementsJSON);\n};\n","import {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  DashIcon,\n  Typography,\n  TypographyColor,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport {\n  DifferenceChartCellDirection,\n  differenceView,\n  getDifferenceChartDisplayedValue,\n} from '../../../utils/differenceView';\nimport { type CellContext } from '@tanstack/react-table';\nimport { DifferencePlotDataColumnDef, type DifferencePlotDataRow } from '../DifferenceViewPlot';\n\nconst CellDifference = ({ label, direction }: { label: string; direction: DifferenceChartCellDirection }) => {\n  const { theme } = useDesignSystemTheme();\n  let paragraphColor: TypographyColor | undefined = undefined;\n  let icon = null;\n  switch (direction) {\n    case DifferenceChartCellDirection.NEGATIVE:\n      paragraphColor = 'error';\n      icon = <ArrowDownIcon color=\"danger\" data-testid=\"negative-cell-direction\" />;\n      break;\n    case DifferenceChartCellDirection.POSITIVE:\n      paragraphColor = 'success';\n      icon = <ArrowUpIcon color=\"success\" data-testid=\"positive-cell-direction\" />;\n      break;\n    case DifferenceChartCellDirection.SAME:\n      paragraphColor = 'info';\n      icon = <DashIcon css={{ color: theme.colors.textSecondary }} data-testid=\"same-cell-direction\" />;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'inline-flex',\n        backgroundColor: theme.colors.actionDisabledBackground,\n        padding: `${theme.spacing.xs / 2}px ${theme.spacing.xs}px`,\n        fontSize: theme.typography.fontSizeSm,\n        borderRadius: theme.borders.borderRadiusSm,\n        userSelect: 'none',\n        gap: theme.spacing.xs,\n        alignItems: 'center',\n        svg: {\n          width: theme.typography.fontSizeSm,\n          height: theme.typography.fontSizeSm,\n        },\n        overflow: 'hidden',\n      }}\n    >\n      <Typography.Text size=\"sm\" color={paragraphColor} css={{ margin: 0 }} ellipsis>\n        {label}\n      </Typography.Text>\n      {icon}\n    </div>\n  );\n};\n\nexport const DifferencePlotDataCell = ({\n  getValue,\n  row: { original },\n  column: { columnDef },\n}: CellContext<DifferencePlotDataRow, DifferencePlotDataRow> & {\n  column: { columnDef: DifferencePlotDataColumnDef };\n  row: { original: Record<string, any> };\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { isBaseline, baselineColumnUuid, showChangeFromBaseline } = columnDef.meta ?? {};\n\n  const value = getValue();\n\n  if (isBaseline) {\n    return getDifferenceChartDisplayedValue(getValue());\n  }\n  if (value === undefined) {\n    return null;\n  }\n  const rowDifference = baselineColumnUuid ? differenceView(value, original[baselineColumnUuid]) : null;\n  return (\n    <span css={{ display: 'inline-flex', overflow: 'hidden', gap: theme.spacing.sm, alignItems: 'center' }}>\n      <Typography.Text ellipsis>{getDifferenceChartDisplayedValue(value)}</Typography.Text>\n      {rowDifference && showChangeFromBaseline && (\n        <CellDifference label={rowDifference.label} direction={rowDifference.direction} />\n      )}\n    </span>\n  );\n};\n","import { HeaderContext } from '@tanstack/react-table';\nimport { RunColorPill } from '../../../../experiment-page/components/RunColorPill';\nimport { Button, DropdownMenu, OverflowIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { type DifferencePlotDataColumnDef } from '../DifferenceViewPlot';\n\nexport const DifferencePlotRunHeaderCell = ({\n  column: { columnDef },\n}: {\n  column: {\n    columnDef: DifferencePlotDataColumnDef;\n  };\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const traceData = columnDef.meta?.traceData;\n  const updateBaselineColumnUuid = columnDef.meta?.updateBaselineColumnUuid;\n  if (!traceData) {\n    return null;\n  }\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'inline-flex',\n        overflow: 'hidden',\n        alignItems: 'center',\n        gap: theme.spacing.xs,\n        fontWeight: 'normal',\n      }}\n    >\n      <RunColorPill color={traceData.color} /> <Typography.Text ellipsis>{traceData?.displayName}</Typography.Text>\n      <div css={{ flex: 1 }} />\n      <DropdownMenu.Root>\n        <DropdownMenu.Trigger asChild>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            componentId=\"mlflow.charts.difference_plot.overflow_menu.trigger\"\n            icon={<OverflowIcon />}\n          />\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content>\n          <DropdownMenu.Item\n            componentId=\"mlflow.charts.difference_plot.overflow_menu.set_as_baseline\"\n            onClick={() => updateBaselineColumnUuid?.(traceData.uuid)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Set as baseline\"\n              description=\"In the run data difference comparison table, the label for an option to set particular experiment run as a baseline one - meaning other runs will be compared to it.\"\n            />\n          </DropdownMenu.Item>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    </div>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport {\n  CellContext,\n  ColumnDef,\n  ColumnDefTemplate,\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  Row,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport {\n  DifferenceCardConfigCompareGroup,\n  RunsChartsCardConfig,\n  RunsChartsDifferenceCardConfig,\n} from '../../runs-charts.types';\nimport {\n  DIFFERENCE_PLOT_EXPAND_COLUMN_ID,\n  DIFFERENCE_PLOT_HEADING_COLUMN_ID,\n  getDifferencePlotJSONRows,\n  getDifferenceViewDataGroups,\n} from '../../utils/differenceView';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { DifferencePlotDataCell } from './difference-view-plot/DifferencePlotDataCell';\nimport { DifferencePlotRunHeaderCell } from './difference-view-plot/DifferencePlotRunHeaderCell';\n\nexport type DifferencePlotDataColumnDef = ColumnDef<DifferencePlotDataRow> & {\n  meta?: {\n    traceData?: RunsChartsRunData;\n    updateBaselineColumnUuid: (uuid: string) => void;\n    isBaseline: boolean;\n    showChangeFromBaseline: boolean;\n    baselineColumnUuid?: string;\n  };\n};\n\nexport type DifferencePlotDataRow =\n  | Record<string, any>\n  | {\n      children: DifferencePlotDataRow[];\n      key: string;\n      [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: string;\n    };\n\nconst ExpandCell: ColumnDefTemplate<\n  CellContext<DifferencePlotDataRow, unknown> & { toggleExpand?: (row: Row<DifferencePlotDataRow>) => void }\n> = ({ row, toggleExpand }) => {\n  if (row.getCanExpand() && toggleExpand) {\n    return (\n      <Button\n        componentId=\"mlflow.charts.difference_plot.expand_button\"\n        size=\"small\"\n        type=\"link\"\n        onClick={() => toggleExpand(row)}\n        icon={row.getIsExpanded() ? <ChevronDownIcon /> : <ChevronRightIcon />}\n      />\n    );\n  }\n  return null;\n};\n\nexport const DifferenceViewPlot = ({\n  previewData,\n  cardConfig,\n  groupBy,\n  setCardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsDifferenceCardConfig;\n  groupBy: RunsGroupByConfig | null;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsDifferenceCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const { modelMetrics, systemMetrics, parameters, tags, attributes } = useMemo(\n    () => getDifferenceViewDataGroups(previewData, cardConfig, DIFFERENCE_PLOT_HEADING_COLUMN_ID, groupBy),\n    [previewData, cardConfig, groupBy],\n  );\n\n  const { baselineColumn, nonBaselineColumns } = useMemo(() => {\n    const dataTracesReverse = previewData.slice().reverse();\n    // baseline column (can be undefined if no baseline selected)\n    let baselineColumn = dataTracesReverse.find((runData) => runData.uuid === cardConfig.baselineColumnUuid);\n    if (baselineColumn === undefined && dataTracesReverse.length > 0) {\n      // Set the first column as baseline column\n      baselineColumn = dataTracesReverse[0];\n    }\n    // non-baseline columns\n    const nonBaselineColumns = dataTracesReverse.filter(\n      (runData) => baselineColumn === undefined || runData.uuid !== baselineColumn.uuid,\n    );\n    return { baselineColumn, nonBaselineColumns };\n  }, [previewData, cardConfig.baselineColumnUuid]);\n\n  const updateBaselineColumnUuid = useCallback(\n    (baselineColumnUuid: string) => {\n      setCardConfig?.((current) => ({\n        ...(current as RunsChartsDifferenceCardConfig),\n        baselineColumnUuid,\n      }));\n    },\n    [setCardConfig],\n  );\n\n  const dataRows = useMemo<DifferencePlotDataRow[]>(\n    () =>\n      cardConfig.compareGroups.reduce((acc: DifferencePlotDataRow[], group: DifferenceCardConfigCompareGroup) => {\n        switch (group) {\n          case DifferenceCardConfigCompareGroup.MODEL_METRICS:\n            acc.push({\n              [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: formatMessage({\n                defaultMessage: `Model Metrics`,\n                description:\n                  'Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > model metrics heading',\n              }),\n              children: [...modelMetrics],\n              key: 'modelMetrics',\n            });\n            break;\n          case DifferenceCardConfigCompareGroup.SYSTEM_METRICS:\n            acc.push({\n              [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: formatMessage({\n                defaultMessage: `System Metrics`,\n                description:\n                  'Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > system metrics heading',\n              }),\n              children: [...systemMetrics],\n              key: 'systemMetrics',\n            });\n            break;\n          case DifferenceCardConfigCompareGroup.PARAMETERS:\n            acc.push({\n              [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: formatMessage({\n                defaultMessage: `Parameters`,\n                description:\n                  'Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > parameters heading',\n              }),\n              children: getDifferencePlotJSONRows(parameters),\n              key: 'parameters',\n            });\n            break;\n          case DifferenceCardConfigCompareGroup.ATTRIBUTES:\n            acc.push({\n              [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: formatMessage({\n                defaultMessage: `Attributes`,\n                description:\n                  'Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > attributes heading',\n              }),\n              children: [...attributes],\n              key: 'attributes',\n            });\n            break;\n          case DifferenceCardConfigCompareGroup.TAGS:\n            acc.push({\n              [DIFFERENCE_PLOT_HEADING_COLUMN_ID]: formatMessage({\n                defaultMessage: `Tags`,\n                description: 'Experiment tracking > runs charts > cards > RunsChartsDifferenceChartCard > tags heading',\n              }),\n              children: [...tags],\n              key: 'tags',\n            });\n            break;\n        }\n        return acc;\n      }, []),\n    [modelMetrics, systemMetrics, parameters, tags, attributes, cardConfig.compareGroups, formatMessage],\n  );\n\n  const columns = useMemo(() => {\n    const columns: DifferencePlotDataColumnDef[] = [\n      {\n        id: DIFFERENCE_PLOT_EXPAND_COLUMN_ID,\n        cell: ExpandCell,\n        size: 32,\n        enableResizing: false,\n      },\n      {\n        accessorKey: DIFFERENCE_PLOT_HEADING_COLUMN_ID,\n        size: 150,\n        header: formatMessage({\n          defaultMessage: 'Compare by',\n          description: 'Runs charts > components > charts > DifferenceViewPlot > Compare by column heading',\n        }),\n        id: DIFFERENCE_PLOT_HEADING_COLUMN_ID,\n        enableResizing: true,\n      },\n      ...[baselineColumn, ...nonBaselineColumns].map((traceData, index) => ({\n        accessorKey: traceData?.uuid,\n        size: 200,\n        enableResizing: true,\n        meta: {\n          traceData,\n          updateBaselineColumnUuid,\n          showChangeFromBaseline: cardConfig.showChangeFromBaseline,\n          isBaseline: traceData === baselineColumn,\n          baselineColumnUuid: baselineColumn?.uuid,\n        },\n        id: traceData?.uuid ?? index.toString(),\n        header: DifferencePlotRunHeaderCell as ColumnDefTemplate<DifferencePlotDataRow>,\n        cell: DifferencePlotDataCell as ColumnDefTemplate<DifferencePlotDataRow>,\n      })),\n    ];\n    return columns;\n  }, [formatMessage, baselineColumn, nonBaselineColumns, updateBaselineColumnUuid, cardConfig.showChangeFromBaseline]);\n\n  // Start with all row groups expanded\n  const [expanded, setExpanded] = useState({\n    modelMetrics: true,\n    systemMetrics: true,\n    parameters: true,\n    attributes: true,\n    tags: true,\n  });\n\n  const table = useReactTable({\n    columns,\n    data: dataRows,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    columnResizeMode: 'onChange',\n    enableExpanding: true,\n    getSubRows: (row) => row.children,\n    getRowId: (row) => row.key,\n    getRowCanExpand: (row) => Boolean(row.subRows.length),\n    state: {\n      expanded,\n      columnPinning: {\n        left: [DIFFERENCE_PLOT_EXPAND_COLUMN_ID, DIFFERENCE_PLOT_HEADING_COLUMN_ID],\n      },\n    },\n  });\n\n  const tableContainerRef = useRef<HTMLDivElement>(null);\n\n  const toggleExpand = useCallback((row: Row<DifferencePlotDataRow>) => {\n    const key = row.original.key;\n    setExpanded((prev) => ({\n      ...prev,\n      [key]: !row.getIsExpanded(),\n    }));\n  }, []);\n\n  const { getVirtualItems, getTotalSize } = useVirtualizer({\n    count: table.getExpandedRowModel().rows.length,\n    getScrollElement: () => tableContainerRef.current,\n    estimateSize: () => 33, // Default row height\n    paddingStart: 37, // Default header height,\n  });\n\n  const expandedRows = table.getExpandedRowModel().rows;\n\n  return (\n    <div css={{ flex: 1, overflowX: 'scroll', height: '100%' }} ref={tableContainerRef}>\n      <Table css={{ width: table.getTotalSize(), position: 'relative' }}>\n        <TableRow isHeader css={{ position: 'sticky', top: 0, zIndex: 101 }}>\n          {table.getLeafHeaders().map((header, index) => {\n            const isPinned = header.column.getIsPinned();\n\n            return (\n              <TableHeader\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                componentId=\"mlflow.charts.difference_plot.header\"\n                key={header.id}\n                multiline={false}\n                style={{\n                  left: isPinned === 'left' ? `${header.column.getStart('left')}px` : undefined,\n                  position: isPinned ? 'sticky' : 'relative',\n                  width: header.column.getSize(),\n                  flexBasis: header.column.getSize(),\n                  zIndex: isPinned ? 100 : 0,\n                }}\n                wrapContent={false}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            );\n          })}\n        </TableRow>\n        <div css={{ height: getTotalSize() }}>\n          {getVirtualItems().map(({ index, start, size }) => {\n            const row = expandedRows[index];\n\n            return (\n              <TableRow\n                key={row.id + index}\n                css={{\n                  width: 'auto',\n                  position: 'absolute',\n                  top: 0,\n                }}\n                style={{\n                  transform: `translateY(${start}px)`,\n                  height: size,\n                }}\n              >\n                {row.getVisibleCells().map((cell, index) => {\n                  const isPinned = cell.column.getIsPinned();\n\n                  const isNameColumn = cell.column.columnDef.id === DIFFERENCE_PLOT_HEADING_COLUMN_ID;\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      style={{\n                        left: isPinned === 'left' ? `${cell.column.getStart('left')}px` : undefined,\n                        position: isPinned ? 'sticky' : 'relative',\n                        width: cell.column.getSize(),\n                        zIndex: isPinned ? 100 : 0,\n                        flexBasis: cell.column.getSize(),\n                      }}\n                      css={[\n                        {\n                          backgroundColor: isPinned ? theme.colors.backgroundPrimary : undefined,\n                        },\n                        isNameColumn && { borderRight: `1px solid ${theme.colors.border}` },\n                        isNameColumn && { paddingLeft: row.depth * theme.spacing.lg },\n                      ]}\n                      wrapContent={false}\n                    >\n                      {flexRender(cell.column.columnDef.cell, { ...cell.getContext(), toggleExpand })}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </div>\n      </Table>\n    </div>\n  );\n};\n","var _rect, _rect2, _rect3, _rect4, _rect5, _rect6, _rect7, _rect8, _rect9, _rect10, _rect11, _rect12, _rect13, _rect14, _rect15, _rect16, _rect17, _rect18;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgChartDifference(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 2,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 2,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 2,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 4,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 4,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 4,\n    width: 4,\n    height: 1,\n    fill: \"#338ECC\"\n  })), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 6,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 6,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 6,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 8,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect11 || (_rect11 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 8,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect12 || (_rect12 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 8,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect13 || (_rect13 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 10,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect14 || (_rect14 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 10,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect15 || (_rect15 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 10,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect16 || (_rect16 = /*#__PURE__*/React.createElement(\"rect\", {\n    y: 12,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect17 || (_rect17 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 5,\n    y: 12,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })), _rect18 || (_rect18 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 10,\n    y: 12,\n    width: 4,\n    height: 1,\n    fill: \"#D9D9D9\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartDifference);\nexport default __webpack_public_path__ + \"static/media/chart-difference.16174216d6f3b7c24f40e3541fe0ca2c.svg\";\nexport { ForwardRef as ReactComponent };","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport { IntlShape, injectIntl } from 'react-intl';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  deleteRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n  intl: IntlShape;\n};\n\nexport class DeleteRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const deletePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises)\n      .catch(() => {\n        const errorModalContent = `${this.props.intl.formatMessage({\n          defaultMessage: 'While deleting an experiment run, an error occurred.',\n          description: 'Experiment tracking > delete run modal > error message',\n        })}`;\n        this.props.openErrorModal(errorModalContent);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with associated metrics,\n                params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(injectIntl(DeleteRunModalImpl));\n","import { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunColorPill } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/components/RunColorPill';\nimport { RunsChartsImageCardConfig, RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { EmptyImageGridPlot, ImagePlotWithHistory } from './ImageGridPlot.common';\nimport { ImageEntity } from '@mlflow/mlflow/src/experiment-tracking/types';\n\nexport const ImageGridSingleKeyPlot = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  groupBy?: string;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const displayRuns = previewData.filter((run: RunsChartsRunData) => {\n    const imageMetadata = run.images[cardConfig.imageKeys[0]];\n    return imageMetadata && Object.keys(imageMetadata).length > 0;\n  });\n\n  if (displayRuns.length === 0) {\n    return <EmptyImageGridPlot />;\n  }\n  return (\n    <div css={{ display: 'flex', justifyContent: 'flex-start', flexWrap: 'wrap', gap: theme.spacing.xs }}>\n      {displayRuns.map((run: RunsChartsRunData) => {\n        // There is exactly one key in this plot\n        const imageMetadataByStep = Object.values(run.images[cardConfig.imageKeys[0]]).reduce(\n          (acc, metadata: ImageEntity) => {\n            if (metadata.step !== undefined) {\n              acc[metadata.step] = metadata;\n            }\n            return acc;\n          },\n          {} as Record<number, ImageEntity>,\n        );\n        return (\n          <div\n            key={run.uuid}\n            css={{\n              border: `1px solid transparent`,\n              borderRadius: theme.borders.borderRadiusSm,\n              padding: theme.spacing.sm,\n              '&:hover': {\n                border: `1px solid ${theme.colors.border}`,\n                backgroundColor: theme.colors.tableBackgroundUnselectedHover,\n              },\n            }}\n          >\n            <Tooltip content={run.displayName} componentId=\"mlflow.charts.image-plot.run-name-tooltip\">\n              <div\n                css={{\n                  height: theme.typography.lineHeightMd,\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  display: 'inline-flex',\n                  alignItems: 'center',\n                  gap: theme.spacing.sm,\n                }}\n              >\n                <RunColorPill color={run.color} />\n                {run.displayName}\n              </div>\n            </Tooltip>\n            <ImagePlotWithHistory\n              key={run.uuid}\n              step={cardConfig.step}\n              metadataByStep={imageMetadataByStep}\n              runUuid={run.uuid}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import { useDesignSystemTheme, TableRow, TableHeader, TableCell, Table, Tooltip } from '@databricks/design-system';\nimport { RunColorPill } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/components/RunColorPill';\nimport { useMemo } from 'react';\nimport { RunsChartsImageCardConfig, RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { EmptyImageGridPlot, ImagePlotWithHistory, MIN_GRID_IMAGE_SIZE } from './ImageGridPlot.common';\nimport { ImageEntity } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ImageGridMultipleKeyPlot = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  groupBy?: string;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const displayRuns = previewData.filter((run: RunsChartsRunData) => Object.keys(run.images).length !== 0);\n\n  if (displayRuns.length === 0) {\n    return <EmptyImageGridPlot />;\n  }\n  return (\n    <div css={{ height: '100%', width: '100%' }}>\n      <Table grid scrollable>\n        <TableRow isHeader>\n          <TableHeader\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_charts_imagegridmultiplekeyplot.tsx_44\"\n            css={{ minWidth: MIN_GRID_IMAGE_SIZE + theme.spacing.md }}\n          >\n            <FormattedMessage\n              defaultMessage=\"images\"\n              description=\"Experiment tracking > runs charts > charts > image grid multiple key > table header text\"\n            />\n          </TableHeader>\n          {displayRuns.map((run: RunsChartsRunData) => {\n            return (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_charts_imagegridmultiplekeyplot.tsx_52\"\n                key={run.uuid}\n                css={{ minWidth: MIN_GRID_IMAGE_SIZE + theme.spacing.md }}\n              >\n                <Tooltip content={run.displayName} componentId=\"mlflow.charts.image-plot.run-name-tooltip\">\n                  <div\n                    css={{\n                      height: theme.typography.lineHeightMd,\n                      whiteSpace: 'nowrap',\n                      display: 'inline-flex',\n                      alignItems: 'center',\n                      margin: 'auto',\n                      gap: theme.spacing.sm,\n                      fontWeight: 'normal',\n                    }}\n                  >\n                    <RunColorPill color={run.color} />\n                    {run.displayName}\n                  </div>\n                </Tooltip>\n              </TableHeader>\n            );\n          })}\n        </TableRow>\n        {cardConfig.imageKeys.map((imageKey) => {\n          return (\n            <TableRow key={imageKey}>\n              <TableCell css={{ minWidth: MIN_GRID_IMAGE_SIZE + theme.spacing.md }}>\n                <div style={{ whiteSpace: 'normal' }}>{imageKey}</div>\n              </TableCell>\n              {displayRuns.map((run: RunsChartsRunData) => {\n                if (run.images[imageKey] && Object.keys(run.images[imageKey]).length > 0) {\n                  const metadataByStep = Object.values(run.images[imageKey]).reduce((acc, metadata) => {\n                    if (metadata.step !== undefined) {\n                      acc[metadata.step] = metadata;\n                    }\n                    return acc;\n                  }, {} as Record<number, ImageEntity>);\n                  return (\n                    <TableCell\n                      key={run.uuid}\n                      css={{\n                        minWidth: MIN_GRID_IMAGE_SIZE + theme.spacing.md,\n                        '&:hover': {\n                          backgroundColor: theme.colors.tableBackgroundUnselectedHover,\n                        },\n                      }}\n                    >\n                      <ImagePlotWithHistory metadataByStep={metadataByStep} step={cardConfig.step} runUuid={run.uuid} />\n                    </TableCell>\n                  );\n                }\n                return <TableCell key={run.uuid} css={{ minWidth: MIN_GRID_IMAGE_SIZE + theme.spacing.md }} />;\n              })}\n            </TableRow>\n          );\n        })}\n      </Table>\n    </div>\n  );\n};\n","import { RunsChartsImageCardConfig, RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport { ImageGridSingleKeyPlot } from './ImageGridSingleKeyPlot';\nimport { ImageGridMultipleKeyPlot } from './ImageGridMultipleKeyPlot';\nimport {\n  LOG_IMAGE_TAG_INDICATOR,\n  NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE,\n} from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { RunsGroupByConfig } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/utils/experimentPage.group-row-utils';\nimport { Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ImageGridPlot = ({\n  previewData,\n  cardConfig,\n  groupBy,\n  setCardConfig,\n}: {\n  previewData: RunsChartsRunData[];\n  cardConfig: RunsChartsImageCardConfig;\n  groupBy: RunsGroupByConfig | null;\n  setCardConfig?: (setter: (current: RunsChartsCardConfig) => RunsChartsImageCardConfig) => void;\n}) => {\n  const containsLoggedImages = previewData.some((run: RunsChartsRunData) => Boolean(run.tags[LOG_IMAGE_TAG_INDICATOR]));\n\n  const filteredPreviewData = previewData\n    .filter((run: RunsChartsRunData) => {\n      return run.tags[LOG_IMAGE_TAG_INDICATOR];\n    })\n    .slice(-NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE);\n\n  if (!containsLoggedImages) {\n    return (\n      <div css={{ flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No images found\"\n              description=\"Title for the empty state when no images are found in the currently visible runs\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage=\"No logged images found in the currently visible runs\"\n              description=\"Description for the empty state when no images are found in the currently visible runs\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  if (cardConfig.imageKeys.length === 1) {\n    return <ImageGridSingleKeyPlot previewData={filteredPreviewData} cardConfig={cardConfig} />;\n  } else if (cardConfig.imageKeys.length > 1) {\n    return <ImageGridMultipleKeyPlot previewData={filteredPreviewData} cardConfig={cardConfig} />;\n  }\n  return null;\n};\n","import React from 'react';\nimport { Button, CloseIcon, CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CopyButton } from '../../shared/building_blocks/CopyButton';\n\nconst PREVIEW_SIDEBAR_WIDTH = 300;\n\n/**\n * Displays a sidebar helpful in expanding textual data in table components.\n * Will be replaced by DuBois standardized component in the future.\n */\nexport const PreviewSidebar = ({\n  content,\n  copyText,\n  headerText,\n  empty,\n  onClose,\n}: {\n  content?: React.ReactNode;\n  copyText?: string;\n  headerText?: string;\n  empty?: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        width: PREVIEW_SIDEBAR_WIDTH,\n        padding: theme.spacing.sm,\n        paddingRight: 0,\n        borderLeft: `1px solid ${theme.colors.borderDecorative}`,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n      }}\n      data-testid=\"preview-sidebar-content\"\n    >\n      {content ? (\n        <>\n          <div\n            css={{\n              display: 'grid',\n              gridTemplateColumns: '1fr auto auto',\n              rowGap: theme.spacing.sm,\n              alignItems: 'flex-start',\n              flex: '0 0 auto',\n            }}\n          >\n            {headerText && (\n              <Typography.Title\n                level={4}\n                css={{\n                  overflowX: 'hidden',\n                  overflowY: 'auto',\n                  marginTop: theme.spacing.sm,\n                  marginRight: theme.spacing.xs,\n\n                  // Escape hatch if for some reason title is so long it would consume entire sidebar\n                  maxHeight: 200,\n                }}\n              >\n                {headerText}\n              </Typography.Title>\n            )}\n            {copyText && <CopyButton copyText={copyText} showLabel={false} icon={<CopyIcon />} />}\n            {onClose && (\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_components_previewsidebar.tsx_67\"\n                type=\"primary\"\n                icon={<CloseIcon />}\n                onClick={onClose}\n              />\n            )}\n          </div>\n          <div\n            css={{\n              // Preserve original line breaks\n              whiteSpace: 'pre-wrap',\n              overflowY: 'auto',\n              flex: 1,\n            }}\n          >\n            {content}\n          </div>\n        </>\n      ) : (\n        <div css={{ marginTop: theme.spacing.md }}>{empty}</div>\n      )}\n    </div>\n  );\n};\n","import { Accordion, useDesignSystemTheme } from '@databricks/design-system';\nimport { CSSObject, css } from '@emotion/react';\nimport { useMemo } from 'react';\n\nexport const METRIC_CHART_SECTION_HEADER_SIZE = 55;\n\ninterface MetricChartsAccordionProps {\n  activeKey?: string | string[];\n  onActiveKeyChange?: (key: string | string[]) => void;\n  children: React.ReactNode;\n  disableCollapse?: boolean;\n}\n\nconst MetricChartsAccordion = ({\n  activeKey,\n  onActiveKeyChange,\n  children,\n  disableCollapse = false,\n}: MetricChartsAccordionProps) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n  const clsPrefix = getPrefixedClassName('collapse');\n\n  const styles = useMemo(() => {\n    const classItem = `.${clsPrefix}-item`;\n    const classItemActive = `${classItem}-active`;\n    const classHeader = `.${clsPrefix}-header`;\n    const classContent = `.${clsPrefix}-content`;\n    const classContentBox = `.${clsPrefix}-content-box`;\n    const classArrow = `.${clsPrefix}-arrow`;\n\n    const styles: CSSObject = {\n      [classContent]: {\n        padding: '0px !important',\n        backgroundColor: 'transparent !important',\n      },\n\n      [classContentBox]: {\n        padding: '0 0 12px 0px !important',\n        backgroundColor: 'transparent !important',\n      },\n\n      [`& > ${classItem} > ${classHeader} > ${classArrow}`]: {\n        fontSize: theme.general.iconSize,\n        left: 12,\n        // TODO: This is needed currently because the rotated icon isn't centered, remove when accordion is fixed\n        verticalAlign: '-7px',\n        transform: 'rotate(-90deg)',\n        display: disableCollapse ? 'none' : undefined,\n      },\n\n      [`& > ${classItemActive} > ${classHeader} > ${classArrow}`]: {\n        transform: 'rotate(0deg)',\n      },\n\n      [classHeader]: {\n        display: 'flex',\n        color: theme.colors.textPrimary,\n        fontWeight: 600,\n        alignItems: 'center',\n\n        '&:focus-visible': {\n          outlineColor: `${theme.colors.primary} !important`,\n          outlineStyle: 'auto !important',\n        },\n      },\n\n      [`& > ${classItem}`]: {\n        borderBottom: `1px solid ${theme.colors.border}`,\n        borderRadius: 0,\n      },\n\n      [`& > ${classItem} > ${classHeader}`]: {\n        padding: 0,\n        lineHeight: '20px',\n        height: METRIC_CHART_SECTION_HEADER_SIZE,\n      },\n    };\n    return styles;\n  }, [theme, clsPrefix, disableCollapse]);\n\n  return (\n    <Accordion\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricchartsaccordion.tsx_82\"\n      {...(activeKey ? { activeKey } : {})}\n      {...(onActiveKeyChange ? { onChange: onActiveKeyChange } : {})}\n      dangerouslyAppendEmotionCSS={css(styles)}\n      dangerouslySetAntdProps={{ expandIconPosition: 'left' }}\n    >\n      {children}\n    </Accordion>\n  );\n};\n\nexport default MetricChartsAccordion;\n","import { Button, DropdownMenu, PlusIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\n\nimport { ReactComponent as ChartBarIcon } from '../../../../common/static/chart-bar.svg';\nimport { ReactComponent as ChartContourIcon } from '../../../../common/static/chart-contour.svg';\nimport { ReactComponent as ChartLineIcon } from '../../../../common/static/chart-line.svg';\nimport { ReactComponent as ChartParallelIcon } from '../../../../common/static/chart-parallel.svg';\nimport { ReactComponent as ChartScatterIcon } from '../../../../common/static/chart-scatter.svg';\nimport { ReactComponent as ChartDifferenceIcon } from '../../../../common/static/chart-difference.svg';\nimport { ReactComponent as ChartImageIcon } from '../../../../common/static/chart-image.svg';\nimport { RunsChartType } from '../runs-charts.types';\nimport { shouldEnableDifferenceViewCharts } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface RunsChartsAddChartMenuProps {\n  onAddChart: (type: RunsChartType) => void;\n  supportedChartTypes?: RunsChartType[];\n}\n\nexport const RunsChartsAddChartMenu = ({ onAddChart, supportedChartTypes }: RunsChartsAddChartMenuProps) => {\n  const isChartTypeSupported = (type: RunsChartType) => !supportedChartTypes || supportedChartTypes.includes(type);\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscompareaddchartmenu.tsx_19\"\n          css={styles.addChartButton}\n          icon={<PlusIcon />}\n          data-testid=\"experiment-view-compare-runs-add-chart\"\n        >\n          <FormattedMessage\n            defaultMessage=\"Add chart\"\n            description=\"Experiment tracking > runs charts > add chart menu\"\n          />\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content align=\"end\">\n        {isChartTypeSupported(RunsChartType.BAR) && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsaddchartmenu.tsx_42\"\n            onClick={() => onAddChart(RunsChartType.BAR)}\n            data-testid=\"experiment-view-compare-runs-chart-type-bar\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartBarIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Bar chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > bar chart\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.LINE) && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsaddchartmenu.tsx_56\"\n            onClick={() => onAddChart(RunsChartType.LINE)}\n            data-testid=\"experiment-view-compare-runs-chart-type-line\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartLineIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Line chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > line chart\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.PARALLEL) && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsaddchartmenu.tsx_70\"\n            onClick={() => onAddChart(RunsChartType.PARALLEL)}\n            data-testid=\"experiment-view-compare-runs-chart-type-parallel\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartParallelIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Parallel coordinates\"\n              description=\"Experiment tracking > runs charts > add chart menu > parallel coordinates\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.SCATTER) && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsaddchartmenu.tsx_84\"\n            onClick={() => onAddChart(RunsChartType.SCATTER)}\n            data-testid=\"experiment-view-compare-runs-chart-type-scatter\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartScatterIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Scatter chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > scatter plot\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.CONTOUR) && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsaddchartmenu.tsx_98\"\n            onClick={() => onAddChart(RunsChartType.CONTOUR)}\n            data-testid=\"experiment-view-compare-runs-chart-type-contour\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartContourIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Contour chart\"\n              description=\"Experiment tracking > runs charts > add chart menu > contour chart\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {shouldEnableDifferenceViewCharts() && isChartTypeSupported(RunsChartType.DIFFERENCE) && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsaddchartmenu.tsx_112\"\n            onClick={() => onAddChart(RunsChartType.DIFFERENCE)}\n            data-testid=\"experiment-view-compare-runs-chart-type-difference\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartDifferenceIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Difference view\"\n              description=\"Experiment tracking > runs charts > add chart menu > difference view\"\n            />\n          </DropdownMenu.Item>\n        )}\n        {isChartTypeSupported(RunsChartType.IMAGE) && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsaddchartmenu.tsx_126\"\n            onClick={() => onAddChart(RunsChartType.IMAGE)}\n            data-testid=\"experiment-view-compare-runs-chart-type-image\"\n          >\n            <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n              <ChartImageIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage\n              defaultMessage=\"Image grid\"\n              description=\"Experiment tracking > runs charts > add chart menu > image grid\"\n            />\n          </DropdownMenu.Item>\n        )}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n\nconst styles = {\n  addChartButton: (theme: Theme) => ({\n    // Overriden while waiting for design decision in DuBois (FEINF-1711)\n    backgroundColor: `${theme.colors.backgroundPrimary} !important`,\n  }),\n  iconWrapper: (theme: Theme) => ({\n    width: theme.general.iconSize + theme.spacing.xs,\n  }),\n};\n","import {\n  Button,\n  DangerModal,\n  DragIcon,\n  DropdownMenu,\n  Input,\n  Modal,\n  OverflowIcon,\n  PencilIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { ChartSectionConfig } from '../../../../types';\nimport { RunsChartsAddChartMenu } from '../RunsChartsAddChartMenu';\nimport { RunsChartType } from '../../runs-charts.types';\nimport { useEffect, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useDragAndDropElement } from '@mlflow/mlflow/src/common/hooks/useDragAndDropElement';\nimport { CheckIcon } from '@databricks/design-system';\nimport { METRIC_CHART_SECTION_HEADER_SIZE } from '../../../MetricChartsAccordion';\nimport cx from 'classnames';\n\nexport interface RunsChartsSectionHeaderProps {\n  index: number;\n  section: ChartSectionConfig;\n  sectionChartsLength: number;\n  addNewChartCard: (metricSectionId: string) => (type: RunsChartType) => void;\n  onDeleteSection: (sectionId: string) => void;\n  onAddSection: (sectionId: string, above: boolean) => void;\n  editSection: number;\n  onSetEditSection: React.Dispatch<React.SetStateAction<number>>;\n  onSetSectionName: (sectionId: string, name: string) => void;\n  onSectionReorder: (sourceSectionId: string, targetSectionId: string) => void;\n  isExpanded: boolean;\n  supportedChartTypes?: RunsChartType[] | undefined;\n  /**\n   * Set to \"true\" to hide various controls (e.g. edit, add, delete) in the section header.\n   */\n  hideExtraControls: boolean;\n}\n\nexport const RunsChartsSectionHeader = ({\n  index,\n  section,\n  sectionChartsLength,\n  addNewChartCard,\n  onDeleteSection,\n  onAddSection,\n  editSection,\n  onSetEditSection,\n  onSetSectionName,\n  onSectionReorder,\n  isExpanded,\n  hideExtraControls,\n  supportedChartTypes,\n}: RunsChartsSectionHeaderProps) => {\n  const { theme } = useDesignSystemTheme();\n  // Change name locally for better performance\n  const [tmpSectionName, setTmpSectionName] = useState(section.name);\n  // State to check if element is being dragged\n  const [isDraggingHandle, setIsDraggingHandle] = useState(false);\n\n  // Ref and state to measure the width of the section name\n  const sectionNameRef = useRef<HTMLDivElement>(null);\n  const confirmButtonRef = useRef<HTMLButtonElement>(null);\n  const [sectionNameWidth, setSectionNameWidth] = useState(0.0);\n\n  // Delete section modal\n  const [isDeleteSectionModalOpen, setIsDeleteSectionModalOpen] = useState(false);\n\n  const stopPropagation = (e: any) => {\n    e.stopPropagation();\n  };\n\n  const deleteModalConfirm = () => {\n    onDeleteSection(section.uuid);\n  };\n\n  const deleteModalCancel = () => {\n    setIsDeleteSectionModalOpen(false);\n  };\n\n  const deleteSection = () => {\n    setIsDeleteSectionModalOpen(true);\n  };\n\n  const addSectionAbove = () => {\n    onAddSection(section.uuid, true);\n  };\n\n  const addSectionBelow = () => {\n    onAddSection(section.uuid, false);\n  };\n\n  const onEdit = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    onSetEditSection(index);\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTmpSectionName(e.target.value);\n  };\n\n  const onSubmit = (e: React.KeyboardEvent<HTMLInputElement> | React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    if (!tmpSectionName.trim()) {\n      e.preventDefault();\n      return;\n    }\n    onSetEditSection(-1);\n    onSetSectionName(section.uuid, tmpSectionName);\n  };\n\n  const onEsc = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Escape') {\n      e.stopPropagation();\n      onSetEditSection(-1);\n      setTmpSectionName(section.name);\n    }\n  };\n\n  const onBlur = (e: React.FocusEvent) => {\n    if (e.relatedTarget === confirmButtonRef.current) {\n      return;\n    }\n    onSetEditSection(-1);\n    onSetSectionName(section.uuid, tmpSectionName);\n  };\n\n  useEffect(() => {\n    if (!sectionNameRef.current) {\n      return;\n    }\n\n    const resizeObserver = new ResizeObserver(([entry]) => {\n      setSectionNameWidth(entry.contentRect.width);\n    });\n\n    resizeObserver.observe(sectionNameRef.current);\n\n    return () => resizeObserver.disconnect();\n  }, []);\n\n  // For explicitness:\n  const EDITABLE_LABEL_PADDING_WIDTH = 6;\n  const EDITABLE_LABEL_BORDER_WIDTH = 1;\n  const EDITABLE_LABEL_OFFSET = EDITABLE_LABEL_PADDING_WIDTH + EDITABLE_LABEL_BORDER_WIDTH;\n\n  const isCurrentlyEdited = editSection === index;\n  const [isCurrentlyHovered, setIsCurrentlyHovered] = useState(false);\n\n  const { dragHandleRef, dragPreviewRef, dropTargetRef, isOver, isDragging } = useDragAndDropElement({\n    dragGroupKey: 'sections',\n    dragKey: section.uuid,\n    onDrop: onSectionReorder,\n  });\n\n  return (\n    <>\n      <div\n        role=\"figure\"\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          width: '100%',\n          padding: `${theme.spacing.xs}px 0px`,\n          height: `${METRIC_CHART_SECTION_HEADER_SIZE}px`,\n          '.section-element-visibility-on-hover': {\n            visibility: isCurrentlyHovered ? 'visible' : 'hidden',\n            opacity: isCurrentlyHovered ? 1 : 0,\n          },\n          '.section-element-visibility-on-hover-and-not-drag': {\n            visibility: isCurrentlyHovered ? 'visible' : 'hidden',\n            opacity: isCurrentlyHovered ? (isDraggingHandle ? 0 : 1) : 0,\n          },\n          '.section-element-hidden-on-edit': { display: isCurrentlyEdited ? 'none' : 'inherit' },\n        }}\n        onMouseMove={() => setIsCurrentlyHovered(true)}\n        onMouseLeave={() => setIsCurrentlyHovered(false)}\n        ref={(element) => {\n          // Use this element for both drag preview and drop target\n          dropTargetRef?.(element);\n          dragPreviewRef?.(element);\n        }}\n        data-testid=\"experiment-view-compare-runs-section-header\"\n      >\n        {isOver && (\n          // Visual overlay for target drop element\n          <div\n            css={{\n              position: 'absolute',\n              inset: 0,\n              backgroundColor: theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100,\n              border: `2px dashed ${theme.colors.blue400}`,\n              opacity: 0.75,\n            }}\n          />\n        )}\n        <div\n          style={{\n            maxWidth: '40%',\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <div\n            ref={sectionNameRef}\n            style={{\n              position: !isCurrentlyEdited ? 'relative' : 'absolute',\n              visibility: !isCurrentlyEdited ? 'visible' : 'hidden',\n              textOverflow: isCurrentlyEdited ? undefined : 'ellipsis',\n              maxWidth: '100%',\n              overflow: 'clip',\n              paddingLeft: EDITABLE_LABEL_OFFSET,\n              whiteSpace: 'pre',\n            }}\n          >\n            {tmpSectionName}\n          </div>\n          {editSection === index && (\n            <Input\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_sections_runschartssectionheader.tsx_220\"\n              autoFocus\n              onClick={stopPropagation}\n              onMouseDown={stopPropagation}\n              onMouseUp={stopPropagation}\n              onDoubleClick={stopPropagation}\n              onChange={onChange}\n              value={tmpSectionName}\n              css={{\n                color: theme.colors.textPrimary,\n                fontWeight: 600,\n                padding: `1px ${EDITABLE_LABEL_PADDING_WIDTH}px 1px ${EDITABLE_LABEL_PADDING_WIDTH}px`,\n                background: theme.colors.backgroundSecondary,\n                minWidth: '50px',\n                width: sectionNameWidth + 2 * EDITABLE_LABEL_OFFSET,\n                position: 'relative',\n                lineHeight: theme.typography.lineHeightBase,\n                maxWidth: '100%',\n              }}\n              onKeyDown={onEsc}\n              onPressEnter={onSubmit}\n              dangerouslyAppendEmotionCSS={{ '&&': { minHeight: '20px !important' } }}\n              onBlur={onBlur}\n            />\n          )}\n          <div\n            css={{\n              padding: theme.spacing.xs,\n              position: 'relative',\n            }}\n            style={{\n              visibility: !isCurrentlyEdited ? 'visible' : 'hidden',\n              display: isCurrentlyEdited ? 'none' : 'inherit',\n            }}\n          >\n            {`(${sectionChartsLength})`}\n          </div>\n          {!hideExtraControls && (\n            <div className=\"section-element-visibility-on-hover-and-not-drag section-element-hidden-on-edit\">\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionheader.tsx_246\"\n                onClick={onEdit}\n                aria-label=\"Icon label\"\n                icon={<PencilIcon />}\n              />\n            </div>\n          )}\n        </div>\n        {editSection === index && !hideExtraControls && (\n          <div style={{ padding: `0 ${theme.spacing.xs}px` }}>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionheader.tsx_251\"\n              onClick={onSubmit}\n              icon={<CheckIcon />}\n              ref={confirmButtonRef}\n            />\n          </div>\n        )}\n        {!hideExtraControls && (\n          <div\n            className=\"section-element-visibility-on-hover section-element-hidden-on-edit\"\n            css={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', cursor: 'grab' }}\n          >\n            <DragIcon\n              rotate={90}\n              style={{ color: theme.colors.textSecondary }}\n              ref={dragHandleRef}\n              onMouseDown={() => setIsDraggingHandle(true)}\n              onMouseLeave={() => {\n                setIsDraggingHandle(false);\n              }}\n              data-testid=\"experiment-view-compare-runs-section-header-drag-handle\"\n            />\n          </div>\n        )}\n        {!hideExtraControls && (\n          <div\n            style={{\n              position: 'absolute',\n              top: '50%',\n              right: '0',\n              transform: 'translate(0, -50%)',\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            <div\n              onClick={stopPropagation}\n              onMouseDown={stopPropagation}\n              onMouseUp={stopPropagation}\n              onDoubleClick={stopPropagation}\n              className=\"section-element-visibility-on-hover-and-not-drag section-element-hidden-on-edit\"\n            >\n              <DropdownMenu.Root modal={false}>\n                <DropdownMenu.Trigger asChild>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionheader.tsx_288\"\n                    icon={<OverflowIcon />}\n                  />\n                </DropdownMenu.Trigger>\n                <DropdownMenu.Content>\n                  <DropdownMenu.Item\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_sections_runschartssectionheader.tsx_321\"\n                    onClick={addSectionAbove}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Add section above\"\n                      description=\"Experiment page > compare runs > chart section > add section above label\"\n                    />\n                  </DropdownMenu.Item>\n                  <DropdownMenu.Item\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_sections_runschartssectionheader.tsx_327\"\n                    onClick={addSectionBelow}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Add section below\"\n                      description=\"Experiment page > compare runs > chart section > add section below label\"\n                    />\n                  </DropdownMenu.Item>\n                  <DropdownMenu.Item\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_sections_runschartssectionheader.tsx_333\"\n                    onClick={deleteSection}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Delete section\"\n                      description=\"Experiment page > compare runs > chart section > delete section label\"\n                    />\n                  </DropdownMenu.Item>\n                </DropdownMenu.Content>\n              </DropdownMenu.Root>\n              <DangerModal\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_sections_runschartssectionheader.tsx_351\"\n                visible={isDeleteSectionModalOpen}\n                onOk={deleteModalConfirm}\n                onCancel={deleteModalCancel}\n                title=\"Delete section\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Deleting the section will permanently remove it and the charts it contains. This cannot be undone.\"\n                  description=\"Experiment page > compare runs > chart section > delete section warning message\"\n                />\n              </DangerModal>\n            </div>\n\n            <div\n              onClick={stopPropagation}\n              onMouseDown={stopPropagation}\n              onMouseUp={stopPropagation}\n              onDoubleClick={stopPropagation}\n              className={cx(\n                {\n                  'section-element-visibility-on-hover-and-not-drag': !isExpanded,\n                },\n                'section-element-hidden-on-edit',\n              )}\n              css={{\n                alignSelf: 'flex-end',\n                marginLeft: theme.spacing.xs,\n              }}\n            >\n              <RunsChartsAddChartMenu\n                onAddChart={addNewChartCard(section.uuid)}\n                supportedChartTypes={supportedChartTypes}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useRef, useState } from 'react';\n\n// Define a module-global observer and a WeakMap on elements to hold callbacks\nlet sharedObserver: IntersectionObserver | null = null;\nconst entryCallbackMap = new WeakMap();\n\nconst ensureSharedObserverExists = () => {\n  if (!sharedObserver) {\n    sharedObserver = new IntersectionObserver((entries) => {\n      for (const entry of entries) {\n        const entryCallback = entryCallbackMap.get(entry.target);\n        entryCallback?.(entry.isIntersecting);\n      }\n    });\n  }\n};\n\nfunction observeElement(element: Element, callback: (isIntersecting: boolean) => void) {\n  ensureSharedObserverExists();\n  entryCallbackMap.set(element, callback);\n  sharedObserver?.observe(element);\n\n  return () => {\n    if (element) {\n      sharedObserver?.unobserve(element);\n      entryCallbackMap.delete(element);\n    }\n  };\n}\n\n/**\n * Checks if the element is currently visible within the viewport using IntersectionObserver.\n * If \"enabled\" is set to false, the returned value will always be true.\n */\nexport const useIsInViewport = <T extends Element>({ enabled = true }: { enabled?: boolean } = {}) => {\n  const [element, setElementRef] = useState<T | null>(null);\n  const [isInViewport, setIsInViewport] = useState(!enabled);\n\n  useEffect(() => {\n    // If already viewed or element is not available, do nothing\n    if (!element) {\n      return;\n    }\n\n    // If IntersectionObserver is not available, assume that the element is visible\n    if (!window.IntersectionObserver || !enabled) {\n      setIsInViewport(true);\n      return;\n    }\n\n    return observeElement(element, setIsInViewport);\n  }, [enabled, element]);\n\n  // When the flag is disabled, deferred result is the same as the regular one\n  return { isInViewport, setElementRef };\n};\n","import { forwardRef, memo, useCallback, useRef, useState } from 'react';\nimport { RunsChartsCard, type RunsChartsCardProps } from './cards/RunsChartsCard';\nimport { DraggableCore, type DraggableEventHandler } from 'react-draggable';\nimport { Resizable } from 'react-resizable';\nimport { Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { useIsInViewport } from '../hooks/useIsInViewport';\nimport { useDebounce } from 'use-debounce';\nimport {\n  DRAGGABLE_CARD_HANDLE_CLASS,\n  DRAGGABLE_CARD_TRANSITION_VAR,\n  RunsChartCardLoadingPlaceholder,\n} from './cards/ChartCard.common';\nimport { useRunsChartsDraggableGridActionsContext } from './RunsChartsDraggableCardsGridContext';\nimport { RUNS_CHARTS_UI_Z_INDEX } from '../utils/runsCharts.const';\n\nconst VIEWPORT_DEBOUNCE_MS = 150;\n\ninterface RunsChartsDraggableCardProps extends RunsChartsCardProps {\n  uuid?: string;\n  translateBy?: { x: number; y: number; overflowing: boolean };\n  onResizeStart: (rect: DOMRect) => void;\n  onResize: (width: number, height: number) => void;\n  onResizeStop: () => void;\n}\n\nexport const RunsChartsDraggableCard = memo((props: RunsChartsDraggableCardProps) => {\n  const { setElementRef, isInViewport } = useIsInViewport<HTMLDivElement>();\n  const { uuid, translateBy, onResizeStart, onResize, onResizeStop, ...cardProps } = props;\n  const { theme } = useDesignSystemTheme();\n\n  const [deferredValue] = useDebounce(isInViewport, VIEWPORT_DEBOUNCE_MS);\n  const isInViewportDeferred = deferredValue;\n\n  const [resizeWidth, setResizeWidth] = useState(0);\n  const [resizeHeight, setResizeHeight] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [origin, setOrigin] = useState<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  const { setDraggedCardUuid, onDropChartCard } = useRunsChartsDraggableGridActionsContext();\n\n  const draggedCardElementRef = useRef<HTMLDivElement | null>(null);\n\n  const onStartDrag = useCallback<DraggableEventHandler>(\n    (_, { x, y }) => {\n      setIsDragging(true);\n      setDraggedCardUuid(uuid ?? null);\n      setOrigin({ x, y });\n    },\n    [setDraggedCardUuid, uuid],\n  );\n\n  const onDrag = useCallback(\n    (_, { x, y }) => {\n      if (draggedCardElementRef.current) {\n        draggedCardElementRef.current.style.transform = `translate3d(${x - origin.x}px, ${y - origin.y}px, 0)`;\n      }\n    },\n    [origin],\n  );\n\n  const onStopDrag = useCallback(() => {\n    onDropChartCard();\n    setDraggedCardUuid(null);\n    if (draggedCardElementRef.current) {\n      draggedCardElementRef.current.style.transform = '';\n    }\n    setIsDragging(false);\n  }, [onDropChartCard, setDraggedCardUuid, draggedCardElementRef]);\n\n  const onResizeStartInternal = useCallback(() => {\n    const rect = draggedCardElementRef.current?.getBoundingClientRect();\n    if (rect) {\n      setResizeWidth(rect?.width ?? 0);\n      setResizeHeight(rect?.height ?? 0);\n      onResizeStart?.(rect);\n    }\n  }, [onResizeStart, draggedCardElementRef]);\n\n  const onResizeInternal = useCallback(\n    (_, { size }) => {\n      setResizeWidth(size.width);\n      setResizeHeight(size.height);\n      onResize(size.width, size.height);\n    },\n    [onResize],\n  );\n\n  if (!isInViewport) {\n    // If the card is not in the viewport, we avoid rendering draggable/resizable components\n    // and render a placeholder element having card's height instead.\n    return (\n      <RunsChartCardLoadingPlaceholder\n        style={{\n          height: props.height,\n        }}\n        css={{\n          backgroundColor: theme.colors.backgroundPrimary,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n        }}\n        ref={setElementRef}\n      />\n    );\n  }\n\n  return (\n    <DraggableCore\n      enableUserSelectHack={false}\n      onStart={onStartDrag}\n      onDrag={onDrag}\n      onStop={onStopDrag}\n      handle={`.${DRAGGABLE_CARD_HANDLE_CLASS}`}\n    >\n      <Resizable\n        width={resizeWidth}\n        height={resizeHeight}\n        axis=\"both\"\n        onResizeStart={onResizeStartInternal}\n        onResizeStop={onResizeStop}\n        onResize={onResizeInternal}\n        handle={<ResizableHandle />}\n      >\n        <div\n          ref={(element) => {\n            draggedCardElementRef.current = element;\n            setElementRef(element);\n          }}\n          style={\n            isDragging\n              ? {\n                  // Make sure the dragged card is on top of all other cards\n                  zIndex: RUNS_CHARTS_UI_Z_INDEX.CARD_DRAGGED,\n                  pointerEvents: 'none',\n                }\n              : {\n                  transition: DRAGGABLE_CARD_TRANSITION_VAR,\n                  transform: `translate3d(${translateBy?.x ?? 0}px,${translateBy?.y ?? 0}px,0)`,\n                  opacity: translateBy?.overflowing ? 0 : 1,\n                }\n          }\n        >\n          <RunsChartsCard {...cardProps} isInViewport={isInViewport} isInViewportDeferred={isInViewportDeferred} />\n        </div>\n      </Resizable>\n    </DraggableCore>\n  );\n});\n\nconst ResizableHandle = forwardRef((props, ref) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      ref={ref as any}\n      {...props}\n      data-testid=\"draggable-card-resize-handle\"\n      css={{\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        cursor: 'se-resize',\n        lineHeight: 0,\n        padding: theme.spacing.xs,\n        color: theme.colors.actionDefaultIconDefault,\n      }}\n    >\n      <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\">\n        <path d=\"M6 6V0H8V8H0V6H6Z\" fill=\"currentColor\" />\n      </svg>\n    </div>\n  );\n});\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { RUNS_CHARTS_UI_Z_INDEX } from '../utils/runsCharts.const';\n\nexport const RunsChartsDraggablePreview = ({\n  x,\n  y,\n  width,\n  height,\n}: {\n  x?: number;\n  y?: number;\n  width?: number | string;\n  height?: number | string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <>\n      {/* Cover pointer events */}\n      <div\n        css={{\n          position: 'absolute',\n          inset: 0,\n        }}\n      />\n      <div\n        css={{\n          position: 'absolute',\n          backgroundColor: theme.colors.actionDefaultBackgroundHover,\n          borderStyle: 'dashed',\n          borderColor: theme.colors.actionDefaultBorderDefault,\n          pointerEvents: 'none',\n          borderRadius: theme.general.borderRadiusBase,\n          borderWidth: 2,\n          inset: 0,\n          // Make sure the preview is above other cards\n          zIndex: RUNS_CHARTS_UI_Z_INDEX.CARD_PREVIEW,\n        }}\n        style={{\n          transform: `translate3d(${x}px, ${y}px, 0)`,\n          width: width,\n          height: height,\n        }}\n      />\n    </>\n  );\n};\n","import { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { memo, useCallback, useMemo, useRef, useState } from 'react';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { RunsChartsCardConfig } from '../runs-charts.types';\nimport { isEmptyChartCard, RunsChartsRunData } from './RunsCharts.common';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { Global } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { ChartSectionConfig } from '../../../types';\nimport { RunsChartsDraggableCard } from './RunsChartsDraggableCard';\nimport {\n  useRunsChartsDraggableGridActionsContext,\n  useRunsChartsDraggableGridStateContext,\n} from './RunsChartsDraggableCardsGridContext';\nimport { RunsChartsDraggablePreview } from './RunsChartsDraggablePreview';\nimport { DRAGGABLE_CARD_TRANSITION_NAME, type RunsChartCardSetFullscreenFn } from './cards/ChartCard.common';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\nimport type { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\n\nconst rowHeightSuggestions = [300, 330, 360, 400, 500];\n\nconst getColumnSuggestions = (containerWidth: number, gapSize = 8) =>\n  [1, 2, 3, 4, 5].map((n) => ({\n    cols: n,\n    width: (containerWidth - (n - 1) * gapSize) / n,\n  }));\n\nconst PlaceholderSymbol = Symbol('placeholder');\n\ninterface RunsChartsDraggableCardsGridProps {\n  onRemoveChart: (chart: RunsChartsCardConfig) => void;\n  onStartEditChart: (chart: RunsChartsCardConfig) => void;\n  sectionConfig: ChartSectionConfig;\n  setFullScreenChart: RunsChartCardSetFullscreenFn;\n  sectionId: string;\n  groupBy: RunsGroupByConfig | null;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  chartRunData: RunsChartsRunData[];\n  cardsConfig: RunsChartsCardConfig[];\n}\n\n// Renders draggable cards grid in a single chart section\nexport const RunsChartsDraggableCardsGridSection = memo(\n  ({\n    cardsConfig,\n    sectionConfig,\n    chartRunData,\n    sectionId,\n    hideEmptyCharts,\n    ...cardProps\n  }: RunsChartsDraggableCardsGridProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    // If below medium breakpoint, display only 1 card per row.\n    // Otherwise, use section configuration or fall back to 3 columns.\n    const isCompactMode = useMediaQuery(`(max-width: ${theme.responsive.breakpoints.md}px)`);\n    const columns = isCompactMode ? 1 : sectionConfig.columns ?? 3;\n\n    // Use card height from the section configuration or fall back to 360 pixels.\n    const cardHeight = sectionConfig.cardHeight ?? 360;\n\n    const gridBoxRef = useRef<HTMLDivElement | null>(null);\n\n    const { draggedCardUuid, isDragging } = useRunsChartsDraggableGridStateContext();\n    const { setTargetSection, setTargetPosition, onSwapCards } = useRunsChartsDraggableGridActionsContext();\n\n    const updateUIState = useUpdateRunsChartsUIConfiguration();\n\n    const setColumns = useCallback(\n      (columnCount: number) => {\n        updateUIState((current) => {\n          const section = current.compareRunSections?.find((section) => section.uuid === sectionId);\n          if (!section) {\n            return current;\n          }\n\n          return {\n            ...current,\n            compareRunSections: current.compareRunSections?.map((s) => {\n              if (s.uuid === sectionId) {\n                return {\n                  ...s,\n                  columns: columnCount,\n                };\n              }\n              return s;\n            }),\n          };\n        });\n      },\n      [sectionId, updateUIState],\n    );\n\n    const setCardHeight = useCallback(\n      (height: number) => {\n        updateUIState((current) => {\n          const section = current.compareRunSections?.find((section) => section.uuid === sectionId);\n          if (!section) {\n            return current;\n          }\n\n          return {\n            ...current,\n            compareRunSections: current.compareRunSections?.map((s) => {\n              if (s.uuid === sectionId) {\n                return {\n                  ...s,\n                  cardHeight: height,\n                };\n              }\n              return s;\n            }),\n          };\n        });\n      },\n      [sectionId, updateUIState],\n    );\n\n    const lastElementCount = useRef<number>(0);\n\n    const [positionInSection, setPositionInSection] = useState<number | null>(null);\n    const [resizePreview, setResizePreview] = useState<null | Partial<DOMRect>>(null);\n\n    lastElementCount.current = cardsConfig.length;\n    const position = !draggedCardUuid ? null : positionInSection;\n\n    // Helper function that calculates the x, y coordinates of a card based on its position in the grid\n    const findCoords = useCallback(\n      (position) => {\n        const gap = theme.spacing.sm;\n        const rowCount = Math.ceil(cardsConfig.length / columns);\n\n        const row = Math.floor(position / columns);\n        const col = position % columns;\n\n        const colGapsCount = columns - 1;\n\n        const passedColGaps = col;\n        const passedRowGaps = row;\n        const rect = gridBoxRef.current?.getBoundingClientRect();\n\n        const singleWidth = ((rect?.width ?? 0) - colGapsCount * gap) / columns;\n\n        const overflowing = row >= rowCount;\n\n        return {\n          overflowing,\n          row,\n          col,\n          x: col * singleWidth + passedColGaps * gap,\n          y: row * cardHeight + passedRowGaps * gap,\n        };\n      },\n      [columns, cardHeight, theme, cardsConfig.length],\n    );\n\n    const cardsToRender = useMemo(() => {\n      return cardsConfig.filter((cardConfig) => {\n        if (!hideEmptyCharts) {\n          return true;\n        }\n        return !isEmptyChartCard(chartRunData, cardConfig);\n      });\n    }, [cardsConfig, chartRunData, hideEmptyCharts]);\n\n    // Calculate the transforms for each card based on the dragged card and its position.\n    const cardTransforms = useMemo(() => {\n      if (!draggedCardUuid || position === null) {\n        return {};\n      }\n\n      const result: Record<string, { x: number; y: number; overflowing: boolean }> = {};\n\n      const newArray: (RunsChartsCardConfig | typeof PlaceholderSymbol)[] = cardsToRender.slice();\n      const fromIndex = cardsToRender.findIndex((x) => x.uuid === draggedCardUuid);\n      const toIndex = position;\n\n      if (fromIndex !== -1) {\n        // If the card is dragged within same section, just rearrange the cards\n        newArray.splice(fromIndex, 1);\n        newArray.splice(toIndex, 0, cardsToRender[fromIndex]);\n      } else {\n        // If the card is dragged from another section, insert empty placeholder element\n        newArray.splice(toIndex, 0, PlaceholderSymbol);\n      }\n\n      for (const cardConfig of cardsToRender) {\n        const newIndex = newArray.indexOf(cardConfig);\n        const oldIndex = cardsToRender.indexOf(cardConfig);\n\n        const oldCoords = findCoords(oldIndex);\n        const newCoords = findCoords(newIndex);\n\n        // If the card is not moving, skip it\n        if (newCoords.x === oldCoords.x && newCoords.y === oldCoords.y) {\n          continue;\n        }\n\n        // Calculate the delta between the old and new positions\n        const deltaX = newCoords.x - oldCoords.x;\n        const deltaY = newCoords.y - oldCoords.y;\n\n        if (cardConfig.uuid) {\n          result[cardConfig.uuid] = {\n            x: deltaX,\n            y: deltaY,\n            overflowing: newCoords.overflowing,\n          };\n        }\n      }\n\n      return result;\n    }, [draggedCardUuid, position, cardsToRender, findCoords]);\n\n    // Calculate the preview (placeholder) for the dragged card based on its new position\n    const dragPreview = useMemo(() => {\n      if (position === null) {\n        return null;\n      }\n      if (cardsToRender.length === 0) {\n        return { x: 0, y: 0, width: '100%', height: '100%' };\n      }\n      const { x, y } = findCoords(position);\n      const colGapsCount = columns - 1;\n      const rect = gridBoxRef.current?.getBoundingClientRect();\n\n      const singleWidth = ((rect?.width ?? 0) - colGapsCount * theme.spacing.sm) / columns;\n\n      const height = cardHeight;\n      return { x, y, width: singleWidth, height };\n    }, [position, findCoords, columns, cardHeight, theme, cardsToRender.length]);\n\n    const mouseMove = useCallback(\n      (e: React.MouseEvent) => {\n        if (!isDragging() || !gridBoxRef.current) {\n          return;\n        }\n\n        const rect = gridBoxRef.current.getBoundingClientRect();\n        const rowCount = Math.ceil(lastElementCount.current / columns);\n\n        setTargetSection(sectionId);\n        const pos =\n          Math.floor(((e.clientY - rect.top) / rect.height) * rowCount) * columns +\n          Math.floor(((e.clientX - rect.left) / rect.width) * columns);\n\n        setPositionInSection(pos);\n        setTargetPosition(pos);\n      },\n\n      [columns, isDragging, sectionId, setTargetSection, setTargetPosition],\n    );\n\n    const [columnSuggestions, setColumnSuggestions] = useState<{ cols: number; width: number }[]>([]);\n\n    const immediateColSuggestion = useRef<number | null>(null);\n    const immediateRowSuggestion = useRef<number | null>(null);\n\n    const onResizeStart = useCallback((rect: DOMRect) => {\n      const gridBoxRefSize = gridBoxRef.current?.getBoundingClientRect();\n      if (!gridBoxRefSize) {\n        return;\n      }\n\n      setResizePreview({\n        x: rect.left - gridBoxRefSize.left,\n        y: rect.top - gridBoxRefSize.top,\n        width: rect.width,\n        height: rect.height,\n      });\n\n      setColumnSuggestions(getColumnSuggestions(gridBoxRefSize.width));\n    }, []);\n\n    const onResizeStop = useCallback(() => {\n      setColumns(immediateColSuggestion.current ?? columns);\n      setCardHeight(immediateRowSuggestion.current ?? cardHeight);\n      setResizePreview(null);\n    }, [cardHeight, columns, setCardHeight, setColumns]);\n\n    const onResize = useCallback(\n      (width: number, height: number) => {\n        const columnSuggestion = columnSuggestions.reduce((prev, curr) =>\n          Math.abs(curr.width - width) < Math.abs(prev.width - width) ? curr : prev,\n        );\n\n        const rowHeightSuggestion = rowHeightSuggestions.reduce((prev, curr) =>\n          Math.abs(curr - height) < Math.abs(prev - height) ? curr : prev,\n        );\n\n        immediateColSuggestion.current = columnSuggestion.cols;\n        immediateRowSuggestion.current = rowHeightSuggestion;\n\n        setResizePreview((current) => {\n          if (!current) {\n            return null;\n          }\n          if (current.width !== columnSuggestion.width || current.height !== rowHeightSuggestion) {\n            return { ...current, width: columnSuggestion.width, height: rowHeightSuggestion };\n          }\n          return current;\n        });\n      },\n      [columnSuggestions],\n    );\n\n    return (\n      <div\n        ref={gridBoxRef}\n        css={[\n          { position: 'relative' },\n          cardsToRender.length > 0 && {\n            display: 'grid',\n            gap: theme.spacing.sm,\n          },\n        ]}\n        style={{\n          gridTemplateColumns: 'repeat(' + columns + ', 1fr)',\n          ...(draggedCardUuid && {\n            [DRAGGABLE_CARD_TRANSITION_NAME]: 'transform 0.1s',\n          }),\n        }}\n        data-testid=\"draggable-chart-cards-grid\"\n        onMouseMove={mouseMove}\n        onMouseLeave={() => {\n          setPositionInSection(null);\n        }}\n      >\n        {(draggedCardUuid || resizePreview) && (\n          <Global\n            styles={{\n              'body, :host': {\n                userSelect: 'none',\n              },\n            }}\n          />\n        )}\n        {cardsToRender.length === 0 && (\n          <div css={{ display: 'flex', justifyContent: 'center', minHeight: 160 }}>\n            <Empty\n              title={\n                <FormattedMessage\n                  defaultMessage=\"No charts in this section\"\n                  description=\"Runs compare page > Charts tab > No charts placeholder title\"\n                />\n              }\n              description={\n                <FormattedMessage\n                  defaultMessage=\"Click 'Add chart' or drag and drop to add charts here.\"\n                  description=\"Runs compare page > Charts tab > No charts placeholder description\"\n                />\n              }\n            />\n          </div>\n        )}\n        {cardsToRender.map((cardConfig, index, array) => {\n          return (\n            <RunsChartsDraggableCard\n              key={cardConfig.uuid}\n              uuid={cardConfig.uuid ?? ''}\n              translateBy={cardTransforms[cardConfig.uuid ?? '']}\n              onResizeStart={onResizeStart}\n              onResizeStop={onResizeStop}\n              onResize={onResize}\n              cardConfig={cardConfig}\n              chartRunData={chartRunData}\n              onReorderWith={onSwapCards}\n              index={index}\n              height={cardHeight}\n              canMoveDown={Boolean(array[index + 1])}\n              canMoveUp={Boolean(array[index - 1])}\n              previousChartUuid={array[index - 1]?.uuid}\n              nextChartUuid={array[index + 1]?.uuid}\n              hideEmptyCharts={hideEmptyCharts}\n              {...cardProps}\n            />\n          );\n        })}\n        {dragPreview && <RunsChartsDraggablePreview {...dragPreview} />}\n        {resizePreview && <RunsChartsDraggablePreview {...resizePreview} />}\n      </div>\n    );\n  },\n);\n","import type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport { RunsChartsCardConfig } from '../../runs-charts.types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport type { RunsChartCardSetFullscreenFn } from '../cards/ChartCard.common';\nimport { RunsChartsGlobalLineChartConfig } from '../../../experiment-page/models/ExperimentPageUIState';\nimport type { ChartSectionConfig } from '../../../../types';\nimport { RunsChartsDraggableCardsGridSection } from '../RunsChartsDraggableCardsGridSection';\n\nexport interface RunsChartsSectionProps {\n  sectionId: string;\n  sectionConfig: ChartSectionConfig;\n  sectionCharts: RunsChartsCardConfig[];\n  reorderCharts: (sourceChartUuid: string, targetChartUuid: string) => void;\n  insertCharts: (sourceChartUuid: string, targetSectionId: string) => void;\n  isMetricHistoryLoading: boolean;\n  chartData: RunsChartsRunData[];\n  startEditChart: (chartCard: RunsChartsCardConfig) => void;\n  removeChart: (configToDelete: RunsChartsCardConfig) => void;\n  groupBy: RunsGroupByConfig | null;\n  sectionIndex: number;\n  setFullScreenChart: RunsChartCardSetFullscreenFn;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n}\n\nexport const RunsChartsSection = ({\n  sectionId,\n  sectionCharts,\n  reorderCharts,\n  insertCharts,\n  isMetricHistoryLoading,\n  chartData,\n  startEditChart,\n  removeChart,\n  groupBy,\n  sectionIndex,\n  setFullScreenChart,\n  autoRefreshEnabled,\n  hideEmptyCharts,\n  globalLineChartConfig,\n  sectionConfig,\n}: RunsChartsSectionProps) => {\n  return (\n    <RunsChartsDraggableCardsGridSection\n      sectionConfig={sectionConfig}\n      cardsConfig={sectionCharts}\n      chartRunData={chartData}\n      onStartEditChart={startEditChart}\n      onRemoveChart={removeChart}\n      setFullScreenChart={setFullScreenChart}\n      sectionId={sectionId}\n      groupBy={groupBy}\n      autoRefreshEnabled={autoRefreshEnabled}\n      hideEmptyCharts={hideEmptyCharts}\n      globalLineChartConfig={globalLineChartConfig}\n    />\n  );\n};\n","import { Accordion } from '@databricks/design-system';\nimport { ChartSectionConfig } from '../../../../types';\nimport { RunsChartsRunData } from '../RunsCharts.common';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartType,\n  RunsChartsLineCardConfig,\n  RunsChartsScatterCardConfig,\n  RunsChartsContourCardConfig,\n  SerializedRunsChartsCardConfigCard,\n  RunsChartsParallelCardConfig,\n} from '../../runs-charts.types';\nimport MetricChartsAccordion, { METRIC_CHART_SECTION_HEADER_SIZE } from '../../../MetricChartsAccordion';\nimport { RunsChartsSectionHeader } from './RunsChartsSectionHeader';\nimport { RunsChartsSection } from './RunsChartsSection';\nimport { useCallback, useMemo } from 'react';\nimport { getUUID } from '@mlflow/mlflow/src/common/utils/ActionUtils';\nimport { useState } from 'react';\nimport { Button, PlusIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { Empty } from '@databricks/design-system';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { Spacer } from '@databricks/design-system';\nimport { useUpdateRunsChartsUIConfiguration } from '../../hooks/useRunsChartsUIConfiguration';\nimport { compact, isArray } from 'lodash';\nimport { RunsChartCardSetFullscreenFn } from '../cards/ChartCard.common';\nimport type { RunsGroupByConfig } from '../../../experiment-page/utils/experimentPage.group-row-utils';\nimport type { RunsChartsGlobalLineChartConfig } from '../../../experiment-page/models/ExperimentPageUIState';\n\nconst chartMatchesFilter = (filter: string, config: RunsChartsCardConfig) => {\n  // Use regexp-based filtering if a feature flag is enabled\n  if (config.type === RunsChartType.IMAGE || config.type === RunsChartType.DIFFERENCE) {\n    return true;\n  }\n\n  try {\n    const filterRegex = new RegExp(filter, 'i');\n    return getChartMetricsAndParams(config).some((metricOrParam) => metricOrParam.match(filterRegex));\n  } catch {\n    // If the regex is invalid (e.g. user it still typing it), prevent from filtering\n    return true;\n  }\n};\n\nconst getChartMetricsAndParams = (config: RunsChartsCardConfig): string[] => {\n  if (config.type === RunsChartType.BAR) {\n    const barConfig = config as RunsChartsBarCardConfig;\n    if (barConfig.dataAccessKey) {\n      return [barConfig.metricKey, barConfig.dataAccessKey];\n    }\n    return [barConfig.metricKey];\n  } else if (config.type === RunsChartType.LINE) {\n    const lineConfig = config as RunsChartsLineCardConfig;\n    if (isArray(lineConfig.selectedMetricKeys)) {\n      return lineConfig.selectedMetricKeys;\n    }\n    return [lineConfig.metricKey];\n  } else if (config.type === RunsChartType.SCATTER) {\n    const scatterConfig = config as RunsChartsScatterCardConfig;\n    return [scatterConfig.xaxis.key.toLowerCase(), scatterConfig.yaxis.key.toLowerCase()];\n  } else if (config.type === RunsChartType.PARALLEL) {\n    const parallelConfig = config as RunsChartsParallelCardConfig;\n    return [...parallelConfig.selectedMetrics, ...parallelConfig.selectedParams];\n  } else {\n    const contourConfig = config as RunsChartsContourCardConfig;\n    return [contourConfig.xaxis.key, contourConfig.yaxis.key, contourConfig.zaxis.key];\n  }\n};\n\nexport interface RunsChartsSectionAccordionProps {\n  compareRunSections?: ChartSectionConfig[];\n  compareRunCharts?: SerializedRunsChartsCardConfigCard[];\n  reorderCharts: (sourceChartUuid: string, targetChartUuid: string) => void;\n  insertCharts: (sourceChartUuid: string, targetSectionId: string) => void;\n  chartData: RunsChartsRunData[];\n  isMetricHistoryLoading?: boolean;\n  startEditChart: (chartCard: RunsChartsCardConfig) => void;\n  removeChart: (configToDelete: RunsChartsCardConfig) => void;\n  addNewChartCard: (metricSectionId: string) => (type: RunsChartType) => void;\n  search: string;\n  groupBy: RunsGroupByConfig | null;\n  autoRefreshEnabled?: boolean;\n  hideEmptyCharts?: boolean;\n  supportedChartTypes?: RunsChartType[] | undefined;\n  setFullScreenChart: RunsChartCardSetFullscreenFn;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  noRunsSelectedEmptyState?: React.ReactElement;\n}\n\nexport const RunsChartsSectionAccordion = ({\n  compareRunSections,\n  compareRunCharts,\n  reorderCharts,\n  insertCharts,\n  chartData,\n  isMetricHistoryLoading = false,\n  autoRefreshEnabled = false,\n  startEditChart,\n  removeChart,\n  addNewChartCard,\n  search,\n  groupBy,\n  supportedChartTypes,\n  hideEmptyCharts,\n  setFullScreenChart = () => {},\n  globalLineChartConfig,\n  noRunsSelectedEmptyState,\n}: RunsChartsSectionAccordionProps) => {\n  const updateUIState = useUpdateRunsChartsUIConfiguration();\n  const [editSection, setEditSection] = useState(-1);\n  const { theme } = useDesignSystemTheme();\n\n  /**\n   * Get the active (expanded) panels for the accordion\n   */\n  const activeKey = useMemo(() => {\n    const activeSections = (compareRunSections || []).flatMap((sectionConfig: ChartSectionConfig) => {\n      if (sectionConfig.display) {\n        return [sectionConfig.uuid];\n      } else {\n        return [];\n      }\n    });\n    return activeSections;\n  }, [compareRunSections]);\n\n  /**\n   * Updates the active (expanded) panels for the accordion\n   */\n  const onActivePanelChange = useCallback(\n    (key: string | string[]) => {\n      updateUIState((current) => {\n        const newCompareRunPanels = (current.compareRunSections || []).map((sectionConfig: ChartSectionConfig) => {\n          const sectionId = sectionConfig.uuid;\n          const shouldDisplaySection =\n            (typeof key === 'string' && sectionId === key) || (Array.isArray(key) && key.includes(sectionId));\n          return {\n            ...sectionConfig,\n            display: shouldDisplaySection,\n          };\n        });\n        return {\n          ...current,\n          compareRunSections: newCompareRunPanels,\n        };\n      });\n    },\n    [updateUIState],\n  );\n\n  /**\n   * Deletes a section from the accordion\n   */\n  const deleteSection = useCallback(\n    (sectionId: string) => {\n      updateUIState((current) => {\n        const newCompareRunCharts = (current.compareRunCharts || [])\n          // Keep charts that are generated or not in section\n          .filter((chartConfig: RunsChartsCardConfig) => {\n            return chartConfig.isGenerated || chartConfig.metricSectionId !== sectionId;\n          })\n          // For charts that are generated and in section, set deleted to true\n          .map((chartConfig: RunsChartsCardConfig) => {\n            if (chartConfig.isGenerated && chartConfig.metricSectionId === sectionId) {\n              return { ...chartConfig, deleted: true };\n            } else {\n              return chartConfig;\n            }\n          });\n\n        // Delete section\n        const newCompareRunSections = (current.compareRunSections || [])\n          .slice()\n          .filter((sectionConfig: ChartSectionConfig) => {\n            return sectionConfig.uuid !== sectionId;\n          });\n\n        return {\n          ...current,\n          compareRunCharts: newCompareRunCharts,\n          compareRunSections: newCompareRunSections,\n          isAccordionReordered: true,\n        };\n      });\n    },\n    [updateUIState],\n  );\n\n  /**\n   * Adds a section to the accordion\n   * @param sectionId indicates the section selected to anchor at\n   * @param above is a boolean value indicating whether to add the section above or below the anchor\n   */\n  const addSection = useCallback(\n    (sectionId: string, above: boolean) => {\n      let idx = -1;\n      updateUIState((current) => {\n        // Look for index\n        const newCompareRunSections = [...(current.compareRunSections || [])];\n        idx = newCompareRunSections.findIndex((sectionConfig: ChartSectionConfig) => sectionConfig.uuid === sectionId);\n        const newSection = { name: '', uuid: getUUID(), display: false, isReordered: false };\n        if (idx < 0) {\n          // Index not found, add to end\n          newCompareRunSections.push(newSection);\n        } else if (above) {\n          newCompareRunSections.splice(idx, 0, newSection);\n        } else {\n          idx += 1;\n          newCompareRunSections.splice(idx, 0, newSection);\n        }\n        return {\n          ...current,\n          compareRunSections: newCompareRunSections,\n          isAccordionReordered: true,\n        };\n      });\n      return idx;\n    },\n    [updateUIState],\n  );\n\n  /**\n   * Appends a section to the end of the accordion\n   */\n  const appendSection = useCallback(() => {\n    updateUIState((current) => {\n      const newCompareRunSections = [\n        ...(current.compareRunSections || []),\n        { name: '', uuid: getUUID(), display: false, isReordered: false },\n      ];\n      return {\n        ...current,\n        compareRunSections: newCompareRunSections,\n        isAccordionReordered: true,\n      };\n    });\n    setEditSection(compareRunSections?.length || -1);\n  }, [updateUIState, compareRunSections?.length]);\n\n  /**\n   * Updates the name of a section\n   * @param sectionId the section to update the name of\n   * @param name the new name of the section\n   */\n  const setSectionName = useCallback(\n    (sectionId: string, name: string) => {\n      updateUIState((current) => {\n        const newCompareRunSections = (current.compareRunSections || []).map((sectionConfig: ChartSectionConfig) => {\n          if (sectionConfig.uuid === sectionId) {\n            return { ...sectionConfig, name: name };\n          } else {\n            return sectionConfig;\n          }\n        });\n        return {\n          ...current,\n          compareRunSections: newCompareRunSections,\n          isAccordionReordered: true,\n        };\n      });\n    },\n    [updateUIState],\n  );\n\n  /**\n   * Reorders the sections in the accordion\n   * @param sourceSectionId the section you are dragging\n   * @param targetSectionId the section to drop\n   */\n  const sectionReorder = useCallback(\n    (sourceSectionId: string, targetSectionId: string) => {\n      updateUIState((current) => {\n        const newCompareRunSections = (current.compareRunSections || []).slice();\n        const sourceSectionIdx = newCompareRunSections.findIndex(\n          (sectionConfig: ChartSectionConfig) => sectionConfig.uuid === sourceSectionId,\n        );\n        const targetSectionIdx = newCompareRunSections.findIndex(\n          (sectionConfig: ChartSectionConfig) => sectionConfig.uuid === targetSectionId,\n        );\n        const sourceSection = newCompareRunSections.splice(sourceSectionIdx, 1)[0];\n        // If the source section is above the target section, the target section index will be shifted down by 1\n        newCompareRunSections.splice(targetSectionIdx, 0, sourceSection);\n        return {\n          ...current,\n          compareRunSections: newCompareRunSections,\n          isAccordionReordered: true,\n        };\n      });\n    },\n    [updateUIState],\n  );\n\n  const noRunsSelected = useMemo(() => chartData.filter(({ hidden }) => !hidden).length === 0, [chartData]);\n\n  const { sectionsToRender, chartsToRender } = useMemo(() => {\n    if (search === '') {\n      return { sectionsToRender: compareRunSections, chartsToRender: compareRunCharts };\n    }\n\n    const compareRunChartsFiltered = (compareRunCharts || []).filter((config: RunsChartsCardConfig) => {\n      return !config.deleted && chartMatchesFilter(search, config);\n    });\n    // Get the sections that have these charts\n    const sectionsWithCharts = new Set<string>();\n    compareRunChartsFiltered.forEach((config: RunsChartsCardConfig) => {\n      if (config.metricSectionId) {\n        sectionsWithCharts.add(config.metricSectionId);\n      }\n    });\n    // Filter the sections\n    const compareRunSectionsFiltered = (compareRunSections || []).filter((sectionConfig: ChartSectionConfig) => {\n      return sectionsWithCharts.has(sectionConfig.uuid);\n    });\n\n    return { sectionsToRender: compareRunSectionsFiltered, chartsToRender: compareRunChartsFiltered };\n  }, [search, compareRunCharts, compareRunSections]);\n\n  const isSearching = search !== '';\n\n  if (!compareRunSections || !compareRunCharts) {\n    return null;\n  }\n\n  if (noRunsSelected) {\n    return (\n      noRunsSelectedEmptyState ?? (\n        <div css={{ marginTop: theme.spacing.lg }}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"All runs are hidden. Select at least one run to view charts.\"\n                description=\"Experiment tracking > runs charts > indication displayed when no runs are selected for comparison\"\n              />\n            }\n          />\n        </div>\n      )\n    );\n  }\n\n  if (isSearching && chartsToRender?.length === 0) {\n    // Render empty in the center of the page\n    return (\n      <>\n        <Spacer size=\"lg\" />\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No metric charts\"\n              description=\"Experiment page > compare runs > no metric charts\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage=\"All charts are filtered. Clear the search filter to see hidden metric charts.\"\n              description=\"Experiment page > compare runs > no metric charts > description\"\n            />\n          }\n        />\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <MetricChartsAccordion activeKey={activeKey} onActiveKeyChange={onActivePanelChange}>\n        {(sectionsToRender || []).map((sectionConfig: ChartSectionConfig, index: number) => {\n          const sectionCharts = (chartsToRender || []).filter((config: RunsChartsCardConfig) => {\n            const section = (config as RunsChartsBarCardConfig).metricSectionId;\n            return !config.deleted && section === sectionConfig.uuid;\n          });\n\n          return (\n            <Accordion.Panel\n              header={\n                <RunsChartsSectionHeader\n                  index={index}\n                  section={sectionConfig}\n                  onDeleteSection={deleteSection}\n                  onAddSection={addSection}\n                  editSection={editSection}\n                  onSetEditSection={setEditSection}\n                  onSetSectionName={setSectionName}\n                  sectionChartsLength={sectionCharts.length}\n                  addNewChartCard={addNewChartCard}\n                  onSectionReorder={sectionReorder}\n                  isExpanded={activeKey.includes(sectionConfig.uuid)}\n                  supportedChartTypes={supportedChartTypes}\n                  // When searching, hide the section placement controls\n                  hideExtraControls={isSearching}\n                />\n              }\n              key={sectionConfig.uuid}\n              aria-hidden={!activeKey.includes(sectionConfig.uuid)}\n            >\n              <RunsChartsSection\n                sectionId={sectionConfig.uuid}\n                sectionConfig={sectionConfig}\n                sectionCharts={sectionCharts}\n                reorderCharts={reorderCharts}\n                insertCharts={insertCharts}\n                isMetricHistoryLoading={isMetricHistoryLoading}\n                chartData={chartData}\n                startEditChart={startEditChart}\n                removeChart={removeChart}\n                groupBy={groupBy}\n                sectionIndex={index}\n                setFullScreenChart={setFullScreenChart}\n                autoRefreshEnabled={autoRefreshEnabled}\n                hideEmptyCharts={hideEmptyCharts}\n                globalLineChartConfig={globalLineChartConfig}\n              />\n            </Accordion.Panel>\n          );\n        })}\n      </MetricChartsAccordion>\n      {!isSearching && (\n        <div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_sections_runscomparesectionaccordion.tsx_405\"\n            block\n            onClick={appendSection}\n            icon={<PlusIcon />}\n            style={{ border: 'none', marginTop: '6px' }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Add section\"\n              description=\"Experiment page > compare runs > chart section > add section bar\"\n            />\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { useIntl } from 'react-intl';\nimport { Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const RunsChartsFilterInput = ({ chartsSearchFilter }: { chartsSearchFilter?: string }) => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  const { theme } = useDesignSystemTheme();\n\n  const [inputValue, setInputValue] = useState(() => chartsSearchFilter ?? '');\n  const [searching, setSearching] = useState(false);\n\n  const { formatMessage } = useIntl();\n\n  const updateChartFilter = useCallback(\n    (value: string) => {\n      updateChartsUIState((current) => ({\n        ...current,\n        chartsSearchFilter: value,\n      }));\n      setSearching(false);\n    },\n    [updateChartsUIState],\n  );\n\n  const updateChartFilterDebounced = useDebouncedCallback(updateChartFilter, 150);\n\n  return (\n    <Input\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfilterinput.tsx_30\"\n      role=\"searchbox\"\n      prefix={\n        <div css={{ width: theme.general.iconFontSize, lineHeight: 0 }}>\n          {searching ? <Spinner size=\"small\" /> : <SearchIcon />}\n        </div>\n      }\n      value={inputValue}\n      allowClear\n      onChange={(e) => {\n        setInputValue(e.target.value);\n        setSearching(true);\n        updateChartFilterDebounced(e.target.value);\n      }}\n      placeholder={formatMessage({\n        defaultMessage: 'Search metric charts',\n        description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n      })}\n    />\n  );\n};\n","var _path, _path2, _path3, _path4, _path5;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgChartParallel(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V17H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.21875 3.58289C4.55663 3.58289 4.88067 3.68935 5.21469 3.73008C5.6474 3.78285 6.02137 3.96513 6.37191 4.21552C6.76902 4.49917 7.0271 4.74589 7.24101 5.18954C7.44337 5.60925 7.59378 6.06989 7.72958 6.51432C7.86002 6.94121 8.09708 7.33726 8.19153 7.77803C8.25347 8.0671 8.34514 8.32427 8.44678 8.60015C8.58028 8.96252 8.80086 9.27915 8.96667 9.62583C9.15145 10.0122 9.216 10.4461 9.34876 10.8551C9.57831 11.5623 9.91132 12.4763 10.7205 12.6731C11.4284 12.8453 12.1459 12.8845 12.8705 12.8845C13.0981 12.8845 13.3979 12.898 13.5831 12.7499C13.6402 12.7042 13.7451 12.6907 13.8164 12.6591C13.8752 12.6329 14.0919 12.5871 14.1123 12.5463\",\n    stroke: \"#CCE3F2\",\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.16162 12.9805C4.32512 12.9805 4.4895 12.9859 4.65284 12.9805C4.84076 12.9742 5.0468 12.7952 5.2099 12.707C5.62236 12.4841 5.99426 12.0648 6.24299 11.6739C6.49491 11.2781 6.8776 10.9871 7.0887 10.5649C7.27767 10.187 7.50992 9.80749 7.73691 9.45078C7.93911 9.13304 8.10211 8.77722 8.28637 8.44554C8.43088 8.18544 8.45 7.88672 8.60542 7.62768C8.94898 7.05509 9.16215 6.418 9.45873 5.82484C9.72614 5.29001 9.96898 4.82426 10.4159 4.42207C10.5753 4.27853 10.8984 4.21824 11.0995 4.14861C11.3303 4.06873 11.579 4.02714 11.8136 3.93592C12.0394 3.84807 12.2521 3.84383 12.4795 3.77386C12.6993 3.70623 12.9319 3.63713 13.1632 3.63713C13.5192 3.63713 13.9089 3.59155 14.2798 3.59155\",\n    stroke: \"#CCE3F2\",\n    strokeLinecap: \"round\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.79248 2.74207V13.8225\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.873 3.04419V13.7217\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartParallel);\nexport default __webpack_public_path__ + \"static/media/chart-parallel.da7dedf539b2af4b654d377c679173e4.svg\";\nexport { ForwardRef as ReactComponent };","import _ from 'lodash';\n// Import pako lazily to reduce bundle size\nconst lazyPako = () => import('pako');\n\nexport const truncateToFirstLineWithMaxLength = (str: string, maxLength: number): string => {\n  const truncated = _.truncate(str, {\n    length: maxLength,\n  });\n  return _.takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n\nexport const capitalizeFirstChar = (str: unknown) => {\n  if (!str || typeof str !== 'string' || str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport const middleTruncateStr = (str: string, maxLen: number) => {\n  if (str.length > maxLen) {\n    const firstPartLen = Math.floor((maxLen - 3) / 2);\n    const lastPartLen = maxLen - 3 - firstPartLen;\n    return str.substring(0, firstPartLen) + '...' + str.substring(str.length - lastPartLen, str.length);\n  } else {\n    return str;\n  }\n};\n\nconst capitalizeFirstLetter = (string: string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/* eslint-disable no-bitwise */\n/**\n * UTF-8 safe version of base64 encoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to encode\n */\nexport const btoaUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = _utf8_encode(input);\n\n  while (i < result.length) {\n    const chr1 = result.charCodeAt(i++);\n    const chr2 = result.charCodeAt(i++);\n    const chr3 = result.charCodeAt(i++);\n\n    const enc1 = chr1 >> 2;\n    const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    let enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc4 = 64;\n      enc3 = enc4;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n\n/**\n * UTF-8 safe version of base64 decoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to decode\n */\nexport const atobUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = input?.replace(/[^A-Za-z0-9+/=]/g, '') || '';\n\n  while (i < result.length) {\n    const enc1 = _keyStr.indexOf(result.charAt(i++));\n    const enc2 = _keyStr.indexOf(result.charAt(i++));\n    const enc3 = _keyStr.indexOf(result.charAt(i++));\n    const enc4 = _keyStr.indexOf(result.charAt(i++));\n\n    const chr1 = (enc1 << 2) | (enc2 >> 4);\n    const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    const chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output += String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n\n  return _utf8_decode(output);\n};\n\n/**\n * (private method) does a UTF-8 encoding\n *\n * @private\n * @param {string} string - Text to encode\n */\nconst _utf8_encode = (string = '') => {\n  const result = string.replace(/\\r\\n/g, '\\n');\n  let utftext = '';\n\n  for (let n = 0; n < result.length; n++) {\n    const c = result.charCodeAt(n);\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode((c >> 6) | 192) + String.fromCharCode((c & 63) | 128);\n    } else {\n      utftext +=\n        String.fromCharCode((c >> 12) | 224) +\n        String.fromCharCode(((c >> 6) & 63) | 128) +\n        String.fromCharCode((c & 63) | 128);\n    }\n  }\n\n  return utftext;\n};\n\n/**\n * (private method) does a UTF-8 decoding\n *\n * @private\n * @param {string} utftext - UTF-8 text to dencode\n */\nconst _utf8_decode = (utftext = '') => {\n  let string = '';\n  let i = 0;\n\n  while (i < utftext.length) {\n    const c = utftext.charCodeAt(i);\n\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if (c > 191 && c < 224) {\n      const c2 = utftext.charCodeAt(i + 1);\n      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n      i += 2;\n    } else {\n      const c2 = utftext.charCodeAt(i + 1);\n      const c3 = utftext.charCodeAt(i + 2);\n      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n      i += 3;\n    }\n  }\n  return string;\n};\n/* eslint-enable no-bitwise */\n\n/**\n * Returns a SHA256 hash of the input string\n */\nexport const getStringSHA256 = (input: string) => {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(input)).then((arrayBuffer) => {\n    return Array.prototype.map.call(new Uint8Array(arrayBuffer), (x) => ('00' + x.toString(16)).slice(-2)).join('');\n  });\n};\n\nconst COMPRESSED_TEXT_DEFLATE_PREFIX = 'deflate;';\n\nexport const textCompressDeflate = async (text: string) => {\n  const pako = await lazyPako();\n  const binaryData = pako.deflate(text);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const b64encoded = Buffer.from(binaryData).toString('base64');\n    return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${b64encoded}`;\n  }\n\n  // btoa-based implementation\n  const binaryString = Array.from(binaryData, (byte) => String.fromCodePoint(byte)).join('');\n  return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${btoa(binaryString)}`;\n};\n\nexport const textDecompressDeflate = async (compressedText: string) => {\n  const pako = await lazyPako();\n  if (!compressedText.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX)) {\n    throw new Error('Invalid compressed text, payload header invalid');\n  }\n  const compressedTextWithoutPrefix = compressedText.slice(COMPRESSED_TEXT_DEFLATE_PREFIX.length);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const binaryString = Buffer.from(compressedTextWithoutPrefix, 'base64');\n    return pako.inflate(binaryString, { to: 'string' });\n  }\n\n  // atob-based implementation\n  const binaryString = atob(compressedTextWithoutPrefix);\n  return pako.inflate(\n    Uint8Array.from(binaryString, (m) => m.codePointAt(0) ?? 0),\n    { to: 'string' },\n  );\n};\n\nexport const isTextCompressedDeflate = (text: string) => text.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX);\n","import { last, uniq } from 'lodash';\nimport { RunsChartsLineChartExpression } from '../runs-charts.types';\nimport { useCallback } from 'react';\n\nconst VARIABLE_OPERATOR = '$';\nconst MATCH_VARIABLE_REGEX = /\\$\\{([^}]+)\\}/g;\n\nenum Operator {\n  ADD = '+',\n  SUBTRACT = '-',\n  MULTIPLY = '*',\n  DIVIDE = '/',\n  POWER = '^',\n  // unary operators\n  NEGATIVE_SIGN = '_',\n  POSITIVE_SIGN = '|',\n}\nenum Parenthesis {\n  OPEN = '(',\n  CLOSE = ')',\n}\nenum VariableParenthesis {\n  OPEN = '{',\n  CLOSE = '}',\n}\n// Higher precedence value means higher priority\nconst precedence = {\n  [Operator.ADD]: 1,\n  [Operator.SUBTRACT]: 1,\n  [Operator.MULTIPLY]: 2,\n  [Operator.DIVIDE]: 2,\n  [Operator.POWER]: 3,\n  [Operator.NEGATIVE_SIGN]: 4,\n  [Operator.POSITIVE_SIGN]: 4,\n};\n\nconst isBinaryOperator = (char: string | number | undefined) => {\n  if (typeof char === 'string') {\n    return [Operator.ADD, Operator.SUBTRACT, Operator.MULTIPLY, Operator.DIVIDE, Operator.POWER].includes(\n      char as Operator,\n    );\n  }\n  return false;\n};\n\nconst isUnaryOperator = (char: string | number | undefined) => {\n  if (typeof char === 'string') {\n    return [Operator.NEGATIVE_SIGN, Operator.POSITIVE_SIGN].includes(char as Operator);\n  }\n  return false;\n};\nconst isHigherPrecedence = (op1: Operator, op2: Operator) => precedence[op1] > precedence[op2];\n\nconst indexToVariableString = (name: number) => `${VARIABLE_OPERATOR}{${name}}`;\nconst variableStringToIndex = (variable: string) => variable.slice(2, -1);\n\n// Parses variables from an expression and replace with an index\nexport const parseVariablesAndReplaceWithIndex = (expression: string) => {\n  const matches = expression.match(MATCH_VARIABLE_REGEX);\n  if (!matches) {\n    return { expression, variables: [] };\n  }\n  // De-duplicate matches and map them to their index\n  const dedupMatches = uniq(matches);\n  const matchesMap: Record<string, string> = {};\n  dedupMatches.forEach((match, index) => {\n    matchesMap[match] = indexToVariableString(index);\n  });\n  // Convert each variable into an index number e.g. ${train/loss} => ${0}\n  const replacedExpression = expression.replace(MATCH_VARIABLE_REGEX, (match) => {\n    if (match in matchesMap) {\n      return matchesMap[match];\n    }\n    return match;\n  });\n\n  const variables = dedupMatches.map(variableStringToIndex);\n  return { expression: replacedExpression, variables };\n};\n\n// Pop function that throws an error if the stack is empty\nconst popAndValidate = (stack: (string | number)[], operandCount: number[]): string | number => {\n  const lastElement = stack.pop();\n  if (lastElement === undefined) {\n    throw new Error('Invalid expression: stack is empty');\n  } else if (isBinaryOperator(lastElement)) {\n    if (operandCount[operandCount.length - 1] < 2) {\n      throw new Error('Invalid expression: Stack has binary operator without enough operands');\n    }\n    operandCount[operandCount.length - 1]--;\n  } else if (isUnaryOperator(lastElement)) {\n    if (operandCount[operandCount.length - 1] < 1) {\n      throw new Error('Invalid expression: Stack has unary operator without enough operands');\n    }\n  } else {\n    throw new Error('Invalid expression: Stack has invalid elements');\n  }\n  return lastElement;\n};\n\n// Flushes all the unary operators on a given value\nconst flushUnaryOperators = (stack: (string | number)[], output: (string | number)[], operandCount: number[]) => {\n  while (stack.length > 0 && isUnaryOperator(last(stack))) {\n    output.push(popAndValidate(stack, operandCount));\n  }\n};\n\nconst toRPN = (expression: string) => {\n  const stack: (string | number)[] = [];\n  const output: (string | number)[] = [];\n  const operandCount: number[] = [0];\n\n  const incrementOperand = () => {\n    operandCount[operandCount.length - 1]++;\n  };\n  for (let i = 0; i < expression.length; i++) {\n    let char = expression[i];\n\n    // Convert unary operators to placeholder negative and positive signs\n    const isUnarySign = i === 0 || isBinaryOperator(expression[i - 1]) || expression[i - 1] === Parenthesis.OPEN;\n    if (char === Operator.SUBTRACT && isUnarySign) {\n      char = Operator.NEGATIVE_SIGN;\n    } else if (char === Operator.ADD && isUnarySign) {\n      char = Operator.POSITIVE_SIGN;\n    }\n\n    if (char === VARIABLE_OPERATOR) {\n      let variable = '';\n      if (i + 1 >= expression.length || expression[i + 1] !== VariableParenthesis.OPEN) {\n        throw new Error('Invalid expression: Variable must be followed by {');\n      }\n      i++; // Skip '{'\n      while (i + 1 < expression.length && expression[i + 1] !== VariableParenthesis.CLOSE) {\n        variable += expression[++i];\n      }\n      i++; // Skip '}'\n      output.push(variable);\n      incrementOperand();\n      flushUnaryOperators(stack, output, operandCount);\n    } else if (/\\d/.test(char) || char === '.') {\n      // If the character is part of a number (digit or decimal point)\n      let num = char;\n      // Parse full number\n      while (i + 1 < expression.length && (/\\d/.test(expression[i + 1]) || expression[i + 1] === '.')) {\n        num += expression[++i];\n      }\n      const periodMatches = num.match(/\\./g);\n      if (periodMatches && periodMatches.length > 1) {\n        throw new Error('Invalid expression: Number has multiple decimal points');\n      }\n      const floatNum = parseFloat(num);\n      incrementOperand();\n      output.push(floatNum);\n      flushUnaryOperators(stack, output, operandCount);\n    } else if (isUnaryOperator(char)) {\n      stack.push(char);\n    } else if (isBinaryOperator(char)) {\n      // If its a binary operator, we should have at least on element in the output to operate on\n      if (output.length === 0) {\n        throw new Error('Invalid expression: Binary operator without operands');\n      }\n      while (\n        stack.length > 0 &&\n        isBinaryOperator(last(stack)) &&\n        (isHigherPrecedence(last(stack) as Operator, char as Operator) ||\n          (last(stack) === char && char !== Operator.POWER))\n      ) {\n        output.push(popAndValidate(stack, operandCount));\n      }\n      stack.push(char);\n    } else if (char === Parenthesis.OPEN) {\n      stack.push(char);\n      operandCount.push(0);\n    } else if (char === Parenthesis.CLOSE) {\n      while (stack.length > 0 && last(stack) !== Parenthesis.OPEN) {\n        output.push(popAndValidate(stack, operandCount));\n      }\n      const openParen = stack.pop(); // Remove '(' from the stack\n      if (openParen !== Parenthesis.OPEN) {\n        throw new Error('Invalid expression: Parenthesis mismatch');\n      }\n      if (operandCount[operandCount.length - 1] !== 1) {\n        throw new Error('Invalid expression: Parenthesis does not have exactly one operand');\n      }\n      operandCount.pop();\n      incrementOperand();\n      flushUnaryOperators(stack, output, operandCount);\n    } else {\n      throw new Error('Invalid expression: Unknown character in expression');\n    }\n  }\n  // The stack should only have unary and binary operators at the end\n  while (stack.length > 0) {\n    output.push(popAndValidate(stack, operandCount));\n  }\n  if (operandCount.length !== 1 || operandCount[0] !== 1) {\n    throw new Error('Invalid expression: Invalid number of operands');\n  }\n  return output;\n};\n\nconst fromRPN = (tokens: (string | number)[]) => {\n  const stack: (number | string)[] = [];\n  tokens.forEach((token) => {\n    if (typeof token === 'number') {\n      stack.push(token);\n      return;\n    }\n    if (isUnaryOperator(token)) {\n      const x = stack.pop();\n      if (typeof x !== 'number') {\n        throw new Error('Invalid expression: Unary operator without operand');\n      }\n      switch (token) {\n        case Operator.NEGATIVE_SIGN:\n          stack.push(-x);\n          break;\n        case Operator.POSITIVE_SIGN:\n          stack.push(x);\n          break;\n      }\n    } else if (isBinaryOperator(token)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      if (typeof a !== 'number' || typeof b !== 'number') {\n        throw new Error('Invalid expression: Binary operator without enough operands');\n      }\n      switch (token) {\n        case Operator.ADD:\n          stack.push(a + b);\n          break;\n        case Operator.SUBTRACT:\n          stack.push(a - b);\n          break;\n        case Operator.MULTIPLY:\n          stack.push(a * b);\n          break;\n        case Operator.DIVIDE:\n          stack.push(a / b);\n          break;\n        case Operator.POWER:\n          stack.push(Math.pow(a, b));\n          break;\n      }\n    } else {\n      throw new Error('Invalid expression: Unknown token in expression');\n    }\n  });\n  if (stack.length !== 1 || typeof stack[0] !== 'number') {\n    throw new Error('Invalid expression: Invalid expression result');\n  }\n  return stack[0];\n};\n\nexport const useChartExpressionParser = () => {\n  const compileExpression = useCallback(\n    (expression: string, metricKeyList: string[]): RunsChartsLineChartExpression | undefined => {\n      try {\n        // Validate only contains valid characters\n        const noVariableExpression = expression.replace(MATCH_VARIABLE_REGEX, '');\n        if (!/^[0-9+\\-*/().\\s^]*$/.test(noVariableExpression)) {\n          return undefined;\n        }\n        // Parse variables from expression and remove whitespace elsewhere\n        const { expression: parsedExpression, variables } = parseVariablesAndReplaceWithIndex(expression);\n        // Check if all variables are valid\n        for (const variable of variables) {\n          if (!metricKeyList.includes(variable)) {\n            return undefined;\n          }\n        }\n        const cleanedExpression = parsedExpression.replace(/\\s/g, '');\n        const replacedExpression = cleanedExpression.replace(MATCH_VARIABLE_REGEX, (match) => {\n          const index = parseInt(match.slice(2, -1), 10);\n          return `${VARIABLE_OPERATOR}{${variables[index]}}`;\n        });\n        // Convert expression to RPN\n        const rpn = toRPN(replacedExpression);\n        return {\n          rpn,\n          variables,\n          expression,\n        };\n      } catch (e) {\n        // If not a valid expression, return undefined\n        return undefined;\n      }\n    },\n    [],\n  );\n\n  const evaluateExpression = (\n    chartExpression: RunsChartsLineChartExpression | undefined,\n    variables: Record<string, number>,\n  ): number | undefined => {\n    if (chartExpression === undefined) {\n      return undefined;\n    }\n    try {\n      const parsedRPN = chartExpression.rpn.map((token) => {\n        if (typeof token === 'string' && chartExpression.variables.includes(token)) {\n          return variables[token];\n        }\n        return token;\n      });\n      return fromRPN(parsedRPN);\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return {\n    compileExpression,\n    evaluateExpression,\n  };\n};\n","import { useCallback, useRef, useState } from 'react';\nimport { type Data, type Layout, type Config, downloadImage } from 'plotly.js';\n\nexport type ExperimentChartImageDownloadFileFormat = 'svg' | 'png';\nexport type ExperimentChartImageDownloadHandler = (\n  format: ExperimentChartImageDownloadFileFormat,\n  chartTitle: string,\n) => void;\n\nconst experimentChartImageDefaultDownloadLayout: Partial<Layout> = {\n  paper_bgcolor: 'white',\n  plot_bgcolor: 'white',\n};\n\nconst experimentChartImageDefaultDownloadSettings = {\n  width: 1200,\n  height: 600,\n};\n\nconst experimentChartImageDefaultDownloadPlotConfig: Partial<Config> = {\n  displaylogo: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nexport const createChartImageDownloadHandler =\n  (data: Data[], layout: Partial<Layout>) => (format: 'svg' | 'png', title: string) =>\n    downloadImage(\n      {\n        data,\n        layout: { ...layout, ...experimentChartImageDefaultDownloadLayout },\n        config: experimentChartImageDefaultDownloadPlotConfig,\n      },\n      { ...experimentChartImageDefaultDownloadSettings, format, filename: title },\n    );\n\n/**\n * Returns a memoized download handler for chart images.\n * Uses ref-based caching to ensure that the download handler is not recreated on every render.\n */\nexport const useChartImageDownloadHandler = () => {\n  const downloadHandlerRef = useRef<ExperimentChartImageDownloadHandler | null>(null);\n  const [downloadHandler, setDownloadHandler] = useState<ExperimentChartImageDownloadHandler | null>(null);\n\n  const setDownloadHandlerCached = useCallback((downloadHandler: ExperimentChartImageDownloadHandler) => {\n    downloadHandlerRef.current = downloadHandler;\n    setDownloadHandler((existingHandler: ExperimentChartImageDownloadHandler | null) => {\n      if (existingHandler) {\n        return existingHandler;\n      }\n\n      return (format: ExperimentChartImageDownloadFileFormat, chartTitle: string) =>\n        downloadHandlerRef.current?.(format, chartTitle);\n    });\n  }, []);\n\n  return [downloadHandler, setDownloadHandlerCached] as const;\n};\n","import type { AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react';\nimport { Spinner } from '@databricks/design-system';\nimport React from 'react';\n\nconst MLFlowAgGridImpl = React.lazy(() => import('./AgGrid'));\n\n/**\n * A simple loader that will lazily load MLflow's ag grid implementation.\n * Extracted to a separate module for testing purposes.\n */\nexport const MLFlowAgGridLoader = (props: AgGridReactProps | AgReactUiProps) => (\n  <React.Suspense\n    fallback={\n      <div\n        css={(cssTheme) => ({\n          display: 'flex',\n          justifyContent: 'center',\n          margin: cssTheme.spacing.md,\n        })}\n      >\n        <Spinner />\n      </div>\n    }\n  >\n    <MLFlowAgGridImpl {...props} />\n  </React.Suspense>\n);\n","import React from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nfunction useMatchesMediaQuery(queryList: MediaQueryList) {\n  return useSyncExternalStore(\n    React.useCallback(\n      (callback) => {\n        queryList.addEventListener('change', callback);\n        return () => {\n          queryList.removeEventListener('change', callback);\n        };\n      },\n      [queryList],\n    ),\n    () => queryList.matches,\n  );\n}\n\n/**\n * React hook that listens for changes to a [media query][media-query]. Uses\n * [`window.matchMedia()`][match-media] under-the-hood.\n *\n * [media-query]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries\n * [match-media]: https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n *\n * @usage\n *\n * ```tsx\n * function FancyButton() {\n *   const prefersReducedMotion = useMediaQuery('(prefers-reduced-motion)');\n *   return prefersReducedMotion ? <Button /> : <DancingButton />;\n * }\n * ```\n *\n * > **Note**\n * > The vast majority of use-cases can (and should) use vanilla CSS media\n * > queries instead of this hook — which will cause a re-render when the match\n * > state changes. Usage of this hook should be reserved for use-cases where\n * > CSS cannot be used instead.\n * >\n * > ```tsx\n * > <Button css={{ 'not (prefers-reduced-motion)': { animation: … } }} />\n * > ```\n */\nexport function useMediaQuery(query: string) {\n  // Note: a new MediaQueryList is created with every _usage_ of this hook.\n  // It's probably cheap to create many instances of MediaQueryList, and\n  // garbage collection will still clean up as expected, but consider using a\n  // [weak cache](https://github.com/tc39/proposal-weakrefs#weak-caches) to\n  // reuse MediaQueryLists where possible if performance is impacted.\n  const queryList = React.useMemo(() => window.matchMedia(query), [query]);\n  return useMatchesMediaQuery(queryList);\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { IntlShape, injectIntl } from 'react-intl';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\n\nimport { updateRunApi } from '../../actions';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\ntype Props = {\n  isOpen?: boolean;\n  runUuid: string;\n  runName: string;\n  onClose: () => void;\n  updateRunApi: (runId: string, newName: string, id: string) => any;\n  intl: IntlShape;\n  onSuccess?: () => void;\n};\n\nclass RenameRunModalImpl extends Component<Props> {\n  formRef = React.createRef();\n\n  handleRenameRun = (values: Record<string, string>) => {\n    // get value of input field\n    const newRunName = values[NEW_NAME_FIELD];\n\n    const updateRunRequestId = getUUID();\n\n    return this.props\n      .updateRunApi(this.props.runUuid, newRunName, updateRunRequestId)\n      .then(() => this.props.onSuccess?.());\n  };\n\n  render() {\n    const { isOpen = false, runName } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Rename Run',\n          description: 'Modal title to rename the experiment run name',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Save',\n          description: 'Modal button text to save the changes to rename the experiment run name',\n        })}\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameRun}\n        onClose={this.props.onClose}\n      >\n        <RenameForm\n          type=\"run\"\n          name={runName}\n          innerRef={this.formRef}\n          visible={isOpen}\n          validator={async (_, value) => {\n            if (typeof value === 'string' && value.length && !value.trim()) {\n              throw new Error(\n                this.props.intl.formatMessage({\n                  defaultMessage: 'Run name cannot consist only of whitespace!',\n                  description: \"An error shown when user sets the run's name to whitespace characters only\",\n                }),\n              );\n            }\n            return true;\n          }}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateRunApi,\n};\n\nexport const RenameRunModalWithIntl = injectIntl(RenameRunModalImpl);\nexport const RenameRunModal = connect(undefined, mapDispatchToProps)(RenameRunModalWithIntl);\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { listImagesApi } from '@mlflow/mlflow/src/experiment-tracking/actions';\nimport { EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE } from '@mlflow/mlflow/src/experiment-tracking/constants';\n\nexport const usePopulateImagesByRunUuid = ({\n  runUuids,\n  runUuidsIsActive,\n  autoRefreshEnabled,\n  enabled,\n}: {\n  runUuids: string[];\n  runUuidsIsActive: boolean[];\n  autoRefreshEnabled?: boolean;\n  enabled?: boolean;\n}) => {\n  // Retrieve image keys for each run. This should only re-render when the runUuids change.\n  // This populates the imagesByRunUuid with imageKeys, which will be used elsewhere to fetch metadata.\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * The criteria to populate images for a run is\n   * 1. The run is not hidden\n   * 2. The run includes the mlflow.loggedImage tag\n   * 3. The run's image is not already populated\n   */\n  // We need to use a serialized version of runUuids to avoid re-triggering the effect when using an array.\n  const runUuidsSerialized = runUuids.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  useEffect(() => {\n    // Regular single fetch event with no auto-refresh capabilities. Used if auto-refresh is disabled.\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    runUuidsSerialized.split(',').forEach((runUuid) => {\n      if (runUuid) {\n        dispatch(listImagesApi(runUuid));\n      }\n    });\n  }, [runUuidsSerialized, dispatch, autoRefreshEnabled, enabled]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled;\n\n  const runUuidsIsActiveSerialized = runUuidsIsActive.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    const fetchImagesFn = async (autoRefresh: boolean) => {\n      const runUuids = runUuidsSerialized.split(',');\n\n      const activeRunUuids = runUuidsIsActiveSerialized.split(',');\n      // If auto-refresh is enabled, only fetch images for runs that are currently active\n      const filteredRunUuids = autoRefresh ? runUuids.filter((_, index) => activeRunUuids[index] === 'true') : runUuids;\n\n      filteredRunUuids.forEach((runUuid) => {\n        if (runUuid) {\n          dispatch(listImagesApi(runUuid, autoRefresh));\n        }\n      });\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchImagesFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchImagesFn(false).then(scheduleRefresh);\n\n    return () => {\n      fetchImagesFn(true);\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, runUuidsSerialized, runUuidsIsActiveSerialized, autoRefreshEnabled, enabled]);\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\n\nimport { LegacyForm, Input } from '@databricks/design-system';\n\nexport const NEW_NAME_FIELD = 'newName';\n\ntype Props = {\n  type: string;\n  name: string;\n  visible: boolean;\n  validator?: (...args: any[]) => any;\n  innerRef: any;\n};\n\n/**\n * Component that renders a form for updating a run's or experiment's name.\n */\nclass RenameFormComponent extends Component<Props> {\n  inputToAutoFocus: any;\n\n  componentDidUpdate(prevProps: Props) {\n    this.autoFocus(prevProps);\n    this.resetFields(prevProps);\n  }\n\n  autoFocusInputRef = (inputToAutoFocus: any) => {\n    this.inputToAutoFocus = inputToAutoFocus;\n    inputToAutoFocus && inputToAutoFocus.focus();\n    inputToAutoFocus && inputToAutoFocus.select();\n  };\n\n  autoFocus = (prevProps: any) => {\n    if (prevProps.visible === false && this.props.visible === true) {\n      // focus on input field\n      this.inputToAutoFocus && this.inputToAutoFocus.focus();\n      // select text\n      this.inputToAutoFocus && this.inputToAutoFocus.select();\n    }\n  };\n\n  resetFields = (prevProps: any) => {\n    const formRef = this.props.innerRef;\n    if (prevProps.name !== this.props.name) {\n      // reset input field to reset displayed initialValue\n      formRef.current.resetFields([NEW_NAME_FIELD]);\n    }\n  };\n\n  render() {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: Element; ref: any; layout: \"vert... Remove this comment to see the full error message\n      <LegacyForm ref={this.props.innerRef} layout=\"vertical\">\n        <LegacyForm.Item\n          name={NEW_NAME_FIELD}\n          initialValue={this.props.name}\n          rules={[\n            { required: true, message: `Please input a new name for the ${this.props.type}.` },\n            { validator: this.props.validator },\n          ]}\n          label={`New ${this.props.type} name`}\n        >\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_modals_renameform.tsx_69\"\n            placeholder={`Input a ${this.props.type} name`}\n            ref={this.autoFocusInputRef}\n            data-testid=\"rename-modal-input\"\n          />\n        </LegacyForm.Item>\n      </LegacyForm>\n    );\n  }\n}\n\nexport const RenameForm = RenameFormComponent;\n","import { useMemo } from 'react';\nimport type { RunsChartsRunData } from '../RunsCharts.common';\nimport { RunsMetricsBarPlot } from '../RunsMetricsBarPlot';\nimport { useRunsChartsTooltip } from '../../hooks/useRunsChartsTooltip';\nimport type { RunsChartsBarCardConfig } from '../../runs-charts.types';\nimport {\n  RunsChartCardWrapper,\n  type RunsChartCardReorderProps,\n  RunsChartsChartsDragGroup,\n  RunsChartCardFullScreenProps,\n  RunsChartCardVisibilityProps,\n} from './ChartCard.common';\nimport { useChartImageDownloadHandler } from '../../hooks/useChartImageDownloadHandler';\nimport { downloadChartDataCsv } from '../../../experiment-page/utils/experimentPage.common-utils';\nimport { customMetricBehaviorDefs } from '../../../experiment-page/utils/customMetricBehaviorUtils';\nimport { RunsChartsNoDataFoundIndicator } from '../RunsChartsNoDataFoundIndicator';\nimport { Tag, Typography } from '@databricks/design-system';\n\nexport interface RunsChartsBarChartCardProps\n  extends RunsChartCardReorderProps,\n    RunsChartCardFullScreenProps,\n    RunsChartCardVisibilityProps {\n  config: RunsChartsBarCardConfig;\n  chartRunData: RunsChartsRunData[];\n\n  hideEmptyCharts?: boolean;\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const barChartCardDefaultMargin = {\n  t: 24,\n  b: 48,\n  r: 0,\n  l: 4,\n  pad: 0,\n};\n\nexport const RunsChartsBarChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n  fullScreen,\n  setFullScreenChart,\n  hideEmptyCharts,\n  isInViewport: isInViewportProp,\n  ...reorderProps\n}: RunsChartsBarChartCardProps) => {\n  const dataKey = config.dataAccessKey ?? config.metricKey;\n\n  const toggleFullScreenChart = () => {\n    setFullScreenChart?.({\n      config,\n      title: customMetricBehaviorDefs[config.metricKey]?.displayName ?? config.metricKey,\n      subtitle: null,\n    });\n  };\n\n  const slicedRuns = useMemo(\n    () => chartRunData.filter(({ hidden, metrics }) => !hidden && metrics[dataKey]),\n    [chartRunData, dataKey],\n  );\n\n  const isEmptyDataset = useMemo(() => {\n    const metricsInRuns = slicedRuns.flatMap(({ metrics }) => Object.keys(metrics));\n    return !metricsInRuns.includes(dataKey);\n  }, [dataKey, slicedRuns]);\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useRunsChartsTooltip(config);\n\n  // If the chart is in fullscreen mode, we always render its body.\n  // Otherwise, we only render the chart if it is in the viewport.\n  const isInViewport = fullScreen || isInViewportProp;\n\n  const [imageDownloadHandler, setImageDownloadHandler] = useChartImageDownloadHandler();\n\n  const chartBody = (\n    <div\n      css={[\n        styles.barChartCardWrapper,\n        {\n          height: fullScreen ? '100%' : undefined,\n        },\n      ]}\n    >\n      {isInViewport ? (\n        <RunsMetricsBarPlot\n          runsData={slicedRuns}\n          metricKey={dataKey}\n          displayRunNames={false}\n          displayMetricKey={false}\n          useDefaultHoverBox={false}\n          margin={barChartCardDefaultMargin}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          selectedRunUuid={selectedRunUuid}\n          onSetDownloadHandler={setImageDownloadHandler}\n        />\n      ) : null}\n    </div>\n  );\n\n  if (fullScreen) {\n    return chartBody;\n  }\n\n  // Do not render the card if the chart is empty and the user has enabled hiding empty charts\n  if (hideEmptyCharts && isEmptyDataset) {\n    return null;\n  }\n\n  const chartTitle = (() => {\n    if (config.datasetName) {\n      return (\n        <div css={{ flex: 1, display: 'flex', alignItems: 'center', overflow: 'hidden' }}>\n          <Typography.Text title={config.metricKey} ellipsis bold>\n            <Tag componentId=\"mlflow.charts.bar_card_title.dataset_tag\" css={{ marginRight: 0 }}>\n              {config.datasetName}\n            </Tag>{' '}\n            {config.metricKey}\n          </Typography.Text>\n        </div>\n      );\n    }\n    return customMetricBehaviorDefs[config.metricKey]?.displayName ?? config.displayName ?? config.metricKey;\n  })();\n\n  return (\n    <RunsChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={chartTitle}\n      uuid={config.uuid}\n      dragGroupKey={RunsChartsChartsDragGroup.GENERAL_AREA}\n      // Disable fullscreen button if the chart is empty\n      toggleFullScreenChart={isEmptyDataset ? undefined : toggleFullScreenChart}\n      supportedDownloadFormats={['png', 'svg', 'csv']}\n      onClickDownload={(format) => {\n        if (format === 'csv' || format === 'csv-full') {\n          const runsToExport = [...slicedRuns].reverse();\n          downloadChartDataCsv(runsToExport, [config.metricKey], [], config.metricKey);\n          return;\n        }\n        imageDownloadHandler?.(format, config.metricKey);\n      }}\n      {...reorderProps}\n    >\n      {isEmptyDataset ? <RunsChartsNoDataFoundIndicator /> : chartBody}\n    </RunsChartCardWrapper>\n  );\n};\n\nconst styles = {\n  barChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { isUndefined } from 'lodash';\n\nimport { RunsCompareMultipleTracesTooltipData } from './RunsMetricsLinePlot';\nimport React from 'react';\nimport { TraceLabelColorIndicator } from './RunsMetricsLegend';\nimport { FormattedDate, FormattedTime, useIntl } from 'react-intl';\nimport { getChartAxisLabelDescriptor, RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { shouldEnableRelativeTimeDateAxis } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\n\n// Sadly when hovering outside data point, we can't get the date-time value from Plotly chart\n// so we have to format it ourselves in a way that resembles Plotly's logic\nconst PlotlyLikeFormattedTime = ({ value }: { value: string | number }) => (\n  <>\n    <FormattedDate value={value} year=\"numeric\" />-\n    <FormattedDate value={value} month=\"2-digit\" />-\n    <FormattedDate value={value} day=\"2-digit\" /> <FormattedTime value={value} hour=\"numeric\" hourCycle=\"h24\" />:\n    <FormattedTime value={value} minute=\"2-digit\" />:\n    <FormattedTime value={value} second=\"2-digit\" fractionalSecondDigits={3} />\n  </>\n);\n\n// Sadly when hovering outside data point, we can't get the date-time value from Plotly chart\n// so we have to format it ourselves in a way that resembles Plotly's logic\nconst PlotlyLikeFormattedTimestamp = ({ value }: { value: string | number }) => (\n  <>\n    <FormattedTime value={value} hour=\"2-digit\" hourCycle=\"h23\" />:\n    <FormattedTime value={value} minute=\"2-digit\" />:\n    <FormattedTime value={value} second=\"2-digit\" fractionalSecondDigits={3} />\n  </>\n);\n\n/**\n * Variant of the tooltip body for the line chart that displays multiple traces at once.\n * Used in the compare runs page and run details metrics page.\n */\nexport const RunsMultipleTracesTooltipBody = ({ hoverData }: { hoverData: RunsCompareMultipleTracesTooltipData }) => {\n  const { tooltipLegendItems, hoveredDataPoint: singleTraceHoverData, xValue, xAxisKeyLabel } = hoverData;\n  const { traceUuid: runUuid, metricEntity } = singleTraceHoverData || {};\n\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const hoveredTraceUuid = `${runUuid}.${metricEntity?.key}`;\n  const displayedXValueLabel =\n    hoverData.xAxisKey === RunsChartsLineChartXAxisType.METRIC\n      ? xAxisKeyLabel\n      : intl.formatMessage(getChartAxisLabelDescriptor(hoverData.xAxisKey));\n\n  if (tooltipLegendItems) {\n    return (\n      <div>\n        {!isUndefined(xValue) && (\n          <div css={{ marginBottom: theme.spacing.xs }}>\n            <span css={{ fontWeight: 'bold' }}>{displayedXValueLabel}</span>{' '}\n            {hoverData.xAxisKey === RunsChartsLineChartXAxisType.TIME ? (\n              <PlotlyLikeFormattedTime value={xValue} />\n            ) : shouldEnableRelativeTimeDateAxis() &&\n              hoverData.xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE ? (\n              <PlotlyLikeFormattedTimestamp value={xValue} />\n            ) : (\n              xValue\n            )}\n          </div>\n        )}\n        <div\n          css={{\n            display: 'grid',\n            gridTemplateColumns: `${theme.general.iconSize}px auto auto`,\n            columnGap: theme.spacing.sm,\n            rowGap: theme.spacing.sm / 4,\n            alignItems: 'center',\n          }}\n        >\n          {tooltipLegendItems.map(({ displayName, color, uuid, value, dashStyle }) => (\n            <React.Fragment key={uuid}>\n              <TraceLabelColorIndicator color={color || 'transparent'} dashStyle={dashStyle} />\n\n              <div\n                css={{\n                  marginRight: theme.spacing.md,\n                  fontSize: theme.typography.fontSizeSm,\n                  color: hoveredTraceUuid === uuid ? 'unset' : theme.colors.textPlaceholder,\n                }}\n              >\n                {displayName}\n              </div>\n              <div>\n                {!isUndefined(value) && (\n                  <span\n                    css={{\n                      fontWeight: hoveredTraceUuid === uuid ? 'bold' : 'normal',\n                      color: hoveredTraceUuid === uuid ? 'unset' : theme.colors.textPlaceholder,\n                    }}\n                  >\n                    {value}\n                  </span>\n                )}\n              </div>\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n","import React, { useCallback } from 'react';\nimport { ExperimentRunsChartsUIConfiguration } from '../../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsCardConfig } from '../runs-charts.types';\nimport { getUUID } from '../../../../common/utils/ActionUtils';\n\nexport type RunsChartsUIConfigurationSetter = (\n  state: ExperimentRunsChartsUIConfiguration,\n) => ExperimentRunsChartsUIConfiguration;\n\nconst RunsChartsUIConfigurationContext = React.createContext<\n  (stateSetter: RunsChartsUIConfigurationSetter, isSeeding?: boolean) => void\n>(() => {});\n\n/**\n * Creates a localized context to manage the UI state of the runs charts.\n * Accepts a function to update the state object, coming from simple state setter or a reducer.\n */\nexport const RunsChartsUIConfigurationContextProvider = ({\n  children,\n  updateChartsUIState,\n}: {\n  children: React.ReactNode;\n  updateChartsUIState: (stateSetter: RunsChartsUIConfigurationSetter, isSeeding?: boolean) => void;\n}) => (\n  <RunsChartsUIConfigurationContext.Provider value={updateChartsUIState}>\n    {children}\n  </RunsChartsUIConfigurationContext.Provider>\n);\n\n/**\n * Returns a function to update the current overarching UI state of the runs charts.\n */\nexport const useUpdateRunsChartsUIConfiguration = () => React.useContext(RunsChartsUIConfigurationContext);\n\nexport const useReorderRunsChartsFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n  return useCallback(\n    (sourceChartUuid: string, targetChartUuid: string) => {\n      updateChartsUIState((current) => {\n        const newChartsOrder = current.compareRunCharts?.slice();\n        const newSectionsState = current.compareRunSections?.slice();\n        if (!newChartsOrder || !newSectionsState) {\n          return current;\n        }\n\n        const indexSource = newChartsOrder.findIndex((c) => c.uuid === sourceChartUuid);\n        const indexTarget = newChartsOrder.findIndex((c) => c.uuid === targetChartUuid);\n\n        // If one of the charts is not found, do nothing\n        if (indexSource < 0 || indexTarget < 0) {\n          return current;\n        }\n\n        const sourceChart = newChartsOrder[indexSource];\n        const targetChart = newChartsOrder[indexTarget];\n\n        const isSameMetricSection = targetChart.metricSectionId === sourceChart.metricSectionId;\n\n        // Update the sections to indicate that the charts have been reordered\n        const sourceSectionIdx = newSectionsState.findIndex((c) => c.uuid === sourceChart.metricSectionId);\n        const targetSectionIdx = newSectionsState.findIndex((c) => c.uuid === targetChart.metricSectionId);\n        newSectionsState.splice(sourceSectionIdx, 1, { ...newSectionsState[sourceSectionIdx], isReordered: true });\n        newSectionsState.splice(targetSectionIdx, 1, { ...newSectionsState[targetSectionIdx], isReordered: true });\n\n        // Set new chart metric group\n        const newSourceChart = { ...sourceChart };\n        newSourceChart.metricSectionId = targetChart.metricSectionId;\n\n        // Remove the source graph from array\n        newChartsOrder.splice(indexSource, 1);\n        if (!isSameMetricSection) {\n          // Insert the source graph into target\n          newChartsOrder.splice(\n            newChartsOrder.findIndex((c) => c.uuid === targetChartUuid),\n            0,\n            newSourceChart,\n          );\n        } else {\n          // The indexTarget is not neccessarily the target now, but it will work as the insert index\n          newChartsOrder.splice(indexTarget, 0, newSourceChart);\n        }\n\n        return {\n          ...current,\n          compareRunCharts: newChartsOrder,\n          compareRunSections: newSectionsState,\n        };\n      });\n    },\n    [updateChartsUIState],\n  );\n};\n\nexport const useConfirmChartCardConfigurationFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  return (configuredCard: Partial<RunsChartsCardConfig>) => {\n    const serializedCard = RunsChartsCardConfig.serialize({\n      ...configuredCard,\n      uuid: getUUID(),\n    });\n\n    // Creating new chart\n    if (!configuredCard.uuid) {\n      updateChartsUIState((current) => ({\n        ...current,\n        // This condition ensures that chart collection will remain undefined if not set previously\n        compareRunCharts: current.compareRunCharts && [...current.compareRunCharts, serializedCard],\n      }));\n    } /* Editing existing chart */ else {\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: current.compareRunCharts?.map((existingChartCard) => {\n          if (existingChartCard.uuid === configuredCard.uuid) {\n            return { ...serializedCard, uuid: existingChartCard.uuid };\n          }\n          return existingChartCard;\n        }),\n      }));\n    }\n  };\n};\n\nexport const useInsertRunsChartsFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  return (sourceChartUuid: string, targetSectionId: string) => {\n    updateChartsUIState((current) => {\n      const newChartsOrder = current.compareRunCharts?.slice();\n      const newSectionsState = current.compareRunSections?.slice();\n      if (!newChartsOrder || !newSectionsState) {\n        return current;\n      }\n\n      const indexSource = newChartsOrder.findIndex((c) => c.uuid === sourceChartUuid);\n      if (indexSource < 0) {\n        return current;\n      }\n      const sourceChart = newChartsOrder[indexSource];\n      // Set new chart metric group\n      const newSourceChart = { ...sourceChart };\n      newSourceChart.metricSectionId = targetSectionId;\n\n      // Update the sections to indicate that the charts have been reordered\n      const sourceSectionIdx = newSectionsState.findIndex((c) => c.uuid === sourceChart.metricSectionId);\n      const targetSectionIdx = newSectionsState.findIndex((c) => c.uuid === targetSectionId);\n      newSectionsState.splice(sourceSectionIdx, 1, { ...newSectionsState[sourceSectionIdx], isReordered: true });\n      newSectionsState.splice(targetSectionIdx, 1, { ...newSectionsState[targetSectionIdx], isReordered: true });\n\n      // Remove the source graph from array and append\n      newChartsOrder.splice(indexSource, 1);\n      newChartsOrder.push(newSourceChart);\n\n      return {\n        ...current,\n        compareRunCharts: newChartsOrder,\n        compareRunSections: newSectionsState,\n      };\n    });\n  };\n};\n\nexport const useRemoveRunsChartFn = () => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n  return useCallback(\n    (configToDelete: RunsChartsCardConfig) => {\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: configToDelete.isGenerated\n          ? current.compareRunCharts?.map((setup) =>\n              setup.uuid === configToDelete.uuid ? { ...setup, deleted: true } : setup,\n            )\n          : current.compareRunCharts?.filter((setup) => setup.uuid !== configToDelete.uuid),\n      }));\n    },\n    [updateChartsUIState],\n  );\n};\n","import { ReactNode } from 'react';\nimport { RunsChartsCardConfig } from '../runs-charts.types';\nimport { RunsChartsRunData } from './RunsCharts.common';\nimport { Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunsChartsTooltipBodyProps, RunsChartsTooltipWrapper } from '../hooks/useRunsChartsTooltip';\nimport { RunsChartsCard } from './cards/RunsChartsCard';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\nimport type { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\n\nexport const RunsChartsFullScreenModal = <TContext,>({\n  chartData,\n  isMetricHistoryLoading = false,\n  groupBy,\n  fullScreenChart,\n  onCancel,\n  tooltipContextValue,\n  tooltipComponent,\n  autoRefreshEnabled,\n  globalLineChartConfig,\n}: {\n  chartData: RunsChartsRunData[];\n  isMetricHistoryLoading?: boolean;\n  groupBy: RunsGroupByConfig | null;\n  autoRefreshEnabled?: boolean;\n  fullScreenChart:\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined;\n  onCancel: () => void;\n  tooltipContextValue: TContext;\n  tooltipComponent: React.ComponentType<RunsChartsTooltipBodyProps<TContext>>;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n}) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n\n  const emptyReorderProps = {\n    canMoveDown: false,\n    canMoveUp: false,\n    onMoveDown: () => {},\n    onMoveUp: () => {},\n    onReorderWith: () => {},\n  };\n\n  const emptyConfigureProps = {\n    onRemoveChart: () => {},\n    onReorderCharts: () => {},\n    onStartEditChart: () => {},\n    setFullScreenChart: () => {},\n  };\n\n  if (!fullScreenChart) {\n    return null;\n  }\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfullscreenmodal.tsx_53\"\n      visible\n      onCancel={onCancel}\n      title={\n        <div css={{ display: 'flex', flexDirection: 'column' }}>\n          {fullScreenChart.title}\n          <span\n            css={{\n              color: theme.colors.textSecondary,\n              fontSize: theme.typography.fontSizeSm,\n              marginRight: theme.spacing.xs,\n            }}\n          >\n            {fullScreenChart.subtitle}\n          </span>\n        </div>\n      }\n      footer={null}\n      verticalSizing=\"maxed_out\"\n      dangerouslySetAntdProps={{ width: '95%' }}\n      css={{\n        [`.${getPrefixedClassName('modal-body')}`]: {\n          flex: 1,\n        },\n      }}\n    >\n      <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={tooltipComponent}>\n        <RunsChartsCard\n          cardConfig={fullScreenChart.config}\n          chartRunData={chartData}\n          groupBy={groupBy}\n          index={0}\n          sectionIndex={0}\n          fullScreen\n          autoRefreshEnabled={autoRefreshEnabled}\n          globalLineChartConfig={globalLineChartConfig}\n          {...emptyConfigureProps}\n          {...emptyReorderProps}\n        />\n      </RunsChartsTooltipWrapper>\n    </Modal>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Config, Data, Layout } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightBarTraces, useRenderRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  runsChartDefaultMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  normalizeChartValue,\n  useDynamicPlotSize,\n  getLegendDataFromRuns,\n} from './RunsCharts.common';\nimport type { MetricEntity } from '../../../types';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\nimport { customMetricBehaviorDefs } from '../../experiment-page/utils/customMetricBehaviorUtils';\nimport { RunsChartCardLoadingPlaceholder } from './cards/ChartCard.common';\n\n// We're not using params in bar plot\nexport type BarPlotRunData = Omit<RunsChartsRunData, 'params' | 'tags' | 'images'>;\n\nexport interface RunsMetricsBarPlotHoverData {\n  xValue: string;\n  yValue: number;\n  index: number;\n  metricEntity?: MetricEntity;\n}\n\nexport interface RunsMetricsBarPlotProps extends RunsPlotsCommonProps {\n  /**\n   * Determines which metric are we comparing by\n   */\n  metricKey: string;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: BarPlotRunData[];\n\n  /**\n   * Relative width of the plot bar\n   */\n  barWidth?: number;\n\n  /**\n   * Display run names on the Y axis\n   */\n  displayRunNames?: boolean;\n\n  /**\n   * Display metric key on the X axis\n   */\n  displayMetricKey?: boolean;\n}\n\nconst PLOT_CONFIG: Partial<Config> = {\n  displaylogo: false,\n  scrollZoom: false,\n  doubleClick: 'autosize',\n  showTips: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nconst Y_AXIS_PARAMS = {\n  ticklabelposition: 'inside',\n  tickfont: { size: 11 },\n  fixedrange: true,\n};\n\nconst getFixedPointValue = (val: string | number, places = 2) => (typeof val === 'number' ? val.toFixed(places) : val);\n\n/**\n * Implementation of plotly.js chart displaying\n * bar plot comparing metrics for a given\n * set of experiments runs\n */\nexport const RunsMetricsBarPlot = React.memo(\n  ({\n    runsData,\n    metricKey,\n    className,\n    margin = runsChartDefaultMargin,\n    onUpdate,\n    onHover,\n    onUnhover,\n    barWidth = 3 / 4,\n    width,\n    height,\n    displayRunNames = true,\n    useDefaultHoverBox = true,\n    displayMetricKey = true,\n    selectedRunUuid,\n    onSetDownloadHandler,\n  }: RunsMetricsBarPlotProps) => {\n    const plotData = useMemo(() => {\n      // Run uuids\n      const ids = runsData.map((d) => d.uuid);\n\n      // Trace names\n      const names = runsData.map(({ displayName }) => displayName);\n\n      // Actual metric values\n      const values = runsData.map((d) => normalizeChartValue(d.metrics[metricKey]?.value));\n\n      // Displayed metric values\n      const textValues = runsData.map((d) => {\n        const customMetricBehaviorDef = customMetricBehaviorDefs[metricKey];\n        if (customMetricBehaviorDef) {\n          return customMetricBehaviorDef.valueFormatter({ value: d.metrics[metricKey]?.value });\n        }\n\n        return getFixedPointValue(d.metrics[metricKey]?.value);\n      });\n\n      // Colors corresponding to each run\n      const colors = runsData.map((d) => d.color);\n\n      return [\n        {\n          y: ids,\n          x: values,\n          names,\n          text: textValues,\n          textposition: values.map((value) => (value === 0 ? 'outside' : 'auto')),\n          textfont: {\n            size: 11,\n          },\n          metrics: runsData.map((d) => d.metrics[metricKey]),\n          // Display run name on hover. \"<extra></extra>\" removes plotly's \"extra\" tooltip that\n          // is unnecessary here.\n          type: 'bar' as any,\n          hovertemplate: useDefaultHoverBox ? '%{label}<extra></extra>' : undefined,\n          hoverinfo: useDefaultHoverBox ? 'y' : 'none',\n          hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n          width: barWidth,\n\n          orientation: 'h',\n          marker: {\n            color: colors,\n          },\n        } as Data & { names: string[] },\n      ];\n    }, [runsData, metricKey, barWidth, useDefaultHoverBox]);\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const { formatMessage } = useIntl();\n    const { theme } = useDesignSystemTheme();\n    const plotlyThemedLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      hovermode: 'y',\n      margin,\n      xaxis: {\n        title: displayMetricKey ? metricKey : undefined,\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n        tickformat: customMetricBehaviorDefs[metricKey]?.chartAxisTickFormat ?? undefined,\n      },\n      yaxis: {\n        showticklabels: displayRunNames,\n        title: displayRunNames\n          ? formatMessage({\n              defaultMessage: 'Run name',\n              description: 'Label for Y axis in bar chart when comparing metrics between runs',\n            })\n          : undefined,\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n        fixedrange: true,\n      },\n      template: { layout: plotlyThemedLayout },\n    });\n\n    useEffect(() => {\n      setLayout((current) => ({\n        ...current,\n        width: width || layoutWidth,\n        height: height || layoutHeight,\n        margin,\n        xaxis: {\n          ...current.xaxis,\n          title: displayMetricKey ? metricKey : undefined,\n        },\n      }));\n    }, [layoutWidth, layoutHeight, margin, metricKey, width, height, displayMetricKey]);\n\n    const { setHoveredPointIndex } = useRenderRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightBarTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points, event }) => {\n        const metricEntity = points[0].data?.metrics[points[0].pointIndex];\n        setHoveredPointIndex(points[0]?.pointIndex ?? -1);\n\n        const hoverData: RunsMetricsBarPlotHoverData = {\n          xValue: points[0].x,\n          yValue: points[0].value,\n          // The index of the X datum\n          index: points[0].pointIndex,\n          metricEntity,\n        };\n\n        const runUuid = points[0]?.label;\n        if (runUuid) {\n          onHover?.(runUuid, event, hoverData);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(hoverCallback);\n\n    const legendLabelData = useMemo(() => getLegendDataFromRuns(runsData), [runsData]);\n\n    useEffect(() => {\n      // Prepare layout and data traces to export\n      const layoutToExport = {\n        ...layout,\n        yaxis: {\n          ...layout.yaxis,\n          showticklabels: true,\n          automargin: true,\n        },\n      };\n\n      const dataToExport = plotData.map((trace) => ({\n        ...trace,\n        // In exported image, use names for Y axes\n        y: trace.names,\n      }));\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layoutToExport));\n    }, [layout, onSetDownloadHandler, plotData]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), styles.highlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          onUpdate={onUpdate}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n          fallback={<RunsChartCardLoadingPlaceholder />}\n        />\n      </div>\n    );\n\n    return <RunsMetricsLegendWrapper labelData={legendLabelData}>{chart}</RunsMetricsLegendWrapper>;\n  },\n);\n\nconst styles = {\n  highlightStyles: {\n    '.trace.bars g.point path': {\n      transition: 'var(--trace-transition)',\n    },\n    '.trace.bars.is-highlight g.point path': {\n      opacity: 'var(--trace-opacity-dimmed-high) !important',\n    },\n    '.trace.bars g.point.is-hover-highlight path': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.trace.bars g.point.is-selection-highlight path': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n      stroke: 'var(--trace-stroke-color)',\n      strokeWidth: 'var(--trace-stroke-width) !important',\n    },\n  },\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Data, Datum, Layout, PlotMouseEvent } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightScatterTraces, useRenderRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  RunsChartAxisDef,\n  runsChartDefaultContourMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  useDynamicPlotSize,\n  getLegendDataFromRuns,\n} from './RunsCharts.common';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\nimport { RunsChartCardLoadingPlaceholder } from './cards/ChartCard.common';\n\nexport interface RunsContourPlotProps extends RunsPlotsCommonProps {\n  /**\n   * Horizontal axis with a metric or a param\n   */\n  xAxis: RunsChartAxisDef;\n\n  /**\n   * Vertical axis with a metric or a param\n   */\n  yAxis: RunsChartAxisDef;\n\n  /**\n   * Depth dimension with a metric or a param\n   */\n  zAxis: RunsChartAxisDef;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: RunsChartsRunData[];\n\n  /**\n   * Sets the color scale in [[0.35, 'rgb(40,60,190)'],[0.5, 'rgb(70,100,245)'],...] format.\n   * Leave unset to use the defualt scale.\n   */\n  colorScale?: [number, string][];\n\n  /**\n   * Set to `true` in order to reverse the color scale.\n   */\n  reverseScale?: boolean;\n}\n\nconst PLOT_CONFIG = {\n  displaylogo: false,\n  scrollZoom: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nconst DEFAULT_COLOR_SCALE: [number, string][] = [\n  [0, 'rgb(5,10,172)'],\n  [0.35, 'rgb(40,60,190)'],\n  [0.5, 'rgb(70,100,245)'],\n  [0.6, 'rgb(90,120,245)'],\n  [0.7, 'rgb(106,137,247)'],\n  [1, 'rgb(220,220,220)'],\n];\n\nconst createTooltipTemplate = (zAxisTitle: string) =>\n  '<b>%{customdata[1]}:</b><br>' +\n  '<b>%{xaxis.title.text}:</b> %{x:.2f}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  `<b>${zAxisTitle}:</b> %{customdata[2]:.2f}` +\n  '<extra></extra>';\n\n/**\n * Implementation of plotly.js chart displaying\n * contour plot comparing values for a given\n * set of experiments runs\n */\nexport const RunsContourPlot = React.memo(\n  ({\n    runsData,\n    xAxis,\n    yAxis,\n    zAxis,\n    markerSize = 10,\n    className,\n    reverseScale,\n    margin = runsChartDefaultContourMargin,\n    colorScale = DEFAULT_COLOR_SCALE,\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n    onSetDownloadHandler,\n  }: RunsContourPlotProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const plotData = useMemo(() => {\n      // Prepare empty values\n      const xValues: (number | string)[] = [];\n      const yValues: (number | string)[] = [];\n      const zValues: (number | string)[] = [];\n      const colors: (number | string)[] = [];\n      const tooltipData: Datum[] = [];\n\n      // Iterate through all the runs and aggregate selected metrics/params\n      for (const runData of runsData) {\n        const { metrics, params, color, uuid, displayName } = runData;\n        const xAxisData = xAxis.type === 'METRIC' ? metrics : params;\n        const yAxisData = yAxis.type === 'METRIC' ? metrics : params;\n        const zAxisData = zAxis.type === 'METRIC' ? metrics : params;\n\n        const x = xAxisData?.[xAxis.key]?.value || undefined;\n        const y = yAxisData?.[yAxis.key]?.value || undefined;\n        const z = zAxisData?.[zAxis.key]?.value || undefined;\n\n        if (x && y && z) {\n          xValues.push(x);\n          yValues.push(y);\n          zValues.push(z);\n          colors.push(color || theme.colors.primary);\n          tooltipData.push([uuid, displayName || uuid, z] as any);\n        }\n      }\n\n      // Let's compile chart layers\n      const layers = [\n        // The top layer with the scatter plot (dots)\n        {\n          x: xValues,\n          y: yValues,\n          customdata: tooltipData,\n          text: runsData.map(({ displayName }) => displayName),\n          hovertemplate: useDefaultHoverBox ? createTooltipTemplate(zAxis.key) : undefined,\n          hoverinfo: useDefaultHoverBox ? undefined : 'none',\n          hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n          type: 'scatter',\n          mode: 'markers',\n          textposition: 'bottom center',\n          marker: {\n            size: markerSize,\n            color: colors,\n            line: {\n              color: 'black',\n              width: 1,\n            },\n          },\n        },\n      ] as Data[];\n\n      // If there are at least two runs, add a contour chart layer\n      if (runsData.length > 1) {\n        layers.unshift({\n          x: xValues,\n          y: yValues,\n          z: zValues,\n          type: 'contour',\n          connectgaps: true,\n          hoverinfo: 'none',\n          contours: {\n            coloring: 'heatmap',\n          },\n          colorscale: colorScale,\n          reversescale: reverseScale,\n          colorbar: {\n            tickfont: { size: 11, color: theme.colors.textSecondary, family: '' },\n          },\n        } as Data);\n      }\n      return layers;\n    }, [\n      colorScale,\n      reverseScale,\n      markerSize,\n      runsData,\n      xAxis.type,\n      xAxis.key,\n      yAxis.type,\n      yAxis.key,\n      zAxis.type,\n      zAxis.key,\n      theme.colors.primary,\n      theme.colors.textSecondary,\n      useDefaultHoverBox,\n    ]);\n\n    const plotlyThemedLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: xAxis.key, tickfont: { size: 11, color: theme.colors.textSecondary } },\n      yaxis: {\n        ticks: 'inside',\n        title: { standoff: 32, text: yAxis.key },\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n      },\n      template: { layout: plotlyThemedLayout },\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const newLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n        };\n\n        if (newLayout.xaxis) {\n          newLayout.xaxis.title = xAxis.key;\n        }\n\n        if (newLayout.yaxis) {\n          newLayout.yaxis.title = { standoff: 32, text: yAxis.key };\n        }\n\n        return newLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, xAxis.key, yAxis.key, width, height]);\n\n    const { setHoveredPointIndex } = useRenderRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightScatterTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points }: PlotMouseEvent) => {\n        // Find hover event corresponding to the second curve (scatter plot) only\n        const scatterPoints = points.find(({ curveNumber }) => curveNumber === 1);\n\n        setHoveredPointIndex(scatterPoints?.pointIndex ?? -1);\n\n        if (!scatterPoints) {\n          return;\n        }\n\n        // Find the corresponding run UUID by basing on \"customdata\" field set in the trace data.\n        // Plotly TS typings don't support custom fields so we need to cast to \"any\" first\n        const pointCustomDataRunUuid = (scatterPoints as any)?.customdata?.[0];\n        if (pointCustomDataRunUuid) {\n          onHover?.(pointCustomDataRunUuid);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(hoverCallback);\n\n    const legendLabelData = useMemo(() => getLegendDataFromRuns(runsData), [runsData]);\n\n    useEffect(() => {\n      const dataToExport: Data[] = plotData.map((trace: Data) => ({\n        ...trace,\n        mode: 'text+markers',\n      }));\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layout));\n    }, [layout, onSetDownloadHandler, plotData]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), commonRunsChartStyles.scatterChartHighlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          onUpdate={onUpdate}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n          fallback={<RunsChartCardLoadingPlaceholder />}\n        />\n      </div>\n    );\n\n    return <RunsMetricsLegendWrapper labelData={legendLabelData}>{chart}</RunsMetricsLegendWrapper>;\n  },\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\n\ntype Props = {\n  okText?: string;\n  cancelText?: string;\n  isOpen?: boolean;\n  onClose: (...args: any[]) => any;\n  onCancel?: () => void;\n  className?: string;\n  footer?: React.ReactNode;\n  handleSubmit: (...args: any[]) => any;\n  title: React.ReactNode;\n};\n\ntype State = {\n  isSubmitting: boolean;\n};\n\n/**\n * Generic modal that has a title and an input field with a save/submit button.\n * As of now, it is used to display the 'Rename Run' and 'Rename Experiment' modals.\n */\nexport class GenericInputModal extends Component<Props, State> {\n  state = {\n    isSubmitting: false,\n  };\n\n  formRef = React.createRef();\n\n  onSubmit = async () => {\n    this.setState({ isSubmitting: true });\n    try {\n      const values = await (this as any).formRef.current.validateFields();\n      await this.props.handleSubmit(values);\n      this.resetAndClearModalForm();\n      this.onRequestCloseHandler();\n    } catch (e) {\n      this.handleSubmitFailure(e);\n    }\n  };\n\n  resetAndClearModalForm = () => {\n    this.setState({ isSubmitting: false });\n    (this as any).formRef.current.resetFields();\n  };\n\n  handleSubmitFailure = (e: any) => {\n    this.setState({ isSubmitting: false });\n    Utils.logErrorAndNotifyUser(e);\n  };\n\n  onRequestCloseHandler = () => {\n    this.resetAndClearModalForm();\n    this.props.onClose();\n  };\n\n  handleCancel = () => {\n    this.onRequestCloseHandler();\n    this.props.onCancel?.();\n  };\n\n  render() {\n    const { isSubmitting } = this.state;\n    const { okText, cancelText, isOpen, footer, children } = this.props;\n\n    // add props (ref) to passed component\n    const displayForm = React.Children.map(children, (child) => {\n      // Checking isValidElement is the safe way and avoids a typescript\n      // error too.\n      if (React.isValidElement(child)) {\n        // @ts-expect-error TODO: fix this\n        return React.cloneElement(child, { innerRef: this.formRef });\n      }\n      return child;\n    });\n\n    return (\n      <Modal\n        data-testid=\"mlflow-input-modal\"\n        className={this.props.className}\n        title={this.props.title}\n        // @ts-expect-error TS(2322): Type '{ children: {}[] | null | undefined; \"data-t... Remove this comment to see the full error message\n        width={540}\n        visible={isOpen}\n        onOk={this.onSubmit}\n        okText={okText}\n        cancelText={cancelText}\n        confirmLoading={isSubmitting}\n        onCancel={this.handleCancel}\n        footer={footer}\n        centered\n      >\n        {displayForm}\n      </Modal>\n    );\n  }\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { createContext, useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { RunsChartsCardConfig } from '../runs-charts.types';\nimport { DragAndDropProvider } from '../../../../common/hooks/useDragAndDropElement';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { indexOf, sortBy } from 'lodash';\n\nconst RunsChartsDraggableGridStateContext = createContext<{\n  draggedCardUuid: string | null;\n  targetSection: string | null;\n  isDragging: () => boolean;\n}>({\n  draggedCardUuid: '',\n  targetSection: '',\n  isDragging: () => false,\n});\n\nconst RunsChartsDraggableGridActionsContext = createContext<{\n  setDraggedCardUuid: (cardUuid: string | null) => void;\n  setTargetSection: (targetSectionUuid: string | null) => void;\n  setTargetPosition: (pos: number) => void;\n  onDropChartCard: () => void;\n  onSwapCards: (sourceUuid: string, targetUuid: string) => void;\n}>({\n  setDraggedCardUuid: () => {},\n  setTargetSection: () => {},\n  setTargetPosition: () => {},\n  onDropChartCard: () => {},\n  onSwapCards: () => {},\n});\n\nexport const useRunsChartsDraggableGridStateContext = () => useContext(RunsChartsDraggableGridStateContext);\nexport const useRunsChartsDraggableGridActionsContext = () => useContext(RunsChartsDraggableGridActionsContext);\n\nexport const RunsChartsDraggableCardsGridContextProvider = ({\n  children,\n  visibleChartCards = [],\n}: {\n  children?: React.ReactNode;\n  visibleChartCards?: RunsChartsCardConfig[];\n}) => {\n  // Stateful values: dragged card ID and target section ID\n  const [draggedCardUuid, setDraggedCardUuid] = useState<string | null>(null);\n  const [targetSectionUuid, setTargetSectionUuid] = useState<string | null>(null);\n\n  // Use refs for direct access to the values\n  const immediateDraggedCardUuid = useRef<string | null>(null);\n  const immediateTargetSectionId = useRef<string | null>(null);\n  immediateDraggedCardUuid.current = draggedCardUuid;\n  immediateTargetSectionId.current = targetSectionUuid;\n\n  // Mutable field: target position (index) in the target section\n  const targetLocalPosition = useRef<number | null>(null);\n\n  const setTargetPosition = useCallback((pos: number) => {\n    targetLocalPosition.current = pos;\n  }, []);\n\n  const isDragging = useCallback(() => immediateDraggedCardUuid.current !== null, []);\n\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n  // Callback for simple card swapping (Move up/move down functionality)\n  const onSwapCards = useCallback(\n    (sourceChartUuid: string, targetChartUuid: string) => {\n      updateChartsUIState((current) => {\n        const newChartsOrder = current.compareRunCharts?.slice();\n\n        if (!newChartsOrder) {\n          return current;\n        }\n\n        const indexSource = newChartsOrder.findIndex((c) => c.uuid === sourceChartUuid);\n        const indexTarget = newChartsOrder.findIndex((c) => c.uuid === targetChartUuid);\n\n        // If one of the charts is not found, do nothing\n        if (indexSource < 0 || indexTarget < 0) {\n          return current;\n        }\n\n        const sourceChart = newChartsOrder[indexSource];\n\n        // Remove the chart and insert it at the target position\n        newChartsOrder.splice(indexSource, 1);\n        newChartsOrder.splice(indexTarget, 0, sourceChart);\n\n        return { ...current, compareRunCharts: newChartsOrder };\n      });\n    },\n    [updateChartsUIState],\n  );\n\n  // Callback invoked when a card is dropped\n  const onDropChartCard = useCallback(() => {\n    const draggedChartUuid = immediateDraggedCardUuid.current;\n    const targetSectionId = immediateTargetSectionId.current;\n    const targetPosition = targetLocalPosition.current;\n\n    if (draggedChartUuid === null || targetSectionId === null || targetPosition === null) {\n      return;\n    }\n\n    setDraggedCardUuid(null);\n\n    updateChartsUIState((current) => {\n      // Find the source card and section in the current state\n      const sourceCard = current.compareRunCharts?.find((chart) => chart.uuid === draggedChartUuid);\n      if (!sourceCard) {\n        return current;\n      }\n\n      const sourceSection = current.compareRunSections?.find((section) => section.uuid === sourceCard?.metricSectionId);\n\n      // Find the target section in the current state\n      const targetSection = current.compareRunSections?.find((section) => section.uuid === targetSectionId);\n\n      // Get all the cards in the source section\n      const sourceSectionCards = current.compareRunCharts?.filter(\n        (chartCard) => chartCard.metricSectionId === sourceSection?.uuid,\n      );\n\n      // If we're moving the card within the same section\n      if (sourceSection === targetSection) {\n        // Copy the resulting chart list\n        const resultChartsList = current.compareRunCharts?.slice();\n\n        // Get all the currently visible cards (excluding hidden and deleted cards)\n        const visibleSectionCards = sourceSectionCards?.filter((chartCard) => visibleChartCards.includes(chartCard));\n\n        if (!resultChartsList || !visibleSectionCards) {\n          return current;\n        }\n\n        // Find the original position\n        const originalIndex = resultChartsList.findIndex((chartCard) => chartCard.uuid === draggedChartUuid);\n\n        // Clamp the target position index to the visible section cards\n        const clampedLocalPosition = Math.min(targetPosition, visibleSectionCards.length - 1);\n\n        // Map from the index in the section to a global index\n        const targetIndex = indexOf(resultChartsList, visibleSectionCards?.[clampedLocalPosition]);\n\n        // If we found the original index and the target index\n        if (resultChartsList && originalIndex !== -1 && targetIndex !== -1) {\n          // Remove the card from the original position\n          resultChartsList.splice(originalIndex, 1);\n          // Insert the card at the target position\n          resultChartsList.splice(targetIndex, 0, sourceCard);\n        }\n\n        return {\n          ...current,\n          compareRunCharts: resultChartsList,\n        };\n      } else {\n        // If we're moving card to a new section\n        const targetSectionCards = current.compareRunCharts?.filter(\n          (chart) => chart.metricSectionId === targetSectionId && !chart.deleted,\n        );\n\n        // Calculate the target position in the target section\n        if (targetSectionCards) {\n          targetSectionCards.splice(targetPosition, 0, sourceCard);\n        }\n\n        return {\n          ...current,\n          // Use the target position in the sorting function to determine the new position\n          compareRunCharts: sortBy(current.compareRunCharts, (a) => targetSectionCards?.indexOf(a) ?? -1).map(\n            (chart) => {\n              // Also, update the metricSectionId of the dragged card\n              if (chart.uuid === sourceCard.uuid) {\n                return {\n                  ...chart,\n                  metricSectionId: targetSectionId,\n                };\n              }\n              return chart;\n            },\n          ),\n          compareRunSections: current.compareRunSections?.map((section) => {\n            if (section.uuid === sourceSection?.uuid || section.uuid === targetSection?.uuid) {\n              return { ...section, isReordered: true };\n            }\n            return section;\n          }),\n        };\n      }\n    });\n  }, [updateChartsUIState, visibleChartCards]);\n\n  // For performance purposes, expose two different contexts:\n  // one for state (changing but rarely consumed) and one for actions (static but consumed often)\n  const stateContextValue = useMemo(\n    () => ({\n      draggedCardUuid,\n      targetSection: targetSectionUuid,\n      isDragging,\n    }),\n    [draggedCardUuid, targetSectionUuid, isDragging],\n  );\n\n  const actionsContextValue = useMemo(\n    () => ({\n      setDraggedCardUuid,\n      setTargetSection: setTargetSectionUuid,\n      setTargetPosition,\n      onDropChartCard,\n      onSwapCards,\n    }),\n    [onDropChartCard, onSwapCards, setTargetPosition],\n  );\n\n  return (\n    <DragAndDropProvider>\n      <RunsChartsDraggableGridStateContext.Provider value={stateContextValue}>\n        <RunsChartsDraggableGridActionsContext.Provider value={actionsContextValue}>\n          {children}\n        </RunsChartsDraggableGridActionsContext.Provider>\n      </RunsChartsDraggableGridStateContext.Provider>\n    </DragAndDropProvider>\n  );\n};\n","import { isNil } from 'lodash';\nimport {\n  Button,\n  CloseIcon,\n  PinIcon,\n  PinFillIcon,\n  LegacyTooltip,\n  VisibleIcon,\n  Typography,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { useExperimentIds } from '../../experiment-page/hooks/useExperimentIds';\nimport { RunsChartsRunData, RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport {\n  RunsChartsTooltipBodyProps,\n  RunsChartsTooltipMode,\n  containsMultipleRunsTooltipData,\n} from '../hooks/useRunsChartsTooltip';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartType,\n  RunsChartsScatterCardConfig,\n  RunsChartsContourCardConfig,\n  RunsChartsLineCardConfig,\n  RunsChartsParallelCardConfig,\n} from '../runs-charts.types';\nimport {\n  type RunsCompareMultipleTracesTooltipData,\n  type RunsMetricsSingleTraceTooltipData,\n} from './RunsMetricsLinePlot';\nimport { RunsMultipleTracesTooltipBody } from './RunsMultipleTracesTooltipBody';\nimport { shouldEnableRelativeTimeDateAxis } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { customMetricBehaviorDefs } from '../../experiment-page/utils/customMetricBehaviorUtils';\n\ninterface RunsChartsContextMenuContentDataType {\n  runs: RunsChartsRunData[];\n  onTogglePin?: (runUuid: string) => void;\n  onHideRun?: (runUuid: string) => void;\n  getDataTraceLink?: (experimentId: string, traceUuid: string) => string;\n}\n\ntype RunsChartContextMenuHoverDataType = RunsChartsCardConfig;\n\nconst createBarChartValuesBox = (cardConfig: RunsChartsBarCardConfig, activeRun: RunsChartsRunData) => {\n  const { metricKey, dataAccessKey } = cardConfig;\n\n  const dataKey = dataAccessKey ?? metricKey;\n\n  const metric = activeRun?.metrics[dataKey];\n\n  if (!metric) {\n    return null;\n  }\n\n  const customMetricBehaviorDef = customMetricBehaviorDefs[metric.key];\n  const displayName = customMetricBehaviorDef?.displayName ?? metric.key;\n  const displayValue = customMetricBehaviorDef?.valueFormatter({ value: metric.value }) ?? metric.value;\n\n  return (\n    <div css={styles.value}>\n      <strong>{displayName}:</strong> {displayValue}\n    </div>\n  );\n};\n\nconst createScatterChartValuesBox = (cardConfig: RunsChartsScatterCardConfig, activeRun: RunsChartsRunData) => {\n  const { xaxis, yaxis } = cardConfig;\n  const xKey = xaxis.dataAccessKey ?? xaxis.key;\n  const yKey = xaxis.dataAccessKey ?? yaxis.key;\n\n  const xLabel = xaxis.key;\n  const yLabel = yaxis.key;\n\n  const xValue = xaxis.type === 'METRIC' ? activeRun.metrics[xKey]?.value : activeRun.params[xKey]?.value;\n\n  const yValue = yaxis.type === 'METRIC' ? activeRun.metrics[yKey]?.value : activeRun.params[yKey]?.value;\n\n  return (\n    <>\n      {xValue && (\n        <div css={styles.value}>\n          <strong>X ({xLabel}):</strong> {xValue}\n        </div>\n      )}\n      {yValue && (\n        <div css={styles.value}>\n          <strong>Y ({yLabel}):</strong> {yValue}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst createContourChartValuesBox = (cardConfig: RunsChartsContourCardConfig, activeRun: RunsChartsRunData) => {\n  const { xaxis, yaxis, zaxis } = cardConfig;\n  const xKey = xaxis.key;\n  const yKey = yaxis.key;\n  const zKey = zaxis.key;\n\n  const xValue = xaxis.type === 'METRIC' ? activeRun.metrics[xKey]?.value : activeRun.params[xKey]?.value;\n\n  const yValue = yaxis.type === 'METRIC' ? activeRun.metrics[yKey]?.value : activeRun.params[yKey]?.value;\n\n  const zValue = zaxis.type === 'METRIC' ? activeRun.metrics[zKey]?.value : activeRun.params[zKey]?.value;\n\n  return (\n    <>\n      {xValue && (\n        <div css={styles.value}>\n          <strong>X ({xKey}):</strong> {xValue}\n        </div>\n      )}\n      {yValue && (\n        <div css={styles.value}>\n          <strong>Y ({yKey}):</strong> {yValue}\n        </div>\n      )}\n      {zValue && (\n        <div css={styles.value}>\n          <strong>Z ({zKey}):</strong> {zValue}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst normalizeRelativeTimeChartTooltipValue = (value: string | number) => {\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value.split(' ')[1] || '00:00:00';\n};\n\nconst getTooltipXValue = (\n  hoverData: RunsMetricsSingleTraceTooltipData | undefined,\n  xAxisKey: RunsChartsLineChartXAxisType,\n) => {\n  if (xAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n    return hoverData?.xValue ?? '';\n  }\n\n  if (shouldEnableRelativeTimeDateAxis() && xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n    return normalizeRelativeTimeChartTooltipValue(hoverData?.xValue ?? '');\n  }\n\n  // Default return for other cases\n  return hoverData?.xValue;\n};\n\nconst createLineChartValuesBox = (\n  cardConfig: RunsChartsLineCardConfig,\n  activeRun: RunsChartsRunData,\n  hoverData?: RunsMetricsSingleTraceTooltipData,\n) => {\n  const { metricKey: metricKeyFromConfig, xAxisKey } = cardConfig;\n  const metricKey = hoverData?.metricEntity?.key || metricKeyFromConfig;\n\n  // If there's available value from x axis (step or time), extract entry from\n  // metric history instead of latest metric.\n  const metricValue = hoverData?.yValue ?? activeRun?.metrics[metricKey].value;\n\n  if (isNil(metricValue)) {\n    return null;\n  }\n\n  const xValue = getTooltipXValue(hoverData, xAxisKey);\n  return (\n    <>\n      {hoverData && (\n        <div css={styles.value}>\n          <strong>{hoverData.label}:</strong> {xValue}\n        </div>\n      )}\n      <div css={styles.value}>\n        <strong>{metricKey}:</strong> {metricValue}\n      </div>\n    </>\n  );\n};\n\nconst createParallelChartValuesBox = (\n  cardConfig: RunsChartsParallelCardConfig,\n  activeRun: RunsChartsRunData,\n  isHovering?: boolean,\n) => {\n  const { selectedParams, selectedMetrics } = cardConfig as RunsChartsParallelCardConfig;\n  const paramsList = selectedParams.map((paramKey) => {\n    const param = activeRun?.params[paramKey];\n    if (param) {\n      return (\n        <div key={paramKey}>\n          <strong>{param.key}:</strong> {param.value}\n        </div>\n      );\n    }\n    return true;\n  });\n  const metricsList = selectedMetrics.map((metricKey) => {\n    const metric = activeRun?.metrics[metricKey];\n    if (metric) {\n      return (\n        <div key={metricKey}>\n          <strong>{metric.key}:</strong> {metric.value}\n        </div>\n      );\n    }\n    return true;\n  });\n\n  // show only first 3 params and primary metric if hovering, else show all\n  if (isHovering) {\n    return (\n      <>\n        {paramsList.slice(0, 3)}\n        {(paramsList.length > 3 || metricsList.length > 1) && <div>...</div>}\n        {metricsList[metricsList.length - 1]}\n      </>\n    );\n  } else {\n    return (\n      <>\n        {paramsList}\n        {metricsList}\n      </>\n    );\n  }\n};\n\n/**\n * Internal component that displays metrics/params - its final design\n * is a subject to change\n */\nconst ValuesBox = ({\n  activeRun,\n  cardConfig,\n  isHovering,\n  hoverData,\n}: {\n  activeRun: RunsChartsRunData;\n  cardConfig: RunsChartsCardConfig;\n  isHovering?: boolean;\n  hoverData?: RunsMetricsSingleTraceTooltipData;\n}) => {\n  if (cardConfig.type === RunsChartType.BAR) {\n    return createBarChartValuesBox(cardConfig as RunsChartsBarCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsChartType.SCATTER) {\n    return createScatterChartValuesBox(cardConfig as RunsChartsScatterCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsChartType.CONTOUR) {\n    return createContourChartValuesBox(cardConfig as RunsChartsContourCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsChartType.LINE) {\n    return createLineChartValuesBox(cardConfig as RunsChartsLineCardConfig, activeRun, hoverData);\n  }\n\n  if (cardConfig.type === RunsChartType.PARALLEL) {\n    return createParallelChartValuesBox(cardConfig as RunsChartsParallelCardConfig, activeRun, isHovering);\n  }\n\n  return null;\n};\n\nexport const RunsChartsTooltipBody = ({\n  closeContextMenu,\n  contextData,\n  hoverData,\n  chartData,\n  runUuid,\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  RunsChartsContextMenuContentDataType,\n  RunsChartContextMenuHoverDataType,\n  RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const { runs, onTogglePin, onHideRun, getDataTraceLink } = contextData;\n  const [experimentId] = useExperimentIds();\n  const activeRun = runs?.find((run) => run.uuid === runUuid);\n\n  if (\n    containsMultipleRunsTooltipData(hoverData) &&\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n\n  if (!activeRun) {\n    return null;\n  }\n\n  const runName = activeRun.displayName || activeRun.uuid;\n  const metricSuffix = singleTraceHoverData?.metricEntity ? ` (${singleTraceHoverData.metricEntity.key})` : '';\n\n  return (\n    <div>\n      <div css={styles.contentWrapper}>\n        <div css={styles.header}>\n          <div css={styles.colorPill} style={{ backgroundColor: activeRun.color }} />\n          {activeRun.groupParentInfo ? (\n            <Typography.Text>{runName + metricSuffix}</Typography.Text>\n          ) : (\n            <Link\n              to={getDataTraceLink?.(experimentId, runUuid) ?? Routes.getRunPageRoute(experimentId, runUuid)}\n              target=\"_blank\"\n              css={styles.runLink}\n              onClick={closeContextMenu}\n            >\n              {runName + metricSuffix}\n            </Link>\n          )}\n        </div>\n        {!isHovering && (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscomparetooltipbody.tsx_259\"\n            size=\"small\"\n            onClick={closeContextMenu}\n            icon={<CloseIcon />}\n          />\n        )}\n      </div>\n\n      <ValuesBox\n        isHovering={isHovering}\n        activeRun={activeRun}\n        cardConfig={chartData}\n        hoverData={singleTraceHoverData}\n      />\n\n      <div css={styles.actionsWrapper}>\n        {activeRun.pinnable && onTogglePin && (\n          <LegacyTooltip\n            title={\n              activeRun.pinned ? (\n                <FormattedMessage\n                  defaultMessage=\"Unpin run\"\n                  description=\"A tooltip for the pin icon button in the runs table next to the pinned run\"\n                />\n              ) : (\n                <FormattedMessage\n                  defaultMessage=\"Click to pin the run\"\n                  description=\"A tooltip for the pin icon button in the runs chart tooltip next to the not pinned run\"\n                />\n              )\n            }\n            placement=\"bottom\"\n          >\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscomparetooltipbody.tsx_282\"\n              size=\"small\"\n              onClick={() => {\n                onTogglePin(runUuid);\n                closeContextMenu();\n              }}\n              icon={activeRun.pinned ? <PinFillIcon /> : <PinIcon />}\n            />\n          </LegacyTooltip>\n        )}\n        {onHideRun && (\n          <LegacyTooltip\n            title={\n              <FormattedMessage\n                defaultMessage=\"Click to hide the run\"\n                description='A tooltip for the \"hide\" icon button in the runs chart tooltip'\n              />\n            }\n            placement=\"bottom\"\n          >\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-compare_runscomparetooltipbody.tsx_302\"\n              data-testid=\"experiment-view-compare-runs-tooltip-visibility-button\"\n              size=\"small\"\n              onClick={() => {\n                onHideRun(runUuid);\n                closeContextMenu();\n              }}\n              icon={<VisibleIcon />}\n            />\n          </LegacyTooltip>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  runLink: (theme: Theme) => ({\n    color: theme.colors.primary,\n    '&:hover': {},\n  }),\n  actionsWrapper: {\n    marginTop: 8,\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  header: {\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  value: {\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  contentWrapper: {\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    marginBottom: 12,\n    justifyContent: 'space-between',\n    height: 24,\n  },\n  colorPill: { width: 12, height: 12, borderRadius: '100%' },\n};\n","var _path, _path2;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgChartLine(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 22,\n    height: 22,\n    viewBox: \"0 0 22 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.38977 15.717L8.79655 10.8113L12.5254 14.9622L19.644 7.03772\",\n    stroke: \"#338ECC\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V21H21\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartLine);\nexport default __webpack_public_path__ + \"static/media/chart-line.0adaa2036bb4eb5956db6d0c7e925a3d.svg\";\nexport { ForwardRef as ReactComponent };","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport type { Figure } from 'react-plotly.js';\nimport type {\n  LineChartTraceData,\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsLinePlotProps,\n  RunsMetricsSingleTraceTooltipData,\n} from '../components/RunsMetricsLinePlot';\nimport { compact, isNumber, isString, isUndefined, orderBy, throttle, uniq } from 'lodash';\nimport type { LegendLabelData } from '../components/RunsMetricsLegend';\nimport { RunsChartsLineChartXAxisType } from '../components/RunsCharts.common';\n\n// Plotly-specific selectors for finding particular elements of interest in the plot DOM structure\nconst PLOTLY_SVG_SELECTOR = '.main-svg';\nconst PLOTLY_DRAGLAYER_SELECTOR = '.main-svg .draglayer .nsewdrag';\n\n// Interval for throttling the tooltip data update handler\nconst TOOLTIP_DATA_UPDATE_INTERVAL = 50;\n\n/**\n * Utility function, parses the microseconds from the plotly's axis boundary string\n * which are not supported by JavaScript's Date object and have to be added manually.\n *\n * E.g. transforms 2024-02-02 14:35:37.5747 into 0.7\n */\nconst parseMicroseconds = (plotlyAxisBoundary: string) => {\n  const microsecondsString =\n    isString(plotlyAxisBoundary) && plotlyAxisBoundary.match(/[0-9]{2}:[0-9]{2}:[0-9]{2}\\.([0-9]+)/)?.[1];\n  if (!microsecondsString) {\n    return 0;\n  }\n\n  // We turn the microseconds into a fraction of a millisecond, e.g. 0.5743 -> 574.3 -> 0.3\n  return (Number(`0.${microsecondsString}`) * 1000) % 1;\n};\n\nexport const useRunsMultipleTracesTooltipData = ({\n  onUnhover,\n  onHover,\n  runsData,\n  plotData,\n  legendLabelData,\n  containsMultipleMetricKeys,\n  xAxisKeyLabel,\n  xAxisKey,\n  disabled = false,\n  setHoveredPointIndex,\n  xAxisScaleType = 'linear',\n  positionInSection = 0,\n}: Pick<RunsMetricsLinePlotProps, 'runsData' | 'onHover' | 'onUnhover'> & {\n  plotData: LineChartTraceData[];\n  legendLabelData: LegendLabelData[];\n  containsMultipleMetricKeys?: boolean;\n  xAxisKeyLabel: string;\n  disabled?: boolean;\n  xAxisKey: RunsChartsLineChartXAxisType;\n  setHoveredPointIndex: (value: number) => void;\n  xAxisScaleType?: 'linear' | 'log';\n  positionInSection?: number;\n}) => {\n  // Save current boundaries/dimensions of the plot in the mutable ref object\n  const chartBoundaries = useRef<{\n    containerLeftPixels: number;\n    plotWidthPixels: number;\n    plotOffsetPixels: number;\n    lowerBoundValue: number;\n    valueRange: number;\n    mainContainer: SVGElement | null;\n    dragLayer: SVGElement | null;\n    initialized: boolean;\n  }>({\n    containerLeftPixels: 0,\n    plotWidthPixels: 0,\n    plotOffsetPixels: 0,\n    lowerBoundValue: 0,\n    valueRange: 0,\n    mainContainer: null,\n    dragLayer: null,\n    initialized: false,\n  });\n\n  // Keep the reference to the scanline element\n  const scanlineElementRef = useRef<HTMLDivElement>(null);\n\n  // Keep the reference to the current hovered trace data\n  const currentHoveredDataPoint = useRef<RunsMetricsSingleTraceTooltipData | undefined>(undefined);\n\n  // Calculate all visible X values each time the plot data changes\n  const visibleXValues = useMemo(() => uniq(plotData.map(({ x }) => x).flat()) as number[], [plotData]);\n\n  // Store the reference to the initialized plotly's figure object, helps keep track when the plot is initialized\n  const [initializedFigure, setInitializedFigure] = useState<{\n    figure: Readonly<Figure>;\n    graphDiv: Readonly<HTMLElement>;\n  } | null>(null);\n\n  // We are calculating the tooltip data outside of React to avoid unnecessary re-renders,\n  // so we're copying all the input data to the mutable ref objects\n  const immediateHoverData = useRef<RunsCompareMultipleTracesTooltipData | undefined>(undefined);\n  const immediateLegendLabelData = useRef(legendLabelData);\n  const immediateRunsData = useRef(runsData);\n  const immediatePlotData = useRef(plotData);\n  const immediateXValuesData = useRef(visibleXValues);\n  const immediateFigure = useRef(initializedFigure);\n\n  // Update the mutable ref objects when the input data changes\n  immediateLegendLabelData.current = legendLabelData;\n  immediateRunsData.current = runsData;\n  immediatePlotData.current = plotData;\n  immediateXValuesData.current = visibleXValues;\n  immediateFigure.current = initializedFigure;\n\n  // Setup the boundaries of the plot\n  const setupBoundaries = useCallback((figure: Readonly<Figure>) => {\n    const lowerAxisValue = figure.layout.xaxis?.range?.[0];\n    const upperAxisValue = figure.layout.xaxis?.range?.[1];\n\n    // If the axis values are numbers, use them as is, otherwise convert them to timestamps\n    let lowerBoundary = isNumber(lowerAxisValue) ? lowerAxisValue : new Date(lowerAxisValue ?? 0).getTime();\n    let upperBoundary = isNumber(upperAxisValue) ? upperAxisValue : new Date(upperAxisValue ?? 0).getTime();\n\n    lowerBoundary += parseMicroseconds(lowerAxisValue);\n    upperBoundary += parseMicroseconds(upperAxisValue);\n\n    // Save the boundaries to the mutable ref object\n    chartBoundaries.current.lowerBoundValue = lowerBoundary ?? 0;\n    chartBoundaries.current.valueRange = (upperBoundary ?? 0) - chartBoundaries.current.lowerBoundValue;\n  }, []);\n\n  const updateContainerPosition = useCallback(() => {\n    const { mainContainer, dragLayer } = chartBoundaries.current;\n\n    if (mainContainer && dragLayer) {\n      const containerRect = mainContainer.getBoundingClientRect();\n      const dragLayerRect = dragLayer.getBoundingClientRect();\n\n      // Save the boundaries to the mutable ref object\n      chartBoundaries.current.containerLeftPixels = containerRect.x;\n      chartBoundaries.current.plotWidthPixels = dragLayerRect.width;\n      chartBoundaries.current.plotOffsetPixels = dragLayerRect.x - containerRect.x;\n      chartBoundaries.current.initialized = dragLayerRect.width > 0;\n    }\n  }, []);\n\n  // This is a handler of plotly's onUpdate callback.\n  // It is called when the plot is initialized and when the plot is updated.\n  const onUpdatePlotHandler = useCallback(\n    (figure: Readonly<Figure>, graphDiv: Readonly<HTMLElement>) => {\n      setupBoundaries(figure);\n\n      const mainContainer: SVGElement | null = graphDiv.querySelector(PLOTLY_SVG_SELECTOR);\n      const dragLayer: SVGElement | null = graphDiv.querySelector(PLOTLY_DRAGLAYER_SELECTOR);\n\n      chartBoundaries.current.mainContainer = mainContainer;\n      chartBoundaries.current.dragLayer = dragLayer;\n      updateContainerPosition();\n    },\n    [setupBoundaries, updateContainerPosition],\n  );\n\n  // This is a handler of plotly's onInit callback.\n  const onInitPlotHandler = useCallback(\n    (figure: Readonly<Figure>, graphDiv: Readonly<HTMLElement>) => {\n      setInitializedFigure({ figure, graphDiv });\n      onUpdatePlotHandler(figure, graphDiv);\n    },\n    [onUpdatePlotHandler],\n  );\n\n  useEffect(() => {\n    // Recalculate positions after chart has been moved\n    requestAnimationFrame(() => {\n      if (!immediateFigure.current) {\n        return;\n      }\n      onUpdatePlotHandler(immediateFigure.current.figure, immediateFigure.current.graphDiv);\n    });\n  }, [positionInSection, onUpdatePlotHandler]);\n\n  // Hides the scanline when the mouse leaves the plot\n  const pointerLeavePlotCallback = useCallback(\n    (e: PointerEvent) => {\n      // Noop if the mouse is moving to plotly's dragcover element\n      if (e.relatedTarget instanceof Element && e.relatedTarget.classList.contains('dragcover')) {\n        return;\n      }\n      onUnhover?.();\n      if (scanlineElementRef.current) {\n        scanlineElementRef.current.style.display = 'none';\n      }\n    },\n    [onUnhover],\n  );\n\n  // This is a handler of plotly's onHover callback.\n  const onPointHoverCallback = useCallback(\n    ({ points }) => {\n      const hoveredPoint = points[0];\n      const hoveredPointData = hoveredPoint?.data;\n\n      setHoveredPointIndex(hoveredPoint?.curveNumber ?? -1);\n\n      if (!hoveredPointData) {\n        return;\n      }\n\n      // Extract metric entity\n      const metricEntity = hoveredPointData.metricHistory?.[hoveredPoint.pointIndex];\n\n      const singleTraceData: RunsMetricsSingleTraceTooltipData = {\n        // Value of the \"x\" axis (time, step)\n        xValue: hoveredPoint.x,\n        // Value of the \"y\" axis\n        yValue: hoveredPoint.y,\n        // Metric entity value\n        metricEntity,\n        // The index of the X datum\n        index: hoveredPoint.pointIndex,\n        // Current label (\"Step\", \"Time\" etc.)\n        label: xAxisKeyLabel,\n        // Run/group UUID\n        traceUuid: hoveredPointData.uuid,\n      };\n\n      // Save the hovered point/trace data to the mutable ref object\n      currentHoveredDataPoint.current = singleTraceData;\n    },\n    [xAxisKeyLabel, setHoveredPointIndex],\n  );\n\n  // This is a handler of plotly's onUnhover callback.\n  const onPointUnhoverCallback = useCallback(() => {\n    currentHoveredDataPoint.current = undefined;\n    setHoveredPointIndex(-1);\n  }, [setHoveredPointIndex]);\n\n  const getClosestXValue = useCallback(\n    (pointerClientX: number) => {\n      const boundaries = chartBoundaries.current;\n      // Calculate the X value of the hovered point\n      const resultX =\n        (pointerClientX - boundaries.plotOffsetPixels - boundaries.containerLeftPixels) / boundaries.plotWidthPixels;\n\n      // Calculate the current step based on the X value and precalculated boundaries\n      let currentStep = boundaries.lowerBoundValue + boundaries.valueRange * resultX;\n      if (xAxisScaleType === 'log') {\n        currentStep = 10 ** currentStep;\n      }\n      // Find the closest existing X value to the currently hovered value\n      const closestXValue = immediateXValuesData.current.reduce((acc, x) => {\n        if (Math.abs(x - currentStep) < Math.abs(acc - currentStep)) {\n          return x;\n        }\n        return acc;\n      }, immediateXValuesData.current[0]);\n      return closestXValue;\n    },\n    [xAxisScaleType],\n  );\n\n  useEffect(() => {\n    // Return early if this tooltip is disabled\n    if (disabled) {\n      return;\n    }\n    // Return early if the figure is not initialized yet\n    if (!initializedFigure) {\n      return;\n    }\n\n    // Setup the boundaries of the plot at the beginning\n    setupBoundaries(initializedFigure.figure);\n\n    // Get the drag layer element - this is the event-sensitive layer of rendered plotly chart\n    const dragLayer: SVGElement | null = initializedFigure.graphDiv.querySelector(PLOTLY_DRAGLAYER_SELECTOR);\n\n    // This is a throttled handler of the pointermove event, it contains some heavier logic so it's throttled for 50ms\n    const tooltipDataUpdateHandler = throttle(\n      (e: PointerEvent) => {\n        // If for some reason the chart sizing is not initialized yet, do it now\n        if (!chartBoundaries.current.initialized) {\n          updateContainerPosition();\n        }\n        const closestXValue = getClosestXValue(e.clientX);\n\n        // Calculate the tooltip data - based on existing legend, plot and runs data\n        const data = immediateLegendLabelData.current.map((legendEntry) => {\n          // First, find the corresponding data entry (from chart components's input data) and trace (from data prepared for plotly)\n          const correspondingDataEntry = immediateRunsData.current.find(({ uuid }) => uuid === legendEntry.uuid);\n          const correspondingDataTrace = immediatePlotData.current.find(\n            ({ uuid, metricKey }) => uuid === legendEntry.uuid && legendEntry.metricKey === metricKey,\n          );\n\n          if (!correspondingDataTrace) {\n            return undefined;\n          }\n\n          // Determine the display name of the metric - if there are multiple metrics, use the legend label,\n          // otherwise use the display name of the corresponding data entry.\n          const displayName = containsMultipleMetricKeys ? legendEntry.label : correspondingDataEntry?.displayName;\n\n          // Find the value of the corresponding data trace at the closest X value\n          const xIndex = correspondingDataTrace.x?.indexOf(closestXValue);\n          if (isUndefined(xIndex) || xIndex === -1) {\n            return undefined;\n          }\n          const value = correspondingDataTrace.y?.[xIndex];\n\n          // Construct the tooltip legend entry\n          return {\n            displayName: displayName || '',\n            value: isNumber(value) ? value : undefined,\n            color: legendEntry?.color,\n            dashStyle: legendEntry?.dashStyle,\n            uuid: `${legendEntry.uuid}.${legendEntry.metricKey}`,\n          };\n        });\n\n        // Save the tooltip data to the mutable ref object\n        immediateHoverData.current = {\n          tooltipLegendItems: orderBy(compact(data), 'value', 'desc'),\n          hoveredDataPoint: currentHoveredDataPoint?.current,\n          xValue: closestXValue,\n          xAxisKey,\n          xAxisKeyLabel,\n        };\n      },\n      TOOLTIP_DATA_UPDATE_INTERVAL,\n      { leading: true },\n    );\n\n    const windowResizeHandler = throttle(updateContainerPosition, TOOLTIP_DATA_UPDATE_INTERVAL);\n\n    // This is a handler of the pointermove event.\n    // It's not throttled: it just updates the scanline and tooltip position and pass precalculated tooltip data\n    const hoverHandler = (e: PointerEvent) => {\n      if (!immediateHoverData.current) {\n        return;\n      }\n\n      const boundaries = chartBoundaries.current;\n      const closestXValue = getClosestXValue(e.clientX);\n      const closestXValueLeftX =\n        ((xAxisScaleType === 'log' ? Math.log10(closestXValue) : closestXValue) - boundaries.lowerBoundValue) /\n        boundaries.valueRange;\n      const closestXValueLeftInPixels = closestXValueLeftX * boundaries.plotWidthPixels;\n\n      // Enable and reposition the scanline\n      if (scanlineElementRef.current) {\n        scanlineElementRef.current.style.display = 'block';\n        scanlineElementRef.current.style.left = `${boundaries.plotOffsetPixels + closestXValueLeftInPixels}px`;\n      }\n\n      onHover?.(\n        immediateHoverData.current?.hoveredDataPoint?.traceUuid || '',\n        {\n          x: boundaries.containerLeftPixels + boundaries.plotOffsetPixels + closestXValueLeftInPixels,\n          y: e.clientY,\n          originalEvent: e,\n        },\n        immediateHoverData.current,\n      );\n    };\n\n    if (dragLayer) {\n      // Assign two separate handlers for move: one for updating the tooltip data, one for updating the scanline and tooltip position\n      dragLayer.addEventListener('pointermove', tooltipDataUpdateHandler);\n      dragLayer.addEventListener('pointermove', hoverHandler);\n      window.addEventListener('resize', windowResizeHandler);\n\n      // Assign a handler that hides the scanline and tooltip\n      dragLayer.addEventListener('pointerleave', pointerLeavePlotCallback);\n      return () => {\n        dragLayer.removeEventListener('pointermove', tooltipDataUpdateHandler);\n        dragLayer.removeEventListener('pointermove', hoverHandler);\n        dragLayer.removeEventListener('pointerleave', pointerLeavePlotCallback);\n        window.removeEventListener('resize', windowResizeHandler);\n      };\n    }\n\n    return () => {};\n  }, [\n    pointerLeavePlotCallback,\n    initializedFigure,\n    setupBoundaries,\n    onHover,\n    containsMultipleMetricKeys,\n    currentHoveredDataPoint,\n    disabled,\n    xAxisKey,\n    xAxisKeyLabel,\n    xAxisScaleType,\n    getClosestXValue,\n    updateContainerPosition,\n  ]);\n\n  const scanlineElement = disabled ? null : (\n    <div\n      css={{\n        top: 0,\n        width: 0,\n        borderLeft: `1px dashed rgba(0,0,0,0.5)`,\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n      }}\n      ref={scanlineElementRef}\n      style={{ display: 'none' }}\n    />\n  );\n\n  return {\n    updateHandler: onUpdatePlotHandler,\n    initHandler: onInitPlotHandler,\n    scanlineElement,\n    onPointHover: onPointHoverCallback,\n    onPointUnhover: onPointUnhoverCallback,\n  };\n};\n","import { intersection } from 'lodash';\nimport { MetricEntity } from '../../../types';\nimport { RunsChartsLineChartXAxisType, RunsChartsRunData } from '../components/RunsCharts.common';\nimport { RunsMetricsLinePlotProps } from '../components/RunsMetricsLinePlot';\nimport { RunsChartsLineChartExpression } from '../runs-charts.types';\n\nconst getCompareValue = (element: MetricEntity, xAxisKey: RunsMetricsLinePlotProps['xAxisKey']) => {\n  if (xAxisKey === RunsChartsLineChartXAxisType.STEP) {\n    // If xAxisKey is steps, we match along step\n    return element.step;\n  } else if (\n    xAxisKey === RunsChartsLineChartXAxisType.TIME ||\n    xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE\n  ) {\n    // If xAxisKey is time, we match along timestamp\n    return element.timestamp;\n  }\n  return null;\n};\n\nexport const getExpressionChartsSortedMetricHistory = ({\n  expression,\n  runEntry,\n  evaluateExpression,\n  xAxisKey,\n}: {\n  expression: RunsChartsLineChartExpression;\n  runEntry: Omit<RunsChartsRunData, 'metrics' | 'params' | 'tags' | 'images'>;\n  evaluateExpression: (\n    expression: RunsChartsLineChartExpression,\n    variables: Record<string, number>,\n  ) => number | undefined;\n  xAxisKey: RunsMetricsLinePlotProps['xAxisKey'];\n}) => {\n  const xDataPointsPerVariable = expression.variables.map((variable) => {\n    const elements = runEntry.metricsHistory?.[variable];\n    if (elements !== undefined) {\n      return elements.flatMap((element) => {\n        const compareValue = getCompareValue(element, xAxisKey);\n        if (compareValue !== null) {\n          return [compareValue];\n        }\n        return [];\n      });\n    }\n    return [];\n  });\n  const xDataPoints = intersection(...xDataPointsPerVariable);\n  xDataPoints.sort((a, b) => a - b); // ascending\n\n  // For each xDataPoint, extract variables and evaluate expression\n  return xDataPoints.flatMap((xDataPoint) => {\n    const variables = expression.variables.reduce((obj, variable) => {\n      const elements = runEntry.metricsHistory?.[variable];\n      const value = elements?.find((element) => getCompareValue(element, xAxisKey) === xDataPoint)?.value;\n      if (value !== undefined) {\n        obj[variable] = value;\n      }\n      return obj;\n    }, {} as Record<string, number>);\n\n    const expressionValue = evaluateExpression(expression, variables);\n    if (expressionValue !== undefined) {\n      return [\n        {\n          value: expressionValue,\n          key: expression.expression,\n          ...(xAxisKey === RunsChartsLineChartXAxisType.STEP || xAxisKey === RunsChartsLineChartXAxisType.METRIC\n            ? { step: xDataPoint, timestamp: 0 }\n            : { timestamp: xDataPoint, step: 0 }),\n        },\n      ];\n    }\n    return [];\n  });\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { isEmpty, isEqual, isNumber, maxBy, minBy } from 'lodash';\nimport type { Config, Dash, Data as PlotlyData, Layout, LayoutAxis } from 'plotly.js';\nimport { type Figure } from 'react-plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { MetricEntity } from '../../../types';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableChartHoverCallback } from '../hooks/useMutableHoverCallback';\nimport { highlightLineTraces, useRenderRunsChartTraceHighlight } from '../hooks/useRunsChartTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  RunsChartsRunData,\n  runsChartDefaultMargin,\n  runsChartHoverlabel,\n  RunsPlotsCommonProps,\n  createThemedPlotlyLayout,\n  normalizeChartValue,\n  useDynamicPlotSize,\n  getLineChartLegendData,\n  lineDashStyles,\n  containsDuplicateXValues,\n  createFadedTraceColor,\n  getChartAxisLabelDescriptor,\n  RunsChartsLineChartXAxisType,\n} from './RunsCharts.common';\nimport { EMA } from '../../MetricsPlotView';\nimport RunsMetricsLegendWrapper from './RunsMetricsLegendWrapper';\nimport {\n  shouldEnableChartsOriginalLinesWhenSmoothing,\n  shouldEnableRelativeTimeDateAxis,\n  shouldEnableChartExpressions,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useRunsMultipleTracesTooltipData } from '../hooks/useRunsChartsMultipleTracesTooltip';\nimport { createChartImageDownloadHandler } from '../hooks/useChartImageDownloadHandler';\nimport {\n  EPOCH_RELATIVE_TIME,\n  HOUR_IN_MILLISECONDS,\n  LINE_CHART_RELATIVE_TIME_THRESHOLD,\n} from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { type RunsChartsLineChartExpression, RunsChartsLineChartYAxisType } from '../runs-charts.types';\nimport { useChartExpressionParser } from '../hooks/useChartExpressionParser';\nimport { getExpressionChartsSortedMetricHistory } from '../utils/expressionCharts.utils';\nimport { RunsChartCardLoadingPlaceholder } from './cards/ChartCard.common';\n\nexport type LineChartTraceData = PlotlyData & {\n  x?: number[] | undefined;\n  y?: number[];\n  uuid?: string;\n  metricKey?: string;\n};\n\n// Display markers only if there are less than 60 points in the single data trace\nconst MARKER_DISPLAY_THRESHOLD = 60;\n\nconst getDataTraceForRun = ({\n  runEntry,\n  metricKey,\n  xAxisKey,\n  selectedXAxisMetricKey,\n  useDefaultHoverBox,\n  lineSmoothness,\n  lineShape,\n  lineDash,\n  displayPoints,\n  displayOriginalLine: originalLine,\n  xAxisScaleType,\n  expression,\n  evaluateExpression,\n}: {\n  runEntry: Omit<RunsChartsRunData, 'metrics' | 'params' | 'tags' | 'images'>;\n  metricKey?: RunsMetricsLinePlotProps['metricKey'];\n  xAxisKey: RunsMetricsLinePlotProps['xAxisKey'];\n  selectedXAxisMetricKey: RunsMetricsLinePlotProps['selectedXAxisMetricKey'];\n  useDefaultHoverBox: RunsMetricsLinePlotProps['useDefaultHoverBox'];\n  lineSmoothness: RunsMetricsLinePlotProps['lineSmoothness'];\n  lineShape: RunsMetricsLinePlotProps['lineShape'];\n  lineDash?: Dash;\n  displayPoints?: boolean;\n  displayOriginalLine?: boolean;\n  xAxisScaleType?: 'linear' | 'log';\n  expression?: RunsChartsLineChartExpression;\n  evaluateExpression?: (\n    expression: RunsChartsLineChartExpression,\n    variables: Record<string, number>,\n  ) => number | undefined;\n}): LineChartTraceData => {\n  if (!runEntry.metricsHistory) {\n    return {};\n  }\n\n  let sortedMetricsHistory: MetricEntity[] = [];\n  if (expression && evaluateExpression) {\n    sortedMetricsHistory = getExpressionChartsSortedMetricHistory({\n      expression,\n      runEntry,\n      evaluateExpression,\n      xAxisKey,\n    });\n  } else if (metricKey !== undefined) {\n    sortedMetricsHistory = runEntry.metricsHistory[metricKey]?.sort((a, b) =>\n      xAxisKey === RunsChartsLineChartXAxisType.STEP ? a.step - b.step : a.timestamp - b.timestamp,\n    );\n  } else {\n    return {};\n  }\n\n  let xValues;\n  let yValues;\n  if (xAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n    const ySteps = new Set((sortedMetricsHistory ?? []).map(({ step }) => step));\n    const xValuesWithSteps = prepareXAxisDataForMetricType(ySteps, runEntry.metricsHistory[selectedXAxisMetricKey]);\n    const stepOrder = xValuesWithSteps.map(({ step }) => step);\n    const xSteps = new Set(stepOrder);\n    const yValueHistory = orderBySteps(sortedMetricsHistory ?? [], stepOrder).filter(({ step }) => xSteps.has(step));\n\n    xValues = xValuesWithSteps.map(({ value }) => value);\n    yValues = yValueHistory.map(({ value }) => normalizeChartValue(value));\n  } else {\n    xValues = prepareMetricHistoryByAxisType(sortedMetricsHistory, xAxisKey);\n    yValues = sortedMetricsHistory?.map(({ value }) => normalizeChartValue(value));\n\n    if (xAxisScaleType === 'log') {\n      // If the log scale is used, we want to remove all <=0 values from X axis (and their corresponding Y values).\n      const firstNonZeroXIndex = xValues.findIndex((x) => x > 0);\n      if (firstNonZeroXIndex !== -1) {\n        xValues = xValues.slice(firstNonZeroXIndex);\n        yValues = yValues.slice(firstNonZeroXIndex);\n      }\n    }\n  }\n\n  // If there are any duplicate X values, use linear line shape\n  // to avoid bending splines in the wrong direction\n  const optimizedLineShape = containsDuplicateXValues(xValues) ? 'linear' : lineShape;\n\n  // Use chart card's configuration or if its unset, use the automatic behavior by checking the number of points\n  const shouldDisplayMarkers = !originalLine && (displayPoints ?? xValues.length < MARKER_DISPLAY_THRESHOLD);\n\n  const containsSingleValue = yValues?.length === 1;\n\n  const hoverinfo = (() => {\n    if (originalLine) {\n      return 'skip';\n    }\n    if (useDefaultHoverBox) {\n      return undefined;\n    }\n    return 'none';\n  })();\n\n  return {\n    // Let's add UUID to each run so it can be distinguished later (e.g. on hover)\n    uuid: runEntry.uuid,\n    name: runEntry.runInfo?.runName || '',\n    x: xValues,\n    // The actual value is on Y axis\n    y: EMA(yValues ?? [], originalLine ? 0 : lineSmoothness),\n    // Save the metric history\n    metricHistory: sortedMetricsHistory,\n    metricKey: metricKey || expression?.expression,\n    hovertext: runEntry.runInfo?.runName || '',\n    text: 'x',\n    textposition: 'outside',\n    textfont: {\n      size: 11,\n    },\n    mode: containsSingleValue || shouldDisplayMarkers ? 'lines+markers' : 'lines',\n    hovertemplate: useDefaultHoverBox ? createTooltipTemplate(runEntry.runInfo?.runName || '') : undefined,\n    hoverinfo,\n    hoverlabel: useDefaultHoverBox ? runsChartHoverlabel : undefined,\n    type: 'scatter',\n    line: { dash: lineDash, shape: optimizedLineShape },\n    marker: {\n      color: originalLine ? createFadedTraceColor(runEntry.color, 0.15) : runEntry.color,\n    },\n  } as LineChartTraceData;\n};\n\nconst getBandTraceForRun = ({\n  runEntry,\n  metricKey,\n  lineShape,\n  xAxisKey,\n  selectedXAxisMetricKey,\n  xAxisScaleType,\n}: {\n  runEntry: Omit<RunsChartsRunData, 'metrics' | 'params' | 'tags' | 'images'>;\n  metricKey: RunsMetricsLinePlotProps['metricKey'];\n  lineShape: RunsMetricsLinePlotProps['lineShape'];\n  xAxisKey: RunsChartsLineChartXAxisType;\n  selectedXAxisMetricKey: RunsMetricsLinePlotProps['selectedXAxisMetricKey'];\n  xAxisScaleType?: 'linear' | 'log';\n}): LineChartTraceData => {\n  if (!runEntry.aggregatedMetricsHistory) {\n    return {};\n  }\n\n  // Get upper and lower boundaries to draw a band\n  const { max, min } = runEntry.aggregatedMetricsHistory[metricKey];\n\n  let xMins, xMaxes, yMins, yMaxes;\n  if (xAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n    if (!runEntry.metricsHistory) {\n      return {};\n    }\n    const ySteps = new Set(max.map(({ step }) => step));\n    const xValuesWithSteps = prepareXAxisDataForMetricType(ySteps, runEntry.metricsHistory[selectedXAxisMetricKey]);\n    const stepOrder = xValuesWithSteps.map((e) => e.step);\n    const xSteps = new Set(stepOrder);\n    const xValues = xValuesWithSteps.map((e) => e.value);\n\n    yMins = orderBySteps(min, stepOrder)\n      .filter(({ step }) => xSteps.has(step))\n      .map(({ value }) => normalizeChartValue(value))\n      .reverse();\n    yMaxes = orderBySteps(max, stepOrder)\n      .filter(({ step }) => xSteps.has(step))\n      .map(({ value }) => normalizeChartValue(value));\n    xMins = xValues.slice().reverse();\n    xMaxes = xValues;\n  } else {\n    // Reverse one of the arrays so that the band is drawn correctly\n    const minReversed = min.slice().reverse();\n    xMins = prepareMetricHistoryByAxisType(minReversed, xAxisKey);\n    xMaxes = prepareMetricHistoryByAxisType(max, xAxisKey);\n    yMins = minReversed.map(({ value }) => normalizeChartValue(value));\n    yMaxes = max.map(({ value }) => normalizeChartValue(value));\n\n    if (xAxisScaleType === 'log') {\n      // If the log scale is used, we want to remove all <=0 values from X axis (and their corresponding Y values).\n      const firstNonZeroXIndex = xMaxes.findIndex((x) => isNumber(x) && x > 0);\n      const lastNonZeroXIndex = xMins.length - xMins.findIndex((x) => isNumber(x) && x > 0);\n      if (firstNonZeroXIndex !== -1 && lastNonZeroXIndex !== -1) {\n        xMaxes = xMaxes.slice(firstNonZeroXIndex);\n        yMaxes = yMaxes.slice(firstNonZeroXIndex);\n        xMins = xMins.slice(0, lastNonZeroXIndex - 1);\n        yMins = yMins.slice(0, lastNonZeroXIndex - 1);\n      }\n    }\n  }\n\n  // Place a null value in the middle to create a gap, otherwise Plotly will\n  // connect the lines and the fill will be drawn incorrectly\n  const xValues = [...xMins, null, ...xMaxes];\n  const bandValues = [...yMins, null, ...yMaxes];\n\n  return {\n    name: runEntry.runInfo?.runName || '',\n    x: xValues,\n    y: bandValues,\n    fillcolor: createFadedTraceColor(runEntry.color, 0.2),\n    hovertemplate: undefined,\n    hoverlabel: undefined,\n    hoverinfo: 'skip',\n    line: { color: 'transparent', shape: lineShape },\n    fill: 'tozeroy',\n    type: 'scatter',\n  } as LineChartTraceData;\n};\n\n/**\n * This function takes a list of metric entities and returns a copy ordered by\n * the step order provided. This is used in metric-type X axes, where the Y values\n * need to be ordered by the X values.\n *\n * For example:\n * dataPoints = [{step: 0, value: 1}, {step: 1, value: 2}, {step: 2, value: 3}]\n * stepOrder = [2, 0, 1]\n * return = [{step: 2, value: 3}, {step: 0, value: 1}, {step: 1, value: 2}]\n */\nconst orderBySteps = (dataPoints: MetricEntity[], stepOrder: number[]) => {\n  const stepIndexes = stepOrder.reduce((acc, step, idx) => {\n    acc[step] = idx;\n    return acc;\n  }, {} as Record<number, number>);\n\n  // if there's a step mismatch, send all non-existing values to the end\n  return dataPoints.slice().sort((a, b) => (stepIndexes[a.step] ?? Infinity) - (stepIndexes[b.step] ?? Infinity));\n};\n\nexport interface RunsMetricsSingleTraceTooltipData {\n  xValue: string | number;\n  yValue: number;\n  index: number;\n  label: string;\n  traceUuid?: string;\n  metricEntity?: MetricEntity;\n}\n\nexport interface RunsCompareMultipleTracesTooltipData {\n  tooltipLegendItems: {\n    uuid: string;\n    color?: string;\n    dashStyle?: Dash;\n    displayName: string;\n    value?: string | number;\n  }[];\n  xValue: string | number;\n  xAxisKey: RunsChartsLineChartXAxisType;\n  xAxisKeyLabel: string;\n  hoveredDataPoint?: RunsMetricsSingleTraceTooltipData;\n}\n\nexport interface RunsMetricsLinePlotProps extends RunsPlotsCommonProps {\n  /**\n   * Determines which metric are we comparing by\n   * NOTE: used only as a fallback in V2 charts\n   */\n  metricKey: string;\n\n  /**\n   * Determines which metric keys to display in V2 charts\n   * NOTE: this prop may not be present in V1 chart configs\n   */\n  selectedMetricKeys?: string[];\n\n  /**\n   * Smoothing factor for EMA\n   */\n  lineSmoothness?: number;\n\n  /**\n   * X axis mode\n   */\n  xAxisScaleType?: 'linear' | 'log';\n\n  /**\n   * Y axis mode\n   */\n  scaleType?: 'linear' | 'log';\n\n  /**\n   * Use spline or polyline. Spline is default mode.\n   */\n  lineShape?: 'linear' | 'spline';\n\n  /**\n   * Choose X axis mode - numeric step or absolute time\n   */\n  xAxisKey?: RunsChartsLineChartXAxisType;\n\n  /**\n   * Choose Y axis mode - metric or expressions\n   */\n  yAxisKey?: RunsChartsLineChartYAxisType;\n\n  /**\n   * Array of expressions to evaluate\n   */\n  yAxisExpressions?: RunsChartsLineChartExpression[];\n\n  /**\n   * Name of the metric to use for the X axis. Used when xAxisKey is set to 'metric'\n   */\n  selectedXAxisMetricKey: string;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: Omit<RunsChartsRunData, 'metrics' | 'params' | 'tags' | 'images'>[];\n\n  /**\n   * Currently visible range on x-axis.\n   */\n  xRange?: [number | string, number | string];\n\n  /**\n   * Currently visible range on y-axis\n   */\n  yRange?: [number | string, number | string];\n\n  /**\n   * If set to true, only x-axis can be zoomed by dragging\n   */\n  lockXAxisZoom?: boolean;\n\n  /**\n   * Display points on the line chart. Undefined means \"auto\" mode, i.e. display points only when\n   * there are fewer than 60 datapoints on the chart.\n   */\n  displayPoints?: boolean;\n\n  /**\n   * Current ordering of the chart in the list.\n   * Helps to recalculate tooltip legend repositioning in case of reordering.\n   */\n  positionInSection?: number;\n}\n\nconst PLOT_CONFIG: Partial<Config> = {\n  displaylogo: false,\n  doubleClick: 'autosize',\n  scrollZoom: false,\n  modeBarButtonsToRemove: ['toImage'],\n};\n\nconst createTooltipTemplate = (runName: string) =>\n  `<b>${runName}</b>:<br>` +\n  '<b>%{xaxis.title.text}:</b> %{x}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  '<extra></extra>';\n\n/**\n * Prepares dataset's X axis according to selected visualization type: step, time-wall and time-relative\n *\n * NOTE: metric-type X axes are handled by `prepareXAxisDataForMetricType()`, since we need to retain\n *       step information in order to format the Y axis data correctly.\n */\nconst prepareMetricHistoryByAxisType = (\n  metricHistory?: MetricEntity[],\n  axisType?: RunsMetricsLinePlotProps['xAxisKey'],\n) => {\n  if (!metricHistory) {\n    return [];\n  }\n  if (axisType === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n    const { timestamp: minTimestamp } = minBy(metricHistory, 'timestamp') || {};\n    if (minTimestamp) {\n      if (shouldEnableRelativeTimeDateAxis()) {\n        return metricHistory.map(({ timestamp }) => timestamp - minTimestamp + EPOCH_RELATIVE_TIME);\n      }\n      return metricHistory.map(({ timestamp }) => (timestamp - minTimestamp) / 1000); // Milliseconds -> seconds\n    }\n    return metricHistory.map(({ step }) => step);\n  } else if (shouldEnableRelativeTimeDateAxis() && axisType === RunsChartsLineChartXAxisType.TIME_RELATIVE_HOURS) {\n    const { timestamp: minTimestamp } = minBy(metricHistory, 'timestamp') || {};\n    if (minTimestamp) {\n      return metricHistory.map(({ timestamp }) => (timestamp - minTimestamp) / HOUR_IN_MILLISECONDS);\n    }\n  } else if (axisType === RunsChartsLineChartXAxisType.TIME) {\n    return metricHistory.map(({ timestamp }) => timestamp);\n  }\n\n  return metricHistory.map(({ step }) => step);\n};\n\n/**\n * Prepares dataset's X axis when axisType is 'metric'. This is separate from\n * `prepareMetricHistoryByAxisType` because we need to keep track of the `step`\n * in addition to the `value`, so that the Y axis data can be associated to the\n * correct X datapoint.\n */\nconst prepareXAxisDataForMetricType = (\n  ySteps: Set<number>,\n  metricHistory?: MetricEntity[],\n): Array<{\n  value: number | undefined;\n  step: number;\n}> => {\n  if (!metricHistory) {\n    return [];\n  }\n\n  return metricHistory\n    .filter((datapoint) => ySteps.has(datapoint.step))\n    .map((datapoint) => ({\n      value: normalizeChartValue(datapoint.value),\n      step: datapoint.step,\n    }))\n    .sort((a, b) => {\n      // sort by value in ascending order\n      return Number(a.value) - Number(b.value);\n    });\n};\n\nconst getXAxisPlotlyType = (\n  xAxisKey: RunsChartsLineChartXAxisType,\n  xAxisScaleType: 'linear' | 'log',\n  dynamicXAxisKey: RunsChartsLineChartXAxisType,\n) => {\n  if (\n    xAxisKey === RunsChartsLineChartXAxisType.TIME ||\n    (shouldEnableRelativeTimeDateAxis() && dynamicXAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE)\n  ) {\n    return 'date';\n  }\n  if (xAxisKey === RunsChartsLineChartXAxisType.STEP && xAxisScaleType === 'log') {\n    return 'log';\n  }\n  return 'linear';\n};\n\n/**\n * Implementation of plotly.js chart displaying\n * line plot comparing metrics' history for a given\n * set of experiments runs\n */\nexport const RunsMetricsLinePlot = React.memo(\n  ({\n    runsData,\n    metricKey,\n    selectedMetricKeys,\n    scaleType = 'linear',\n    xAxisScaleType = 'linear',\n    xAxisKey = RunsChartsLineChartXAxisType.STEP,\n    yAxisKey = RunsChartsLineChartYAxisType.METRIC,\n    yAxisExpressions = [],\n    selectedXAxisMetricKey = '',\n    lineSmoothness = 70,\n    className,\n    margin = runsChartDefaultMargin,\n    lineShape = 'linear',\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n    xRange,\n    yRange,\n    lockXAxisZoom,\n    fullScreen,\n    displayPoints,\n    onSetDownloadHandler,\n    positionInSection = 0,\n  }: RunsMetricsLinePlotProps) => {\n    const { theme } = useDesignSystemTheme();\n    const { evaluateExpression } = useChartExpressionParser();\n\n    const dynamicXAxisKey = useMemo(() => {\n      let dynamicXAxisKey = xAxisKey;\n      if (shouldEnableRelativeTimeDateAxis() && xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE) {\n        const metricKeys = selectedMetricKeys || [metricKey];\n        let maxDiff = 0;\n        runsData.forEach((runData) => {\n          const metricHistory = runData.metricsHistory;\n          if (metricHistory) {\n            metricKeys.forEach((metricKey) => {\n              if (metricHistory[metricKey]) {\n                const { timestamp: minTimestamp } = minBy(metricHistory[metricKey], 'timestamp') || {};\n                const { timestamp: maxTimestamp } = maxBy(metricHistory[metricKey], 'timestamp') || {};\n                if (maxTimestamp && minTimestamp) {\n                  const diff = maxTimestamp - minTimestamp;\n                  maxDiff = Math.max(maxDiff, diff);\n                }\n              }\n            });\n          }\n        });\n\n        if (maxDiff >= LINE_CHART_RELATIVE_TIME_THRESHOLD) {\n          dynamicXAxisKey = RunsChartsLineChartXAxisType.TIME_RELATIVE_HOURS;\n        }\n      }\n      return dynamicXAxisKey;\n    }, [runsData, selectedMetricKeys, metricKey, xAxisKey]);\n\n    const getTraceAndOriginalTrace = (props: any) => {\n      const dataTrace = getDataTraceForRun(props);\n      if (shouldEnableChartsOriginalLinesWhenSmoothing()) {\n        const originalLineProps = {\n          ...props,\n          lineSmoothness: 0,\n          useDefaultHoverBox: false,\n          displayPoints: false,\n          displayOriginalLine: true,\n        };\n        const originalDataTrace = getDataTraceForRun(originalLineProps);\n        return [dataTrace, originalDataTrace];\n      }\n      return [dataTrace];\n    };\n\n    const plotData = useMemo(() => {\n      // Generate a data trace for each metric in each run\n      const metricKeys = selectedMetricKeys ?? [metricKey];\n      return runsData\n        .map((runEntry) => {\n          if (\n            shouldEnableChartExpressions() &&\n            xAxisKey !== RunsChartsLineChartXAxisType.METRIC &&\n            yAxisKey === RunsChartsLineChartYAxisType.EXPRESSION\n          ) {\n            return yAxisExpressions.flatMap((expression: RunsChartsLineChartExpression, idx: number) => {\n              return getTraceAndOriginalTrace({\n                runEntry,\n                expression,\n                xAxisKey: dynamicXAxisKey,\n                selectedXAxisMetricKey,\n                useDefaultHoverBox,\n                lineSmoothness,\n                lineShape,\n                lineDash: lineDashStyles[idx % lineDashStyles.length],\n                displayPoints,\n                xAxisScaleType,\n                evaluateExpression,\n              });\n            });\n          } else {\n            return (\n              metricKeys\n                // Discard creating traces for metrics that don't have any history for a given run\n                .filter((metricKey) => !isEmpty(runEntry.metricsHistory?.[metricKey]))\n                .flatMap((metricKey, idx) => {\n                  return getTraceAndOriginalTrace({\n                    runEntry,\n                    metricKey,\n                    xAxisKey: dynamicXAxisKey,\n                    selectedXAxisMetricKey,\n                    useDefaultHoverBox,\n                    lineSmoothness,\n                    lineShape,\n                    lineDash: lineDashStyles[idx % lineDashStyles.length],\n                    displayPoints,\n                    xAxisScaleType,\n                  });\n                })\n            );\n          }\n        })\n        .flat();\n    }, [\n      runsData,\n      lineShape,\n      dynamicXAxisKey,\n      lineSmoothness,\n      metricKey,\n      useDefaultHoverBox,\n      selectedMetricKeys,\n      selectedXAxisMetricKey,\n      displayPoints,\n      xAxisScaleType,\n      yAxisKey,\n      yAxisExpressions,\n      evaluateExpression,\n      xAxisKey,\n    ]);\n\n    const bandsData = useMemo(() => {\n      const metricKeys = selectedMetricKeys ?? [metricKey];\n      return runsData\n        .filter(({ groupParentInfo }) => groupParentInfo)\n        .flatMap((runEntry) =>\n          metricKeys.map((metricKey) =>\n            getBandTraceForRun({\n              runEntry,\n              metricKey,\n              lineShape,\n              xAxisKey: dynamicXAxisKey,\n              selectedXAxisMetricKey,\n              xAxisScaleType,\n            }),\n          ),\n        );\n    }, [lineShape, metricKey, runsData, selectedMetricKeys, dynamicXAxisKey, selectedXAxisMetricKey, xAxisScaleType]);\n\n    const plotDataWithBands = useMemo(() => [...bandsData, ...plotData], [plotData, bandsData]);\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } = useDynamicPlotSize();\n\n    const { formatMessage } = useIntl();\n\n    const { setHoveredPointIndex } = useRenderRunsChartTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      plotDataWithBands,\n      highlightLineTraces,\n      bandsData.length,\n    );\n\n    const xAxisPlotlyType = getXAxisPlotlyType(xAxisKey, xAxisScaleType, dynamicXAxisKey);\n\n    const xAxisKeyLabel = useMemo(() => {\n      if (dynamicXAxisKey === RunsChartsLineChartXAxisType.METRIC) {\n        return selectedXAxisMetricKey;\n      }\n\n      return formatMessage(getChartAxisLabelDescriptor(dynamicXAxisKey));\n    }, [formatMessage, dynamicXAxisKey, selectedXAxisMetricKey]);\n\n    const yAxisParams: Partial<LayoutAxis> = useMemo(() => {\n      return {\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n        type: scaleType === 'log' ? 'log' : 'linear',\n        fixedrange: lockXAxisZoom,\n        range: yRange,\n        autorange: yRange === undefined,\n        tickformat: 'f',\n      };\n    }, [scaleType, lockXAxisZoom, theme, yRange]);\n\n    const xAxisParams: Partial<LayoutAxis> = useMemo(() => {\n      return {\n        title: xAxisKeyLabel,\n        tickfont: { size: 11, color: theme.colors.textSecondary },\n        range: xRange,\n        autorange: xRange === undefined,\n        type: xAxisPlotlyType,\n      };\n    }, [theme, xAxisKeyLabel, xRange, xAxisPlotlyType]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: xAxisParams,\n      yaxis: yAxisParams,\n      showlegend: false,\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const updatedLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n          yaxis: yAxisParams,\n          xaxis: { ...current.xaxis, ...xAxisParams },\n          showlegend: false,\n        };\n\n        if (isEqual(updatedLayout, current)) {\n          return current;\n        }\n        return updatedLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, xAxisParams, yAxisParams, width, height, xAxisKeyLabel]);\n\n    const containsMultipleMetricKeys = useMemo(() => (selectedMetricKeys?.length || 0) > 1, [selectedMetricKeys]);\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    const themedPlotlyLayout = useMemo(() => createThemedPlotlyLayout(theme), [theme]);\n\n    // When switching axis title, Plotly.js mutates its layout object\n    // internally which leads to desync problems and automatic axis range\n    // ends up with an invalid value. In order to fix it, we are mutating\n    // axis object and injecting metric key as title in\n    // the render phase.\n    // It could be fixed by wrapping plotly.js directly instead of using\n    // react-plotly.js - but the effort does not correspond to the plan of\n    // moving away from plotly soon.\n    const immediateLayout = layout;\n    if (immediateLayout.xaxis) {\n      immediateLayout.xaxis.title = xAxisKeyLabel;\n      immediateLayout.xaxis.type = xAxisPlotlyType;\n      if (xRange) {\n        immediateLayout.xaxis.range = xRange;\n      }\n      immediateLayout.xaxis.automargin = true;\n      immediateLayout.xaxis.tickformat =\n        shouldEnableRelativeTimeDateAxis() && dynamicXAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE\n          ? '%H:%M:%S'\n          : undefined;\n    }\n    immediateLayout.template = { layout: themedPlotlyLayout };\n\n    if (immediateLayout.yaxis && yRange) {\n      immediateLayout.yaxis.range = yRange;\n      immediateLayout.yaxis.automargin = true;\n      immediateLayout.yaxis.tickformat = 'f';\n    }\n\n    const legendLabelData = useMemo(\n      () => getLineChartLegendData(runsData, selectedMetricKeys, metricKey, yAxisKey, yAxisExpressions),\n      [runsData, selectedMetricKeys, metricKey, yAxisKey, yAxisExpressions],\n    );\n\n    const {\n      scanlineElement,\n      initHandler,\n      updateHandler: updateHandlerMultipleRuns,\n      onPointHover: hoverCallbackMultipleRuns,\n      onPointUnhover: unhoverCallbackMultipleRuns,\n    } = useRunsMultipleTracesTooltipData({\n      legendLabelData,\n      plotData,\n      runsData,\n      containsMultipleMetricKeys,\n      onHover,\n      onUnhover: unhoverCallback,\n      xAxisKeyLabel,\n      xAxisKey: dynamicXAxisKey,\n      xAxisScaleType: xAxisKey === RunsChartsLineChartXAxisType.STEP ? xAxisScaleType : 'linear',\n      setHoveredPointIndex,\n      positionInSection,\n    });\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableChartHoverCallback(hoverCallbackMultipleRuns);\n\n    // Prepare data for image download handler\n    useEffect(() => {\n      // Check if we are using multiple metric keys. If so, we also need to append\n      // the metric key to  the trace name in the exported image.\n      const usingMultipleMetricKeys = (selectedMetricKeys?.length || 0) > 1;\n      const dataToExport = usingMultipleMetricKeys\n        ? plotDataWithBands.map((dataTrace) =>\n            dataTrace.metricKey\n              ? {\n                  ...dataTrace,\n                  name: `${dataTrace.name} (${dataTrace.metricKey})`,\n                }\n              : dataTrace,\n          )\n        : plotDataWithBands;\n\n      const layoutToExport: Partial<Layout> = {\n        ...layout,\n        showlegend: true,\n        legend: {\n          orientation: 'h',\n        },\n      };\n      onSetDownloadHandler?.(createChartImageDownloadHandler(dataToExport, layoutToExport));\n    }, [layout, onSetDownloadHandler, plotDataWithBands, selectedMetricKeys?.length]);\n\n    const chart = (\n      <div\n        css={[commonRunsChartStyles.chartWrapper(theme), styles.highlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotDataWithBands}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart(theme)}\n          onUpdate={(figure: Readonly<Figure>, graphDiv: Readonly<HTMLElement>) => {\n            updateHandlerMultipleRuns(figure, graphDiv);\n            onUpdate?.(figure, graphDiv);\n          }}\n          layout={immediateLayout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallbackMultipleRuns}\n          onInitialized={initHandler}\n          fallback={<RunsChartCardLoadingPlaceholder />}\n        />\n        {scanlineElement}\n      </div>\n    );\n\n    return (\n      <RunsMetricsLegendWrapper labelData={legendLabelData} fullScreen={fullScreen}>\n        {chart}\n      </RunsMetricsLegendWrapper>\n    );\n  },\n);\n\nconst styles = {\n  highlightStyles: {\n    '.scatterlayer g.trace': {\n      transition: 'var(--trace-transition)',\n    },\n    '.scatterlayer.is-highlight g.trace:not(.is-band)': {\n      opacity: 'var(--trace-opacity-dimmed-low) !important',\n    },\n    '.scatterlayer g.trace.is-hover-highlight:not(.is-band)': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.scatterlayer g.trace.is-selection-highlight:not(.is-band)': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.scatterlayer g.trace.is-selection-highlight path.point': {\n      stroke: 'var(--trace-stroke-color)',\n      strokeWidth: 'var(--trace-stroke-width) !important',\n    },\n    '.scatterlayer.is-highlight g.trace.is-band:not(.is-band-highlighted)': {\n      opacity: 'var(--trace-opacity-dimmed) !important',\n    },\n  },\n};\n","var _path, _circle, _ellipse, _circle2, _circle3, _ellipse2, _ellipse3;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgChartScatter(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 16,\n    viewBox: \"0 0 18 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0.813599V15.1865H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 3.98301,\n    cy: 12.4746,\n    r: 1.35593,\n    fill: \"#338ECC\"\n  })), _ellipse || (_ellipse = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 9.40684,\n    cy: 10.8475,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 5.6102,\n    cy: 8.1356,\n    r: 1.35593,\n    fill: \"#338ECC\",\n    fillOpacity: 0.25\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 9.40684,\n    cy: 6.50852,\n    r: 1.35593,\n    fill: \"#338ECC\"\n  })), _ellipse2 || (_ellipse2 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 13.7457,\n    cy: 5.96616,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\",\n    fillOpacity: 0.25\n  })), _ellipse3 || (_ellipse3 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 16.4576,\n    cy: 2.46128,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartScatter);\nexport default __webpack_public_path__ + \"static/media/chart-scatter.69118d0023a6ff3973f7fa913834ac47.svg\";\nexport { ForwardRef as ReactComponent };","import { Empty, NoIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useUpdateExperimentViewUIState } from '../../experiment-page/contexts/ExperimentPageUIStateContext';\nimport { useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const RunsChartsNoDataFoundIndicator = () => {\n  const updateUIState = useUpdateExperimentViewUIState();\n  const { theme } = useDesignSystemTheme();\n\n  const hideEmptyCharts = useCallback(() => {\n    updateUIState((state) => ({ ...state, hideEmptyCharts: true }));\n  }, [updateUIState]);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingLeft: theme.spacing.lg,\n        paddingRight: theme.spacing.lg,\n      }}\n    >\n      <Empty\n        description={\n          <FormattedMessage\n            defaultMessage=\"No chart data available for the currently visible runs. Select other runs or <link>hide empty charts.</link>\"\n            description=\"Experiment tracking > runs charts > indication displayed when no corresponding data is found to be used in chart-based run comparison\"\n            values={{\n              link: (chunks) => (\n                <Typography.Link\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsnodatafoundindicator.tsx_31\"\n                  onClick={hideEmptyCharts}\n                >\n                  {chunks}\n                </Typography.Link>\n              ),\n            }}\n          />\n        }\n        image={<NoIcon />}\n      />\n    </div>\n  );\n};\n","import { Interpolation, Theme } from '@emotion/react';\nimport React, { useCallback, useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../components/RunsMetricsLinePlot';\nimport { RunsMetricsBarPlotHoverData } from '../components/RunsMetricsBarPlot';\nimport { ChartsTraceHighlightSource, useRunsChartTraceHighlight } from './useRunsChartTraceHighlight';\nimport { RUNS_CHARTS_UI_Z_INDEX } from '../utils/runsCharts.const';\n\nexport interface RunsChartsTooltipBodyProps<TContext = any, TChartData = any, THoverData = any> {\n  runUuid: string;\n  hoverData: THoverData;\n  chartData: TChartData;\n  contextData: TContext;\n  closeContextMenu: () => void;\n  isHovering?: boolean;\n  mode: RunsChartsTooltipMode;\n}\n\nexport interface RunsChartsChartMouseEvent {\n  x: number;\n  y: number;\n  originalEvent?: MouseEvent;\n}\n\nexport enum RunsChartsTooltipMode {\n  Simple = 1,\n  MultipleTracesWithScanline = 2,\n}\n\nexport type RunsChartsTooltipBodyComponent<C = any, T = any> = React.ComponentType<RunsChartsTooltipBodyProps<C, T>>;\n\nconst RunsChartsTooltipContext = React.createContext<{\n  selectedRunUuid: string | null;\n  closeContextMenu: () => void;\n  resetTooltip: () => void;\n  destroyTooltip: () => void;\n  updateTooltip: (\n    runUuid: string,\n    mode: RunsChartsTooltipMode,\n    chartData?: any,\n    event?: RunsChartsChartMouseEvent,\n    additionalData?: any,\n  ) => void;\n} | null>(null);\n\nexport enum ContextMenuVisibility {\n  HIDDEN,\n  HOVER,\n  VISIBLE,\n}\n\nexport const containsMultipleRunsTooltipData = (\n  hoverData: RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData,\n): hoverData is RunsCompareMultipleTracesTooltipData => hoverData && 'tooltipLegendItems' in hoverData;\n\n/**\n * Extract first ancestor HTML element in the hierarchy, even if the target is an SVG element.\n * Necessary for proper behavior of '.contains()'\n */\nconst extractHTMLAncestorElement = (element: Element | EventTarget | null) => {\n  if (element === null || !(element instanceof Element)) {\n    return null;\n  }\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  let currentElement: Element | null = element;\n  while (currentElement && !(currentElement instanceof HTMLElement)) {\n    currentElement = currentElement.parentElement;\n  }\n\n  return currentElement;\n};\n\n/**\n * Context and DOM container necessary for chart context menu to work.\n * Can wrap multiple charts.\n */\nexport const RunsChartsTooltipWrapper = <\n  // Type for the context data passed to the tooltip, e.g. list of all runs\n  TContext = any,\n  // Type for local hover data passed to the tooltip, e.g. configuration of particular chart\n  THover = any,\n>({\n  className,\n  children,\n  contextData,\n  component: Component,\n  hoverOnly = false,\n}: React.PropsWithChildren<{\n  className?: string;\n  contextData: TContext;\n  component: React.ComponentType<RunsChartsTooltipBodyProps<TContext, THover>>;\n  hoverOnly?: boolean;\n}>) => {\n  // A reference to the viewport-wide element containing the context menu\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // A reference to the tooltip/context-menu element\n  const ctxMenuRef = useRef<HTMLDivElement>(null);\n\n  // Mutable value containing current mouse position\n  const currentPos = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  // Mutable value containing current snapped mouse position, provided externally by the tooltip data providers\n  // Used instead of `currentPos` when the tooltip is in the \"multiple runs\" mode\n  const currentSnappedCoordinates = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  const [mode, setMode] = useState<RunsChartsTooltipMode>(RunsChartsTooltipMode.Simple);\n\n  // Current visibility of the tooltip/context-menu\n  const [contextMenuShown, setContextMenuShown] = useState<ContextMenuVisibility>(ContextMenuVisibility.HIDDEN);\n\n  const [tooltipDisplayParams, setTooltipDisplayParams] = useState<any | null>(null);\n  const [hoveredRunUuid, setHoveredRunUuid] = useState<string>('');\n\n  // Apart from run uuid, It's also possible to set bonus axis data (helpful for line charts with data lineage)\n  const [additionalAxisData, setAdditionalAxisData] = useState<any>(null);\n\n  // Stores data about the run that has been clicked, but mouse has not been released.\n  const focusedRunData = useRef<{ x: number; y: number; runUuid: string } | null>(null);\n\n  // Mutable version of certain state values, used in processes outside the React event lifecycle\n  const mutableContextMenuShownRef = useRef<ContextMenuVisibility>(contextMenuShown);\n  const mutableHoveredRunUuid = useRef(hoveredRunUuid);\n  const mutableTooltipDisplayParams = useRef(tooltipDisplayParams);\n  const mutableAdditionalAxisData = useRef(additionalAxisData);\n\n  // Get the higlighting function from the context\n  const { highlightDataTrace } = useRunsChartTraceHighlight();\n\n  // This method applies the tooltip position basing on the mouse position\n  const applyPositioning = useCallback(\n    (isChangingVisibilityMode = false) => {\n      if (!ctxMenuRef.current || !containerRef.current) {\n        return;\n      }\n\n      // For the X coordinate, If the tooltip is in the \"multiple runs\" mode, use the snapped coordinates.\n      // Otherwise, use the current mouse position.\n      let targetX =\n        mode === RunsChartsTooltipMode.MultipleTracesWithScanline\n          ? currentSnappedCoordinates.current.x\n          : currentPos.current.x;\n\n      let targetY = currentPos.current.y;\n\n      const currentCtxMenu = ctxMenuRef.current;\n      const containerRect = containerRef.current.getBoundingClientRect();\n\n      if (mode === RunsChartsTooltipMode.MultipleTracesWithScanline) {\n        // In particular cases, the tooltip container can not take entire viewport size\n        // so we need to adjust the position of the tooltip\n        targetX -= containerRect.x;\n        targetY -= containerRect.y;\n      }\n\n      ctxMenuRef.current.style.left = '0px';\n      ctxMenuRef.current.style.top = '0px';\n      ctxMenuRef.current.style.transform = `translate3d(${targetX + 1}px, ${targetY + 1}px, 0)`;\n\n      // This function is used to reposition the tooltip if it's out of the viewport\n      const reposition = () => {\n        const menuRect = currentCtxMenu.getBoundingClientRect();\n\n        if (targetX + menuRect.width >= containerRect.width) {\n          targetX -= menuRect.width;\n        }\n\n        if (targetY + menuRect.height >= containerRect.height) {\n          targetY -= menuRect.height;\n        }\n\n        currentCtxMenu.style.transform = `translate3d(${targetX + 1}px, ${targetY + 1}px, 0)`;\n      };\n\n      // If the tooltip changes it's visibility mode during the process, defer repositioning to the next frame\n      // to make sure that the position is correct after possible change of the tooltip size.\n      // Otherwise, reposition immediately to save computation cycles.\n      if (isChangingVisibilityMode) {\n        requestAnimationFrame(reposition);\n      } else {\n        reposition();\n      }\n    },\n    [mode],\n  );\n\n  // Save mutable visibility each time a stateful one changes\n  useEffect(() => {\n    mutableContextMenuShownRef.current = contextMenuShown;\n  }, [contextMenuShown]);\n\n  // This function returns X and Y of the target element relative to the container\n  const getCoordinatesForTargetElement = useCallback((targetElement: HTMLElement, event: MouseEvent) => {\n    const targetRect = targetElement.getBoundingClientRect();\n    const containerRect = containerRef.current?.getBoundingClientRect() || { left: 0, top: 0 };\n    const x = event.offsetX + (targetRect.left - containerRect.left);\n    const y = event.offsetY + (targetRect.top - containerRect.top);\n    return { x, y };\n  }, []);\n\n  const mouseMove: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      // Apply only if the tooltip is in the hover mode\n      if (\n        mutableContextMenuShownRef.current === ContextMenuVisibility.HOVER &&\n        ctxMenuRef.current &&\n        containerRef.current\n      ) {\n        focusedRunData.current = null;\n        const targetElement = extractHTMLAncestorElement(event.target);\n        if (targetElement) {\n          currentPos.current = getCoordinatesForTargetElement(targetElement, event.nativeEvent);\n          applyPositioning();\n        }\n      }\n    },\n    [applyPositioning, getCoordinatesForTargetElement],\n  );\n\n  // This callback is being fired on every new run being hovered\n  const updateTooltip = useCallback(\n    (\n      runUuid: string,\n      mode: RunsChartsTooltipMode,\n      chartData?: any,\n      event?: RunsChartsChartMouseEvent,\n      additionalRunData?: any,\n    ) => {\n      mutableHoveredRunUuid.current = runUuid;\n      mutableTooltipDisplayParams.current = chartData;\n      mutableAdditionalAxisData.current = additionalRunData;\n\n      // If the tooltip is visible and hardwired to the position, don't change it\n      if (mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n        return;\n      }\n\n      // Update the event-specific data in the state\n      setTooltipDisplayParams(chartData);\n\n      // If the mouse button has been clicked on a run but hover\n      // has been lost, do nothing\n      if (!runUuid && focusedRunData.current?.runUuid) {\n        return;\n      }\n\n      if (mode === RunsChartsTooltipMode.MultipleTracesWithScanline) {\n        currentSnappedCoordinates.current.x = event?.x || 0;\n      }\n\n      // Set the mode - single run or multiple runs\n      setMode(mode);\n\n      // Update the currently hovered run\n      setHoveredRunUuid((currentRunUuid) => {\n        if (additionalRunData) {\n          setAdditionalAxisData(additionalRunData);\n        }\n        // If the tooltip was hidden or it's shown but it's another run,\n        // make sure that the state is updated\n        if (\n          mutableContextMenuShownRef.current === ContextMenuVisibility.HIDDEN ||\n          (mutableContextMenuShownRef.current === ContextMenuVisibility.HOVER && runUuid !== currentRunUuid)\n        ) {\n          setContextMenuShown(ContextMenuVisibility.HOVER);\n          return runUuid;\n        }\n        return currentRunUuid;\n      });\n    },\n    [],\n  );\n\n  const mouseDownCapture: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (hoverOnly) {\n        return;\n      }\n      // Saves the current position and hovered run ID after lowering the mouse button,\n      // we use it afterwards to confirm that user has clicked on the same run and scrubbing/zooming\n      // didn't occur in the meanwhile\n      if (event.button === 0 && mutableHoveredRunUuid.current) {\n        focusedRunData.current = {\n          x: event.pageX,\n          y: event.pageY,\n          runUuid: mutableHoveredRunUuid.current,\n        };\n      }\n    },\n    [hoverOnly],\n  );\n\n  // Callback for the click event for the tooltip area, checks if context menu needs to be shown.\n  // We're not using `mouseup` because plotly.js hijacks the event by appending drag cover to the document on `mousedown`.\n  const tooltipAreaClicked: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (hoverOnly) {\n        return;\n      }\n\n      const clickedInTheSamePlace = () => {\n        const epsilonPixels = 5;\n\n        return (\n          focusedRunData.current?.runUuid &&\n          Math.abs(event.pageX - focusedRunData.current.x) < epsilonPixels &&\n          Math.abs(event.pageY - focusedRunData.current.y) < epsilonPixels\n        );\n      };\n\n      // We're interested in displaying the context menu only if\n      // mouse is in the same position as when lowering the button,\n      // this way we won't display it when zooming on the chart.\n      if (focusedRunData.current && clickedInTheSamePlace()) {\n        // If the context menu is already visible, we need to reposition it and provide\n        // the updated run UUID\n        if (mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n          setHoveredRunUuid(focusedRunData.current.runUuid);\n          setAdditionalAxisData(mutableAdditionalAxisData.current);\n          const targetElement = extractHTMLAncestorElement(event.nativeEvent.target);\n          if (targetElement) {\n            currentPos.current = getCoordinatesForTargetElement(targetElement, event.nativeEvent);\n            applyPositioning(true);\n          }\n        } else {\n          // If the context menu was not visible before (it was a tooltip), just enable it.\n          setContextMenuShown(ContextMenuVisibility.VISIBLE);\n          applyPositioning(true);\n        }\n        event.stopPropagation();\n      }\n      // Since the mouse button is up, reset the currently focused run\n      focusedRunData.current = null;\n    },\n    [applyPositioning, hoverOnly, getCoordinatesForTargetElement],\n  );\n\n  // Exposed function used to hide the context menu\n  const closeContextMenu = useCallback(() => setContextMenuShown(ContextMenuVisibility.HIDDEN), []);\n\n  // Set up main listeners in the useLayoutEffect hook\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return undefined;\n    }\n\n    // Find the DOM root - it can be either document or a shadow root\n    const domRoot = containerRef.current.getRootNode() as Document;\n\n    // This function is being called on every click in the document,\n    // it's used to dismiss the shown context menu\n    const rootClickListener = (e: MouseEvent) => {\n      // We're interested only in dismissing context menu mode, tooltip is fine\n      if (mutableContextMenuShownRef.current !== ContextMenuVisibility.VISIBLE) {\n        return;\n      }\n\n      const targetElement = extractHTMLAncestorElement(e.target);\n\n      if (!targetElement) {\n        return;\n      }\n\n      // Check if the click event occurred within the\n      // context menu\n      const contextMenuClicked =\n        targetElement instanceof HTMLElement &&\n        ctxMenuRef?.current instanceof HTMLElement &&\n        ctxMenuRef.current.contains(targetElement);\n\n      // Dismiss the context menu only if click didn't occur on\n      // the context menu content or on another run\n      if (!contextMenuClicked && !focusedRunData.current?.runUuid) {\n        setContextMenuShown(ContextMenuVisibility.HIDDEN);\n      }\n    };\n    domRoot.addEventListener('click', rootClickListener, { capture: true });\n\n    return () => {\n      domRoot.removeEventListener('click', rootClickListener, { capture: true });\n    };\n  }, [getCoordinatesForTargetElement, applyPositioning]);\n\n  // Callback used to reset the tooltip, fired when the mouse leaves the run\n  const resetTooltip = useCallback(() => {\n    mutableHoveredRunUuid.current = '';\n    if (focusedRunData.current?.runUuid || mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n      return;\n    }\n    setHoveredRunUuid('');\n    setContextMenuShown(ContextMenuVisibility.HIDDEN);\n  }, []);\n\n  // Callback used to remove the tooltip,\n  const destroyTooltip = useCallback((force = false) => {\n    mutableHoveredRunUuid.current = '';\n    setHoveredRunUuid('');\n    setContextMenuShown(ContextMenuVisibility.HIDDEN);\n  }, []);\n\n  // Export the currently selected run ID. Set to \"null\" if there is nothing selected.\n  const selectedRunUuid = useMemo(() => {\n    if (contextMenuShown !== ContextMenuVisibility.VISIBLE) {\n      return null;\n    }\n    return hoveredRunUuid;\n  }, [contextMenuShown, hoveredRunUuid]);\n\n  // When the selected data trace changes, report the highlight event\n  useEffect(\n    () =>\n      highlightDataTrace(selectedRunUuid, {\n        source: ChartsTraceHighlightSource.CHART,\n        // Block the highlight event so it won't change as long as the tooltip is in selected mode\n        shouldBlock: Boolean(selectedRunUuid),\n      }),\n    [highlightDataTrace, selectedRunUuid],\n  );\n\n  const contextValue = useMemo(\n    () => ({ updateTooltip, resetTooltip, destroyTooltip, selectedRunUuid, closeContextMenu }),\n    [updateTooltip, resetTooltip, destroyTooltip, selectedRunUuid, closeContextMenu],\n  );\n\n  // We're displaying tooltip if:\n  // - it's not in the hidden mode\n  // - it's in the single run tooltip mode and hovered run is not empty\n  // - it's in the multiple runs tooltip mode\n  const displayTooltip =\n    contextMenuShown !== ContextMenuVisibility.HIDDEN &&\n    (mode === RunsChartsTooltipMode.MultipleTracesWithScanline || hoveredRunUuid !== '');\n\n  return (\n    <RunsChartsTooltipContext.Provider value={contextValue}>\n      {/* The element below wraps all the children (where charts are expected to be mounted)\n      and tracks mouse movement inside */}\n      <div\n        onMouseMove={mouseMove}\n        onMouseDownCapture={mouseDownCapture}\n        onClickCapture={tooltipAreaClicked}\n        css={{ height: '100%' }}\n      >\n        {children}\n      </div>\n      {/* The element below houses the tooltip/context menu */}\n      <div css={styles.contextMenuContainer} className={className} ref={containerRef}>\n        {displayTooltip && (\n          <div\n            ref={ctxMenuRef}\n            css={styles.contextMenuWrapper}\n            data-testid=\"tooltip-container\"\n            style={{\n              userSelect: contextMenuShown === ContextMenuVisibility.HOVER ? 'none' : 'unset',\n              pointerEvents: contextMenuShown === ContextMenuVisibility.HOVER ? 'none' : 'all',\n            }}\n          >\n            {/* A tooltip body component passed from the props */}\n            <Component\n              runUuid={hoveredRunUuid}\n              hoverData={additionalAxisData}\n              chartData={tooltipDisplayParams}\n              contextData={contextData}\n              isHovering={contextMenuShown === ContextMenuVisibility.HOVER}\n              closeContextMenu={closeContextMenu}\n              mode={mode}\n            />\n          </div>\n        )}\n      </div>\n    </RunsChartsTooltipContext.Provider>\n  );\n};\n\n/**\n * This hook is used to wire up tooltip to particular experiment runs chart.\n * Returns \"setTooltip\" and \"resetTooltip\" functions that should be called\n * upon chart's \"onHover\" and \"onUnhover\" events. \"setTooltip\" function consumes\n * the runUuid that was hovered on.\n */\nexport const useRunsChartsTooltip = <\n  // Type for local hover data passed to the tooltip, e.g. configuration of particular chart\n  TChart = any,\n  TAxisData = any,\n>(\n  chartData?: TChart,\n  mode = RunsChartsTooltipMode.Simple,\n) => {\n  const contextValue = useContext(RunsChartsTooltipContext);\n\n  if (!contextValue) {\n    throw new Error(\n      'You must invoke useRunsChartsTooltip() in a component being ancestor of <RunsChartsTooltipWrapper />!',\n    );\n  }\n\n  const { updateTooltip, resetTooltip, selectedRunUuid, closeContextMenu, destroyTooltip } = contextValue;\n  const { highlightDataTrace } = useRunsChartTraceHighlight();\n\n  const setTooltip = useCallback(\n    (runUuid = '', event?: RunsChartsChartMouseEvent, additionalAxisData?: TAxisData) => {\n      updateTooltip(runUuid, mode, chartData, event, additionalAxisData);\n      highlightDataTrace(runUuid, {\n        source: ChartsTraceHighlightSource.CHART,\n      });\n    },\n    [updateTooltip, chartData, mode, highlightDataTrace],\n  );\n\n  const resetTooltipWithHighlight = useCallback(() => {\n    resetTooltip();\n    highlightDataTrace(null);\n  }, [resetTooltip, highlightDataTrace]);\n\n  return { setTooltip, resetTooltip: resetTooltipWithHighlight, selectedRunUuid, closeContextMenu, destroyTooltip };\n};\n\nconst styles = {\n  contextMenuContainer: {\n    overflow: 'hidden',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    position: 'fixed',\n    pointerEvents: 'none',\n    zIndex: RUNS_CHARTS_UI_Z_INDEX.TOOLTIP_CONTAINER,\n  } as Interpolation<Theme>,\n  contextMenuWrapper: (theme: Theme) => ({\n    zIndex: RUNS_CHARTS_UI_Z_INDEX.TOOLTIP,\n    position: 'absolute' as const,\n    padding: theme.spacing.sm,\n    backgroundColor: theme.colors.backgroundPrimary,\n    border: `1px solid ${theme.colors.border}`,\n    left: -999,\n    top: -999,\n    borderRadius: theme.general.borderRadiusBase,\n    boxShadow: theme.general.shadowLow,\n  }),\n  overlayElement: (): Interpolation<Theme> => ({\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'transparent',\n    },\n  }),\n};\n","import { CheckCircleIcon, ClockIcon, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nconst ErrorIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return <XCircleIcon css={{ color: theme.colors.textValidationDanger }} />;\n};\n\nconst FinishedIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return <CheckCircleIcon css={{ color: theme.colors.textValidationSuccess }} />;\n};\n\nexport const RunStatusIcon = ({ status }: { status: string }) => {\n  switch (status) {\n    case 'FAILED':\n    case 'KILLED':\n      return <ErrorIcon />;\n    case 'FINISHED':\n      return <FinishedIcon />;\n    case 'SCHEDULED':\n    case 'RUNNING':\n      return <ClockIcon />; // This one is the same color as the link\n    default:\n      return null;\n  }\n};\n","var _path, _rect, _rect2, _rect3, _rect4;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgChartBar(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 16,\n    viewBox: \"0 0 18 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0.813599V15.1865H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 3.16943,\n    y: 10.5763,\n    width: 2.16949,\n    height: 3.25424,\n    fill: \"#338ECC\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 6.42371,\n    y: 5.15259,\n    width: 2.16949,\n    height: 8.67797,\n    fill: \"#338ECC\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 9.67798,\n    y: 8.40686,\n    width: 2.16949,\n    height: 5.42373,\n    fill: \"#338ECC\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 12.9323,\n    y: 1.89832,\n    width: 2.16949,\n    height: 11.9322,\n    fill: \"#338ECC\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartBar);\nexport default __webpack_public_path__ + \"static/media/chart-bar.0fd4a63680fba840a7b69fbf07969f79.svg\";\nexport { ForwardRef as ReactComponent };","import { useMemo } from 'react';\nimport type { RunGroupingAggregateFunction } from '../../experiment-page/utils/experimentPage.row-types';\nimport invariant from 'invariant';\nimport {\n  removeOutliersFromMetricHistory,\n  type RunsChartsRunData,\n} from '../../runs-charts/components/RunsCharts.common';\nimport {\n  createAggregatedMetricHistory,\n  createValueAggregatedMetricHistory,\n  type SyntheticMetricHistory,\n} from '../../experiment-page/utils/experimentPage.group-row-utils';\nimport { uniq, type Dictionary, compact, pick, isNil } from 'lodash';\nimport type { SampledMetricsByRun } from '../../runs-charts/hooks/useSampledMetricHistory';\nimport type { MetricHistoryByName } from '../../../types';\n\nexport interface UseGroupedChartRunDataParams {\n  ungroupedRunsData: RunsChartsRunData[];\n  enabled: boolean;\n  aggregateFunction?: RunGroupingAggregateFunction;\n  metricKeys: string[];\n  sampledDataResultsByRunUuid: Dictionary<SampledMetricsByRun>;\n  selectedXAxisMetricKey?: string;\n  ignoreOutliers: boolean;\n}\n\n/**\n * Returns a new array of RunsChartsRunData with aggregated metrics for grouped runs.\n * In order to make rendering of the confidence interval possible, the returned dataset contains\n * min, max and average values for each metric while respecting the metric history.\n */\nexport const useGroupedChartRunData = ({\n  ungroupedRunsData,\n  enabled,\n  aggregateFunction,\n  metricKeys,\n  sampledDataResultsByRunUuid,\n  selectedXAxisMetricKey,\n  ignoreOutliers,\n}: UseGroupedChartRunDataParams) => {\n  return useMemo(() => {\n    if (!enabled || !aggregateFunction) {\n      return ungroupedRunsData;\n    }\n\n    // Extract groups from the result set and calculate aggregated metrics\n    const perGroupData: RunsChartsRunData[] = ungroupedRunsData\n      .filter(({ groupParentInfo }) => groupParentInfo)\n      .map((group) => {\n        const aggregatedMetricsHistory: Record<string, SyntheticMetricHistory> = {};\n        metricKeys.forEach((metricKey) => {\n          invariant(group.groupParentInfo, 'groupParentInfo should be defined');\n\n          const aggregatedRunUuidsInGroup =\n            group.groupParentInfo.runUuidsForAggregation ?? group.groupParentInfo.runUuids;\n\n          let aggregatedMetricsHistoryForMetric;\n          if (!isNil(selectedXAxisMetricKey)) {\n            aggregatedMetricsHistoryForMetric = createValueAggregatedMetricHistory(\n              pick(sampledDataResultsByRunUuid, aggregatedRunUuidsInGroup),\n              metricKey,\n              selectedXAxisMetricKey,\n              ignoreOutliers,\n            );\n          } else {\n            const metricsHistoryInGroup = compact(\n              aggregatedRunUuidsInGroup.flatMap((runUuid) => {\n                const metricsHistory = sampledDataResultsByRunUuid[runUuid]?.[metricKey]?.metricsHistory;\n                if (ignoreOutliers) {\n                  return metricsHistory ? removeOutliersFromMetricHistory(metricsHistory) : undefined;\n                }\n                return metricsHistory;\n              }),\n            );\n\n            // Get all step numbers from all runs in the group\n            const steps = uniq(metricsHistoryInGroup.map((h) => h.step)).sort((a, b) => a - b);\n\n            aggregatedMetricsHistoryForMetric = createAggregatedMetricHistory(steps, metricKey, metricsHistoryInGroup);\n          }\n\n          aggregatedMetricsHistory[metricKey] = aggregatedMetricsHistoryForMetric;\n        });\n        const metricsHistory = metricKeys.reduce<MetricHistoryByName>((acc, key) => {\n          const history = aggregatedMetricsHistory[key][aggregateFunction];\n          if (history && history.length > 0) {\n            acc[key] = history;\n          }\n          return acc;\n        }, {});\n\n        return {\n          ...group,\n          metricsHistory,\n          aggregatedMetricsHistory,\n        };\n      });\n\n    const ungroupedRuns = ungroupedRunsData.filter(({ belongsToGroup }) => belongsToGroup === false);\n\n    return [...perGroupData, ...ungroupedRuns];\n  }, [\n    metricKeys,\n    sampledDataResultsByRunUuid,\n    ungroupedRunsData,\n    enabled,\n    aggregateFunction,\n    selectedXAxisMetricKey,\n    ignoreOutliers,\n  ]);\n};\n","import {\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_ORDER_BY_ASC,\n  DEFAULT_ORDER_BY_KEY,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport type { DatasetSummary, LIFECYCLE_FILTER, MODEL_VERSION_FILTER } from '../../../types';\n\n/**\n * Defines persistable model representing sort and filter values\n * used by runs table and controls\n */\nexport interface ExperimentPageSearchFacetsState {\n  /**\n   * SQL-like query string used to filter runs, e.g. \"params.alpha = '0.5'\"\n   */\n  searchFilter: string;\n\n  /**\n   * Canonical order_by key like \"params.`alpha`\". May be null to indicate the table\n   * should use the natural row ordering provided by the server.\n   */\n  orderByKey: string;\n\n  /**\n   * Whether the order imposed by orderByKey should be ascending or descending.\n   */\n  orderByAsc: boolean;\n\n  /**\n   * Filter key to show results based on start time\n   */\n  startTime: string;\n\n  /**\n   * Lifecycle filter of runs to display\n   */\n  lifecycleFilter: LIFECYCLE_FILTER;\n\n  /**\n   * Datasets filter of runs to display\n   */\n  datasetsFilter: DatasetSummary[];\n\n  /**\n   * Filter of model versions to display\n   */\n  modelVersionFilter: MODEL_VERSION_FILTER;\n}\n\n/**\n * Defines default experiment page search facets state.\n */\nexport const createExperimentPageSearchFacetsState = (): ExperimentPageSearchFacetsState => ({\n  searchFilter: '',\n  orderByKey: DEFAULT_ORDER_BY_KEY,\n  orderByAsc: DEFAULT_ORDER_BY_ASC,\n  startTime: DEFAULT_START_TIME,\n  lifecycleFilter: DEFAULT_LIFECYCLE_FILTER,\n  datasetsFilter: [],\n  modelVersionFilter: DEFAULT_MODEL_VERSION_FILTER,\n});\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { type DragDropManager, createDragDropManager } from 'dnd-core';\nimport { useLayoutEffect, useRef, useState } from 'react';\nimport { useDrag, useDrop, DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nexport interface useDragAndDropElementProps {\n  /**\n   * Unique drag element identifier, used in drop events\n   */\n  dragKey: string;\n  /**\n   * Group key - items are droppable only within a single group\n   */\n  dragGroupKey: string;\n  /**\n   * Callback function, conveys both dragged and target element key\n   */\n  onDrop: (draggedKey: string, targetDropKey: string) => void;\n\n  /**\n   * If true, drag and drop will be disabled\n   */\n  disabled?: boolean;\n}\n\ninterface DraggedItem {\n  key: string;\n  groupKey: string;\n}\n\n/**\n * A hook enabling drag-and-drop capabilities for any component.\n * Used component will serve as both DnD source and target.\n */\nexport const useDragAndDropElement = ({\n  dragGroupKey,\n  dragKey,\n  onDrop,\n  disabled = false,\n}: useDragAndDropElementProps) => {\n  const dropListener = useRef(onDrop);\n\n  dropListener.current = onDrop;\n\n  const [{ isOver, draggedItem }, dropTargetRef] = useDrop<\n    DraggedItem,\n    never,\n    { isOver: boolean; draggedItem: DraggedItem }\n  >(\n    {\n      canDrop: () => !disabled,\n      accept: `dnd-${dragGroupKey}`,\n      drop: ({ key: sourceKey }: { key: string }, monitor) => {\n        if (sourceKey === dragKey || monitor.didDrop()) {\n          return;\n        }\n        dropListener.current(sourceKey, dragKey);\n      },\n      collect: (monitor) => ({ isOver: monitor.isOver({ shallow: true }), draggedItem: monitor.getItem() }),\n    },\n    [disabled, dragGroupKey, dragKey],\n  );\n\n  const [{ isDragging }, dragHandleRef, dragPreviewRef] = useDrag(\n    {\n      canDrag: () => !disabled,\n      type: `dnd-${dragGroupKey}`,\n      item: { key: dragKey, groupKey: dragGroupKey },\n      collect: (monitor) => ({\n        isDragging: monitor.isDragging(),\n      }),\n    },\n    [disabled, dragGroupKey, dragKey],\n  );\n\n  const isDraggingOtherGroup = Boolean(draggedItem && draggedItem.groupKey !== dragGroupKey);\n\n  return { dropTargetRef, dragHandleRef, dragPreviewRef, isDragging, isOver, isDraggingOtherGroup };\n};\n\n/**\n * Create a scoped DndProvider that will limit its functionality to a single root element.\n * It should prevent HTML5Backend collisions, see:\n * https://github.com/react-dnd/react-dnd/blob/7c88c37489a53b5ac98699c46a506a8e085f1c03/packages/backend-html5/src/HTML5BackendImpl.ts#L107-L109\n */\nexport const DragAndDropProvider: React.FC = ({ children }) => {\n  const rootElementRef = useRef<HTMLDivElement>(null);\n  const [manager, setManager] = useState<DragDropManager | null>(null);\n\n  useLayoutEffect(() => {\n    const rootElement = rootElementRef.current;\n    const dragDropManager = createDragDropManager(HTML5Backend, undefined, { rootElement });\n    setManager(dragDropManager);\n    return () => {\n      dragDropManager.getBackend().teardown();\n    };\n  }, []);\n\n  return (\n    <div css={{ display: 'contents' }} ref={rootElementRef}>\n      {manager && <DndProvider manager={manager}>{children}</DndProvider>}\n    </div>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal } from '@databricks/design-system';\n\ntype Props = {\n  isOpen: boolean;\n  handleSubmit: (...args: any[]) => any;\n  onClose: (...args: any[]) => any;\n  title: React.ReactNode;\n  helpText: React.ReactNode;\n  confirmButtonText: React.ReactNode;\n};\n\ntype State = any;\n\nexport class ConfirmModal extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onRequestCloseHandler = this.onRequestCloseHandler.bind(this);\n    this.handleSubmitWrapper = this.handleSubmitWrapper.bind(this);\n  }\n\n  state = {\n    isSubmitting: false,\n  };\n\n  onRequestCloseHandler() {\n    if (!this.state.isSubmitting) {\n      this.props.onClose();\n    }\n  }\n\n  handleSubmitWrapper() {\n    this.setState({ isSubmitting: true });\n    return this.props.handleSubmit().finally(() => {\n      this.props.onClose();\n      this.setState({ isSubmitting: false });\n    });\n  }\n\n  render() {\n    return (\n      <Modal\n        data-testid=\"confirm-modal\"\n        title={this.props.title}\n        visible={this.props.isOpen}\n        onOk={this.handleSubmitWrapper}\n        okText={this.props.confirmButtonText}\n        confirmLoading={this.state.isSubmitting}\n        onCancel={this.onRequestCloseHandler}\n        // @ts-expect-error TS(2322): Type '{ children: Element; \"data-testid\": string; ... Remove this comment to see the full error message\n        centered\n      >\n        <div className=\"modal-explanatory-text\">{this.props.helpText}</div>\n      </Modal>\n    );\n  }\n}\n","import type { PlotMouseEvent } from 'plotly.js';\nimport { useEffect, useRef } from 'react';\n\n/**\n * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n * so in order to achieve updated behavior we need to wrap each onHover callback with an\n * immutable callback that will call mutable implementation.\n */\nexport const useMutableChartHoverCallback = <T extends (event: Readonly<PlotMouseEvent>) => void>(callback: T) => {\n  const mutableRef = useRef<T>(callback);\n\n  useEffect(() => {\n    mutableRef.current = callback;\n  }, [callback]);\n\n  return (event: Readonly<PlotMouseEvent>) => {\n    mutableRef.current(event);\n  };\n};\n","import { ImageEntity } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { RunsChartsRunData } from '../components/RunsCharts.common';\n\nexport const useImageSliderStepMarks = ({\n  data,\n  selectedImageKeys,\n}: {\n  data: RunsChartsRunData[];\n  selectedImageKeys: string[];\n}) => {\n  const stepMarks = data.reduce((acc, run: RunsChartsRunData) => {\n    for (const imageKey of Object.keys(run.images)) {\n      if (selectedImageKeys?.includes(imageKey)) {\n        const metadata = run.images[imageKey];\n        for (const meta of Object.values(metadata)) {\n          if (meta.step !== undefined) {\n            acc[meta.step] = {\n              style: { display: 'none' },\n              label: '',\n            };\n          }\n        }\n      }\n    }\n    return acc;\n  }, {} as Record<number, any>);\n\n  return {\n    stepMarks,\n    maxMark: Math.max(...Object.keys(stepMarks).map(Number)),\n    minMark: Math.min(...Object.keys(stepMarks).map(Number)),\n  };\n};\n","var _rect, _line, _line2, _line3;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgChartImage(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0.5,\n    y: 0.5,\n    width: 15,\n    height: 15,\n    stroke: \"#C4C4C4\"\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 8.5,\n    y1: 0.800049,\n    x2: 8.5,\n    y2: 16,\n    stroke: \"#C4C4C4\"\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 16,\n    y1: 5.69995,\n    x2: -2.63656e-8,\n    y2: 5.69995,\n    stroke: \"#C4C4C4\"\n  })), _line3 || (_line3 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 16,\n    y1: 10.9,\n    x2: -2.63656e-8,\n    y2: 10.9,\n    stroke: \"#C4C4C4\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartImage);\nexport default __webpack_public_path__ + \"static/media/chart-image.cc434c4dc50780966344e2385a15f8fe.svg\";\nexport { ForwardRef as ReactComponent };"],"names":["_ref2","name","styles","_ref3","_ref4","RunsChartsGlobalChartSettingsDropdown","_ref","globalLineChartConfig","metricKeyList","updateUIState","theme","useDesignSystemTheme","intl","useIntl","lineSmoothness","selectedXAxisMetricKey","xAxisKey","updateGlobalLineChartSettings","useCallback","newSettings","state","isUsingGlobalMetricXaxis","RunsChartsLineChartXAxisType","METRIC","label","formatMessage","id","defaultMessage","_jsxs","DropdownMenu","Root","modal","children","_jsx","Tooltip","componentId","content","Trigger","asChild","Button","icon","GearIcon","Content","align","css","Group","role","Label","FormattedMessage","CheckboxItem","checked","STEP","onClick","ItemIndicator","TIME","TIME_RELATIVE","Sub","SubTrigger","_css","paddingLeft","spacing","xs","sm","IconWrapper","CheckIcon","visibility","SubContent","map","metricKey","padding","LineSmoothSlider","min","max","onChange","value","_path","_circle","_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","SvgIconVisibleFill","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","d","stroke","cx","cy","strokeWidth","ForwardRef","flattenString","input","isArray","join","persistSearchStateFieldSerializers","searchFilter","deserializeLocalStorage","deserializeQueryString","orderByAsc","serializeQueryString","toString","datasetsFilter","inputs","inputsWithoutExperimentId","digest","context","btoaUtf8","JSON","stringify","parsedResult","parse","atobUtf8","Array","compareRunCharts","compareRunsMode","serializeLocalStorage","EXPERIMENT_PAGE_QUERY_PARAM_KEYS","EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW","useExperimentPageSearchFacets","queryParams","useSearchParams","pickedValues","useMemo","pick","fromEntries","entries","isPreview","get","orderByKey","startTime","lifecycleFilter","modelVersionFilter","areValuesEmpty","keys","experimentId","useParams","queryParamsExperimentIds","experimentIds","comparedExperimentIds","getComparedExperimentIds","deserializedFields","resultObject","field","_persistSearchStateFi2","deserializeFn","deserializeFieldsFromQueryString","omitBy","isNil","createExperimentPageSearchFacetsState","useUpdateExperimentPageSearchFacets","setParams","partialFacets","options","newParams","_persistSearchStateFi","serializeFn","serializeFieldsToQueryString","currentParams","forEach","key","set","delete","useIsTabActive","isTabActive","setIsTabActive","useState","document","visibilityState","useEffect","addEventListener","x","findChartStepsByTimestampForRuns","sampledMetrics","runUuids","range","stepRangesPerRun","compact","runUuid","_sampledMetrics$runUu","metricHistoryForRun","currentMetricHistory","useDefaultIfNotFound","undefined","flatHistory","orderBy","values","metricsHistory","flat","lowerBound","Date","valueOf","upperBound","lowerEntry","first","index","entry","timestamp","upperEntry","last","isUndefined","step","findChartStepsByTimestamp","bound","findAbsoluteTimestampRangeForRelativeRange","currentlyVisibleMetrics","relativeRange","multiplier","_minBy","runData","_","runMetrics","visibleMetricHistoryForRun","flatMap","metric","_metric$metricsHistor","timestampOffset","minBy","_ref5","getV2ChartTitle","cardConfig","shouldEnableChartExpressions","yAxisKey","RunsChartsLineChartYAxisType","EXPRESSION","_cardConfig$yAxisExpr","expressions","yAxisExpressions","exp","expression","selectedMetricKeys","SUPPORTED_DOWNLOAD_FORMATS","RunsChartsLineChartCard","_config$ignoreOutlier","config","chartRunData","onDelete","onEdit","onDownloadFullMetricHistoryCsv","groupBy","fullScreen","setFullScreenChart","autoRefreshEnabled","hideEmptyCharts","isInViewport","isInViewportProp","isInViewportDeferred","isInViewportDeferredProp","positionInSection","reorderProps","useLineChartGlobalConfig","toggleFullScreenChart","subtitle","slicedRuns","filter","hidden","reverse","isGrouped","some","groupParentInfo","isEmptyDataset","_config$selectedMetri","metricKeys","metricsInRuns","metrics","intersection","uniq","runUuidsToFetch","g","belongsToGroup","_r$runInfo","runInfo","_r$runInfo2","yAxisKeys","_config$yAxisExpressi","fallback","_config$selectedMetri2","reduce","acc","variables","variable","add","Set","from","getYAxisKeys","xAxisKeys","concat","setTooltip","resetTooltip","destroyTooltip","selectedRunUuid","useRunsChartsTooltip","RunsChartsTooltipMode","MultipleTracesWithScanline","aggregateFunction","sampledMetricsByRunUuid","useSelector","entities","shallowEqual","yRangeLocal","setYRangeLocal","yMin","yMax","setOffsetTimestamp","stepRange","xRangeLocal","setXRangeLocal","scaleType","xMin","xMax","offsetTimestamp","isString","isNumber","Math","floor","ceil","useCompareRunChartSelectedRange","xAxisScaleType","resultsByRunUuid","isLoading","isRefreshing","useSampledMetricHistory","enabled","maxResults","sampledData","run","_resultsByRunUuid$run","_resultsByRunUuid$run2","history","uuid","ignoreOutliers","removeOutliersFromMetricHistory","sampledGroupData","useGroupedChartRunData","ungroupedRunsData","sampledDataResultsByRunUuid","chartData","imageDownloadHandler","setImageDownloadHandler","useChartImageDownloadHandler","renderChartBody","renderSkeleton","chartBody","lineChartCardWrapper","RunsChartCardLoadingPlaceholder","RunsMetricsLinePlot","runsData","useDefaultHoverBox","onHover","onUnhover","onUpdate","layout","yAxisMin","yAxisMax","xAxisMin","xAxisMax","autorange","yAxisAutorange","newYRange","yaxis","isEqual","xAxisAutorange","newXRange","xaxis","ungroupedRunUuids","groupedRunUuids","_ref6","_groupParentInfo$runU","shouldEnableRelativeTimeDateAxis","TIME_RELATIVE_HOURS","timestampRange","xRange","yRange","displayPoints","onSetDownloadHandler","onClickDownload","format","_config$selectedMetri3","_config$selectedMetri4","savedChartTitle","downloadChartMetricHistoryCsv","_d$runInfo","_ref7","group","_group$groupParentInf","RunsChartCardWrapper","dragGroupKey","RunsChartsChartsDragGroup","GENERAL_AREA","supportedDownloadFormats","isHidden","RunsChartsNoDataFoundIndicator","overflow","RunsChartsScatterChartCard","datasetName","flex","display","alignItems","gap","Typography","Text","ellipsis","bold","_Fragment","Tag","_config$xaxis$dataAcc","_config$yaxis$dataAcc","dataAccessKey","scatterChartCardWrapper","RunsScatterPlot","xAxis","yAxis","paramsToExport","metricsToExport","axis","type","push","downloadChartDataCsv","RunsChartsContourChartCard","zaxis","contourChartCardWrapper","RunsContourPlot","zAxis","_path2","_g","_defs","SvgParallelChartPlaceholder","strokeLinecap","opacity","x1","y1","x2","y2","gradientUnits","stopColor","offset","NotConfiguredParallelCoordsPlaceholder","ParallelChartSvg","Title","marginTop","md","color","level","marginBottom","UnsupportedDataPlaceholder","textAlign","_ref8","RunsChartsParallelChartCard","useUpdateExperimentViewUIState","configuredChartRunData","showAllRuns","containsStringValues","_config$selectedParam","selectedParams","paramKey","dataTrace","_dataTrace$params$par","isNaN","Number","params","updateVisibleOnlySetting","_state$compareRunChar","newCompareRunCharts","existingChartConfig","isConfigured","parallelCoordsData","configured","isParallelChartConfigured","processParallelCoordinateData","selectedMetrics","closeContextMenu","containsUnsupportedValues","displaySubtitle","parallelChartCardWrapper","LazyParallelCoordinatesPlot","data","axesRotateThreshold","fullScreenEnabled","tooltip","PARALLEL_CHARTS_AREA","additionalMenuContent","Separator","cursor","NotConfiguredDifferenceChartPlaceholder","RunsChartsDifferenceChartCard","_config$compareGroups","Boolean","compareGroups","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","showChangeFromBaselineToggle","showChangeFromBaseline","showDifferencesOnlyToggle","showDifferencesOnly","DifferenceViewPlot","previewData","setCardConfig","setter","showTooltip","DISABLED_GROUP_WHEN_GROUPBY","includes","chartName","toggles","toggleLabel","currentToggle","setToggle","RunsChartsImageChartCard","containerRef","useRef","containerWidth","setContainerWidth","tmpConfig","setTmpConfig","updateStep","imageKeys","DEFAULT_IMAGE_GRID_CHART_NAME","stepMarks","maxMark","minMark","useImageSliderStepMarks","selectedImageKeys","stepMarkLength","shouldDisplayImageLimitIndicator","tags","LOG_IMAGE_TAG_INDICATOR","NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE","flexDirection","ImageGridPlot","justifyContent","conf","marks","disabled","onAfterChange","cardBodyToRender","RunsChartsCardRaw","sectionIndex","onStartEditChart","onRemoveChart","canMoveDown","canMoveUp","previousChartUuid","nextChartUuid","onReorderWith","editProps","commonChartProps","RunsChartType","PARALLEL","shouldEnableDifferenceViewCharts","DIFFERENCE","IMAGE","BAR","RunsChartsBarChartCard","LINE","SCATTER","CONTOUR","RunsChartsCard","memo","_path3","SvgChartContour","originalCardConfig","result","globalXAxisKey","useGlobalLineSmoothing","useGlobalXaxisKey","globalSelectedXAxisMetricKey","START_TIME_COLUMN_OFFSET","ALL","LAST_HOUR","LAST_24_HOURS","LAST_7_DAYS","LAST_30_DAYS","LAST_YEAR","SQL_SYNTAX_PATTERN","RegExp","RUNS_AUTO_REFRESH_INTERVAL","detectSqlSyntaxInSearchQuery","test","createQuickRegexpSearchFilter","replace","createSearchRunsParams","searchFacetsState","referenceTime","pageToken","runViewType","LIFECYCLE_FILTER","ACTIVE","ViewType","ACTIVE_ONLY","DELETED_ONLY","runsPinned","createOrderByExpression","startTimeExpression","createStartTimeExpression","createFilterExpression","datasetsFilterExpression","shouldUseRegexpBasedAutoRunsSearchFilter","activeFilters","dataset","createDatasetsFilterExpression","shouldFetchParents","ATTRIBUTE_COLUMN_SORT_KEY","DATE","shouldNestChildrenAndFetchParents","RUNS_SEARCH_MAX_RESULTS","fetchModelVersionsForRuns","runsPayload","actionCreator","dispatch","runsWithLogModelHistory","EXPERIMENT_LOG_MODEL_HISTORY_TAG","promises","chunk","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","runsChunk","action","run_id","info","getUUID","Promise","all","isSearchFacetsFilterUsed","currentSearchFacetsState","DEFAULT_LIFECYCLE_FILTER","DEFAULT_MODEL_VERSION_FILTER","DEFAULT_START_TIME","DRAGGABLE_CARD_HANDLE_CLASS","DRAGGABLE_CARD_TRANSITION_NAME","DRAGGABLE_CARD_TRANSITION_VAR","RunsChartCardWrapperRaw","noop","onMoveUp","onMoveDown","usingCustomTitle","React","gridTemplateRows","backgroundColor","colors","backgroundPrimary","paddingBottom","border","borderRadius","general","borderRadiusBase","transition","position","marginRight","className","DragIcon","String","LegacyInfoTooltip","heightSm","Spinner","lg","toggle","Switch","FullscreenIcon","OverflowIcon","minWidth","Item","chartEntry","chartComponentWrapper","textSecondary","fontSize","verticalAlign","forwardRef","style","PLOT_CONFIG","displaylogo","scrollZoom","modeBarButtonsToRemove","markerSize","margin","runsChartDefaultMargin","layoutHeight","layoutWidth","setContainerDiv","containerDiv","isDynamicSizeSupported","useDynamicPlotSize","plotData","xValues","yValues","tooltipData","_xAxisData","_xAxis$dataAccessKey","_yAxisData","_yAxis$dataAccessKey","displayName","runName","xAxisData","yAxisData","y","primary","customdata","text","hovertemplate","hoverinfo","hoverlabel","runsChartHoverlabel","mode","textposition","marker","size","plotlyThemedLayout","createThemedPlotlyLayout","setLayout","tickfont","template","current","newLayout","setHoveredPointIndex","useRenderRunsChartTraceHighlight","highlightScatterTraces","hoverCallback","_points$","_points$$customdata","_points$0$pointIndex","_points$2","points","pointCustomDataRunUuid","pointIndex","unhoverCallback","mutableHoverCallback","useMutableChartHoverCallback","legendLabelData","getLegendDataFromRuns","dataToExport","trace","createChartImageDownloadHandler","chart","commonRunsChartStyles","chartWrapper","scatterChartHighlightStyles","LazyPlot","useResizeHandler","RunsMetricsLegendWrapper","labelData","TraceLabel","dashStyle","textOverflow","flexShrink","maxWidth","TraceLabelColorIndicator","strokeDasharray","dashType","getDashArray","pathYOffset","typography","fontSizeSm","STROKE_WIDTH","flexWrap","alignContent","overflowY","overflowX","labelDatum","_labelDatum$uuid","RunsChartsConfigureField","RunsChartsMetricParamSelect","paramKeyList","isEmpty","LegacySelect","selectFull","dangerouslySetAntdProps","showSearch","OptGroup","Option","makeCanonicalSortKey","param","RunsChartsMetricParamSelectV2","metricOptions","paramOptions","SimpleSelect","target","contentProps","matchTriggerWidth","maxHeight","SimpleSelectOptionGroup","SimpleSelectOption","runsChartsRunCountDefaultOptions","RunsChartsConfigureMetricWithDatasetSelect","metricKeysByDataset","find","RunsChartsConfigureBarChart","_state$dataAccessKey","onStateChange","updateMetric","runsCountToCompare","emptyMetricsList","RunsChartsConfigureParallelChart","updateSelectedParams","updateSelectedMetrics","emptyParamsList","renderMetricSelectorV2","placeholder","ExpressionInput","chartExpression","updateYAxisExpression","removeYAxisExpression","compileExpression","useChartExpressionParser","isValidExpression","setIsValidExpression","Input","compiledExpression","rpn","validateAndUpdate","validationState","CloseIcon","RunsChartsYAxisMetricAndExpressionSelector","usingChartExpressions","temporaryChartExpressions","setTemporaryChartExpressions","updateYAxisExpressionTemporary","newExpressions","removeYAxisExpressionTemporary","splice","handler","setTimeout","clearTimeout","updateYAxisKey","Radio","PlusIcon","addNewYAxisExpressionTemporary","USE_GLOBAL_SETTING_KEY","renderXAxisMetricSelector","updateSelectedXAxisMetricKey","preventDefault","stopPropagation","safeLog","log10","safePow","pow","RunsChartsConfigureLineChart","_state$range","_state$range2","_state$range3","_state$range4","_state$range5","_state$range6","_state$range7","_state$range8","localAxisRange","setLocalAxisRange","updateXAxisKey","useGlobal","selectedYAxisMetricKey","isInvalidLogValue","updateXAxisScaleType","isLogType","newXMin","newXMax","prev","updateYAxisType","newYMin","newYMax","updateIgnoreOutliers","updateSmoothing","updateXAxisWhenConfirmed","inTransitionState","updateYAxisWhenConfirmed","a","b","invalidMessage","FormUI","Message","message","METRIC_AXIS_PREFIX","textOverflowMode","startsWith","slice","side","QuestionMarkIcon","timeStepQuestionMarkIcon","LegacyTooltip","placement","updateXAxisScaleMin","updateXAxisScaleMax","activeLabel","inactiveLabel","disabledLabel","paddingTop","updateYAxisScaleMin","updateYAxisScaleMax","Spacer","delayDuration","SegmentedControlGroup","SegmentedControlButton","InfoIcon","svg","RunsChartsConfigureLineChartPreview","connect","metricsByRunUuid","areStatesEqual","nextState","prevState","_cardConfig$ignoreOut","_cardConfig$range","_cardConfig$range2","_cardConfig$range3","_cardConfig$range4","_r$runInfo$runUuid","_g$runUuid","metricKeysToFetch","_cardConfig$selectedM","checkValidRange","rangeMin","rangeMax","RunsChartsConfigureContourChart","updateAxis","canonicalKey","isCanonicalSortKeyOfType","extractCanonicalSortKey","_state$xaxis","_state$yaxis","_state$zaxis","firstMetric","firstParam","RunsChartsConfigureScatterChart","RunsChartsConfigureDifferenceChart","updateCompareGroups","compareGroup","updateChartName","updateShowChangeFromBaseline","updateShowDifferencesOnly","Checkbox","defaultValue","DifferenceCardConfigCompareGroup","_state$compareGroups","groupedCondition","isChecked","RunsChartsConfigureImageChart","imageKeyList","handleUpdate","imageKey","_currentConfig$imageK","currentConfig","_currentConfig$imageK2","DialogCombobox","multiSelect","DialogComboboxTrigger","onClear","handleClear","DialogComboboxContent","DialogComboboxOptionList","_state$imageKeys","DialogComboboxOptionListCheckboxItem","RunsChartsConfigureScatterChartWithDatasets","_metricKeysByDataset$","_paramKeyList$map","handleChange","foundMetric","foundParam","_state$axis","getSelectedValue","foundMetricOption","foundParamOption","selectedXValue","selectedYValue","previewComponentsMap","_cardConfig$dataAcces","dataKey","RunsMetricsBarPlot","displayRunNames","displayMetricKey","barChartCardDefaultMargin","_cardConfig$selectedP","filteredData","Empty","description","image","NoIcon","_cardConfig$imageKeys","RunsChartsConfigureModal","onCancel","onSubmit","supportedChartTypes","isChartTypeSupported","borderStyle","actionDefaultBorderDefault","currentFormState","setCurrentFormState","isEditing","updateChartType","emptyChartCard","RunsChartsCardConfig","getEmptyChartCardByType","images","sort","disableSaveButton","_lineCardConfig$selec","Modal","visible","onOk","okButtonProps","cancelText","okText","bodyStyle","gridTemplateColumns","borderTop","borderBottom","borderRight","chartType","chartTypeOption","ChartBarIcon","ChartScatterIcon","ChartLineIcon","ChartParallelIcon","ChartContourIcon","ChartDifferenceIcon","ChartImageIcon","RunsChartsTooltipWrapper","contextData","runs","component","RunsChartsTooltipBody","hoverOnly","PreviewComponent","renderPreviewChartType","iconSize","RUNS_CHARTS_UI_Z_INDEX","CARD_PREVIEW","CARD_DRAGGED","TOOLTIP_CONTAINER","SEARCH_BAR","TOOLTIP","ParallelCoordinatesPlot","Suspense","LegacySkeleton","ExperimentPageUISetStateContext","ExperimentPageUIStateContextProvider","setUIState","Provider","useToggleRowVisibilityCallback","tableRows","useGroupedValuesInCharts","immediateTableRows","toggleRowUsingVisibilityMap","groupOrRunUuid","isCurrentlyVisible","currentUIState","RUNS_VISIBILITY_MODE","CUSTOM","_immediateTableRows$c","newRunsVisibilityMap","runsVisibilityMap","currentToggledGroupInfo","rowUuid","shouldEnableToggleIndividualRunsInGroups","SHOWALL","HIDEALL","FIRST_10_RUNS","FIRST_20_RUNS","runsHiddenMode","runsHidden","toggleRowVisibility","_immediateTableRows$c2","currentlyHiddenRows","newHiddenRows","allRunsHidden","currentGroupOrRunUuid","shouldUseRunRowsVisibilityMap","heightBuffer","RunsMetricsLegend","GET_METRIC_HISTORY_BULK_INTERVAL","gql","shouldUseGraphql","shouldEnableGraphQLSampledMetrics","legacyResult","useDispatch","store","rangeKey","createChartAxisRangeKey","anyRunRefreshing","anyRunLoading","returnValues","metricsByMetricKey","dataByMetricKey","_store$entities$sampl","_store$entities$sampl2","runMetricData","loading","refreshing","keyBy","left","right","refreshFn","runUuidsChunk","getSampledMetricHistoryBulkAction","refreshTimeoutRef","autoRefreshEnabledRef","runUuidsSerialized","hookUnmounted","fetchMetricsFn","async","isAutoRefreshing","split","scheduleRefresh","Utils","logErrorAndNotifyUser","window","EXPERIMENT_RUNS_METRIC_AUTO_REFRESH_INTERVAL","then","refresh","useSampledMetricHistoryREST","graphQlResult","_range$","_range$2","_data$mlflowGetMetric6","refetch","startPolling","stopPolling","networkStatus","error","useQuery","skip","notifyOnNetworkStatusChange","pollInterval","onCompleted","_data$mlflowGetMetric","_data$mlflowGetMetric2","_data$mlflowGetMetric3","_data$mlflowGetMetric4","mlflowGetMetricHistoryBulkInterval","apiError","code","displayGlobalErrorNotification","Error","runIds","startStep","endStep","_data$mlflowGetMetric5","metricsByRunId","runId","_metricsByRunId$runId","NetworkStatus","setVariables","poll","useSampledMetricHistoryGraphQL","useExperimentIds","location","useLocation","normalizedLocationSearch","decodeURIComponent","search","compareExperimentIdsQueryParam","qs","substring","experimentIdsRaw","highlightChartTracesFn","traceSelector","parentSelector","parent","hoverIndex","selectIndex","_parent$querySelector","_parent$querySelector3","numberOfBands","deselected","_parent$querySelector2","_parent$querySelector4","_parent$querySelector5","_parent$querySelector6","querySelector","classList","remove","querySelectorAll","bandTraceIndex","highlightBarTraces","highlightLineTraces","highlightFn","lastRunsData","selectedTraceIndex","findIndex","hoveredPointIndex","onHighlightChange","useRunsChartTraceHighlight","shouldEnableUnifiedChartDataTraceHighlight","lastSelectedTraceIndex","highlightChangeListener","newExtern","externallyHighlightedRunIndex","ChartsTraceHighlightSource","RunsChartsSetHighlightContext","createContext","highlightDataTrace","RunsChartsSetHighlightContextProvider","highlightListenerFns","block","contextValue","traceUuid","shouldBlock","source","notifyListeners","fn","listener","createElement","useContext","coerceToEnum","enumObj","v","getGraphQLErrorMessage","ApolloError","graphQLErrors","useRunsHighlightTableRow","containerElementRef","highlightedClassName","findInFlexColumns","getRowUuid","_containerElementRef$","_containerElementRef$2","existingHighlightedRowElement","additionalSelectorPrefix","rowElement","TABLE","cellMouseOverHandler","isGroupRow","dataTraceUuid","cellMouseOutHandler","ColumnHeaderCell","enableSorting","canonicalSortKey","tableContext","updateSearchFacets","selectedCanonicalSortKey","paddingRight","actionTertiaryTextHover","handleSortBy","newOrderByAsc","SortAscendingIcon","SortDescendingIcon","DateCellRenderer","runStatus","cellWrapper","formatTimestamp","RunStatusIcon","status","timeSinceStr","TrimmedText","maxSize","allowShowMore","dataTestId","trimmedText","substr","showMore","setShowMore","expandButton","RunDescriptionCellRenderer","getRunDescriptionFromTags","ExperimentNameCellRenderer","Link","to","Routes","getExperimentPageRoute","basename","ModelLink","model","isUc","registeredModelName","registeredModelVersion","flavors","artifactPath","RegisteredModelOkIcon","actionPrimaryBackgroundDefault","ModelsIcon","ModelRegistryRoutes","getModelVersionPageRoute","getRunPageRoute","renderModelName","displayFullName","ModelsCellRenderer","registeredModels","loggedModels","models","mergeLoggedAndRegisteredModels","Overflow","ModelsHeaderCellRenderer","ATTRIBUTE_COLUMN_LABELS","MODELS","VersionCellRenderer","version","renderSourceVersion","VisibleIcon","Icon","VisibleFillIcon","MOUSE_DELAYS","mouseEnterDelay","mouseLeaveDelay","RunVisibilityControlButton","rowHidden","buttonHidden","button","VisibleOffIcon","grey400","visuallyHidden","isRowVisible","iconFontSize","grey500","ExperimentViewRunsTableHeaderContext","usingCustomVisibility","ExperimentViewRunsTableHeaderContextProvider","useExperimentViewRunsTableHeaderContext","labels","groups","defineMessages","unhide","hide","pinning","unpin","pin","RowActionsCellRenderer","runDateAndNestInfo","visibilityControl","isVisibilityButtonDisabled","RunRowVisibilityControl","Disabled","pinned","runUuidToToggle","isRowHidden","visibilityMessageDescriptor","pinningMessageDescriptor","isVisibilityButtonHidden","Hidden","isRemainingRunsGroup","actionsContainer","onToggleVisibility","actionCheckbox","showOnlyInCompareMode","pinnable","uuidToPin","existingState","PinFillIcon","PinIcon","random","prevProps","nextProps","_prevProps$data$group","_nextProps$data$group","RowActionsCellRendererSuppressKeyboardEvents","event","HTMLElement","contains","appearance","RowActionsHeaderCellRendererV2","actionButton","RadioGroup","onValueChange","RadioItem","DashIcon","RowActionsHeaderCellRenderer","_props$eGridHeader","selectAllCheckbox","eGridHeader","ariaLabel","background","GroupParentCellRenderer","isComparingRuns","invariant","getRunColor","useGetExperimentRunColor","saveRunColor","useSaveExperimentRunColor","onExpandToggle","groupId","doOpen","groupsExpanded","groupName","getRunGroupDisplayName","groupIsDisplayedInCharts","urlToRunUuidsFilter","createSearchFilterFromRunGroupInfo","searchParams","URLSearchParams","expanderOpen","ChevronDownIcon","ChevronRightIcon","RunColorPill","onChangeColor","colorValue","groupUuid","marginLeft","NewWindowIcon","RunNameCellRenderer","onExpand","hasExpander","childrenIds","renderingAsParent","hideRunColorControl","expanderWrapper","nestLevel","expanderButton","MinusSquareIcon","PlusSquareIcon","runLink","tabIndex","link","fontSizeBase","minHeight","textDecoration","LoadMoreRowRenderer","loadMoreRunsFunc","SingleDataset","datasetWithTags","onDatasetSelected","appendComma","inPopover","contextTag","MLFLOW_RUN_DATASET_CONTEXT_TAG","TableIcon","Popover","Close","textTransform","_ref9","DatasetsCellRenderer","datasets","expandRows","containerElement","datasetsVisible","setDatasetsVisible","ellipsisVisible","setEllipsisVisible","clampedDatasets","datasetsLength","callback","throttle","availableHeight","contentRect","elementsFit","stackedHeight","i","item","clientHeight","availableWidth","stackedWidth","clientWidth","partiallyVisibleDatasets","resizeObserver","ResizeObserver","observe","disconnect","moreItemsToShow","datasetsToShow","DatasetsCellRendererSuppressKeyboardEvents","_ref10","HTMLButtonElement","AggregateMetricValueCell","_data$groupParentInfo","valueFormatted","cellClassIsOrderedBy","_colDef$headerCompone","colDef","headerComponentParams","getActionsColumnWidth","BASE_RUN_ACTIONS_COLUMN_WIDTH","createParamFieldName","EXPERIMENT_FIELD_PREFIX_PARAM","createTagFieldName","EXPERIMENT_FIELD_PREFIX_TAG","UntrackedSpinner","defaultKeyboardNavigationSuppressor","TAGS_TO_COLUMNS_MAP","USER","COLUMN_TYPES","ATTRIBUTES","RUN_NAME","SOURCE","VERSION","DESCRIPTION","getRowId","getRowIsLoadMore","rowNode","isLoadMoreRow","getAdjustableAttributeColumns","isComparingExperiments","DATASET","EXPERIMENT_NAME","useRunsColumnDefinitions","selectedColumns","compareExperiments","onTogglePin","tagKeyList","columnApi","cumulativeColumns","cachedMetricKeys","cachedParamKeys","cachedTagKeys","paramKeys","tagKeys","useCumulativeColumnKeys","usingCompactViewport","useMediaQuery","responsive","breakpoints","columnSet","columns","valueGetter","checkboxSelection","headerComponent","headerCheckboxSelection","headerName","cellClass","cellRenderer","cellRendererParams","resizable","suppressKeyboardEvent","isRunColumnDynamicSized","colId","headerTooltip","sortable","equals","runA","runB","_runA$groupParentInfo","_runB$groupParentInfo","cellClassRules","initialWidth","dateInfo1","dateInfo2","DURATION","experimentName1","experimentName2","initialHide","tags1","tags2","getSourceName","version1","version2","models1","models2","METRICS","_customMetricColumnDe","_customMetricColumnDe2","customMetricColumnDef","customMetricBehaviorDefs","fieldName","EXPERIMENT_FIELD_PREFIX_METRIC","getQualifiedEntityName","tooltipValueGetter","_params$data","initialColumnWidth","valueFormatter","cellRendererSelector","is-previewable-cell","PARAMS","tooltipField","TAGS","tagKey","canonicalSortKeys","setColumnVisible","EXPERIMENTS_DEFAULT_COLUMN_SETUP","autoSizePadding","menuIcon","suppressMenu","suppressMovable","ExperimentViewRunsEmptyTable","isFiltered","onClearFilters","noResultsWrapper","noResults","FilterIcon","chunks","href","LoggingRunsDocUrl","rel","BeakerIcon","inset","CLASS_OUT_OF_VIEWPORT","CLASS_IS_HIDDEN","CLASS_IS_MINIMIZED","AG_GRID_CLS","ExperimentViewRunsTableAddColumnCTA","gridContainerElement","isInitialized","moreRunsAvailable","moreAvailableRunsTableColumnCount","ctaRef","savedContainerRef","immediateMoreRunsAvailable","initialize","targetElement","rootElement","refLeftElem","refCenterElem","refHeaderElem","refBodyViewport","gridAreaWidth","leftColContainerWidth","leftColContainerHeight","centerColContainerWidth","colContainerHeight","headerHeight","_savedContainerRef$cu","_savedContainerRef$cu2","_savedContainerRef$cu3","_savedContainerRef$cu4","calculatedLeft","calculatedTop","loadMoreRowHeight","calculatedHeight","transform","columnContainer","buttonContainer","PlusCircleIcon","buttonIcon","caption","count","borderDecorative","top","willChange","pointerEvents","whiteSpace","strong","ExperimentViewRunsTableStatusBar","allRunsCount","statusBar","agGridSelectRunRows","isSelected","gridApi","forEachNode","node","_node$data","childRunDateInfo","childrenRunUuid","setSelected","ExperimentViewRunsTable","experiments","updateViewState","onAddColumnClicked","rowsData","viewState","uiState","setUrlSearchFacets","runListHidden","tagsList","setGridApi","setColumnApi","filteredTagKeys","getVisibleTagKeyList","expandersVisible","row","_row$runDateAndNestIn","toggleRowExpanded","parentId","runsExpanded","currentRunsExpanded","togglePinnedRow","existingFacets","gridReadyHandler","api","handleRowSelected","onSelectionChange","selectedUUIDs","getSelectedRows","runsSelected","aggregate","curr","isParent","selectedRunRows","uniqBy","rowData","every","agGridSelectGroupRows","useExperimentTableSelectRowHandler","runInfos","columnDefs","gridSizeHandler","sizeColumnsToFit","showLoadingOverlay","hideOverlay","setRowData","uniqueId","allAvailableColumnsCount","hasSelectedAllColumns","runUuidsMatchingFilter","useLayoutEffect","deselectAll","resetRowHeights","rowHeightGetterFn","EXPERIMENT_RUNS_TABLE_ROW_HEIGHT","datasetColumnId","getDatasetsCellHeight","datasetColumnShown","_data$datasets","datasetsCount","sidebarPreviewData","setSidebarPreviewData","handleCellClicked","_column$getParent","column","columnGroupId","getParent","getGroupId","header","getColDef","previewPaneVisible","displayAddColumnsCTA","displayPreviewSidebar","displayRunsTable","displayStatusBar","displayEmptyState","gridStyles","useExperimentAgGridTableStyles","MLFlowAgGridLoader","defaultColDef","rowSelection","onGridReady","onSelectionChanged","getRowHeight","onRowSelected","suppressRowClickSelection","suppressColumnMoveAnimation","suppressScrollOnNewData","isFullWidthRow","fullWidthCellRenderer","fullWidthCellRendererParams","suppressFieldDotNotation","enableCellTextSelection","components","agColumnHeader","loadingOverlayComponent","SourceCellRenderer","suppressNoRowsOverlay","loadingOverlayComponentParams","showImmediately","rowBuffer","onCellClicked","onGridSizeChanged","onCellMouseOver","onCellMouseOut","PreviewSidebar","copyText","headerText","onClose","empty","usingCustomHeaderComponent","gridColors","rowForeground","textPrimary","rowBackground","rowBackgroundHover","tableBackgroundUnselectedHover","rowBackgroundSelected","tableBackgroundSelectedDefault","rowBackgroundHoverSelected","tableBackgroundSelectedHover","columnSortedBy","blue400","headerBackground","backgroundSecondary","headerTextColor","headerGroupTextColor","borderColor","headerBorderColor","checkboxBorderColor","checkboxBorderColorChecked","checkboxBackgroundColorChecked","overlayBackground","getGridColors","zIndex","borderLeft","DIFFERENCE_CHART_DEFAULT_EMPTY_VALUE","getDifferenceChartDisplayedValue","val","places","toFixed","DifferenceChartCellDirection","isDifferent","abs","DIFFERENCE_PLOT_EXPAND_COLUMN_ID","DIFFERENCE_PLOT_HEADING_COLUMN_ID","getDifferencePlotJSONRows","getChildren","parsedRowWithoutHeadingCol","schema","_parsedRowWithoutHead","newParsedRow","_parsedRowWithoutHead2","jsonSchema","isAllJson","parsedRow","json","parsed","validateParseJSON","commonSchema","extractMaximumCommonSchema","schema1","schema2","collectKeys","CellDifference","direction","paragraphColor","NEGATIVE","ArrowDownIcon","POSITIVE","ArrowUpIcon","SAME","actionDisabledBackground","borders","borderRadiusSm","userSelect","DifferencePlotDataCell","_columnDef$meta","getValue","original","columnDef","isBaseline","baselineColumnUuid","meta","rowDifference","differenceView","diff","DifferencePlotRunHeaderCell","_columnDef$meta2","traceData","updateBaselineColumnUuid","fontWeight","ExpandCell","toggleExpand","getCanExpand","getIsExpanded","modelMetrics","systemMetrics","parameters","attributes","getDifferenceViewDataGroups","headingColumnId","getMetrics","filterCondition","runDataKeys","runDataAttribute","hasDifference","MLFLOW_SYSTEM_METRIC_PREFIX","getVisibleTagValues","DifferenceCardAttributes","attribute","attributeData","_runData$runInfo","user","getUser","getSourceVersion","getLoggedModelsFromTags","baselineColumn","nonBaselineColumns","dataTracesReverse","dataRows","MODEL_METRICS","SYSTEM_METRICS","PARAMETERS","cell","enableResizing","accessorKey","_traceData$uuid","expanded","setExpanded","table","useReactTable","getCoreRowModel","getExpandedRowModel","columnResizeMode","enableExpanding","getSubRows","getRowCanExpand","subRows","columnPinning","tableContainerRef","getVirtualItems","getTotalSize","useVirtualizer","rows","getScrollElement","estimateSize","paddingStart","expandedRows","Table","TableRow","isHeader","getLeafHeaders","isPinned","getIsPinned","TableHeader","setColumnSizing","multiline","getStart","getSize","flexBasis","wrapContent","flexRender","getContext","start","getVisibleCells","isNameColumn","TableCell","depth","_rect","_rect2","_rect3","_rect4","_rect5","_rect6","_rect7","_rect8","_rect9","_rect10","_rect11","_rect12","_rect13","_rect14","_rect15","_rect16","_rect17","_rect18","SvgChartDifference","DeleteRunModalImpl","Component","constructor","super","this","handleSubmit","deletePromises","selectedRunIds","deleteRunApi","catch","errorModalContent","openErrorModal","_this$props$onSuccess","_this$props","onSuccess","render","number","ConfirmModal","isOpen","pluralize","helpText","confirmButtonText","mapDispatchToProps","injectIntl","ImageGridSingleKeyPlot","displayRuns","imageMetadata","EmptyImageGridPlot","imageMetadataByStep","metadata","lineHeightMd","ImagePlotWithHistory","metadataByStep","ImageGridMultipleKeyPlot","grid","scrollable","MIN_GRID_IMAGE_SIZE","containsLoggedImages","filteredPreviewData","rowGap","CopyButton","showLabel","CopyIcon","activeKey","onActiveKeyChange","disableCollapse","getPrefixedClassName","clsPrefix","classItem","classItemActive","classHeader","classContent","classContentBox","classArrow","outlineColor","outlineStyle","lineHeight","Accordion","dangerouslyAppendEmotionCSS","expandIconPosition","RunsChartsAddChartMenu","onAddChart","addChartButton","iconWrapper","RunsChartsSectionHeader","section","sectionChartsLength","addNewChartCard","onDeleteSection","onAddSection","editSection","onSetEditSection","onSetSectionName","onSectionReorder","isExpanded","hideExtraControls","tmpSectionName","setTmpSectionName","isDraggingHandle","setIsDraggingHandle","sectionNameRef","confirmButtonRef","sectionNameWidth","setSectionNameWidth","isDeleteSectionModalOpen","setIsDeleteSectionModalOpen","trim","isCurrentlyEdited","isCurrentlyHovered","setIsCurrentlyHovered","dragHandleRef","dragPreviewRef","dropTargetRef","isOver","isDragging","useDragAndDropElement","dragKey","onDrop","onMouseMove","onMouseLeave","element","isDarkMode","blue800","blue100","EDITABLE_LABEL_PADDING_WIDTH","autoFocus","onMouseDown","onMouseUp","onDoubleClick","lineHeightBase","onKeyDown","onPressEnter","onBlur","relatedTarget","PencilIcon","rotate","addSectionAbove","addSectionBelow","deleteSection","DangerModal","deleteModalConfirm","deleteModalCancel","alignSelf","sharedObserver","entryCallbackMap","WeakMap","observeElement","_sharedObserver","IntersectionObserver","entryCallback","isIntersecting","_sharedObserver2","unobserve","RunsChartsDraggableCard","_translateBy$x","_translateBy$y","setElementRef","setIsInViewport","useIsInViewport","translateBy","onResizeStart","onResize","onResizeStop","cardProps","deferredValue","useDebounce","resizeWidth","setResizeWidth","resizeHeight","setResizeHeight","setIsDragging","origin","setOrigin","setDraggedCardUuid","onDropChartCard","useRunsChartsDraggableGridActionsContext","draggedCardElementRef","onStartDrag","onDrag","onStopDrag","onResizeStartInternal","_draggedCardElementRe","rect","getBoundingClientRect","_rect$width","_rect$height","onResizeInternal","DraggableCore","enableUserSelectHack","onStart","onStop","handle","Resizable","ResizableHandle","overflowing","bottom","actionDefaultIconDefault","RunsChartsDraggablePreview","actionDefaultBackgroundHover","borderWidth","rowHeightSuggestions","PlaceholderSymbol","Symbol","RunsChartsDraggableCardsGridSection","_sectionConfig$column","_sectionConfig$cardHe","cardsConfig","sectionConfig","sectionId","cardHeight","gridBoxRef","draggedCardUuid","useRunsChartsDraggableGridStateContext","setTargetSection","setTargetPosition","onSwapCards","useUpdateRunsChartsUIConfiguration","setColumns","columnCount","_current$compareRunSe","_current$compareRunSe2","compareRunSections","s","setCardHeight","_current$compareRunSe3","_current$compareRunSe4","lastElementCount","setPositionInSection","resizePreview","setResizePreview","findCoords","_gridBoxRef$current","rowCount","col","colGapsCount","passedColGaps","passedRowGaps","cardsToRender","isEmptyChartCard","cardTransforms","newArray","fromIndex","toIndex","newIndex","indexOf","oldIndex","oldCoords","newCoords","deltaX","deltaY","dragPreview","_gridBoxRef$current2","_rect$width2","mouseMove","pos","clientY","clientX","columnSuggestions","setColumnSuggestions","immediateColSuggestion","immediateRowSuggestion","_gridBoxRef$current3","gridBoxRefSize","gapSize","cols","getColumnSuggestions","_immediateColSuggesti","_immediateRowSuggesti","columnSuggestion","rowHeightSuggestion","Global","array","_cardConfig$uuid","_cardConfig$uuid2","_array","_array2","RunsChartsSection","sectionCharts","reorderCharts","insertCharts","isMetricHistoryLoading","startEditChart","removeChart","getChartMetricsAndParams","barConfig","lineConfig","scatterConfig","toLowerCase","parallelConfig","contourConfig","RunsChartsSectionAccordion","noRunsSelectedEmptyState","setEditSection","onActivePanelChange","newCompareRunPanels","shouldDisplaySection","chartConfig","isGenerated","metricSectionId","deleted","newCompareRunSections","isAccordionReordered","addSection","above","idx","newSection","isReordered","appendSection","setSectionName","sectionReorder","sourceSectionId","targetSectionId","sourceSectionIdx","targetSectionIdx","sourceSection","noRunsSelected","sectionsToRender","chartsToRender","compareRunChartsFiltered","chartMatchesFilter","filterRegex","metricOrParam","match","sectionsWithCharts","has","isSearching","MetricChartsAccordion","Panel","RunsChartsFilterInput","chartsSearchFilter","updateChartsUIState","inputValue","setInputValue","searching","setSearching","updateChartFilter","updateChartFilterDebounced","useDebouncedCallback","prefix","SearchIcon","allowClear","_path4","_path5","SvgChartParallel","lazyPako","truncateToFirstLineWithMaxLength","str","maxLength","truncated","char","middleTruncateStr","maxLen","firstPartLen","lastPartLen","_keyStr","output","_utf8_encode","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","charAt","fromCharCode","_utf8_decode","utftext","c","string","c2","c3","getStringSHA256","crypto","subtle","TextEncoder","encode","arrayBuffer","prototype","Uint8Array","COMPRESSED_TEXT_DEFLATE_PREFIX","textCompressDeflate","binaryData","deflate","Buffer","b64encoded","binaryString","byte","fromCodePoint","btoa","textDecompressDeflate","pako","compressedText","compressedTextWithoutPrefix","inflate","atob","m","_m$codePointAt","codePointAt","isTextCompressedDeflate","MATCH_VARIABLE_REGEX","Operator","Parenthesis","VariableParenthesis","precedence","ADD","SUBTRACT","MULTIPLY","DIVIDE","POWER","NEGATIVE_SIGN","POSITIVE_SIGN","isBinaryOperator","isUnaryOperator","variableStringToIndex","popAndValidate","stack","operandCount","lastElement","pop","flushUnaryOperators","noVariableExpression","parsedExpression","matches","dedupMatches","matchesMap","parseVariablesAndReplaceWithIndex","cleanedExpression","incrementOperand","isUnarySign","OPEN","CLOSE","num","periodMatches","floatNum","parseFloat","op1","isHigherPrecedence","toRPN","parseInt","evaluateExpression","tokens","token","fromRPN","experimentChartImageDefaultDownloadLayout","paper_bgcolor","plot_bgcolor","experimentChartImageDefaultDownloadSettings","experimentChartImageDefaultDownloadPlotConfig","downloadImage","filename","downloadHandlerRef","downloadHandler","setDownloadHandler","setDownloadHandlerCached","existingHandler","chartTitle","_downloadHandlerRef$c","MLFlowAgGridImpl","cssTheme","query","queryList","useSyncExternalStore","removeEventListener","useMatchesMediaQuery","matchMedia","RenameRunModalImpl","formRef","handleRenameRun","newRunName","NEW_NAME_FIELD","updateRunRequestId","updateRunApi","GenericInputModal","RenameForm","innerRef","validator","RenameRunModalWithIntl","RenameRunModal","usePopulateImagesByRunUuid","runUuidsIsActive","listImagesApi","runUuidsIsActiveSerialized","fetchImagesFn","activeRunUuids","autoRefresh","EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL","RenameFormComponent","inputToAutoFocus","autoFocusInputRef","focus","select","resetFields","componentDidUpdate","LegacyForm","initialValue","rules","required","l","pad","_config$dataAccessKey","barChartCardWrapper","_customMetricBehavior3","_customMetricBehavior4","_customMetricBehavior","_customMetricBehavior2","runsToExport","PlotlyLikeFormattedTime","FormattedDate","year","month","day","FormattedTime","hour","hourCycle","minute","second","fractionalSecondDigits","PlotlyLikeFormattedTimestamp","RunsMultipleTracesTooltipBody","hoverData","tooltipLegendItems","hoveredDataPoint","singleTraceHoverData","xValue","xAxisKeyLabel","metricEntity","hoveredTraceUuid","displayedXValueLabel","getChartAxisLabelDescriptor","columnGap","textPlaceholder","RunsChartsUIConfigurationContext","RunsChartsUIConfigurationContextProvider","useReorderRunsChartsFn","sourceChartUuid","targetChartUuid","_current$compareRunCh","newChartsOrder","newSectionsState","indexSource","indexTarget","sourceChart","targetChart","isSameMetricSection","newSourceChart","configuredCard","serializedCard","serialize","_current$compareRunCh2","existingChartCard","useInsertRunsChartsFn","_current$compareRunCh3","useRemoveRunsChartFn","configToDelete","_current$compareRunCh4","_current$compareRunCh5","setup","RunsChartsFullScreenModal","fullScreenChart","tooltipContextValue","tooltipComponent","footer","verticalSizing","onReorderCharts","doubleClick","showTips","barWidth","ids","names","_d$metrics$metricKey","normalizeChartValue","textValues","_d$metrics$metricKey3","customMetricBehaviorDef","_d$metrics$metricKey2","getFixedPointValue","textfont","orientation","hovermode","tickformat","chartAxisTickFormat","showticklabels","fixedrange","_points$0$data","yValue","layoutToExport","automargin","highlightStyles","DEFAULT_COLOR_SCALE","reverseScale","runsChartDefaultContourMargin","colorScale","zValues","_xAxisData$xAxis$key","_yAxisData$yAxis$key","_zAxisData$zAxis$key","zAxisData","z","layers","zAxisTitle","line","unshift","connectgaps","contours","coloring","colorscale","reversescale","colorbar","family","ticks","standoff","_scatterPoints$pointI","_customdata","scatterPoints","curveNumber","isSubmitting","setState","validateFields","resetAndClearModalForm","onRequestCloseHandler","handleSubmitFailure","handleCancel","_this$props$onCancel","displayForm","child","confirmLoading","centered","RunsChartsDraggableGridStateContext","targetSection","RunsChartsDraggableGridActionsContext","RunsChartsDraggableCardsGridContextProvider","visibleChartCards","targetSectionUuid","setTargetSectionUuid","immediateDraggedCardUuid","immediateTargetSectionId","targetLocalPosition","draggedChartUuid","targetPosition","sourceCard","sourceSectionCards","chartCard","resultChartsList","visibleSectionCards","originalIndex","clampedLocalPosition","targetIndex","targetSectionCards","sortBy","_targetSectionCards$i","stateContextValue","actionsContextValue","DragAndDropProvider","createLineChartValuesBox","activeRun","_hoverData$metricEnti","_hoverData$yValue","metricKeyFromConfig","metricValue","getTooltipXValue","_hoverData$xValue","_hoverData$xValue2","ValuesBox","isHovering","createBarChartValuesBox","displayValue","createScatterChartValuesBox","_xaxis$dataAccessKey","_xaxis$dataAccessKey2","_activeRun$metrics$xK","_activeRun$params$xKe","_activeRun$metrics$yK","_activeRun$params$yKe","xKey","yKey","xLabel","yLabel","createContourChartValuesBox","_activeRun$metrics$xK2","_activeRun$params$xKe2","_activeRun$metrics$yK2","_activeRun$params$yKe2","_activeRun$metrics$zK","_activeRun$params$zKe","zKey","zValue","createParallelChartValuesBox","paramsList","metricsList","_getDataTraceLink","onHideRun","getDataTraceLink","containsMultipleRunsTooltipData","metricSuffix","contentWrapper","colorPill","actionsWrapper","SvgChartLine","strokeLinejoin","PLOTLY_DRAGLAYER_SELECTOR","parseMicroseconds","plotlyAxisBoundary","_plotlyAxisBoundary$m","microsecondsString","getCompareValue","getDataTraceForRun","_yValues","_runEntry$runInfo","_yValues2","_runEntry$runInfo2","_runEntry$runInfo3","runEntry","lineShape","lineDash","displayOriginalLine","originalLine","sortedMetricsHistory","xDataPointsPerVariable","_runEntry$metricsHist","elements","compareValue","xDataPoints","xDataPoint","obj","_runEntry$metricsHist2","_elements$find","expressionValue","getExpressionChartsSortedMetricHistory","_sortedMetricsHistory","_sortedMetricsHistory2","ySteps","xValuesWithSteps","prepareXAxisDataForMetricType","stepOrder","xSteps","yValueHistory","orderBySteps","_sortedMetricsHistory3","prepareMetricHistoryByAxisType","firstNonZeroXIndex","optimizedLineShape","containsDuplicateXValues","shouldDisplayMarkers","containsSingleValue","EMA","metricHistory","hovertext","createTooltipTemplate","dash","shape","createFadedTraceColor","dataPoints","stepIndexes","_stepIndexes$a$step","_stepIndexes$b$step","Infinity","axisType","minTimestamp","_ref16","EPOCH_RELATIVE_TIME","_ref17","_ref18","_ref19","HOUR_IN_MILLISECONDS","_ref20","_ref21","datapoint","_ref22","lockXAxisZoom","dynamicXAxisKey","maxDiff","maxTimestamp","maxBy","LINE_CHART_RELATIVE_TIME_THRESHOLD","getTraceAndOriginalTrace","shouldEnableChartsOriginalLinesWhenSmoothing","originalLineProps","lineDashStyles","bandsData","_ref23","_runEntry$runInfo4","aggregatedMetricsHistory","xMins","xMaxes","yMins","yMaxes","_ref11","_ref12","_ref13","minReversed","_ref14","_ref15","lastNonZeroXIndex","bandValues","fillcolor","getBandTraceForRun","plotDataWithBands","xAxisPlotlyType","getXAxisPlotlyType","yAxisParams","xAxisParams","showlegend","updatedLayout","containsMultipleMetricKeys","themedPlotlyLayout","immediateLayout","getLineChartLegendData","scanlineElement","initHandler","updateHandler","updateHandlerMultipleRuns","onPointHover","hoverCallbackMultipleRuns","onPointUnhover","unhoverCallbackMultipleRuns","chartBoundaries","containerLeftPixels","plotWidthPixels","plotOffsetPixels","lowerBoundValue","valueRange","mainContainer","dragLayer","initialized","scanlineElementRef","currentHoveredDataPoint","visibleXValues","initializedFigure","setInitializedFigure","immediateHoverData","immediateLegendLabelData","immediateRunsData","immediatePlotData","immediateXValuesData","immediateFigure","setupBoundaries","figure","_figure$layout$xaxis","_figure$layout$xaxis$","_figure$layout$xaxis2","_figure$layout$xaxis3","_lowerBoundary","_upperBoundary","lowerAxisValue","upperAxisValue","lowerBoundary","getTime","upperBoundary","updateContainerPosition","containerRect","dragLayerRect","onUpdatePlotHandler","graphDiv","onInitPlotHandler","requestAnimationFrame","pointerLeavePlotCallback","Element","onPointHoverCallback","_hoveredPoint$curveNu","_hoveredPointData$met","hoveredPoint","hoveredPointData","singleTraceData","onPointUnhoverCallback","getClosestXValue","pointerClientX","boundaries","resultX","currentStep","tooltipDataUpdateHandler","closestXValue","legendEntry","_correspondingDataTra","_correspondingDataTra2","correspondingDataEntry","correspondingDataTrace","xIndex","leading","windowResizeHandler","hoverHandler","_immediateHoverData$c","_immediateHoverData$c2","closestXValueLeftInPixels","originalEvent","useRunsMultipleTracesTooltipData","legend","onInitialized","_ellipse","_circle2","_circle3","_ellipse2","_ellipse3","SvgChartScatter","rx","ry","fillOpacity","RunsChartsTooltipContext","ContextMenuVisibility","extractHTMLAncestorElement","currentElement","parentElement","ctxMenuRef","currentPos","currentSnappedCoordinates","setMode","Simple","contextMenuShown","setContextMenuShown","HIDDEN","tooltipDisplayParams","setTooltipDisplayParams","hoveredRunUuid","setHoveredRunUuid","additionalAxisData","setAdditionalAxisData","focusedRunData","mutableContextMenuShownRef","mutableHoveredRunUuid","mutableTooltipDisplayParams","mutableAdditionalAxisData","applyPositioning","isChangingVisibilityMode","targetX","targetY","currentCtxMenu","reposition","menuRect","getCoordinatesForTargetElement","_containerRef$current","targetRect","offsetX","offsetY","HOVER","nativeEvent","updateTooltip","additionalRunData","_focusedRunData$curre","VISIBLE","currentRunUuid","mouseDownCapture","pageX","pageY","tooltipAreaClicked","clickedInTheSamePlace","_focusedRunData$curre2","domRoot","getRootNode","rootClickListener","_focusedRunData$curre3","capture","_focusedRunData$curre4","CHART","displayTooltip","onMouseDownCapture","onClickCapture","contextMenuContainer","contextMenuWrapper","boxShadow","shadowLow","overlayElement","ErrorIcon","XCircleIcon","textValidationDanger","FinishedIcon","CheckCircleIcon","textValidationSuccess","ClockIcon","SvgChartBar","aggregatedRunUuidsInGroup","runUuidsForAggregation","aggregatedMetricsHistoryForMetric","metricsHistoryInGroup","_sampledDataResultsBy","_sampledDataResultsBy2","steps","h","createAggregatedMetricHistory","createValueAggregatedMetricHistory","DEFAULT_ORDER_BY_KEY","DEFAULT_ORDER_BY_ASC","dropListener","draggedItem","useDrop","canDrop","accept","drop","monitor","sourceKey","didDrop","collect","shallow","getItem","useDrag","canDrag","groupKey","isDraggingOtherGroup","rootElementRef","manager","setManager","dragDropManager","createDragDropManager","HTML5Backend","getBackend","teardown","DndProvider","handleSubmitWrapper","finally","mutableRef","_line","_line2","_line3","SvgChartImage"],"sourceRoot":""}