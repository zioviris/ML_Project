{"version":3,"file":"static/js/7951.3abcd3ca.chunk.js","mappings":"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","sources":["common/components/ag-grid/AgGridFontInjector.tsx","common/components/ag-grid/AgGrid.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageColumnSelector.tsx","experiment-tracking/components/experiment-logged-models/hooks/useLoggedModelsListPagePageState.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTableContext.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTableEmpty.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTable.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableNameCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableDatasetCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableSourceRunCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelActionsCell.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageRowVisibility.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n// eslint-disable-next-line max-len\nconst stylesContent = `@font-face { font-family: \"agGridBalham\"; src: url(\"data:application/font-woff;charset=utf-8;base64,\") format(\"woff\"); font-weight: normal; font-style: normal; }`;\n\n/**\n * Embedding agGrid inside shadow DOM imposes a problem with its embedded fonts\n * that are not being present on the main document level which results in erroneous\n * checkbox rendering. This components checks if the component is being rendered inside\n * shadow DOM part and if true, it reinjects the snapshotted agGrid styles later on.\n */\nexport const AgGridFontInjector = () => {\n  const domElementReference = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (domElementReference.current && domElementReference.current.getRootNode() !== document) {\n      const injectedStyleElement = document.createElement('style');\n      injectedStyleElement.className = `ag-grid-snapshot-base-css`;\n      injectedStyleElement.appendChild(document.createTextNode(stylesContent));\n      document.head.appendChild(injectedStyleElement);\n\n      return () => injectedStyleElement.remove();\n    }\n\n    return () => {};\n  }, []);\n\n  return <span ref={domElementReference} />;\n};\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { AgGridReact, AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react/main';\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-balham.css';\nimport { AgGridFontInjector } from './AgGridFontInjector';\n\n/**\n * A local wrapper component that embeds imported AgGrid instance.\n * Extracted to a separate module to ensure that it will be in placed a single chunk.\n */\nconst MLFlowAgGrid = (props: AgGridReactProps | AgReactUiProps) => (\n  <>\n    <AgGridFontInjector />\n    <AgGridReact modules={[ClientSideRowModelModule]} {...props} />\n  </>\n);\n\nexport default MLFlowAgGrid;\n","import { Button, ColumnsIcon, DropdownMenu, Tree, TreeDataNode, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { compact } from 'lodash';\nimport { useMemo } from 'react';\nimport {\n  ExperimentLoggedModelListPageKnownColumnGroups,\n  ExperimentLoggedModelListPageStaticColumns,\n} from './hooks/useExperimentLoggedModelListPageTableColumns';\n\ninterface BasicColumnDef {\n  colId?: string;\n  groupId?: string;\n  headerName?: string;\n  children?: BasicColumnDef[];\n}\n\nconst METRIC_AGGREGATE_GROUP_ID = 'all_metrics';\n\nconst defaultExpandedTreeGroups = [\n  ExperimentLoggedModelListPageKnownColumnGroups.Attributes,\n  METRIC_AGGREGATE_GROUP_ID,\n];\n\nexport const ExperimentLoggedModelListPageColumnSelector = ({\n  onUpdateColumns,\n  columnVisibility = {},\n  columnDefs,\n  disabled,\n  customTrigger,\n}: {\n  onUpdateColumns: (columnVisibility: Record<string, boolean>) => void;\n  columnVisibility?: Record<string, boolean>;\n  columnDefs?: BasicColumnDef[];\n  disabled?: boolean;\n  customTrigger?: React.ReactNode;\n}) => {\n  const intl = useIntl();\n\n  // Calculate the tree data for the column selector\n  const { leafColumnIds = [], treeData = [] } = useMemo(() => {\n    // If there are no column definitions, return an empty tree\n    if (!columnDefs) {\n      return {};\n    }\n\n    // We need to regroup columns so all dataset metric groups are included in another subtree\n    const groupedColumnDefinitions: BasicColumnDef[] = [];\n\n    // First, add the attribute column group\n    const attributeColumnGroup = columnDefs.find(\n      (col) => col.groupId === ExperimentLoggedModelListPageKnownColumnGroups.Attributes,\n    );\n\n    if (attributeColumnGroup) {\n      groupedColumnDefinitions.push({\n        ...attributeColumnGroup,\n        // Filter out the static columns\n        children: attributeColumnGroup.children?.filter(\n          ({ colId }) => colId && !ExperimentLoggedModelListPageStaticColumns.includes(colId),\n        ),\n      });\n    }\n\n    // Next, get all the dataset-grouped metric column groups\n    const metricColumnGroups = columnDefs\n      .filter((col) => col.groupId?.startsWith('metrics.'))\n      .map((col) => ({ ...col, headerName: `Dataset: ${col.headerName}` }));\n\n    // Special case: add a group for metrics without a dataset\n    const ungroupedColumnGroup = columnDefs.find((col) => col.groupId === 'metrics');\n    if (ungroupedColumnGroup) {\n      metricColumnGroups.push({\n        ...ungroupedColumnGroup,\n        headerName: intl.formatMessage({\n          defaultMessage: 'No dataset',\n          description: 'Label for the ungrouped metrics column group in the logged model column selector',\n        }),\n      });\n    }\n\n    // Aggregate all metric column groups into a single group\n    if (metricColumnGroups.length > 0) {\n      groupedColumnDefinitions.push({\n        groupId: METRIC_AGGREGATE_GROUP_ID,\n        headerName: intl.formatMessage({\n          defaultMessage: 'Metrics',\n          description: 'Label for the metrics column group in the logged model column selector',\n        }),\n        children: metricColumnGroups,\n      });\n    }\n\n    // In the end, add the parameter column group\n    const paramColumnGroup = columnDefs.find(\n      (col) => col.groupId === ExperimentLoggedModelListPageKnownColumnGroups.Params,\n    );\n\n    if (paramColumnGroup) {\n      groupedColumnDefinitions.push(paramColumnGroup);\n    }\n\n    const leafColumnIds: string[] = [];\n\n    // Function for building tree branches recursively\n    const buildDuboisTreeBranch = (col: BasicColumnDef): TreeDataNode => {\n      if (col.colId) {\n        leafColumnIds.push(col.colId);\n      }\n      return {\n        key: col.groupId ?? col.colId ?? '',\n        title: col.headerName ?? '',\n        children: compact(col.children?.map(buildDuboisTreeBranch) ?? []),\n      };\n    };\n\n    // Build a tree root for a column groups\n    const treeData = compact(groupedColumnDefinitions?.map((col) => buildDuboisTreeBranch(col)) ?? []);\n\n    return {\n      leafColumnIds,\n      treeData,\n    };\n  }, [columnDefs, intl]);\n\n  const treeCheckChangeHandler: React.ComponentProps<typeof Tree>['onCheck'] = (checkedKeys) => {\n    // Extract key data conforming to unusual antd API\n    const keys = 'checked' in checkedKeys ? checkedKeys.checked : checkedKeys;\n\n    // Start with empty visibility map\n    const columnVisibility: Record<string, boolean> = {};\n\n    // Go through all leaf columns and set visibility based on the checked keys.\n    // We use one-way visibility flag, i.e. use only \"false\" to hide a column.\n    for (const key of leafColumnIds) {\n      if (!keys.includes(key)) {\n        columnVisibility[key] = false;\n      }\n    }\n\n    // Call the update handler\n    onUpdateColumns(columnVisibility);\n  };\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild disabled={disabled}>\n        {customTrigger ?? (\n          <Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} disabled={disabled}>\n            <FormattedMessage\n              defaultMessage=\"Columns\"\n              description=\"Label for the column selector button in the logged model list page\"\n            />\n          </Button>\n        )}\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content css={{ maxHeight: 500, paddingRight: 32 }}>\n        <Tree\n          treeData={treeData}\n          mode=\"checkable\"\n          showLine\n          defaultExpandedKeys={defaultExpandedTreeGroups}\n          // By default, check all columns that are visible\n          defaultCheckedKeys={leafColumnIds.filter((colId) => columnVisibility[colId] !== false)}\n          onCheck={treeCheckChangeHandler}\n        />\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { first, identity, isFunction } from 'lodash';\nimport React, { useCallback, useReducer } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isLoggedModelRowHidden } from './useExperimentLoggedModelListPageRowVisibility';\n\ntype ActionType =\n  | { type: 'SET_ORDER_BY'; orderByField: string; orderByAsc: boolean }\n  | { type: 'SET_COLUMN_VISIBILITY'; columnVisibility: Record<string, boolean> }\n  | { type: 'SET_RUN_VISIBILITY'; visibilityMode?: RUNS_VISIBILITY_MODE; rowUuid?: string; rowIndex?: number }\n  | { type: 'SET_ABC'; abc: string };\n\nconst useSafeDeferredValue: <T>(value: T) => T =\n  'useDeferredValue' in React && isFunction(React.useDeferredValue) ? React.useDeferredValue : identity;\n\n/**\n * Defines current state of the logged models table.\n */\nexport type LoggedModelsListPageState = {\n  orderByField?: string;\n  orderByAsc: boolean;\n  columnVisibility?: Record<string, boolean>;\n  rowVisibilityMode: RUNS_VISIBILITY_MODE;\n  rowVisibilityMap?: Record<string, boolean>;\n};\n\nexport const LoggedModelsListPageSortableColumns = ['creation_time'];\n\n/**\n * Provides state management for the logged models table.\n */\nexport const useLoggedModelsListPageState = () => {\n  const [state, dispatch] = useReducer(\n    (state: LoggedModelsListPageState, action: ActionType): LoggedModelsListPageState => {\n      if (action.type === 'SET_ORDER_BY') {\n        return { ...state, orderByField: action.orderByField, orderByAsc: action.orderByAsc };\n      }\n      if (action.type === 'SET_COLUMN_VISIBILITY') {\n        return { ...state, columnVisibility: action.columnVisibility };\n      }\n      if (action.type === 'SET_RUN_VISIBILITY') {\n        if (action.visibilityMode) {\n          return { ...state, rowVisibilityMode: action.visibilityMode, rowVisibilityMap: {} };\n        }\n        if (action.rowUuid && action.rowIndex !== undefined) {\n          const currentHidden = isLoggedModelRowHidden(\n            state.rowVisibilityMode,\n            action.rowUuid,\n            action.rowIndex,\n            state.rowVisibilityMap ?? {},\n          );\n          return { ...state, rowVisibilityMap: { ...state.rowVisibilityMap, [action.rowUuid]: currentHidden } };\n        }\n      }\n      return state;\n    },\n    {\n      orderByField: first(LoggedModelsListPageSortableColumns),\n      orderByAsc: false,\n      columnVisibility: {},\n      rowVisibilityMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n    },\n  );\n\n  const setOrderBy = useCallback(\n    (orderByField: string, orderByAsc: boolean) => dispatch({ type: 'SET_ORDER_BY', orderByField, orderByAsc }),\n    [],\n  );\n\n  const setColumnVisibility = useCallback(\n    (columnVisibility: Record<string, boolean>) => dispatch({ type: 'SET_COLUMN_VISIBILITY', columnVisibility }),\n    [],\n  );\n\n  const setRowVisibilityMode = useCallback(\n    (visibilityMode: RUNS_VISIBILITY_MODE) => dispatch({ type: 'SET_RUN_VISIBILITY', visibilityMode }),\n    [],\n  );\n\n  const toggleRowVisibility = useCallback(\n    (rowUuid: string, rowIndex: number) => dispatch({ type: 'SET_RUN_VISIBILITY', rowUuid, rowIndex }),\n    [],\n  );\n\n  const deferredState = useSafeDeferredValue(state);\n\n  return { state: deferredState, setOrderBy, setColumnVisibility, setRowVisibilityMode, toggleRowVisibility };\n};\n","import { createContext, useContext, useMemo } from 'react';\n\ntype ExperimentLoggedModelListPageTableContextType = {\n  moreResultsAvailable?: boolean;\n  isLoadingMore?: boolean;\n  loadMoreResults?: () => void;\n};\n\nconst ExperimentLoggedModelListPageTableContext = createContext<{\n  moreResultsAvailable?: boolean;\n  isLoadingMore?: boolean;\n  loadMoreResults?: () => void;\n}>({});\n\nexport const ExperimentLoggedModelListPageTableContextProvider = ({\n  loadMoreResults,\n  moreResultsAvailable,\n  isLoadingMore,\n  children,\n}: React.PropsWithChildren<ExperimentLoggedModelListPageTableContextType>) => {\n  const contextValue = useMemo(\n    () => ({\n      moreResultsAvailable,\n      loadMoreResults,\n      isLoadingMore,\n    }),\n    [moreResultsAvailable, loadMoreResults, isLoadingMore],\n  );\n\n  return (\n    <ExperimentLoggedModelListPageTableContext.Provider value={contextValue}>\n      {children}\n    </ExperimentLoggedModelListPageTableContext.Provider>\n  );\n};\n\nexport const useExperimentLoggedModelListPageTableContext = () => useContext(ExperimentLoggedModelListPageTableContext);\n","import { Button, Empty, Modal, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nconst DOCS_LINK =\n  'https://docs.google.com/document/d/1bjvwiEckOEMKTupt8ZxAmZLv7Es6Vy0BaAfFbjI1eYc/edit?tab=t.0#heading=h.yq2j4iyu8yqa';\n\nconst EXAMPLE_INSTALL_CODE = `pip install git+https://github.com/mlflow/mlflow@mlflow-3`;\nconst EXAMPLE_CODE = `\nimport pandas as pd\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nimport mlflow.sklearn\nfrom mlflow.entities import Dataset\n\n# Helper function to compute metrics\ndef compute_metrics(actual, predicted):\n    rmse = mean_squared_error(actual, predicted) \n    mae = mean_absolute_error(actual, predicted)\n    r2 = r2_score(actual, predicted)\n    return rmse, mae, r2\n\n# Load Iris dataset and prepare the DataFrame\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\niris_df['quality'] = (iris.target == 2).astype(int)  # Create a binary target for simplicity\n\n# Split into training and testing datasets\ntrain_df, test_df = train_test_split(iris_df, test_size=0.2, random_state=42)\n\n# Start a run to represent the training job\nwith mlflow.start_run() as training_run:\n    # Load the training dataset with MLflow. We will link training metrics to this dataset.\n    train_dataset: Dataset = mlflow.data.from_pandas(train_df, name=\"train\")\n    train_x = train_dataset.df.drop([\"quality\"], axis=1)\n    train_y = train_dataset.df[[\"quality\"]]\n\n    # Fit a model to the training dataset\n    lr = ElasticNet(alpha=0.5, l1_ratio=0.5, random_state=42)\n    lr.fit(train_x, train_y)\n\n    # Log the model, specifying its ElasticNet parameters (alpha, l1_ratio)\n    # As a new feature, the LoggedModel entity is linked to its name and params\n    model_info = mlflow.sklearn.log_model(\n        sk_model=lr,\n        name=\"elasticnet\",\n        params={\n            \"alpha\": 0.5,\n            \"l1_ratio\": 0.5,\n        },\n        input_example = train_x\n    )\n\n    # Inspect the LoggedModel and its properties\n    logged_model = mlflow.get_logged_model(model_info.model_id)\n    print(logged_model.model_id, logged_model.params)\n\n    # Evaluate the model on the training dataset and log metrics\n    # These metrics are now linked to the LoggedModel entity\n    predictions = lr.predict(train_x)\n    (rmse, mae, r2) = compute_metrics(train_y, predictions)\n    mlflow.log_metrics(\n        metrics={\n            \"rmse\": rmse,\n            \"r2\": r2,\n            \"mae\": mae,\n        },\n        model_id=logged_model.model_id,\n        dataset=train_dataset\n    )\n\n    # Inspect the LoggedModel, now with metrics\n    logged_model = mlflow.get_logged_model(model_info.model_id)\n    print(logged_model.model_id, logged_model.metrics)`.trim();\n\nexport const ExperimentLoggedModelListPageTableEmpty = ({\n  displayShowExampleButton = true,\n}: {\n  displayShowExampleButton?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const [isCodeExampleVisible, setIsCodeExampleVisible] = useState(false);\n\n  return (\n    <div\n      css={{\n        inset: 0,\n        top: theme.general.heightBase + theme.spacing.lg,\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 160,\n      }}\n    >\n      <Empty\n        title={\n          <FormattedMessage\n            defaultMessage=\"No models logged\"\n            description=\"Placeholder for empty models table on the logged models list page\"\n          />\n        }\n        description={\n          <FormattedMessage\n            defaultMessage=\"Your models will appear here once you log them using newest version of MLflow. <link>Learn more</link>.\"\n            description=\"Placeholder for empty models table on the logged models list page\"\n            values={{\n              link: (chunks) => (\n                <Typography.Link\n                  componentId=\"mlflow.logged_models.list.no_results_learn_more\"\n                  openInNewTab\n                  href={DOCS_LINK}\n                >\n                  {chunks}\n                </Typography.Link>\n              ),\n            }}\n          />\n        }\n        button={\n          displayShowExampleButton ? (\n            <Button\n              type=\"primary\"\n              componentId=\"mlflow.logged_models.list.show_example_code\"\n              onClick={() => setIsCodeExampleVisible(!isCodeExampleVisible)}\n            >\n              <FormattedMessage\n                defaultMessage=\"Show example code\"\n                description=\"Button for showing logged models quickstart example code\"\n              />\n            </Button>\n          ) : null\n        }\n      />\n      <Modal\n        size=\"wide\"\n        visible={isCodeExampleVisible}\n        onCancel={() => setIsCodeExampleVisible(false)}\n        title={\n          <FormattedMessage\n            defaultMessage=\"Example code\"\n            description=\"Title of the modal with the logged models quickstart example code\"\n          />\n        }\n        componentId=\"mlflow.logged_models.list.example_code_modal\"\n        okText={\n          <FormattedMessage\n            defaultMessage=\"Close\"\n            description=\"Button for closing modal with the logged models quickstart example code\"\n          />\n        }\n        onOk={() => setIsCodeExampleVisible(false)}\n      >\n        <Typography.Text>\n          <FormattedMessage\n            defaultMessage=\"Install <code>mlflow</code> from <code>mlflow-3</code> branch:\"\n            description=\"Instruction for installing MLflow from mlflow-3 branch in log MLflow 3 models\"\n            values={{ code: (chunks) => <code>{chunks}</code> }}\n          />\n        </Typography.Text>\n        <CodeSnippet language=\"text\">{EXAMPLE_INSTALL_CODE}</CodeSnippet>\n        <Spacer size=\"sm\" />\n        <FormattedMessage\n          defaultMessage=\"Run example training code:\"\n          description=\"Instruction for running example training code in order to log MLflow 3 models\"\n        />\n        <CodeSnippet language=\"python\">{EXAMPLE_CODE}</CodeSnippet>\n      </Modal>\n    </div>\n  );\n};\n","import {\n  Button,\n  Empty,\n  getShadowScrollStyles,\n  TableSkeleton,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport MLFlowAgGrid from '../../../common/components/ag-grid/AgGrid';\nimport { useExperimentAgGridTableStyles } from '../experiment-page/components/runs/ExperimentViewRunsTable';\nimport type { LoggedModelProto, RunEntity } from '../../types';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport {\n  ExperimentLoggedModelListPageTableContextProvider,\n  useExperimentLoggedModelListPageTableContext,\n} from './ExperimentLoggedModelListPageTableContext';\nimport { LoggedModelsListPageSortableColumns } from './hooks/useLoggedModelsListPagePageState';\nimport { type ColDef, type ColGroupDef, ColumnApi, type SortChangedEvent } from '@ag-grid-community/core';\nimport { FormattedMessage } from 'react-intl';\nimport { useRunsHighlightTableRow } from '../runs-charts/hooks/useRunsHighlightTableRow';\nimport { ExperimentLoggedModelListPageTableEmpty } from './ExperimentLoggedModelListPageTableEmpty';\n\nconst LOGGED_MODELS_GRID_ROW_HEIGHT = 36;\n\ninterface ExperimentLoggedModelListPageTableProps {\n  loggedModels?: LoggedModelProto[];\n  isLoading: boolean;\n  isLoadingMore: boolean;\n  error?: Error | null;\n  moreResultsAvailable?: boolean;\n  onLoadMore?: () => void;\n  onOrderByChange?: (orderByField: string, orderByAsc: boolean) => void;\n  orderByField?: string;\n  orderByAsc?: boolean;\n  columnDefs?: (ColDef | ColGroupDef)[];\n  columnVisibility?: Record<string, boolean>;\n  relatedRunsData?: RunEntity[] | null;\n  className?: string;\n  disableLoadMore?: boolean;\n  displayShowExampleButton?: boolean;\n}\n\nconst LoadMoreRowSymbol = Symbol('LoadMoreRow');\n\nconst rowDataGetter = ({ data }: { data: LoggedModelProto }) => data?.info?.model_id ?? '';\n\nexport const ExperimentLoggedModelListPageTable = ({\n  loggedModels,\n  isLoading,\n  isLoadingMore,\n  onLoadMore,\n  orderByField,\n  orderByAsc,\n  moreResultsAvailable,\n  onOrderByChange,\n  columnDefs = [],\n  columnVisibility,\n  relatedRunsData,\n  className,\n  disableLoadMore,\n  displayShowExampleButton = true,\n}: ExperimentLoggedModelListPageTableProps) => {\n  const { theme } = useDesignSystemTheme();\n  const styles = useExperimentAgGridTableStyles({ usingCustomHeaderComponent: false });\n\n  const columnApiRef = useRef<ColumnApi | null>(null);\n\n  const loggedModelsWithSourceRuns = useMemo(() => {\n    if (!loggedModels || !relatedRunsData) {\n      return loggedModels;\n    }\n    return loggedModels.map((loggedModel) => {\n      const sourceRun = relatedRunsData.find((run) => run?.info?.runUuid === loggedModel?.info?.source_run_id);\n      return { ...loggedModel, sourceRun };\n    });\n  }, [loggedModels, relatedRunsData]);\n\n  // We need to add \"Load more\" as a special row at the end\n  // of the result list\n  const loggedModelsListWithLoadMore = useMemo(() => {\n    if (isLoading) {\n      return undefined;\n    }\n    if (disableLoadMore || !loggedModelsWithSourceRuns || loggedModelsWithSourceRuns.length === 0) {\n      return loggedModelsWithSourceRuns;\n    }\n    return [...loggedModelsWithSourceRuns, LoadMoreRowSymbol];\n  }, [loggedModelsWithSourceRuns, isLoading, disableLoadMore]);\n\n  const sortChangedHandler = useCallback(\n    (event: SortChangedEvent) => {\n      for (const column of event.columnApi.getAllColumns() || []) {\n        const id = column?.getId();\n        if (LoggedModelsListPageSortableColumns.includes(id)) {\n          onOrderByChange?.(id, column.getSort() === 'asc');\n        }\n      }\n    },\n    [onOrderByChange],\n  );\n\n  const updateSortIndicator = useCallback((field?: string, asc?: boolean) => {\n    // Reflect the sort state in the ag-grid's column state\n    const column = columnApiRef.current?.getColumn(field);\n    if (column) {\n      column.setSort(asc ? 'asc' : 'desc');\n    }\n  }, []);\n\n  const updateColumnVisibility = useCallback((newColumnVisibility?: Record<string, boolean>) => {\n    // Reflect the visibility state in the ag-grid's column state\n    for (const column of columnApiRef?.current?.getAllColumns() ?? []) {\n      columnApiRef.current?.setColumnVisible(column, newColumnVisibility?.[column.getColId()] !== false);\n    }\n  }, []);\n\n  // Since ag-grid column API is not stateful, we use side effect to update the UI\n  useEffect(() => updateSortIndicator(orderByField, orderByAsc), [updateSortIndicator, orderByField, orderByAsc]);\n  useEffect(() => updateColumnVisibility(columnVisibility), [updateColumnVisibility, columnVisibility]);\n\n  const containsGroupedColumns = useMemo(() => columnDefs.some((col) => 'children' in col), [columnDefs]);\n\n  const containerElement = useRef<HTMLDivElement | null>(null);\n\n  const { cellMouseOverHandler, cellMouseOutHandler } = useRunsHighlightTableRow(\n    containerElement,\n    undefined,\n    true,\n    rowDataGetter,\n  );\n\n  return (\n    <ExperimentLoggedModelListPageTableContextProvider\n      loadMoreResults={onLoadMore}\n      moreResultsAvailable={moreResultsAvailable}\n      isLoadingMore={isLoadingMore}\n    >\n      <div\n        css={{\n          overflow: 'hidden',\n          flex: 1,\n          ...styles,\n          '.ag-cell': {\n            alignItems: 'center',\n          },\n          borderTop: `1px solid ${theme.colors.border}`,\n          '.ag-header-cell.is-checkbox-header-cell': {\n            paddingLeft: theme.spacing.sm,\n          },\n          '&& .ag-root-wrapper': { border: 0 },\n        }}\n        className={['ag-theme-balham', className].join(' ')}\n        ref={containerElement}\n      >\n        <MLFlowAgGrid\n          columnDefs={columnDefs}\n          rowData={loggedModelsListWithLoadMore}\n          rowHeight={LOGGED_MODELS_GRID_ROW_HEIGHT}\n          rowSelection=\"multiple\"\n          suppressRowClickSelection\n          suppressMovableColumns\n          getRowId={rowDataGetter}\n          suppressLoadingOverlay\n          suppressNoRowsOverlay\n          suppressColumnMoveAnimation\n          isFullWidthRow={({ rowNode }) => rowNode.data === LoadMoreRowSymbol}\n          fullWidthCellRenderer={LoadMoreRow}\n          onSortChanged={sortChangedHandler}\n          onGridReady={({ columnApi }) => {\n            columnApiRef.current = columnApi;\n            updateSortIndicator(orderByField, orderByAsc);\n            updateColumnVisibility(columnVisibility);\n          }}\n          onCellMouseOver={cellMouseOverHandler}\n          onCellMouseOut={cellMouseOutHandler}\n        />\n\n        {isLoading && (\n          <div\n            css={{\n              inset: 0,\n              top: (containsGroupedColumns ? theme.general.heightBase : 0) + theme.spacing.lg,\n              position: 'absolute',\n              paddingTop: theme.spacing.md,\n              paddingRight: theme.spacing.md,\n            }}\n          >\n            <TableSkeleton\n              lines={8}\n              label={\n                <FormattedMessage\n                  defaultMessage=\"Models loading\"\n                  description=\"Label for a loading spinner when table containing models is being loaded\"\n                />\n              }\n            />\n          </div>\n        )}\n        {!isLoading && loggedModels?.length === 0 && (\n          <ExperimentLoggedModelListPageTableEmpty displayShowExampleButton={displayShowExampleButton} />\n        )}\n      </div>\n    </ExperimentLoggedModelListPageTableContextProvider>\n  );\n};\n\nconst LoadMoreRow = () => {\n  const { theme } = useDesignSystemTheme();\n\n  const { moreResultsAvailable, loadMoreResults, isLoadingMore } = useExperimentLoggedModelListPageTableContext();\n\n  if (!moreResultsAvailable) {\n    return null;\n  }\n  return (\n    <div\n      css={{\n        pointerEvents: 'all',\n        userSelect: 'all',\n        padding: theme.spacing.sm,\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <Button\n        componentId=\"mlflow.logged_models.list.load_more\"\n        type=\"primary\"\n        size=\"small\"\n        onClick={loadMoreResults}\n        loading={isLoadingMore}\n      >\n        <FormattedMessage\n          defaultMessage=\"Load more\"\n          description=\"Label for a button to load more results in the logged models table\"\n        />\n      </Button>\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { LoggedModelProto } from '../../types';\nimport { getStableColorForRun } from '../../utils/RunNameUtils';\nimport { RunColorPill } from '../experiment-page/components/RunColorPill';\n\nexport const ExperimentLoggedModelTableNameCell = ({ data }: { data: LoggedModelProto }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!data.info?.experiment_id || !data.info?.model_id) {\n    return <>{data.info?.name}</>;\n  }\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n      {/* TODO: consider how we should determine the color of the model */}\n      <RunColorPill color={getStableColorForRun(data.info.model_id)} />\n      <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(data.info.experiment_id, data.info.model_id)}>\n        {data.info.name}\n      </Link>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport type { LoggedModelProto } from '../../types';\nimport { Overflow } from '@databricks/design-system';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\n\nexport const ExperimentLoggedModelTableDatasetCell = ({ data: loggedModel }: { data?: LoggedModelProto }) => {\n  const uniqueDatasets = useMemo(() => {\n    const allMetrics = loggedModel?.data?.metrics ?? [];\n    return allMetrics.reduce<{ dataset_name: string; dataset_digest: string; run_id: string | undefined }[]>(\n      (aggregate, { dataset_digest, dataset_name, run_id }) => {\n        if (\n          dataset_name &&\n          dataset_digest &&\n          !aggregate.find(\n            (dataset) => dataset.dataset_name === dataset_name && dataset.dataset_digest === dataset_digest,\n          )\n        ) {\n          aggregate.push({ dataset_name, dataset_digest, run_id });\n        }\n        return aggregate;\n      },\n      [],\n    );\n  }, [loggedModel]);\n\n  if (!uniqueDatasets.length) {\n    return <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {uniqueDatasets.map(({ dataset_digest, dataset_name, run_id }) => (\n        <ExperimentLoggedModelDatasetButton\n          datasetName={dataset_name}\n          datasetDigest={dataset_digest}\n          runId={run_id ?? null}\n          key={[dataset_name, dataset_digest].join('.')}\n        />\n      ))}\n    </Overflow>\n  );\n};\n","import { GraphQLExperimentRun, LoggedModelProto } from '../../types';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\n\ninterface LoggedModelWithSourceRun extends LoggedModelProto {\n  sourceRun?: GraphQLExperimentRun;\n}\n\nexport const ExperimentLoggedModelTableSourceRunCell = ({ data }: { data: LoggedModelWithSourceRun }) => {\n  if (data.info?.experiment_id && data.info?.source_run_id) {\n    return (\n      <Link to={Routes.getRunPageRoute(data.info?.experiment_id, data.info?.source_run_id)} target=\"_blank\">\n        {data.sourceRun?.info?.runName ?? data.info?.source_run_id}\n      </Link>\n    );\n  }\n  return data.info?.source_run_id || <>-</>;\n};\n","import { Button, DashIcon, DropdownMenu, useDesignSystemTheme, VisibleOffIcon } from '@databricks/design-system';\nimport { type LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelListPageRowVisibilityContext } from './hooks/useExperimentLoggedModelListPageRowVisibility';\nimport { ReactComponent as VisibleFillIcon } from '../../../common/static/icon-visible-fill.svg';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RUNS_VISIBILITY_MODE } from '../experiment-page/models/ExperimentPageUIState';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\n\nexport const ExperimentLoggedModelActionsCell = ({ data, rowIndex }: { data: LoggedModelProto; rowIndex: number }) => {\n  const { isRowHidden, toggleRowVisibility } = useExperimentLoggedModelListPageRowVisibilityContext();\n  const isHidden = isRowHidden(data.info?.model_id ?? '', rowIndex);\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Button\n      componentId=\"mlflow.logged_model.list_page.row_visibility_toggle\"\n      type=\"link\"\n      onClick={() => toggleRowVisibility(data.info?.model_id ?? '', rowIndex)}\n      icon={\n        isHidden ? (\n          <VisibleOffIcon css={{ color: theme.colors.textSecondary }} />\n        ) : (\n          <VisibleFillIcon css={{ color: theme.colors.textSecondary }} />\n        )\n      }\n    />\n  );\n};\n\nexport const ExperimentLoggedModelActionsHeaderCell = () => {\n  const intl = useIntl();\n  const { visibilityMode, usingCustomVisibility, setRowVisibilityMode } =\n    useExperimentLoggedModelListPageRowVisibilityContext();\n  const { theme } = useDesignSystemTheme();\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"mlflow.logged_model.list_page.global_row_visibility_toggle\"\n          type=\"link\"\n          data-testid=\"experiment-view-runs-visibility-column-header\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Toggle visibility of rows',\n            description:\n              'Accessibility label for the button that toggles visibility of rows in the experiment view logged models compare mode',\n          })}\n        >\n          {visibilityMode === RUNS_VISIBILITY_MODE.HIDEALL ? (\n            <VisibleOffIcon css={{ color: theme.colors.textSecondary }} />\n          ) : (\n            <VisibleFillIcon css={{ color: theme.colors.textSecondary }} />\n          )}\n        </Button>\n      </DropdownMenu.Trigger>\n\n      <DropdownMenu.Content>\n        <DropdownMenu.RadioGroup\n          componentId=\"mlflow.logged_model.list_page.global_row_visibility_toggle.options\"\n          value={visibilityMode}\n          onValueChange={(e) =>\n            setRowVisibilityMode(coerceToEnum(RUNS_VISIBILITY_MODE, e, RUNS_VISIBILITY_MODE.FIRST_10_RUNS))\n          }\n        >\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_10_RUNS}>\n            {/* Dropdown menu does not support indeterminate state, so we're doing it manually */}\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show first 10\"\n              description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_20_RUNS}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show first 20\"\n              description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.SHOWALL}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show all runs\"\n              description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.HIDEALL}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Hide all runs\"\n              description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n        </DropdownMenu.RadioGroup>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import type { ColDef, ColGroupDef } from '@ag-grid-community/core';\nimport { useMemo, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { ExperimentLoggedModelTableNameCell } from '../ExperimentLoggedModelTableNameCell';\nimport { ExperimentLoggedModelTableDateCell } from '../ExperimentLoggedModelTableDateCell';\nimport { ExperimentLoggedModelStatusIndicator } from '../ExperimentLoggedModelStatusIndicator';\nimport { ExperimentLoggedModelTableDatasetCell } from '../ExperimentLoggedModelTableDatasetCell';\nimport { LoggedModelProto } from '../../../types';\nimport { compact, isEqual, keys, uniq } from 'lodash';\nimport { ExperimentLoggedModelTableSourceRunCell } from '../ExperimentLoggedModelTableSourceRunCell';\nimport {\n  ExperimentLoggedModelActionsCell,\n  ExperimentLoggedModelActionsHeaderCell,\n} from '../ExperimentLoggedModelActionsCell';\n\n/**\n * Utility hook that memoizes value based on deep comparison.\n * Helps to regenerate columns only if underlying dependencies change.\n */\nconst useMemoizeColumns = <T,>(factory: () => T, deps: unknown[]): T => {\n  const ref = useRef<{ deps: unknown[]; value: T }>();\n\n  if (!ref.current || !isEqual(deps, ref.current.deps)) {\n    ref.current = { deps, value: factory() };\n  }\n\n  return ref.current.value;\n};\n\nconst ungroupedMetricColumnKey = Symbol('ungroupedMetricColumnKey');\n\nconst isUngroupedMetricColumnKey = (key: string | symbol): key is symbol => key === ungroupedMetricColumnKey;\n\nexport enum ExperimentLoggedModelListPageKnownColumnGroups {\n  Attributes = 'attributes',\n  Params = 'params',\n}\n\nexport enum ExperimentLoggedModelListPageKnownColumns {\n  RelationshipType = 'relationship_type',\n  Select = 'select',\n  Name = 'name',\n  Status = 'status',\n  CreationTime = 'creation_time',\n  SourceRun = 'source_run_id',\n  Dataset = 'dataset',\n}\n\nexport const ExperimentLoggedModelListPageStaticColumns: string[] = [\n  ExperimentLoggedModelListPageKnownColumns.Select,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n];\n\nconst extractMetricGroups = (loggedModels: LoggedModelProto[]) => {\n  const result: Record<string | symbol, string[]> = {};\n  for (const loggedModel of loggedModels) {\n    for (const metric of loggedModel?.data?.metrics ?? []) {\n      const datasetName = metric.dataset_name || ungroupedMetricColumnKey;\n\n      if (!result[datasetName]) {\n        result[datasetName] = [];\n      }\n      if (metric.key && !result[datasetName].includes(metric.key)) {\n        result[datasetName].push(metric.key);\n      }\n    }\n  }\n  return result;\n};\n\nconst defaultColumnSet = [\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.SourceRun,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\n/**\n * Returns the columns for the logged model list table.\n * Metric column IDs follow the structure:\n * - `metrics.<datasetName>.<metricKey>` for metrics grouped by dataset\n * - `metrics.<metricKey>` for ungrouped metrics\n */\nexport const useExperimentLoggedModelListPageTableColumns = ({\n  columnVisibility = {},\n  supportedAttributeColumnKeys = defaultColumnSet,\n  isCompactMode = false,\n  loggedModels = [],\n  disablePinnedColumns = false,\n  disableOrderBy = false,\n}: {\n  loggedModels?: LoggedModelProto[];\n  columnVisibility?: Record<string, boolean>;\n  isCompactMode?: boolean;\n  disablePinnedColumns?: boolean;\n  supportedAttributeColumnKeys?: string[];\n  disableOrderBy?: boolean;\n}) => {\n  const datasetMetricGroups = useMemo(() => extractMetricGroups(loggedModels), [loggedModels]);\n  const datasetMetricKeys = useMemo(\n    () => [...keys(datasetMetricGroups), ...Object.getOwnPropertySymbols(datasetMetricGroups)],\n    [datasetMetricGroups],\n  );\n  const parameterKeys = useMemo(\n    () => compact(uniq(loggedModels.map((loggedModel) => loggedModel?.data?.params?.map((param) => param.key)).flat())),\n    [loggedModels],\n  );\n\n  const intl = useIntl();\n\n  return useMemoizeColumns(() => {\n    const attributeColumns: ColDef[] = [\n      {\n        colId: ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n        headerName: 'Type',\n        sortable: false,\n        valueGetter: ({ data }) => {\n          return data.direction === 'input'\n            ? intl.formatMessage({\n                defaultMessage: 'Input',\n                description:\n                  'Label indicating that the logged model was the input of the experiment run. Displayed in logged model list table on the run page.',\n              })\n            : intl.formatMessage({\n                defaultMessage: 'Output',\n                description:\n                  'Label indicating that the logged model was the output of the experiment run Displayed in logged model list table on the run page.',\n              });\n        },\n        pinned: !disablePinnedColumns ? 'left' : undefined,\n        resizable: false,\n        width: 100,\n      },\n      {\n        headerName: intl.formatMessage({\n          defaultMessage: 'Model name',\n          description: 'Header title for the model name column in the logged model list table',\n        }),\n        colId: ExperimentLoggedModelListPageKnownColumns.Name,\n        cellRenderer: ExperimentLoggedModelTableNameCell,\n        resizable: true,\n        pinned: !disablePinnedColumns ? 'left' : undefined,\n        minWidth: 140,\n        flex: 1,\n      },\n      {\n        headerName: intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Header title for the status column in the logged model list table',\n        }),\n        cellRenderer: ExperimentLoggedModelStatusIndicator,\n        colId: ExperimentLoggedModelListPageKnownColumns.Status,\n        pinned: !disablePinnedColumns ? 'left' : undefined,\n        width: 140,\n        resizable: false,\n      },\n      {\n        headerName: intl.formatMessage({\n          defaultMessage: 'Created',\n          description: 'Header title for the creation timestamp column in the logged model list table',\n        }),\n        field: 'info.creation_timestamp_ms',\n        colId: ExperimentLoggedModelListPageKnownColumns.CreationTime,\n        cellRenderer: ExperimentLoggedModelTableDateCell,\n        resizable: true,\n        pinned: !disablePinnedColumns ? 'left' : undefined,\n        sortable: !disableOrderBy,\n        sortingOrder: ['desc', 'asc'],\n        comparator: () => 0,\n      },\n      {\n        headerName: intl.formatMessage({\n          defaultMessage: 'Source run',\n          description: 'Header title for the source run column in the logged model list table',\n        }),\n        colId: ExperimentLoggedModelListPageKnownColumns.SourceRun,\n        cellRenderer: ExperimentLoggedModelTableSourceRunCell,\n        resizable: true,\n        pinned: !disablePinnedColumns ? 'left' : undefined,\n      },\n\n      {\n        headerName: intl.formatMessage({\n          defaultMessage: 'Dataset',\n          description: 'Header title for the dataset column in the logged model list table',\n        }),\n        colId: ExperimentLoggedModelListPageKnownColumns.Dataset,\n        cellRenderer: ExperimentLoggedModelTableDatasetCell,\n        resizable: true,\n        pinned: !disablePinnedColumns ? 'left' : undefined,\n      },\n    ];\n\n    const columns: ColGroupDef[] = [\n      {\n        groupId: 'attributes',\n        headerName: intl.formatMessage({\n          defaultMessage: 'Model attributes',\n          description: 'Header title for the model attributes section of the logged model list table',\n        }),\n        children: attributeColumns.filter(\n          (column) => !column.colId || supportedAttributeColumnKeys.includes(column.colId),\n        ),\n      },\n    ];\n\n    datasetMetricKeys.forEach((datasetName) => {\n      const headerName = typeof datasetName === 'symbol' ? '' : datasetName;\n      columns.push({\n        headerName,\n        groupId: isUngroupedMetricColumnKey(datasetName) ? 'metrics' : `metrics.${datasetName}`,\n        children: datasetMetricGroups[datasetName].map((metricKey) => ({\n          headerName: metricKey,\n          hide:\n            columnVisibility[\n              isUngroupedMetricColumnKey(datasetName) ? `metrics.${metricKey}` : `metrics.${datasetName}.${metricKey}`\n            ] === false,\n          colId: isUngroupedMetricColumnKey(datasetName)\n            ? `metrics.${metricKey}`\n            : `metrics.${datasetName}.${metricKey}`,\n          valueGetter: ({ data }: { data: LoggedModelProto }) => {\n            // NB: Looping through metric values might not seem to be most efficient, but considering the number\n            // metrics we render on the screen it might be more efficient than creating a lookup table.\n            // Might be revisited if performance becomes an issue.\n            for (const metric of data.data?.metrics ?? []) {\n              if (metric.key === metricKey) {\n                if (metric.dataset_name === datasetName || (typeof datasetName === 'symbol' && !metric.dataset_name)) {\n                  return metric.value;\n                }\n              }\n            }\n            return undefined;\n          },\n          resizable: true,\n        })),\n      });\n    });\n\n    if (parameterKeys.length > 0) {\n      columns.push({\n        headerName: intl.formatMessage({\n          defaultMessage: 'Parameters',\n          description: 'Header title for the parameters section of the logged model list table',\n        }),\n        groupId: 'params',\n        children: parameterKeys.map((paramKey) => ({\n          headerName: paramKey,\n          colId: `params.${paramKey}`,\n          hide: columnVisibility[`params.${paramKey}`] === false,\n          valueGetter: ({ data }: { data: LoggedModelProto }) => {\n            for (const param of data.data?.params ?? []) {\n              if (param.key === paramKey) {\n                return param.value;\n              }\n            }\n            return undefined;\n          },\n          resizable: true,\n        })),\n      });\n    }\n\n    if (isCompactMode) {\n      return [\n        {\n          headerCheckboxSelection: false,\n          checkboxSelection: false,\n          width: 40,\n          maxWidth: 40,\n          resizable: false,\n          colId: ExperimentLoggedModelListPageKnownColumns.Select,\n          cellRenderer: ExperimentLoggedModelActionsCell,\n          headerComponent: ExperimentLoggedModelActionsHeaderCell,\n          flex: undefined,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Model name',\n            description: 'Header title for the model name column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Name,\n          cellRenderer: ExperimentLoggedModelTableNameCell,\n          resizable: true,\n          flex: 1,\n        },\n      ];\n    }\n\n    return columns;\n  }, [datasetMetricGroups, datasetMetricKeys, parameterKeys, isCompactMode, supportedAttributeColumnKeys]);\n};\n","import { createContext, useCallback, useContext, useMemo, useRef } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../experiment-page/models/ExperimentPageUIState';\nimport { determineIfRowIsHidden } from '../../experiment-page/utils/experimentPage.common-row-utils';\nimport { isUndefined } from 'lodash';\n\nconst ExperimentLoggedModelListPageRowVisibilityContext = createContext<{\n  isRowHidden: (rowUuid: string, rowIndex: number) => boolean;\n  setRowVisibilityMode: (visibilityMode: RUNS_VISIBILITY_MODE) => void;\n  toggleRowVisibility: (rowUuid: string, rowIndex: number) => void;\n  visibilityMode: RUNS_VISIBILITY_MODE;\n  usingCustomVisibility: boolean;\n}>({\n  isRowHidden: () => false,\n  setRowVisibilityMode: () => {},\n  toggleRowVisibility: () => {},\n  visibilityMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n  usingCustomVisibility: false,\n});\n\n// Utility function that determines if a particular table row should be hidden,\n// based on the selected mode, position on the list and the visibility map.\nexport const isLoggedModelRowHidden = (\n  rowsVisibilityMode: RUNS_VISIBILITY_MODE,\n  runUuid: string,\n  rowIndex: number,\n  runsVisibilityMap: Record<string, boolean>,\n) => {\n  // If using rows visibility map, we should always use it to determine visibility\n  if (!isUndefined(runsVisibilityMap[runUuid])) {\n    return !runsVisibilityMap[runUuid];\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.HIDEALL) {\n    return true;\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.FIRST_10_RUNS) {\n    return rowIndex >= 10;\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.FIRST_20_RUNS) {\n    return rowIndex >= 20;\n  }\n\n  return false;\n};\n\nexport const ExperimentLoggedModelListPageRowVisibilityContextProvider = ({\n  children,\n  visibilityMap = {},\n  visibilityMode,\n  setRowVisibilityMode,\n  toggleRowVisibility,\n}: {\n  visibilityMap?: Record<string, boolean>;\n  visibilityMode: RUNS_VISIBILITY_MODE;\n  children: React.ReactNode;\n  setRowVisibilityMode: (visibilityMode: RUNS_VISIBILITY_MODE) => void;\n  toggleRowVisibility: (rowUuid: string, rowIndex: number) => void;\n}) => {\n  const isRowHidden = useCallback(\n    (rowUuid: string, rowIndex: number) => isLoggedModelRowHidden(visibilityMode, rowUuid, rowIndex, visibilityMap),\n    [visibilityMap, visibilityMode],\n  );\n\n  const usingCustomVisibility = useMemo(() => Object.keys(visibilityMap).length > 0, [visibilityMap]);\n\n  const contextValue = useMemo(\n    () => ({ isRowHidden, setRowVisibilityMode, toggleRowVisibility, visibilityMode, usingCustomVisibility }),\n    [isRowHidden, setRowVisibilityMode, toggleRowVisibility, visibilityMode, usingCustomVisibility],\n  );\n\n  return (\n    <ExperimentLoggedModelListPageRowVisibilityContext.Provider value={contextValue}>\n      {children}\n    </ExperimentLoggedModelListPageRowVisibilityContext.Provider>\n  );\n};\n\nexport const useExperimentLoggedModelListPageRowVisibilityContext = () =>\n  useContext(ExperimentLoggedModelListPageRowVisibilityContext);\n"],"names":["AgGridFontInjector","domElementReference","useRef","useEffect","current","getRootNode","document","injectedStyleElement","createElement","className","appendChild","createTextNode","head","remove","_jsx","ref","props","_jsxs","_Fragment","children","AgGridReact","modules","ClientSideRowModelModule","METRIC_AGGREGATE_GROUP_ID","defaultExpandedTreeGroups","ExperimentLoggedModelListPageKnownColumnGroups","Attributes","_ref4","name","styles","ExperimentLoggedModelListPageColumnSelector","_ref","onUpdateColumns","columnVisibility","columnDefs","disabled","customTrigger","intl","useIntl","leafColumnIds","treeData","useMemo","_groupedColumnDefinit","groupedColumnDefinitions","attributeColumnGroup","find","col","groupId","_attributeColumnGroup","push","filter","_ref2","colId","ExperimentLoggedModelListPageStaticColumns","includes","metricColumnGroups","_col$groupId","startsWith","map","headerName","ungroupedColumnGroup","formatMessage","id","defaultMessage","length","paramColumnGroup","Params","buildDuboisTreeBranch","_ref3","_col$groupId2","_col$headerName","_col$children$map","_col$children","key","title","compact","DropdownMenu","Root","Trigger","asChild","Button","componentId","icon","ColumnsIcon","FormattedMessage","Content","css","Tree","mode","showLine","defaultExpandedKeys","defaultCheckedKeys","onCheck","checkedKeys","keys","checked","useSafeDeferredValue","isFunction","React","identity","LoggedModelsListPageSortableColumns","useLoggedModelsListPageState","state","dispatch","useReducer","action","type","orderByField","orderByAsc","visibilityMode","rowVisibilityMode","rowVisibilityMap","rowUuid","undefined","rowIndex","_state$rowVisibilityM","currentHidden","isLoggedModelRowHidden","first","RUNS_VISIBILITY_MODE","FIRST_10_RUNS","setOrderBy","useCallback","setColumnVisibility","setRowVisibilityMode","toggleRowVisibility","ExperimentLoggedModelListPageTableContext","createContext","ExperimentLoggedModelListPageTableContextProvider","loadMoreResults","moreResultsAvailable","isLoadingMore","contextValue","Provider","value","EXAMPLE_CODE","trim","ExperimentLoggedModelListPageTableEmpty","displayShowExampleButton","theme","useDesignSystemTheme","isCodeExampleVisible","setIsCodeExampleVisible","useState","_css","inset","top","general","heightBase","spacing","lg","position","display","justifyContent","alignItems","minHeight","Empty","description","values","link","chunks","Typography","Link","openInNewTab","href","button","onClick","Modal","size","visible","onCancel","okText","onOk","Text","code","CodeSnippet","language","Spacer","LoadMoreRowSymbol","Symbol","rowDataGetter","_data$info$model_id","_data$info","data","info","model_id","ExperimentLoggedModelListPageTable","loggedModels","isLoading","onLoadMore","onOrderByChange","relatedRunsData","disableLoadMore","useExperimentAgGridTableStyles","usingCustomHeaderComponent","columnApiRef","loggedModelsWithSourceRuns","loggedModel","sourceRun","run","_run$info","_loggedModel$info","runUuid","source_run_id","loggedModelsListWithLoadMore","sortChangedHandler","event","column","columnApi","getAllColumns","getId","getSort","updateSortIndicator","field","asc","_columnApiRef$current","getColumn","setSort","updateColumnVisibility","newColumnVisibility","_columnApiRef$current2","_columnApiRef$current3","_columnApiRef$current4","setColumnVisible","getColId","containsGroupedColumns","some","containerElement","cellMouseOverHandler","cellMouseOutHandler","useRunsHighlightTableRow","overflow","flex","borderTop","colors","border","paddingLeft","sm","join","MLFlowAgGrid","rowData","rowHeight","rowSelection","suppressRowClickSelection","suppressMovableColumns","getRowId","suppressLoadingOverlay","suppressNoRowsOverlay","suppressColumnMoveAnimation","isFullWidthRow","rowNode","fullWidthCellRenderer","LoadMoreRow","onSortChanged","onGridReady","onCellMouseOver","onCellMouseOut","paddingTop","md","paddingRight","TableSkeleton","lines","label","useContext","pointerEvents","userSelect","padding","loading","ExperimentLoggedModelTableNameCell","_data$info2","_data$info3","experiment_id","gap","RunColorPill","color","getStableColorForRun","to","Routes","getExperimentLoggedModelDetailsPageRoute","ExperimentLoggedModelTableDatasetCell","uniqueDatasets","_loggedModel$data$met","_loggedModel$data","metrics","reduce","aggregate","dataset_digest","dataset_name","run_id","dataset","Overflow","ExperimentLoggedModelDatasetButton","datasetName","datasetDigest","runId","ExperimentLoggedModelTableSourceRunCell","_data$info6","_data$info4","_data$sourceRun$info$","_data$sourceRun","_data$sourceRun$info","_data$info5","getRunPageRoute","target","runName","ExperimentLoggedModelActionsCell","isRowHidden","useExperimentLoggedModelListPageRowVisibilityContext","isHidden","_data$info$model_id2","VisibleOffIcon","textSecondary","VisibleFillIcon","ExperimentLoggedModelActionsHeaderCell","usingCustomVisibility","modal","HIDEALL","RadioGroup","onValueChange","e","coerceToEnum","RadioItem","ItemIndicator","DashIcon","FIRST_20_RUNS","SHOWALL","ungroupedMetricColumnKey","isUngroupedMetricColumnKey","ExperimentLoggedModelListPageKnownColumns","Select","Name","CreationTime","defaultColumnSet","Status","SourceRun","Dataset","useExperimentLoggedModelListPageTableColumns","supportedAttributeColumnKeys","isCompactMode","disablePinnedColumns","disableOrderBy","datasetMetricGroups","result","metric","extractMetricGroups","datasetMetricKeys","Object","getOwnPropertySymbols","parameterKeys","uniq","_loggedModel$data2","_loggedModel$data2$pa","params","param","flat","useMemoizeColumns","factory","deps","isEqual","attributeColumns","RelationshipType","sortable","valueGetter","direction","pinned","resizable","width","cellRenderer","minWidth","ExperimentLoggedModelStatusIndicator","ExperimentLoggedModelTableDateCell","sortingOrder","comparator","columns","forEach","metricKey","hide","_data$data$metrics","_data$data","paramKey","_data$data$params","_data$data2","headerCheckboxSelection","checkboxSelection","maxWidth","headerComponent","ExperimentLoggedModelListPageRowVisibilityContext","rowsVisibilityMode","runsVisibilityMap","isUndefined","ExperimentLoggedModelListPageRowVisibilityContextProvider","visibilityMap"],"sourceRoot":""}