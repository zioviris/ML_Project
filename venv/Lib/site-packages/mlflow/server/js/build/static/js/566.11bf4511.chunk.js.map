{"version":3,"file":"static/js/566.11bf4511.chunk.js","mappings":"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","sources":["common/components/CollapsibleSection.tsx","common/components/Descriptions.tsx","common/components/Prompt.tsx","common/components/EditableNote.tsx","common/components/tables/EditableFormTable.tsx","common/components/EditableTagsTableView.tsx","model-registry/components/aliases/ModelVersionAliasSelect.tsx","model-registry/hooks/useEditRegisteredModelAliasesModal.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { SectionErrorBoundary } from './error-boundaries/SectionErrorBoundary';\nimport {\n  ChevronRightIcon,\n  useDesignSystemTheme,\n  Accordion,\n  DesignSystemThemeInterface,\n  importantify,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\ninterface CollapsibleSectionProps {\n  title: string | any;\n  forceOpen?: boolean;\n  children: React.ReactNode;\n  showServerError?: boolean;\n  defaultCollapsed?: boolean;\n  onChange?: (key: string | string[]) => void;\n  className?: string;\n  componentId?: string;\n}\n\n// Custom styles to make <Accordion> look like previously used <Collapse> from antd\nconst getAccordionStyles = ({\n  theme,\n  getPrefixedClassName,\n}: Pick<DesignSystemThemeInterface, 'theme' | 'getPrefixedClassName'>) => {\n  const clsPrefix = getPrefixedClassName('collapse');\n\n  const classItem = `.${clsPrefix}-item`;\n  const classHeader = `.${clsPrefix}-header`;\n  const classContentBox = `.${clsPrefix}-content-box`;\n\n  return {\n    fontSize: 14,\n    [`& > ${classItem} > ${classHeader}`]: {\n      paddingLeft: 0,\n      paddingTop: 12,\n      paddingBottom: 12,\n      display: 'flex',\n      alignItems: 'center',\n      fontSize: 16,\n      fontWeight: 'normal',\n      lineHeight: theme.typography.lineHeightLg,\n    },\n    [classContentBox]: {\n      padding: `${theme.spacing.xs}px 0 ${theme.spacing.md}px 0`,\n    },\n  };\n};\n\nexport function CollapsibleSection(props: CollapsibleSectionProps) {\n  const {\n    title,\n    forceOpen,\n    showServerError,\n    defaultCollapsed,\n    onChange,\n    className,\n    componentId = 'mlflow.common.generic_collapsible_section',\n  } = props;\n\n  // We need to spread `activeKey` into <Collapse/> as an optional prop because its enumerability\n  // affects rendering, i.e. passing `activeKey={undefined}` is different from not passing activeKey\n  const activeKeyProp = forceOpen && { activeKey: ['1'] };\n  const defaultActiveKey = defaultCollapsed ? null : ['1'];\n\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n  const { formatMessage } = useIntl();\n\n  const getExpandIcon = useCallback(\n    ({ isActive }: { isActive?: boolean }) => (\n      <div\n        css={importantify({ width: theme.general.heightBase / 2, transform: isActive ? 'rotate(90deg)' : undefined })}\n      >\n        <ChevronRightIcon\n          css={{\n            svg: { width: theme.general.heightBase / 2, height: theme.general.heightBase / 2 },\n          }}\n          aria-label={\n            isActive\n              ? formatMessage(\n                  {\n                    defaultMessage: 'collapse {title}',\n                    description: 'Common component > collapsible section > alternative label when expand',\n                  },\n                  { title },\n                )\n              : formatMessage(\n                  {\n                    defaultMessage: 'expand {title}',\n                    description: 'Common component > collapsible section > alternative label when collapsed',\n                  },\n                  { title },\n                )\n          }\n        />\n      </div>\n    ),\n    [theme, title, formatMessage],\n  );\n\n  return (\n    <Accordion\n      componentId={componentId}\n      {...activeKeyProp}\n      dangerouslyAppendEmotionCSS={getAccordionStyles({ theme, getPrefixedClassName })}\n      dangerouslySetAntdProps={{\n        className,\n        expandIconPosition: 'left',\n        expandIcon: getExpandIcon,\n      }}\n      defaultActiveKey={defaultActiveKey ?? undefined}\n      onChange={onChange}\n    >\n      <Accordion.Panel header={title} key=\"1\">\n        <SectionErrorBoundary showServerError={showServerError}>{props.children}</SectionErrorBoundary>\n      </Accordion.Panel>\n    </Accordion>\n  );\n}\n","import { Typography } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\n\nexport interface DescriptionsProps {\n  columns?: number;\n}\n\nexport interface DescriptionsItemProps {\n  label: string | React.ReactNode;\n  labelSize?: 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\n  span?: number;\n}\n\n/**\n * A component that displays the informative data in a key-value\n * fashion. Behaves similarly to antd's <Descriptions /> component.\n * If the number of columns is specified, then the key-values will\n * be displayed as such and will always be that number of columns\n * regardless of the width of the window.\n * If the number of columns is not specified, then the number of\n * columns will vary based on the size of the window.\n *\n * The following example will display four key-value descriptions\n * using two columns, which will result in data displayed in two rows:\n *\n * @example\n * <Descriptions columns={2}>\n *   <Descriptions.Item label=\"The label\">The value</Descriptions.Item>\n *   <Descriptions.Item label=\"Another label\">Another value</Descriptions.Item>\n *   <Descriptions.Item label=\"A label\">A value</Descriptions.Item>\n *   <Descriptions.Item label=\"Extra label\">Extra value</Descriptions.Item>\n * </Descriptions>\n */\nexport const Descriptions = ({ children, columns }: React.PropsWithChildren<DescriptionsProps>) => {\n  const instanceStyles = columns ? styles.descriptionsArea(columns) : styles.autoFitArea;\n\n  return <div css={instanceStyles}>{children}</div>;\n};\n\nDescriptions.Item = ({ label, labelSize = 'sm', children, span }: React.PropsWithChildren<DescriptionsItemProps>) => {\n  return (\n    <div data-test-id=\"descriptions-item\" css={styles.descriptionItem(span || 1)}>\n      <div data-test-id=\"descriptions-item-label\" css={{ whiteSpace: 'nowrap' }}>\n        <Typography.Text size={labelSize} color=\"secondary\">\n          {label}\n        </Typography.Text>\n      </div>\n      <div data-test-id=\"descriptions-item-colon\" css={styles.colon}>\n        <Typography.Text size={labelSize} color=\"secondary\">\n          :\n        </Typography.Text>\n      </div>\n      <div data-test-id=\"descriptions-item-content\">{children}</div>\n    </div>\n  );\n};\n\nconst styles = {\n  descriptionsArea: (columnCount: number) => (theme: Theme) => ({\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columnCount}, minmax(100px, 1fr))`,\n    columnGap: theme.spacing.sm,\n    rowGap: theme.spacing.md,\n    marginBottom: theme.spacing.lg,\n  }),\n  autoFitArea: (theme: Theme) => ({\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',\n    gridGap: theme.spacing.md,\n  }),\n  descriptionItem: (span: number) => ({\n    display: 'flex',\n    gridColumn: `span ${span}`,\n  }),\n  colon: {\n    margin: '0 8px 0 0',\n  },\n};\n","import React from 'react';\nimport { UNSAFE_NavigationContext } from '../utils/RoutingUtils';\n\nconst useNavigationBlock = () => {\n  return (React.useContext(UNSAFE_NavigationContext) as any).navigator.block;\n};\n\nexport interface PromptProps {\n  when: boolean;\n  message: string;\n}\n\n/**\n * Component confirms navigating away by displaying prompt if given condition is met.\n * Uses react-router v6 API.\n */\nexport const Prompt = ({ when, message }: PromptProps) => {\n  const block = useNavigationBlock();\n\n  React.useEffect(() => {\n    if (!when) return;\n\n    const unblock = block?.(() => {\n      // eslint-disable-next-line no-alert\n      return window.confirm(message);\n    });\n\n    // eslint-disable-next-line consistent-return\n    return unblock;\n  }, [message, block, when]);\n\n  return null;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Alert, Button, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { Prompt } from './Prompt';\nimport ReactMde, { SvgIcon } from 'react-mde';\nimport { forceAnchorTagNewTab, getMarkdownConverter, sanitizeConvertedHtml } from '../utils/MarkdownUtils';\nimport './EditableNote.css';\nimport { FormattedMessage, IntlShape, injectIntl } from 'react-intl';\n\ntype EditableNoteImplProps = {\n  defaultMarkdown?: string;\n  defaultSelectedTab?: string;\n  onSubmit?: (...args: any[]) => any;\n  onCancel?: (...args: any[]) => any;\n  showEditor?: boolean;\n  saveText?: any;\n  toolbarCommands?: any[];\n  maxEditorHeight?: number;\n  minEditorHeight?: number;\n  childProps?: any;\n  intl: IntlShape;\n};\n\ntype EditableNoteImplState = any;\n\nconst getReactMdeIcon = (name: string) => <TooltipIcon name={name} />;\n\nexport class EditableNoteImpl extends Component<EditableNoteImplProps, EditableNoteImplState> {\n  static defaultProps = {\n    defaultMarkdown: '',\n    defaultSelectedTab: 'write',\n    showEditor: false,\n    saveText: (\n      <FormattedMessage defaultMessage=\"Save\" description=\"Default text for save button on editable notes in MLflow\" />\n    ),\n    confirmLoading: false,\n    toolbarCommands: [\n      ['header', 'bold', 'italic', 'strikethrough'],\n      ['link', 'quote', 'code', 'image'],\n      ['unordered-list', 'ordered-list', 'checked-list'],\n    ],\n    maxEditorHeight: 500,\n    minEditorHeight: 200,\n    childProps: {},\n  };\n\n  state = {\n    markdown: this.props.defaultMarkdown,\n    selectedTab: this.props.defaultSelectedTab,\n    error: null,\n  };\n\n  converter = getMarkdownConverter();\n\n  handleMdeValueChange = (markdown: any) => {\n    this.setState({ markdown });\n  };\n\n  handleTabChange = (selectedTab: any) => {\n    this.setState({ selectedTab });\n  };\n\n  handleSubmitClick = () => {\n    const { onSubmit } = this.props;\n    const { markdown } = this.state;\n    this.setState({ confirmLoading: true });\n    if (onSubmit) {\n      return Promise.resolve(onSubmit(markdown))\n        .then(() => {\n          this.setState({ confirmLoading: false, error: null });\n        })\n        .catch((e) => {\n          this.setState({\n            confirmLoading: false,\n            error:\n              e && e.getMessageField\n                ? e.getMessageField()\n                : this.props.intl.formatMessage({\n                    defaultMessage: 'Failed to submit',\n                    description: 'Message text for failing to save changes in editable note in MLflow',\n                  }),\n          });\n        });\n    }\n    return null;\n  };\n\n  handleCancelClick = () => {\n    // Reset to the last defaultMarkdown passed in as props.\n    this.setState({\n      markdown: this.props.defaultMarkdown,\n      selectedTab: this.props.defaultSelectedTab,\n    });\n    const { onCancel } = this.props;\n    if (onCancel) {\n      onCancel();\n    }\n  };\n\n  contentHasChanged() {\n    return this.state.markdown !== this.props.defaultMarkdown;\n  }\n\n  renderActions() {\n    // @ts-expect-error TS(2339): Property 'confirmLoading' does not exist on type '... Remove this comment to see the full error message\n    const { confirmLoading } = this.state;\n    return (\n      <div className=\"editable-note-actions\" data-testid=\"editable-note-actions\">\n        <div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_114\"\n            type=\"primary\"\n            className=\"editable-note-save-button\"\n            onClick={this.handleSubmitClick}\n            disabled={!this.contentHasChanged() || confirmLoading}\n            loading={confirmLoading}\n            data-testid=\"editable-note-save-button\"\n          >\n            {this.props.saveText}\n          </Button>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_124\"\n            htmlType=\"button\"\n            className=\"editable-note-cancel-button\"\n            onClick={this.handleCancelClick}\n            disabled={confirmLoading}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Text for the cancel button in an editable note in MLflow\"\n            />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  getSanitizedHtmlContent() {\n    const { markdown } = this.state;\n    if (markdown) {\n      const sanitized = sanitizeConvertedHtml(this.converter.makeHtml(markdown));\n      return forceAnchorTagNewTab(sanitized);\n    }\n    return null;\n  }\n\n  render() {\n    const { showEditor } = this.props;\n    const { markdown, selectedTab, error } = this.state;\n    const htmlContent = this.getSanitizedHtmlContent();\n    return (\n      <div className=\"note-view-outer-container\" data-testid=\"note-view-outer-container\">\n        {showEditor ? (\n          <React.Fragment>\n            <div className=\"note-view-text-area\">\n              <ReactMde\n                value={markdown}\n                minEditorHeight={this.props.minEditorHeight}\n                maxEditorHeight={this.props.maxEditorHeight}\n                minPreviewHeight={50}\n                childProps={this.props.childProps}\n                toolbarCommands={this.props.toolbarCommands}\n                onChange={this.handleMdeValueChange}\n                // @ts-expect-error TS(2322): Type 'string' is not assignable to type '\"write\" |... Remove this comment to see the full error message\n                selectedTab={selectedTab}\n                onTabChange={this.handleTabChange}\n                // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n                generateMarkdownPreview={(md) => Promise.resolve(this.getSanitizedHtmlContent(md))}\n                getIcon={getReactMdeIcon}\n              />\n            </div>\n            {error && (\n              <Alert\n                componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_178\"\n                type=\"error\"\n                message={this.props.intl.formatMessage({\n                  defaultMessage: 'There was an error submitting your note.',\n                  description: 'Error message text when saving an editable note in MLflow',\n                })}\n                description={error}\n                closable\n              />\n            )}\n            {this.renderActions()}\n            <Prompt\n              when={this.contentHasChanged()}\n              message={this.props.intl.formatMessage({\n                defaultMessage: 'Are you sure you want to navigate away? Your pending text changes will be lost.',\n                description: 'Prompt text for navigating away before saving changes in editable note in MLflow',\n              })}\n            />\n          </React.Fragment>\n        ) : (\n          <HTMLNoteContent content={htmlContent} />\n        )}\n      </div>\n    );\n  }\n}\n\ntype TooltipIconProps = {\n  name?: string;\n};\n\nfunction TooltipIcon(props: TooltipIconProps) {\n  const { theme } = useDesignSystemTheme();\n  const { name } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ children: Element; position: string; title... Remove this comment to see the full error message\n    <LegacyTooltip position=\"top\" title={name}>\n      <span css={{ color: theme.colors.textPrimary }}>\n        {/* @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message */}\n        <SvgIcon icon={name} />\n      </span>\n    </LegacyTooltip>\n  );\n}\n\ntype HTMLNoteContentProps = {\n  content?: string;\n};\n\nfunction HTMLNoteContent(props: HTMLNoteContentProps) {\n  const { content } = props;\n  return content ? (\n    <div className=\"note-view-outer-container\" data-testid=\"note-view-outer-container\">\n      <div className=\"note-view-text-area\">\n        <div className=\"note-view-preview note-editor-preview\">\n          <div\n            className=\"note-editor-preview-content\"\n            data-testid=\"note-editor-preview-content\"\n            // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{ __html: props.content }}\n          ></div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div>\n      <FormattedMessage defaultMessage=\"None\" description=\"Default text for no content in an editable note in MLflow\" />\n    </div>\n  );\n}\n\nexport const EditableNote = injectIntl(EditableNoteImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Input,\n  Button,\n  LegacyForm,\n  Modal,\n  LegacyTable,\n  PencilIcon,\n  Spinner,\n  TrashIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\n// @ts-expect-error TS(2554): Expected 1 arguments, but got 0.\nconst EditableContext = React.createContext();\n\ntype EditableCellProps = {\n  editing?: boolean;\n  dataIndex?: string;\n  title?: string;\n  record?: any;\n  index?: number;\n  save?: (...args: any[]) => any;\n  cancel?: (...args: any[]) => any;\n  recordKey?: string;\n};\n\nclass EditableCell extends React.Component<EditableCellProps> {\n  handleKeyPress = (event: any) => {\n    const { save, recordKey, cancel } = this.props;\n    if (event.key === 'Enter') {\n      // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n      save(recordKey);\n    } else if (event.key === 'Escape') {\n      // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n      cancel();\n    }\n  };\n\n  render() {\n    const { editing, dataIndex, record, children } = this.props;\n    return (\n      <EditableContext.Consumer>\n        {/* @ts-expect-error TS(2322): Type '({ formRef }: { formRef: any; }) => Element'... Remove this comment to see the full error message */}\n        {({ formRef }) => (\n          <div className={editing ? 'editing-cell' : ''}>\n            {editing ? (\n              // @ts-expect-error TS(2322): Type '{ children: Element; ref: any; }' is not ass... Remove this comment to see the full error message\n              <LegacyForm ref={formRef}>\n                {/* @ts-expect-error TS(2322): Type '{ children: Element; style: { margin: number... Remove this comment to see the full error message */}\n                <LegacyForm.Item style={{ margin: 0 }} name={dataIndex} initialValue={record[dataIndex]}>\n                  <Input\n                    componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_50\"\n                    onKeyDown={this.handleKeyPress}\n                    data-testid=\"editable-table-edited-input\"\n                  />\n                </LegacyForm.Item>\n              </LegacyForm>\n            ) : (\n              children\n            )}\n          </div>\n        )}\n      </EditableContext.Consumer>\n    );\n  }\n}\n\ntype EditableTableProps = {\n  columns: any[];\n  data: any[];\n  onSaveEdit: (...args: any[]) => any;\n  onDelete: (...args: any[]) => any;\n  intl?: any;\n};\n\ntype EditableTableState = any;\n\nexport class EditableTable extends React.Component<EditableTableProps, EditableTableState> {\n  columns: any;\n  form: any;\n\n  constructor(props: EditableTableProps) {\n    super(props);\n    this.state = { editingKey: '', isRequestPending: false, deletingKey: '' };\n    this.columns = this.initColumns();\n    this.form = React.createRef();\n  }\n\n  initColumns = () => [\n    ...this.props.columns.map((col) =>\n      col.editable\n        ? {\n            ...col,\n            render: (text: any, record: any) => (\n              <EditableCell\n                record={record}\n                dataIndex={col.dataIndex}\n                title={col.title}\n                editing={this.isEditing(record)}\n                save={this.save}\n                cancel={this.cancel}\n                recordKey={record.key}\n                children={text}\n              />\n            ),\n          }\n        : col,\n    ),\n    {\n      title: (\n        <FormattedMessage\n          defaultMessage=\"Actions\"\n          description=\"Column title for actions column in editable form table in MLflow\"\n        />\n      ),\n      dataIndex: 'operation',\n      render: (text: any, record: any) => {\n        const { editingKey, isRequestPending } = this.state;\n        const editing = this.isEditing(record);\n        if (editing && isRequestPending) {\n          return <Spinner size=\"small\" />;\n        }\n        return editing ? (\n          <span>\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_120\"\n              type=\"link\"\n              onClick={() => this.save(record.key)}\n              style={{ marginRight: 10 }}\n              data-testid=\"editable-table-button-save\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Save\"\n                description=\"Text for saving changes on rows in editable form table in MLflow\"\n              />\n            </Button>\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_131\"\n              type=\"link\"\n              // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n              onClick={() => this.cancel(record.key)}\n              data-testid=\"editable-table-button-cancel\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Cancel\"\n                description=\"Text for canceling changes on rows in editable form table in MLflow\"\n              />\n            </Button>\n          </span>\n        ) : (\n          <span>\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_145\"\n              icon={<PencilIcon />}\n              disabled={editingKey !== ''}\n              onClick={() => this.edit(record.key)}\n              data-testid=\"editable-table-button-edit\"\n            />\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_151\"\n              icon={<TrashIcon />}\n              disabled={editingKey !== ''}\n              onClick={() => this.setState({ deletingKey: record.key })}\n              data-testid=\"editable-table-button-delete\"\n            />\n          </span>\n        );\n      },\n    },\n  ];\n\n  // @ts-expect-error TS(4111): Property 'editingKey' comes from an index signatur... Remove this comment to see the full error message\n  isEditing = (record: any) => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save = (key: any) => {\n    this.form.current.validateFields().then((values: any) => {\n      const record = this.props.data.find((r) => r.key === key);\n      if (record) {\n        this.setState({ isRequestPending: true });\n        this.props.onSaveEdit({ ...record, ...values }).then(() => {\n          this.setState({ editingKey: '', isRequestPending: false });\n        });\n      }\n    });\n  };\n\n  delete = async (key: any) => {\n    try {\n      const record = this.props.data.find((r) => r.key === key);\n      if (record) {\n        this.setState({ isRequestPending: true });\n        await this.props.onDelete({ ...record });\n      }\n    } finally {\n      this.setState({ deletingKey: '', isRequestPending: false });\n    }\n  };\n\n  edit = (key: any) => {\n    this.setState({ editingKey: key });\n  };\n\n  render() {\n    const { data } = this.props;\n    return (\n      <EditableContext.Provider value={{ formRef: this.form }}>\n        <LegacyTable\n          className=\"editable-table\"\n          data-testid=\"editable-table\"\n          dataSource={data}\n          columns={this.columns}\n          size=\"middle\"\n          tableLayout=\"fixed\"\n          pagination={false}\n          locale={{\n            emptyText: (\n              <FormattedMessage\n                defaultMessage=\"No tags found.\"\n                description=\"Text for no tags found in editable form table in MLflow\"\n              />\n            ),\n          }}\n          scroll={{ y: 280 }}\n        />\n        <Modal\n          componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_228\"\n          data-testid=\"editable-form-table-remove-modal\"\n          title={\n            <FormattedMessage\n              defaultMessage=\"Are you sure you want to delete this tag？\"\n              description=\"Title text for confirmation pop-up to delete a tag from table\n                     in MLflow\"\n            />\n          }\n          // @ts-expect-error TS(4111): Property 'deletingKey' comes from an index signatu... Remove this comment to see the full error message\n          visible={this.state.deletingKey}\n          okText={\n            <FormattedMessage\n              defaultMessage=\"Confirm\"\n              description=\"OK button text for confirmation pop-up to delete a tag from table\n                     in MLflow\"\n            />\n          }\n          cancelText={\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Cancel button text for confirmation pop-up to delete a tag from\n                     table in MLflow\"\n            />\n          }\n          // @ts-expect-error TS(4111): Property 'isRequestPending' comes from an index si... Remove this comment to see the full error message\n          confirmLoading={this.state.isRequestPending}\n          // @ts-expect-error TS(4111): Property 'deletingKey' comes from an index signatu... Remove this comment to see the full error message\n          onOk={() => this.delete(this.state.deletingKey)}\n          onCancel={() => this.setState({ deletingKey: '' })}\n        />\n      </EditableContext.Provider>\n    );\n  }\n}\n\nexport const EditableFormTable = EditableTable;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport Utils from '../utils/Utils';\nimport { LegacyForm, Input, Button, Spacer } from '@databricks/design-system';\nimport { EditableFormTable } from './tables/EditableFormTable';\nimport _ from 'lodash';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\ntype Props = {\n  tags: any;\n  handleAddTag: (...args: any[]) => any;\n  handleSaveEdit: (...args: any[]) => any;\n  handleDeleteTag: (...args: any[]) => any;\n  isRequestPending: boolean;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n  innerRef?: any;\n};\n\nclass EditableTagsTableViewImpl extends Component<Props> {\n  tableColumns = [\n    {\n      title: this.props.intl.formatMessage({\n        defaultMessage: 'Name',\n        description: 'Column title for name column in editable tags table view in MLflow',\n      }),\n      dataIndex: 'name',\n      width: 200,\n    },\n    {\n      title: this.props.intl.formatMessage({\n        defaultMessage: 'Value',\n        description: 'Column title for value column in editable tags table view in MLflow',\n      }),\n      dataIndex: 'value',\n      width: 200,\n      editable: true,\n    },\n  ];\n\n  getData = () =>\n    _.sortBy(\n      Utils.getVisibleTagValues(this.props.tags).map((values) => ({\n        key: values[0],\n        name: values[0],\n        value: values[1],\n      })),\n      'name',\n    );\n\n  getTagNamesAsSet = () => new Set(Utils.getVisibleTagValues(this.props.tags).map((values) => values[0]));\n\n  tagNameValidator = (rule: any, value: any, callback: any) => {\n    const tagNamesSet = this.getTagNamesAsSet();\n    callback(\n      tagNamesSet.has(value)\n        ? this.props.intl.formatMessage(\n            {\n              defaultMessage: 'Tag \"{value}\" already exists.',\n              description: 'Validation message for tags that already exist in tags table in MLflow',\n            },\n            {\n              value: value,\n            },\n          )\n        : undefined,\n    );\n  };\n\n  render() {\n    const { isRequestPending, handleSaveEdit, handleDeleteTag, handleAddTag, innerRef } = this.props;\n\n    return (\n      <>\n        <EditableFormTable\n          columns={this.tableColumns}\n          data={this.getData()}\n          onSaveEdit={handleSaveEdit}\n          onDelete={handleDeleteTag}\n        />\n        <Spacer size=\"sm\" />\n        <div>\n          {/* @ts-expect-error TS(2322): Type '{ children: Element[]; ref: any; layout: \"in... Remove this comment to see the full error message */}\n          <LegacyForm ref={innerRef} layout=\"inline\" onFinish={handleAddTag} css={styles.form}>\n            <LegacyForm.Item\n              name=\"name\"\n              rules={[\n                {\n                  required: true,\n                  message: this.props.intl.formatMessage({\n                    defaultMessage: 'Name is required.',\n                    description: 'Error message for name requirement in editable tags table view in MLflow',\n                  }),\n                },\n                {\n                  validator: this.tagNameValidator,\n                },\n              ]}\n            >\n              <Input\n                componentId=\"codegen_mlflow_app_src_common_components_editabletagstableview.tsx_107\"\n                aria-label=\"tag name\"\n                data-testid=\"tags-form-input-name\"\n                placeholder={this.props.intl.formatMessage({\n                  defaultMessage: 'Name',\n                  description: 'Default text for name placeholder in editable tags table form in MLflow',\n                })}\n              />\n            </LegacyForm.Item>\n            <LegacyForm.Item name=\"value\" rules={[]}>\n              <Input\n                componentId=\"codegen_mlflow_app_src_common_components_editabletagstableview.tsx_117\"\n                aria-label=\"tag value\"\n                data-testid=\"tags-form-input-value\"\n                placeholder={this.props.intl.formatMessage({\n                  defaultMessage: 'Value',\n                  description: 'Default text for value placeholder in editable tags table form in MLflow',\n                })}\n              />\n            </LegacyForm.Item>\n            <LegacyForm.Item>\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_components_editabletagstableview.tsx_127\"\n                loading={isRequestPending}\n                htmlType=\"submit\"\n                data-testid=\"add-tag-button\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Add\"\n                  description=\"Add button text in editable tags table view in MLflow\"\n                />\n              </Button>\n            </LegacyForm.Item>\n          </LegacyForm>\n        </div>\n      </>\n    );\n  }\n}\n\nconst styles = {\n  form: (theme: any) => ({\n    '& > div': { marginRight: theme.spacing.sm },\n  }),\n};\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const EditableTagsTableView = injectIntl(EditableTagsTableViewImpl);\n","import { Dispatch, useCallback, useState } from 'react';\n\nimport { LegacySelect, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A specialized <LegacySelect> component used for adding and removing aliases from model versions\n */\nexport const ModelVersionAliasSelect = ({\n  renderKey,\n  setDraftAliases,\n  existingAliases,\n  draftAliases,\n  version,\n  aliasToVersionMap,\n  disabled,\n}: {\n  renderKey: any;\n  disabled: boolean;\n  setDraftAliases: Dispatch<React.SetStateAction<string[]>>;\n  existingAliases: string[];\n  draftAliases: string[];\n  version: string;\n  aliasToVersionMap: Record<string, string>;\n}) => {\n  const intl = useIntl();\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n\n  const removeFromEditedAliases = useCallback(\n    (alias: string) => {\n      setDraftAliases((aliases) => aliases.filter((existingAlias) => existingAlias !== alias));\n    },\n    [setDraftAliases],\n  );\n\n  const updateEditedAliases = useCallback(\n    (aliases: string[]) => {\n      const sanitizedAliases = aliases\n        // Remove all characters that are not alphanumeric, underscores or hyphens\n        .map((alias) =>\n          alias\n            .replace(/[^\\w-]/g, '')\n            .toLowerCase()\n            .substring(0, 255),\n        )\n        // After sanitization, filter out invalid aliases\n        // so we won't get empty values\n        .filter((alias) => alias.length > 0);\n\n      // Remove duplicates that might result from varying letter case\n      const uniqueAliases = Array.from(new Set(sanitizedAliases));\n      setDraftAliases(uniqueAliases);\n      setDropdownVisible(false);\n    },\n    [setDraftAliases],\n  );\n\n  return (\n    // For the time being, we will use <LegacySelect /> under the hood,\n    // while <TypeaheadCombobox /> is still in the design phase.\n    <LegacySelect\n      disabled={disabled}\n      filterOption={(val, opt) => opt?.value.toLowerCase().startsWith(val.toLowerCase())}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Enter aliases (champion, challenger, etc)',\n        description: 'Model registry > model version alias select > Alias input placeholder',\n      })}\n      allowClear\n      css={{ width: '100%' }}\n      mode=\"tags\"\n      // There's a bug with current <LegacySelect /> implementation that causes the dropdown\n      // to detach from input vertically when its position on screen changes (in this case, it's\n      // caused by the conflict alerts). A small key={} hack ensures that the component is recreated\n      // and the dropdown is repositioned each time the alerts below are changed.\n      key={JSON.stringify(renderKey)}\n      onChange={updateEditedAliases}\n      dangerouslySetAntdProps={{\n        dropdownMatchSelectWidth: true,\n        tagRender: ({ value }) => (\n          <ModelVersionAliasTag\n            compact\n            css={{ marginTop: 2 }}\n            closable\n            onClose={() => removeFromEditedAliases(value.toString())}\n            value={value.toString()}\n          />\n        ),\n      }}\n      onDropdownVisibleChange={setDropdownVisible}\n      open={dropdownVisible}\n      value={draftAliases || []}\n    >\n      {existingAliases.map((alias) => (\n        <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n          <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n            <div css={{ flex: 1 }}>{alias}</div>\n            <div>\n              <FormattedMessage\n                defaultMessage=\"This version\"\n                description=\"Model registry > model version alias select > Indicator for alias of selected version\"\n              />\n            </div>\n          </div>\n        </LegacySelect.Option>\n      ))}\n      {Object.entries(aliasToVersionMap)\n        .filter(([, otherVersion]) => otherVersion !== version)\n        .map(([alias, aliasedVersion]) => (\n          <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n            <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n              <div css={{ flex: 1 }}>{alias}</div>\n              <div>\n                <FormattedMessage\n                  defaultMessage=\"Version {version}\"\n                  description=\"Model registry > model version alias select > Indicator for alias of a particular version\"\n                  values={{ version: aliasedVersion }}\n                />\n              </div>\n            </div>\n          </LegacySelect.Option>\n        ))}\n    </LegacySelect>\n  );\n};\n","import { isEqual } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { Alert, Button, LegacyForm, Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { ModelEntity } from '../../experiment-tracking/types';\nimport { ModelVersionAliasSelect } from '../components/aliases/ModelVersionAliasSelect';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../redux-types';\nimport { setModelVersionAliasesApi } from '../actions';\nimport { mlflowAliasesLearnMoreLink } from '../constants';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\n\nconst MAX_ALIASES_PER_MODEL_VERSION = 10;\n\n/**\n * Provides methods to initialize and display modal used to add and remove aliases from the model version\n */\nexport const useEditRegisteredModelAliasesModal = ({\n  model,\n  onSuccess,\n  modalTitle,\n  modalDescription,\n}: {\n  model: null | ModelEntity;\n  onSuccess?: () => void;\n  modalTitle?: (version: string) => React.ReactNode;\n  modalDescription?: React.ReactNode;\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [form] = LegacyForm.useForm();\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  // We will keep version's existing aliases in `existingAliases` state array\n  const [existingAliases, setExistingAliases] = useState<string[]>([]);\n  // Currently edited aliases will be kept in `draftAliases` state array\n  const [draftAliases, setDraftAliases] = useState<string[]>([]);\n  // Currently edited version\n  const [currentlyEditedVersion, setCurrentlyEditedVersion] = useState<string>('0');\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * Function used to invoke the modal and start editing aliases of the particular model version\n   */\n  const showEditAliasesModal = useCallback(\n    (versionNumber: string) => {\n      if (!model) {\n        return;\n      }\n\n      const modelVersionAliases =\n        model.aliases?.filter(({ version }) => version === versionNumber).map(({ alias }) => alias) || [];\n\n      if (versionNumber) {\n        setExistingAliases(modelVersionAliases);\n        setDraftAliases(modelVersionAliases);\n        setCurrentlyEditedVersion(versionNumber);\n        setShowModal(true);\n      }\n    },\n    [model],\n  );\n\n  // // Finds and stores alias values found in other model versions\n  const conflictedAliases = useMemo(() => {\n    if (!model?.aliases) {\n      return [];\n    }\n    const versionsWithAliases = model.aliases.reduce<{ version: string; aliases: string[] }[]>(\n      (aliasMap, aliasEntry) => {\n        if (!aliasMap.some(({ version }) => version === aliasEntry.version)) {\n          return [...aliasMap, { version: aliasEntry.version, aliases: [aliasEntry.alias] }];\n        }\n        aliasMap.find(({ version }) => version === aliasEntry.version)?.aliases.push(aliasEntry.alias);\n        return aliasMap;\n      },\n      [],\n    );\n    const otherVersionMappings = versionsWithAliases.filter(\n      ({ version: otherVersion }) => otherVersion !== currentlyEditedVersion,\n    );\n    return draftAliases\n      .map((alias) => ({\n        alias,\n        otherVersion: otherVersionMappings.find((version) =>\n          version.aliases?.find((alias_name) => alias_name === alias),\n        ),\n      }))\n      .filter(({ otherVersion }) => otherVersion);\n  }, [model?.aliases, draftAliases, currentlyEditedVersion]);\n\n  // Maps particular aliases to versions\n  const aliasToVersionMap = useMemo(\n    () =>\n      model?.aliases?.reduce<Record<string, string>>((result, { alias, version }) => {\n        return { ...result, [alias]: version };\n      }, {}) || {},\n    [model],\n  );\n\n  const save = () => {\n    if (!model) {\n      return;\n    }\n    setErrorMessage('');\n    dispatch(setModelVersionAliasesApi(model.name, currentlyEditedVersion, existingAliases, draftAliases))\n      .then(() => {\n        setShowModal(false);\n        onSuccess?.();\n      })\n      .catch((e: ErrorWrapper) => {\n        const extractedErrorMessage = e.getMessageField() || e.getUserVisibleError().toString() || e.text;\n        setErrorMessage(extractedErrorMessage);\n      });\n  };\n\n  // Indicates if there is any pending change to the alias set\n  const isPristine = isEqual(existingAliases.slice().sort(), draftAliases.slice().sort());\n  const isExceedingLimit = draftAliases.length > MAX_ALIASES_PER_MODEL_VERSION;\n\n  const isInvalid = isPristine || isExceedingLimit;\n\n  const EditAliasesModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_127\"\n      visible={showModal}\n      footer={\n        <div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_131\"\n            onClick={() => setShowModal(false)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Model registry > model version alias editor > Cancel editing aliases\"\n            />\n          </Button>\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_137\"\n            loading={false}\n            type=\"primary\"\n            disabled={isInvalid}\n            onClick={save}\n          >\n            <FormattedMessage\n              defaultMessage=\"Save aliases\"\n              description=\"Model registry > model version alias editor > Confirm change of aliases\"\n            />\n          </Button>\n        </div>\n      }\n      destroyOnClose\n      title={\n        modalTitle ? (\n          modalTitle(currentlyEditedVersion)\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit alias for model version {version}\"\n            description=\"Model registry > model version alias editor > Title of the update alias modal\"\n            values={{ version: currentlyEditedVersion }}\n          />\n        )\n      }\n      onCancel={() => setShowModal(false)}\n      confirmLoading={false}\n    >\n      <Typography.Paragraph>\n        {modalDescription ?? (\n          <FormattedMessage\n            defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular model version. <link>Learn more</link>\"\n            description=\"Explanation of registered model aliases\"\n            values={{\n              link: (chunks) => (\n                <a href={mlflowAliasesLearnMoreLink} rel=\"noreferrer\" target=\"_blank\">\n                  {chunks}\n                </a>\n              ),\n            }}\n          />\n        )}\n      </Typography.Paragraph>\n      <LegacyForm form={form} layout=\"vertical\">\n        <LegacyForm.Item>\n          <ModelVersionAliasSelect\n            disabled={false}\n            renderKey={conflictedAliases} // todo\n            aliasToVersionMap={aliasToVersionMap}\n            version={currentlyEditedVersion}\n            draftAliases={draftAliases}\n            existingAliases={existingAliases}\n            setDraftAliases={setDraftAliases}\n          />\n        </LegacyForm.Item>\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          {isExceedingLimit && (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_192\"\n              role=\"alert\"\n              message={\n                <FormattedMessage\n                  defaultMessage=\"You are exceeding a limit of {limit} aliases assigned to the single model version\"\n                  description=\"Model registry > model version alias editor > Warning about exceeding aliases limit\"\n                  values={{ limit: MAX_ALIASES_PER_MODEL_VERSION }}\n                />\n              }\n              type=\"error\"\n              closable={false}\n            />\n          )}\n          {conflictedAliases.map(({ alias, otherVersion }) => (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_206\"\n              role=\"alert\"\n              key={alias}\n              message={\n                <FormattedMessage\n                  defaultMessage='The \"{alias}\" alias is also being used on version {otherVersion}. Adding it to this version will remove it from version {otherVersion}.'\n                  description=\"Model registry > model version alias editor > Warning about reusing alias from the other version\"\n                  values={{ otherVersion: otherVersion?.version, alias }}\n                />\n              }\n              type=\"info\"\n              closable={false}\n            />\n          ))}\n          {errorMessage && (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_220\"\n              role=\"alert\"\n              message={errorMessage}\n              type=\"error\"\n              closable={false}\n            />\n          )}\n        </div>\n      </LegacyForm>\n    </Modal>\n  );\n\n  return { EditAliasesModal, showEditAliasesModal };\n};\n"],"names":["getAccordionStyles","_ref","theme","getPrefixedClassName","clsPrefix","classItem","classHeader","classContentBox","fontSize","paddingLeft","paddingTop","paddingBottom","display","alignItems","fontWeight","lineHeight","typography","lineHeightLg","padding","spacing","xs","md","CollapsibleSection","props","title","forceOpen","showServerError","defaultCollapsed","onChange","className","componentId","activeKeyProp","activeKey","defaultActiveKey","useDesignSystemTheme","formatMessage","useIntl","getExpandIcon","useCallback","_ref2","isActive","_jsx","css","importantify","width","general","heightBase","transform","undefined","children","ChevronRightIcon","_css","svg","height","id","defaultMessage","Accordion","dangerouslyAppendEmotionCSS","dangerouslySetAntdProps","expandIconPosition","expandIcon","Panel","header","SectionErrorBoundary","Descriptions","columns","instanceStyles","styles","descriptionsArea","autoFitArea","_ref3","name","Item","label","labelSize","span","_jsxs","descriptionItem","Typography","Text","size","color","colon","columnCount","gridTemplateColumns","columnGap","sm","rowGap","marginBottom","lg","gridGap","gridColumn","margin","Prompt","when","message","block","React","UNSAFE_NavigationContext","navigator","window","confirm","getReactMdeIcon","TooltipIcon","EditableNoteImpl","Component","constructor","arguments","state","markdown","this","defaultMarkdown","selectedTab","defaultSelectedTab","error","converter","getMarkdownConverter","handleMdeValueChange","setState","handleTabChange","handleSubmitClick","onSubmit","confirmLoading","Promise","resolve","then","catch","e","getMessageField","intl","handleCancelClick","onCancel","contentHasChanged","renderActions","Button","type","onClick","disabled","loading","saveText","htmlType","FormattedMessage","getSanitizedHtmlContent","sanitized","sanitizeConvertedHtml","makeHtml","forceAnchorTagNewTab","render","showEditor","htmlContent","ReactMde","value","minEditorHeight","maxEditorHeight","minPreviewHeight","childProps","toolbarCommands","onTabChange","generateMarkdownPreview","getIcon","Alert","description","closable","HTMLNoteContent","content","LegacyTooltip","position","colors","textPrimary","SvgIcon","icon","dangerouslySetInnerHTML","__html","defaultProps","EditableNote","injectIntl","EditableContext","EditableCell","handleKeyPress","event","save","recordKey","cancel","key","editing","dataIndex","record","Consumer","formRef","LegacyForm","ref","style","initialValue","Input","onKeyDown","EditableTable","super","form","initColumns","map","col","editable","text","isEditing","editingKey","isRequestPending","Spinner","marginRight","PencilIcon","edit","TrashIcon","deletingKey","current","validateFields","values","data","find","r","onSaveEdit","delete","async","onDelete","Provider","LegacyTable","dataSource","tableLayout","pagination","locale","emptyText","scroll","y","Modal","visible","okText","cancelText","onOk","EditableFormTable","EditableTagsTableViewImpl","tableColumns","getData","_","Utils","getVisibleTagValues","tags","getTagNamesAsSet","Set","tagNameValidator","rule","callback","has","handleSaveEdit","handleDeleteTag","handleAddTag","innerRef","_Fragment","Spacer","layout","onFinish","rules","required","validator","placeholder","EditableTagsTableView","_ref4","_ref5","_ref8","ModelVersionAliasSelect","renderKey","setDraftAliases","existingAliases","draftAliases","version","aliasToVersionMap","dropdownVisible","setDropdownVisible","useState","removeFromEditedAliases","alias","aliases","filter","existingAlias","updateEditedAliases","sanitizedAliases","replace","toLowerCase","substring","length","uniqueAliases","Array","from","LegacySelect","filterOption","val","opt","startsWith","allowClear","mode","dropdownMatchSelectWidth","tagRender","ModelVersionAliasTag","compact","onClose","toString","onDropdownVisibleChange","open","Option","Object","entries","_ref6","otherVersion","_ref7","aliasedVersion","JSON","stringify","useEditRegisteredModelAliasesModal","model","onSuccess","modalTitle","modalDescription","showModal","setShowModal","useForm","errorMessage","setErrorMessage","setExistingAliases","currentlyEditedVersion","setCurrentlyEditedVersion","dispatch","useDispatch","showEditAliasesModal","versionNumber","_model$aliases","modelVersionAliases","conflictedAliases","useMemo","versionsWithAliases","reduce","aliasMap","aliasEntry","_aliasMap$find","some","push","otherVersionMappings","_version$aliases","alias_name","_model$aliases2","result","isPristine","isEqual","slice","sort","isExceedingLimit","isInvalid","EditAliasesModal","footer","setModelVersionAliasesApi","extractedErrorMessage","getUserVisibleError","destroyOnClose","Paragraph","link","chunks","href","mlflowAliasesLearnMoreLink","rel","target","flexDirection","gap","role","limit","_ref9"],"sourceRoot":""}