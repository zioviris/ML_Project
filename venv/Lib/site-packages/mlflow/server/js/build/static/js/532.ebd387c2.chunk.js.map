{"version":3,"file":"static/js/532.ebd387c2.chunk.js","mappings":"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","sources":["common/utils/withErrorBoundary.tsx","model-registry/components/aliases/ModelVersionAliasSelect.tsx","model-registry/hooks/useEditRegisteredModelAliasesModal.tsx","experiment-tracking/pages/prompts/components/PromptsListTableVersionCell.tsx","experiment-tracking/components/artifact-view-components/ShowArtifactCodeSnippet.tsx","common/utils/ErrorUtils.tsx","model-registry/components/aliases/ModelVersionAliasTag.tsx","experiment-tracking/pages/prompts/hooks/useCreatePromptModal.tsx","experiment-tracking/pages/prompts/hooks/useCreateRegisteredPromptMutation.tsx","experiment-tracking/pages/prompts/components/PromptPageErrorHandler.tsx","experiment-tracking/pages/prompts/hooks/usePromptDetailsQuery.tsx","experiment-tracking/pages/prompts/components/PromptVersionsTableAliasesCell.tsx","experiment-tracking/pages/prompts/components/PromptVersionsDiffSelectorButton.tsx","experiment-tracking/pages/prompts/components/PromptVersionsTable.tsx","experiment-tracking/pages/prompts/hooks/usePromptDetailsPageViewState.tsx","experiment-tracking/pages/prompts/components/PromptVersionRuns.tsx","experiment-tracking/pages/prompts/components/PromptVersionTags.tsx","experiment-tracking/pages/prompts/components/PromptVersionMetadata.tsx","experiment-tracking/pages/prompts/hooks/usePromptRunsInfo.tsx","experiment-tracking/pages/prompts/components/PromptContentPreview.tsx","experiment-tracking/pages/prompts/hooks/useDeletePromptVersionModal.tsx","experiment-tracking/pages/prompts/components/PromptContentCompare.tsx","experiment-tracking/pages/prompts/components/PromptDetailsTagsBox.tsx","experiment-tracking/pages/prompts/components/PromptNotFoundView.tsx","experiment-tracking/pages/prompts/PromptsDetailsPage.tsx","experiment-tracking/pages/prompts/hooks/useDeletePromptModal.tsx","experiment-tracking/pages/prompts/hooks/useUpdatePromptVersionMetadataModal.tsx","model-registry/constants.tsx","experiment-tracking/pages/prompts/api.ts","experiment-tracking/pages/prompts/hooks/useUpdateRegisteredPromptTags.tsx","common/components/ScrollablePageWrapper.tsx","experiment-tracking/pages/prompts/utils.ts","model-registry/components/aliases/ModelVersionTableAliasesCell.tsx"],"sourcesContent":["import React from 'react';\nimport { ErrorBoundary, ErrorBoundaryPropsWithComponent, FallbackProps } from 'react-error-boundary';\nimport ErrorUtils from './ErrorUtils';\nimport { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport type ErrorBoundaryProps = {\n  children: React.Component;\n  customFallbackComponent?: ErrorBoundaryPropsWithComponent['FallbackComponent'];\n};\n\nfunction ErrorFallback() {\n  return (\n    <Empty\n      data-testid=\"fallback\"\n      title={<FormattedMessage defaultMessage=\"Error\" description=\"Title of editor error fallback component\" />}\n      description={\n        <FormattedMessage\n          defaultMessage=\"An error occurred while rendering this component.\"\n          description=\"Description of error fallback component\"\n        />\n      }\n      image={<DangerIcon />}\n    />\n  );\n}\n\nfunction CustomErrorBoundary({ children, customFallbackComponent }: React.PropsWithChildren<ErrorBoundaryProps>) {\n  function logErrorToConsole(error: Error, info: { componentStack: string }) {\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error('Caught Unexpected Error: ', error, info.componentStack);\n  }\n\n  if (customFallbackComponent) {\n    return (\n      <ErrorBoundary onError={logErrorToConsole} FallbackComponent={customFallbackComponent}>\n        {children}\n      </ErrorBoundary>\n    );\n  }\n\n  return (\n    <ErrorBoundary onError={logErrorToConsole} fallback={<ErrorFallback />}>\n      {children}\n    </ErrorBoundary>\n  );\n}\n\nexport function withErrorBoundary<P>(\n  service: string,\n  Component: React.ComponentType<P>,\n  errorMessage?: React.ReactNode,\n  customFallbackComponent?: React.ComponentType<FallbackProps>,\n): React.ComponentType<P> {\n  return function CustomErrorBoundaryWrapper(props: P) {\n    return (\n      <CustomErrorBoundary customFallbackComponent={customFallbackComponent}>\n        {/* @ts-expect-error Generics don't play well with WithConditionalCSSProp type coming @emotion/react jsx typing to validate css= prop values typing. More details here: emotion-js/emotion#2169 */}\n        <Component {...props} />\n      </CustomErrorBoundary>\n    );\n  };\n}\n","import { Dispatch, useCallback, useState } from 'react';\n\nimport { LegacySelect, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A specialized <LegacySelect> component used for adding and removing aliases from model versions\n */\nexport const ModelVersionAliasSelect = ({\n  renderKey,\n  setDraftAliases,\n  existingAliases,\n  draftAliases,\n  version,\n  aliasToVersionMap,\n  disabled,\n}: {\n  renderKey: any;\n  disabled: boolean;\n  setDraftAliases: Dispatch<React.SetStateAction<string[]>>;\n  existingAliases: string[];\n  draftAliases: string[];\n  version: string;\n  aliasToVersionMap: Record<string, string>;\n}) => {\n  const intl = useIntl();\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n\n  const removeFromEditedAliases = useCallback(\n    (alias: string) => {\n      setDraftAliases((aliases) => aliases.filter((existingAlias) => existingAlias !== alias));\n    },\n    [setDraftAliases],\n  );\n\n  const updateEditedAliases = useCallback(\n    (aliases: string[]) => {\n      const sanitizedAliases = aliases\n        // Remove all characters that are not alphanumeric, underscores or hyphens\n        .map((alias) =>\n          alias\n            .replace(/[^\\w-]/g, '')\n            .toLowerCase()\n            .substring(0, 255),\n        )\n        // After sanitization, filter out invalid aliases\n        // so we won't get empty values\n        .filter((alias) => alias.length > 0);\n\n      // Remove duplicates that might result from varying letter case\n      const uniqueAliases = Array.from(new Set(sanitizedAliases));\n      setDraftAliases(uniqueAliases);\n      setDropdownVisible(false);\n    },\n    [setDraftAliases],\n  );\n\n  return (\n    // For the time being, we will use <LegacySelect /> under the hood,\n    // while <TypeaheadCombobox /> is still in the design phase.\n    <LegacySelect\n      disabled={disabled}\n      filterOption={(val, opt) => opt?.value.toLowerCase().startsWith(val.toLowerCase())}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Enter aliases (champion, challenger, etc)',\n        description: 'Model registry > model version alias select > Alias input placeholder',\n      })}\n      allowClear\n      css={{ width: '100%' }}\n      mode=\"tags\"\n      // There's a bug with current <LegacySelect /> implementation that causes the dropdown\n      // to detach from input vertically when its position on screen changes (in this case, it's\n      // caused by the conflict alerts). A small key={} hack ensures that the component is recreated\n      // and the dropdown is repositioned each time the alerts below are changed.\n      key={JSON.stringify(renderKey)}\n      onChange={updateEditedAliases}\n      dangerouslySetAntdProps={{\n        dropdownMatchSelectWidth: true,\n        tagRender: ({ value }) => (\n          <ModelVersionAliasTag\n            compact\n            css={{ marginTop: 2 }}\n            closable\n            onClose={() => removeFromEditedAliases(value.toString())}\n            value={value.toString()}\n          />\n        ),\n      }}\n      onDropdownVisibleChange={setDropdownVisible}\n      open={dropdownVisible}\n      value={draftAliases || []}\n    >\n      {existingAliases.map((alias) => (\n        <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n          <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n            <div css={{ flex: 1 }}>{alias}</div>\n            <div>\n              <FormattedMessage\n                defaultMessage=\"This version\"\n                description=\"Model registry > model version alias select > Indicator for alias of selected version\"\n              />\n            </div>\n          </div>\n        </LegacySelect.Option>\n      ))}\n      {Object.entries(aliasToVersionMap)\n        .filter(([, otherVersion]) => otherVersion !== version)\n        .map(([alias, aliasedVersion]) => (\n          <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n            <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n              <div css={{ flex: 1 }}>{alias}</div>\n              <div>\n                <FormattedMessage\n                  defaultMessage=\"Version {version}\"\n                  description=\"Model registry > model version alias select > Indicator for alias of a particular version\"\n                  values={{ version: aliasedVersion }}\n                />\n              </div>\n            </div>\n          </LegacySelect.Option>\n        ))}\n    </LegacySelect>\n  );\n};\n","import { isEqual } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { Alert, Button, LegacyForm, Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { ModelEntity } from '../../experiment-tracking/types';\nimport { ModelVersionAliasSelect } from '../components/aliases/ModelVersionAliasSelect';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../redux-types';\nimport { setModelVersionAliasesApi } from '../actions';\nimport { mlflowAliasesLearnMoreLink } from '../constants';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\n\nconst MAX_ALIASES_PER_MODEL_VERSION = 10;\n\n/**\n * Provides methods to initialize and display modal used to add and remove aliases from the model version\n */\nexport const useEditRegisteredModelAliasesModal = ({\n  model,\n  onSuccess,\n  modalTitle,\n  modalDescription,\n}: {\n  model: null | ModelEntity;\n  onSuccess?: () => void;\n  modalTitle?: (version: string) => React.ReactNode;\n  modalDescription?: React.ReactNode;\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [form] = LegacyForm.useForm();\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  // We will keep version's existing aliases in `existingAliases` state array\n  const [existingAliases, setExistingAliases] = useState<string[]>([]);\n  // Currently edited aliases will be kept in `draftAliases` state array\n  const [draftAliases, setDraftAliases] = useState<string[]>([]);\n  // Currently edited version\n  const [currentlyEditedVersion, setCurrentlyEditedVersion] = useState<string>('0');\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * Function used to invoke the modal and start editing aliases of the particular model version\n   */\n  const showEditAliasesModal = useCallback(\n    (versionNumber: string) => {\n      if (!model) {\n        return;\n      }\n\n      const modelVersionAliases =\n        model.aliases?.filter(({ version }) => version === versionNumber).map(({ alias }) => alias) || [];\n\n      if (versionNumber) {\n        setExistingAliases(modelVersionAliases);\n        setDraftAliases(modelVersionAliases);\n        setCurrentlyEditedVersion(versionNumber);\n        setShowModal(true);\n      }\n    },\n    [model],\n  );\n\n  // // Finds and stores alias values found in other model versions\n  const conflictedAliases = useMemo(() => {\n    if (!model?.aliases) {\n      return [];\n    }\n    const versionsWithAliases = model.aliases.reduce<{ version: string; aliases: string[] }[]>(\n      (aliasMap, aliasEntry) => {\n        if (!aliasMap.some(({ version }) => version === aliasEntry.version)) {\n          return [...aliasMap, { version: aliasEntry.version, aliases: [aliasEntry.alias] }];\n        }\n        aliasMap.find(({ version }) => version === aliasEntry.version)?.aliases.push(aliasEntry.alias);\n        return aliasMap;\n      },\n      [],\n    );\n    const otherVersionMappings = versionsWithAliases.filter(\n      ({ version: otherVersion }) => otherVersion !== currentlyEditedVersion,\n    );\n    return draftAliases\n      .map((alias) => ({\n        alias,\n        otherVersion: otherVersionMappings.find((version) =>\n          version.aliases?.find((alias_name) => alias_name === alias),\n        ),\n      }))\n      .filter(({ otherVersion }) => otherVersion);\n  }, [model?.aliases, draftAliases, currentlyEditedVersion]);\n\n  // Maps particular aliases to versions\n  const aliasToVersionMap = useMemo(\n    () =>\n      model?.aliases?.reduce<Record<string, string>>((result, { alias, version }) => {\n        return { ...result, [alias]: version };\n      }, {}) || {},\n    [model],\n  );\n\n  const save = () => {\n    if (!model) {\n      return;\n    }\n    setErrorMessage('');\n    dispatch(setModelVersionAliasesApi(model.name, currentlyEditedVersion, existingAliases, draftAliases))\n      .then(() => {\n        setShowModal(false);\n        onSuccess?.();\n      })\n      .catch((e: ErrorWrapper) => {\n        const extractedErrorMessage = e.getMessageField() || e.getUserVisibleError().toString() || e.text;\n        setErrorMessage(extractedErrorMessage);\n      });\n  };\n\n  // Indicates if there is any pending change to the alias set\n  const isPristine = isEqual(existingAliases.slice().sort(), draftAliases.slice().sort());\n  const isExceedingLimit = draftAliases.length > MAX_ALIASES_PER_MODEL_VERSION;\n\n  const isInvalid = isPristine || isExceedingLimit;\n\n  const EditAliasesModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_127\"\n      visible={showModal}\n      footer={\n        <div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_131\"\n            onClick={() => setShowModal(false)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Model registry > model version alias editor > Cancel editing aliases\"\n            />\n          </Button>\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_137\"\n            loading={false}\n            type=\"primary\"\n            disabled={isInvalid}\n            onClick={save}\n          >\n            <FormattedMessage\n              defaultMessage=\"Save aliases\"\n              description=\"Model registry > model version alias editor > Confirm change of aliases\"\n            />\n          </Button>\n        </div>\n      }\n      destroyOnClose\n      title={\n        modalTitle ? (\n          modalTitle(currentlyEditedVersion)\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit alias for model version {version}\"\n            description=\"Model registry > model version alias editor > Title of the update alias modal\"\n            values={{ version: currentlyEditedVersion }}\n          />\n        )\n      }\n      onCancel={() => setShowModal(false)}\n      confirmLoading={false}\n    >\n      <Typography.Paragraph>\n        {modalDescription ?? (\n          <FormattedMessage\n            defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular model version. <link>Learn more</link>\"\n            description=\"Explanation of registered model aliases\"\n            values={{\n              link: (chunks) => (\n                <a href={mlflowAliasesLearnMoreLink} rel=\"noreferrer\" target=\"_blank\">\n                  {chunks}\n                </a>\n              ),\n            }}\n          />\n        )}\n      </Typography.Paragraph>\n      <LegacyForm form={form} layout=\"vertical\">\n        <LegacyForm.Item>\n          <ModelVersionAliasSelect\n            disabled={false}\n            renderKey={conflictedAliases} // todo\n            aliasToVersionMap={aliasToVersionMap}\n            version={currentlyEditedVersion}\n            draftAliases={draftAliases}\n            existingAliases={existingAliases}\n            setDraftAliases={setDraftAliases}\n          />\n        </LegacyForm.Item>\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          {isExceedingLimit && (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_192\"\n              role=\"alert\"\n              message={\n                <FormattedMessage\n                  defaultMessage=\"You are exceeding a limit of {limit} aliases assigned to the single model version\"\n                  description=\"Model registry > model version alias editor > Warning about exceeding aliases limit\"\n                  values={{ limit: MAX_ALIASES_PER_MODEL_VERSION }}\n                />\n              }\n              type=\"error\"\n              closable={false}\n            />\n          )}\n          {conflictedAliases.map(({ alias, otherVersion }) => (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_206\"\n              role=\"alert\"\n              key={alias}\n              message={\n                <FormattedMessage\n                  defaultMessage='The \"{alias}\" alias is also being used on version {otherVersion}. Adding it to this version will remove it from version {otherVersion}.'\n                  description=\"Model registry > model version alias editor > Warning about reusing alias from the other version\"\n                  values={{ otherVersion: otherVersion?.version, alias }}\n                />\n              }\n              type=\"info\"\n              closable={false}\n            />\n          ))}\n          {errorMessage && (\n            <Alert\n              componentId=\"codegen_mlflow_app_src_model-registry_hooks_useeditregisteredmodelaliasesmodal.tsx_220\"\n              role=\"alert\"\n              message={errorMessage}\n              type=\"error\"\n              closable={false}\n            />\n          )}\n        </div>\n      </LegacyForm>\n    </Modal>\n  );\n\n  return { EditAliasesModal, showEditAliasesModal };\n};\n","import { Typography } from '@databricks/design-system';\nimport { ColumnDef } from '@tanstack/react-table';\nimport { FormattedMessage } from 'react-intl';\n\nexport const PromptsListTableVersionCell: ColumnDef<any>['cell'] = ({ row: { original }, getValue }) => {\n  const version = getValue<string>();\n\n  if (!version) {\n    return null;\n  }\n  return (\n    <Typography.Text>\n      <FormattedMessage\n        defaultMessage=\"Version {version}\"\n        description=\"Label for the version of a registered prompt in the registered prompts table\"\n        values={{\n          version,\n        }}\n      />\n    </Typography.Text>\n  );\n};\n","import React from 'react';\nimport { CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport const ShowArtifactCodeSnippet = ({ code }: { code: string }): React.ReactElement => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ position: 'relative' }}>\n      <CopyButton\n        css={{ zIndex: 1, position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs }}\n        showLabel={false}\n        copyText={code}\n        icon={<CopyIcon />}\n      />\n      <CodeSnippet\n        language=\"python\"\n        showLineNumbers={false}\n        style={{\n          padding: theme.spacing.sm,\n          color: theme.colors.textPrimary,\n          backgroundColor: theme.colors.backgroundSecondary,\n          whiteSpace: 'pre-wrap',\n        }}\n        wrapLongLines\n      >\n        {code}\n      </CodeSnippet>\n    </div>\n  );\n};\n","import React from 'react';\n\nclass ErrorUtils {\n  static mlflowServices = {\n    MODEL_REGISTRY: 'Model Registry',\n    EXPERIMENTS: 'Experiments',\n    MODEL_SERVING: 'Model Serving',\n    RUN_TRACKING: 'Run Tracking',\n  };\n}\n\nexport default ErrorUtils;\n","import { Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport type { TagProps } from '@databricks/design-system';\n\ntype ModelVersionAliasTagProps = { value: string; compact?: boolean } & Pick<\n  TagProps,\n  'closable' | 'onClose' | 'className'\n>;\n\n// When displayed in compact mode (e.g. within <Select>), constrain the width to 160 pixels\nconst COMPACT_MODE_MAX_WIDTH = 160;\nconst REGULAR_MAX_WIDTH = 300;\nconst TAG_SYMBOL = '@';\n\nexport const ModelVersionAliasTag = ({\n  value,\n  closable,\n  onClose,\n  className,\n  compact = false,\n}: ModelVersionAliasTagProps) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionaliastag.tsx_23\"\n      css={{\n        fontWeight: theme.typography.typographyBoldFontWeight,\n        marginRight: theme.spacing.xs,\n      }}\n      className={className}\n      closable={closable}\n      onClose={onClose}\n      title={value}\n    >\n      <span\n        css={{\n          display: 'block',\n          whiteSpace: 'nowrap',\n          maxWidth: compact ? COMPACT_MODE_MAX_WIDTH : REGULAR_MAX_WIDTH,\n          textOverflow: 'ellipsis',\n          overflow: 'hidden',\n        }}\n      >\n        {TAG_SYMBOL}&nbsp;{value}\n      </span>\n    </Tag>\n  );\n};\n","import { Alert, FormUI, Modal, RHFControlledComponents, Spacer } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { useCreateRegisteredPromptMutation } from './useCreateRegisteredPromptMutation';\nimport { getPromptContentTagValue } from '../utils';\nimport { CollapsibleSection } from '@mlflow/mlflow/src/common/components/CollapsibleSection';\nimport { EditableTagsTableView } from '@mlflow/mlflow/src/common/components/EditableTagsTableView';\n\nexport enum CreatePromptModalMode {\n  CreatePrompt = 'CreatePrompt',\n  CreatePromptVersion = 'CreatePromptVersion',\n}\n\nexport const useCreatePromptModal = ({\n  mode = CreatePromptModalMode.CreatePromptVersion,\n  registeredPrompt,\n  latestVersion,\n  onSuccess,\n}: {\n  mode: CreatePromptModalMode;\n  registeredPrompt?: RegisteredPrompt;\n  latestVersion?: RegisteredPromptVersion;\n  onSuccess?: (result: { promptName: string; promptVersion?: string }) => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n  const intl = useIntl();\n\n  const form = useForm({\n    defaultValues: {\n      draftName: '',\n      draftValue: '',\n      commitMessage: '',\n      tags: [] as { key: string; value: string }[],\n    },\n  });\n\n  const isCreatingNewPrompt = mode === CreatePromptModalMode.CreatePrompt;\n  const isCreatingPromptVersion = mode === CreatePromptModalMode.CreatePromptVersion;\n\n  const { mutate: mutateCreateVersion, error, reset: errorsReset, isLoading } = useCreateRegisteredPromptMutation();\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.create.modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={\n        isCreatingPromptVersion ? (\n          <FormattedMessage\n            defaultMessage=\"Create prompt version\"\n            description=\"A header for the create prompt version modal in the prompt management UI\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Create prompt\"\n            description=\"A header for the create prompt modal in the prompt management UI\"\n          />\n        )\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Create\"\n          description=\"A label for the confirm button in the create prompt modal in the prompt management UI\"\n        />\n      }\n      okButtonProps={{ loading: isLoading }}\n      onOk={form.handleSubmit(async (values) => {\n        const promptName =\n          isCreatingPromptVersion && registeredPrompt?.name ? registeredPrompt?.name : values.draftName;\n        mutateCreateVersion(\n          {\n            createPromptEntity: isCreatingNewPrompt,\n            content: values.draftValue,\n            commitMessage: values.commitMessage,\n            promptName,\n            tags: values.tags,\n          },\n          {\n            onSuccess: (data) => {\n              const promptVersion = data?.version;\n              onSuccess?.({ promptName, promptVersion });\n              setOpen(false);\n            },\n          },\n        );\n      })}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the prompt creation modal in the prompt management UI\"\n        />\n      }\n      size=\"wide\"\n    >\n      {error?.message && (\n        <>\n          <Alert componentId=\"mlflow.prompts.create.error\" closable={false} message={error.message} type=\"error\" />\n          <Spacer />\n        </>\n      )}\n      {isCreatingNewPrompt && (\n        <>\n          <FormUI.Label htmlFor=\"mlflow.prompts.create.name\">Name:</FormUI.Label>\n          <RHFControlledComponents.Input\n            control={form.control}\n            id=\"mlflow.prompts.create.name\"\n            componentId=\"mlflow.prompts.create.name\"\n            name=\"draftName\"\n            rules={{\n              required: {\n                value: true,\n                message: intl.formatMessage({\n                  defaultMessage: 'Name is required',\n                  description: 'A validation state for the prompt name in the prompt creation modal',\n                }),\n              },\n              pattern: {\n                value: /^[a-zA-Z0-9_\\-.]+$/,\n                message: intl.formatMessage({\n                  defaultMessage: 'Only alphanumeric characters, underscores, hyphens, and dots are allowed',\n                  description: 'A validation state for the prompt name format in the prompt creation modal',\n                }),\n              },\n            }}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Provide an unique prompt name',\n              description: 'A placeholder for the prompt name in the prompt creation modal',\n            })}\n            validationState={form.formState.errors.draftName ? 'error' : undefined}\n          />\n          {form.formState.errors.draftName && (\n            <FormUI.Message type=\"error\" message={form.formState.errors.draftName.message} />\n          )}\n          <Spacer />\n        </>\n      )}\n      <FormUI.Label htmlFor=\"mlflow.prompts.create.content\">Prompt:</FormUI.Label>\n      <RHFControlledComponents.TextArea\n        control={form.control}\n        id=\"mlflow.prompts.create.content\"\n        componentId=\"mlflow.prompts.create.content\"\n        name=\"draftValue\"\n        autoSize={{ minRows: 3, maxRows: 10 }}\n        rules={{\n          required: {\n            value: true,\n            message: intl.formatMessage({\n              defaultMessage: 'Prompt content is required',\n              description: 'A validation state for the prompt content in the prompt creation modal',\n            }),\n          },\n        }}\n        placeholder={intl.formatMessage({\n          defaultMessage: \"Type prompt content here. Wrap variables with double curly brace e.g. '{{' name '}}'.\",\n          description: 'A placeholder for the prompt content in the prompt creation modal',\n        })}\n        validationState={form.formState.errors.draftValue ? 'error' : undefined}\n      />\n      {form.formState.errors.draftValue && (\n        <FormUI.Message type=\"error\" message={form.formState.errors.draftValue.message} />\n      )}\n      <Spacer />\n      <FormUI.Label htmlFor=\"mlflow.prompts.create.commit_message\">Commit message (optional):</FormUI.Label>\n      <RHFControlledComponents.Input\n        control={form.control}\n        id=\"mlflow.prompts.create.commit_message\"\n        componentId=\"mlflow.prompts.create.commit_message\"\n        name=\"commitMessage\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => {\n    errorsReset();\n    if (mode === CreatePromptModalMode.CreatePromptVersion && latestVersion) {\n      form.reset({\n        commitMessage: '',\n        draftName: '',\n        draftValue: getPromptContentTagValue(latestVersion) ?? '',\n        tags: [],\n      });\n    }\n    setOpen(true);\n  };\n\n  return { CreatePromptModal: modalElement, openModal };\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { RegisteredPromptsApi } from '../api';\nimport { REGISTERED_PROMPT_CONTENT_TAG_KEY } from '../utils';\n\ntype UpdateContentPayload = {\n  promptName: string;\n  createPromptEntity?: boolean;\n  content: string;\n  commitMessage?: string;\n  tags: { key: string; value: string }[];\n};\n\nexport const useCreateRegisteredPromptMutation = () => {\n  const updateMutation = useMutation<{ version: string }, Error, UpdateContentPayload>({\n    mutationFn: async ({ promptName, createPromptEntity, content, commitMessage, tags }) => {\n      if (createPromptEntity) {\n        await RegisteredPromptsApi.createRegisteredPrompt(promptName);\n      }\n\n      const version = await RegisteredPromptsApi.createRegisteredPromptVersion(\n        promptName,\n        [{ key: REGISTERED_PROMPT_CONTENT_TAG_KEY, value: content }, ...tags],\n        commitMessage,\n      );\n\n      const newVersionNumber = version?.model_version?.version;\n      if (!newVersionNumber) {\n        throw new Error('Failed to create a new prompt version');\n      }\n      return { version: newVersionNumber };\n    },\n  });\n\n  return updateMutation;\n};\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ScrollablePageWrapper } from '../../../../common/components/ScrollablePageWrapper';\n\nexport const PromptPageErrorHandler = ({ error }: { error?: Error }) => {\n  return (\n    <ScrollablePageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </ScrollablePageWrapper>\n  );\n};\n","import { QueryFunctionContext, useQuery, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { RegisteredPromptDetailsResponse } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptDetailsQueryKey>) => {\n  const [, { promptName }] = queryKey;\n  const [detailsResponse, versionsResponse] = await Promise.all([\n    RegisteredPromptsApi.getPromptDetails(promptName),\n    RegisteredPromptsApi.getPromptVersions(promptName),\n  ]);\n\n  return {\n    prompt: detailsResponse.registered_model,\n    versions: versionsResponse.model_versions ?? [],\n  };\n};\n\ntype PromptDetailsQueryKey = ['prompt_details', { promptName: string }];\n\nexport const usePromptDetailsQuery = (\n  { promptName }: { promptName: string },\n  options: UseQueryOptions<\n    RegisteredPromptDetailsResponse,\n    Error,\n    RegisteredPromptDetailsResponse,\n    PromptDetailsQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    RegisteredPromptDetailsResponse,\n    Error,\n    RegisteredPromptDetailsResponse,\n    PromptDetailsQueryKey\n  >(['prompt_details', { promptName }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ColumnDef } from '@tanstack/react-table';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport { RegisteredPromptVersion } from '../types';\nimport { PromptsVersionsTableMetadata } from '../utils';\n\nexport const PromptVersionsTableAliasesCell: ColumnDef<RegisteredPromptVersion>['cell'] = ({\n  getValue,\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { showEditAliasesModal, aliasesByVersion, registeredPrompt } = meta as PromptsVersionsTableMetadata;\n\n  const mvAliases = aliasesByVersion[original.version] || [];\n\n  return registeredPrompt ? (\n    <ModelVersionTableAliasesCell\n      modelName={registeredPrompt?.name}\n      version={original.version}\n      aliases={mvAliases}\n      onAddEdit={() => {\n        showEditAliasesModal?.(original.version);\n      }}\n    />\n  ) : null;\n};\n","import { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A custom split button to select versions to compare in the prompt details page.\n */\nexport const PromptVersionsDiffSelectorButton = ({\n  isSelectedFirstToCompare,\n  isSelectedSecondToCompare,\n  onSelectFirst,\n  onSelectSecond,\n}: {\n  isSelectedFirstToCompare: boolean;\n  isSelectedSecondToCompare: boolean;\n  onSelectFirst?: () => void;\n  onSelectSecond?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  return (\n    <div\n      css={{ width: theme.general.buttonHeight, display: 'flex', alignItems: 'center', paddingRight: theme.spacing.sm }}\n    >\n      <div css={{ display: 'flex', height: theme.general.buttonInnerHeight + theme.spacing.xs, gap: 0, flex: 1 }}>\n        <Tooltip\n          componentId=\"mlflow.prompts.details.select_baseline.tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Select as baseline version\"\n              description=\"Label for selecting baseline prompt version in the comparison view\"\n            />\n          }\n          delayDuration={0}\n          side=\"left\"\n        >\n          <button\n            onClick={onSelectFirst}\n            role=\"radio\"\n            aria-checked={isSelectedFirstToCompare}\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Select as baseline version',\n              description: 'Label for selecting baseline prompt version in the comparison view',\n            })}\n            css={{\n              flex: 1,\n              border: `1px solid ${\n                isSelectedFirstToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderRight: 0,\n              marginLeft: 1,\n              borderTopLeftRadius: theme.borders.borderRadiusMd,\n              borderBottomLeftRadius: theme.borders.borderRadiusMd,\n              backgroundColor: isSelectedFirstToCompare\n                ? theme.colors.actionDefaultBackgroundPress\n                : theme.colors.actionDefaultBackgroundDefault,\n              cursor: 'pointer',\n              '&:hover': {\n                backgroundColor: theme.colors.actionDefaultBackgroundHover,\n              },\n            }}\n          />\n        </Tooltip>\n        <Tooltip\n          componentId=\"mlflow.prompts.details.select_compared.tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Select as compared version\"\n              description=\"Label for selecting compared prompt version in the comparison view\"\n            />\n          }\n          delayDuration={0}\n          side=\"right\"\n        >\n          <button\n            onClick={onSelectSecond}\n            role=\"radio\"\n            aria-checked={isSelectedSecondToCompare}\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Select as compared version',\n              description: 'Label for selecting compared prompt version in the comparison view',\n            })}\n            css={{\n              flex: 1,\n              border: `1px solid ${\n                isSelectedSecondToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderLeft: `1px solid ${\n                isSelectedFirstToCompare || isSelectedSecondToCompare\n                  ? theme.colors.actionDefaultBorderFocus\n                  : theme.colors.actionDefaultBorderDefault\n              }`,\n              borderTopRightRadius: theme.borders.borderRadiusMd,\n              borderBottomRightRadius: theme.borders.borderRadiusMd,\n              backgroundColor: isSelectedSecondToCompare\n                ? theme.colors.actionDefaultBackgroundPress\n                : theme.colors.actionDefaultBackgroundDefault,\n              cursor: 'pointer',\n              '&:hover': {\n                backgroundColor: theme.colors.actionDefaultBackgroundHover,\n              },\n            }}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import {\n  ChevronRightIcon,\n  Empty,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableSkeletonRows,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { ColumnDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from '../../../../common/utils/Utils';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { PromptVersionsTableMode } from '../utils';\nimport { PromptsListTableVersionCell } from './PromptsListTableVersionCell';\nimport { PromptVersionsTableAliasesCell } from './PromptVersionsTableAliasesCell';\nimport { PromptVersionsDiffSelectorButton } from './PromptVersionsDiffSelectorButton';\n\ntype PromptVersionsTableColumnDef = ColumnDef<RegisteredPromptVersion>;\n\nexport const PromptVersionsTable = ({\n  promptVersions,\n  onUpdateComparedVersion,\n  isLoading,\n  onUpdateSelectedVersion,\n  comparedVersion,\n  selectedVersion,\n  mode,\n  registeredPrompt,\n  showEditAliasesModal,\n  aliasesByVersion,\n}: {\n  promptVersions?: RegisteredPromptVersion[];\n  isLoading: boolean;\n  selectedVersion?: string;\n  comparedVersion?: string;\n  onUpdateSelectedVersion: (version: string) => void;\n  onUpdateComparedVersion: (version: string) => void;\n  mode: PromptVersionsTableMode;\n  registeredPrompt?: RegisteredPrompt;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  aliasesByVersion: Record<string, string[]>;\n}) => {\n  const intl = useIntl();\n\n  const { theme } = useDesignSystemTheme();\n  const columns = useMemo(() => {\n    const resultColumns: PromptVersionsTableColumnDef[] = [\n      {\n        id: 'version',\n        header: intl.formatMessage({\n          defaultMessage: 'Version',\n          description: 'Header for the version column in the registered prompts table',\n        }),\n        accessorKey: 'version',\n        cell: PromptsListTableVersionCell,\n      },\n    ];\n\n    if (mode === PromptVersionsTableMode.TABLE) {\n      resultColumns.push({\n        id: 'creation_timestamp',\n        header: intl.formatMessage({\n          defaultMessage: 'Registered at',\n          description: 'Header for the registration time column in the registered prompts table',\n        }),\n        accessorFn: ({ creation_timestamp }) => Utils.formatTimestamp(creation_timestamp, intl),\n      });\n\n      resultColumns.push({\n        id: 'commit_message',\n        header: intl.formatMessage({\n          defaultMessage: 'Commit message',\n          description: 'Header for the commit message column in the registered prompts table',\n        }),\n        accessorKey: 'description',\n      });\n      resultColumns.push({\n        id: 'aliases',\n        header: intl.formatMessage({\n          defaultMessage: 'Aliases',\n          description: 'Header for the aliases column in the registered prompts table',\n        }),\n        accessorKey: 'aliases',\n        cell: PromptVersionsTableAliasesCell,\n      });\n    }\n\n    return resultColumns;\n  }, [mode, intl]);\n\n  const table = useReactTable({\n    data: promptVersions ?? [],\n    getRowId: (row) => row.version,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    meta: { showEditAliasesModal, aliasesByVersion, registeredPrompt },\n  });\n\n  const getEmptyState = () => {\n    if (!isLoading && promptVersions?.length === 0) {\n      return (\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No prompt versions created\"\n              description=\"A header for the empty state in the prompt versions table\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage='Use \"Create prompt version\" button in order to create a new prompt version'\n              description=\"Guidelines for the user on how to create a new prompt version in the prompt versions table\"\n            />\n          }\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div css={{ flex: 1, overflow: 'hidden' }}>\n      <Table scrollable empty={getEmptyState()} aria-label=\"Prompt versions table\">\n        <TableRow isHeader>\n          {table.getLeafHeaders().map((header) => (\n            <TableHeader componentId=\"mlflow.prompts.versions.table.header\" key={header.id}>\n              {flexRender(header.column.columnDef.header, header.getContext())}\n            </TableHeader>\n          ))}\n        </TableRow>\n        {isLoading ? (\n          <TableSkeletonRows table={table} />\n        ) : (\n          table.getRowModel().rows.map((row) => {\n            const isSelectedSingle =\n              [PromptVersionsTableMode.PREVIEW].includes(mode) && selectedVersion === row.original.version;\n\n            const isSelectedFirstToCompare =\n              [PromptVersionsTableMode.COMPARE].includes(mode) && selectedVersion === row.original.version;\n\n            const isSelectedSecondToCompare =\n              [PromptVersionsTableMode.COMPARE].includes(mode) && comparedVersion === row.original.version;\n\n            const getColor = () => {\n              if (isSelectedSingle) {\n                return theme.colors.actionDefaultBackgroundPress;\n              } else if (isSelectedFirstToCompare) {\n                return theme.colors.actionDefaultBackgroundHover;\n              } else if (isSelectedSecondToCompare) {\n                return theme.colors.actionDefaultBackgroundHover;\n              }\n              return 'transparent';\n            };\n\n            const showCursorForEntireRow = mode === PromptVersionsTableMode.PREVIEW;\n            return (\n              <TableRow\n                key={row.id}\n                css={{\n                  height: theme.general.heightBase,\n                  backgroundColor: getColor(),\n                  cursor: showCursorForEntireRow ? 'pointer' : 'default',\n                }}\n                onClick={() => {\n                  if (mode !== PromptVersionsTableMode.PREVIEW) {\n                    return;\n                  }\n                  onUpdateSelectedVersion(row.original.version);\n                }}\n              >\n                {row.getAllCells().map((cell) => (\n                  <TableCell key={cell.id} css={{ alignItems: 'center' }}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n                {isSelectedSingle && (\n                  <div\n                    css={{\n                      width: theme.spacing.md * 2,\n                      display: 'flex',\n                      alignItems: 'center',\n                      paddingRight: theme.spacing.sm,\n                    }}\n                  >\n                    <ChevronRightIcon />\n                  </div>\n                )}\n                {mode === PromptVersionsTableMode.COMPARE && (\n                  <PromptVersionsDiffSelectorButton\n                    onSelectFirst={() => onUpdateSelectedVersion(row.original.version)}\n                    onSelectSecond={() => onUpdateComparedVersion(row.original.version)}\n                    isSelectedFirstToCompare={isSelectedFirstToCompare}\n                    isSelectedSecondToCompare={isSelectedSecondToCompare}\n                  />\n                )}\n              </TableRow>\n            );\n          })\n        )}\n      </Table>\n    </div>\n  );\n};\n","import { useCallback, useReducer } from 'react';\nimport { PromptVersionsTableMode } from '../utils';\nimport { first } from 'lodash';\nimport { RegisteredPromptDetailsResponse } from '../types';\n\nconst promptDetailsViewStateReducer = (\n  state: {\n    mode: PromptVersionsTableMode;\n    selectedVersion?: string;\n    comparedVersion?: string;\n  },\n  action:\n    | { type: 'setTableMode' }\n    | { type: 'switchSides' }\n    | { type: 'setPreviewMode'; selectedVersion?: string }\n    | { type: 'setCompareMode'; selectedVersion?: string; comparedVersion?: string }\n    | { type: 'setSelectedVersion'; selectedVersion: string }\n    | { type: 'setComparedVersion'; comparedVersion: string },\n) => {\n  if (action.type === 'setTableMode') {\n    return { ...state, mode: PromptVersionsTableMode.TABLE };\n  }\n  if (action.type === 'switchSides') {\n    return { ...state, selectedVersion: state.comparedVersion, comparedVersion: state.selectedVersion };\n  }\n  if (action.type === 'setPreviewMode') {\n    return { ...state, mode: PromptVersionsTableMode.PREVIEW, selectedVersion: action.selectedVersion };\n  }\n  if (action.type === 'setCompareMode') {\n    return {\n      ...state,\n      mode: PromptVersionsTableMode.COMPARE,\n      selectedVersion: action.selectedVersion,\n      comparedVersion: action.comparedVersion,\n    };\n  }\n  if (action.type === 'setSelectedVersion') {\n    return { ...state, selectedVersion: action.selectedVersion };\n  }\n  if (action.type === 'setComparedVersion') {\n    return { ...state, comparedVersion: action.comparedVersion };\n  }\n  return state;\n};\n\nexport const usePromptDetailsPageViewState = (promptDetailsData?: RegisteredPromptDetailsResponse) => {\n  const [viewState, dispatchViewMode] = useReducer(promptDetailsViewStateReducer, {\n    mode: PromptVersionsTableMode.PREVIEW,\n  });\n\n  const setTableMode = useCallback(() => {\n    dispatchViewMode({ type: 'setTableMode' });\n  }, []);\n  const setPreviewMode = useCallback(\n    (versionEntity?: { version: string }) => {\n      const firstVersion = (versionEntity ?? first(promptDetailsData?.versions))?.version;\n      dispatchViewMode({ type: 'setPreviewMode', selectedVersion: firstVersion });\n    },\n    [promptDetailsData],\n  );\n  const setSelectedVersion = useCallback((selectedVersion: string) => {\n    dispatchViewMode({ type: 'setSelectedVersion', selectedVersion });\n  }, []);\n  const setComparedVersion = useCallback((comparedVersion: string) => {\n    dispatchViewMode({ type: 'setComparedVersion', comparedVersion });\n  }, []);\n  const setCompareMode = useCallback(() => {\n    // Last (highest) version will be the compared version\n    const comparedVersion = first(promptDetailsData?.versions)?.version;\n    // The one immediately before the last version will be the baseline version\n    const baselineVersion = promptDetailsData?.versions[1]?.version;\n    dispatchViewMode({ type: 'setCompareMode', selectedVersion: baselineVersion, comparedVersion });\n  }, [promptDetailsData]);\n\n  const switchSides = useCallback(() => dispatchViewMode({ type: 'switchSides' }), []);\n\n  if (\n    first(promptDetailsData?.versions) &&\n    viewState.mode === PromptVersionsTableMode.PREVIEW &&\n    !viewState.selectedVersion\n  ) {\n    setPreviewMode(first(promptDetailsData?.versions));\n  }\n\n  return {\n    viewState,\n    setTableMode,\n    setPreviewMode,\n    setCompareMode,\n    switchSides,\n    setSelectedVersion,\n    setComparedVersion,\n  };\n};\n","import { useState } from 'react';\nimport { Button, ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { isNil } from 'lodash';\n\nexport const PromptVersionRuns = ({\n  isLoadingRuns,\n  runIds,\n  runInfoMap,\n}: {\n  isLoadingRuns: boolean;\n  runIds: string[];\n  runInfoMap: Record<string, any>;\n}) => {\n  const [showAll, setShowAll] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const displayThreshold = 3;\n  const visibleCount = showAll ? runIds.length : Math.min(displayThreshold, runIds.length || 0);\n  const hasMore = runIds.length > displayThreshold;\n\n  return (\n    <>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"MLflow runs:\"\n          description=\"A label for the associated MLflow runs in the prompt details page\"\n        />\n      </Typography.Text>\n\n      <div>\n        {isLoadingRuns ? (\n          <ParagraphSkeleton css={{ width: 100 }} />\n        ) : (\n          <>\n            <div style={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.sm }}>\n              {runIds.slice(0, visibleCount).map((runId, index) => {\n                const runInfo = runInfoMap[runId];\n\n                if (!isNil(runInfo?.experimentId) && runInfo?.runUuid && runInfo?.runName) {\n                  const { experimentId, runUuid, runName } = runInfo;\n                  return (\n                    <Typography.Text>\n                      <Link to={Routes.getRunPageRoute(experimentId, runUuid)}>{runName}</Link>\n                      {index < visibleCount - 1 && ','}\n                    </Typography.Text>\n                  );\n                } else {\n                  return <span>{runInfo?.runName || runInfo?.runUuid}</span>;\n                }\n              })}\n              {hasMore && (\n                <Button\n                  componentId=\"mlflow.prompts.details.runs.show_more\"\n                  size=\"small\"\n                  type=\"link\"\n                  onClick={() => setShowAll(!showAll)}\n                >\n                  {showAll ? (\n                    <FormattedMessage\n                      defaultMessage=\"Show less\"\n                      description=\"Label for a link that shows less tags when clicked\"\n                    />\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage={'{count} more...'}\n                      description=\"Label for a link that renders the remaining tags when clicked\"\n                      values={{ count: runIds.length - visibleCount }}\n                    />\n                  )}\n                </Button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nimport { KeyValueTag } from '@mlflow/mlflow/src/common/components/KeyValueTag';\nimport { KeyValueEntity } from '../../../types';\nimport { useUpdatePromptVersionMetadataModal } from '../hooks/useUpdatePromptVersionMetadataModal';\nimport { isNil } from 'lodash';\n\nexport const PromptVersionTags = ({\n  tags,\n  onEditVersionMetadata,\n}: {\n  tags: KeyValueEntity[];\n  onEditVersionMetadata?: () => void;\n}) => {\n  const [showAll, setShowAll] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const displayThreshold = 3;\n  const visibleCount = showAll ? tags.length : Math.min(displayThreshold, tags.length || 0);\n  const hasMore = tags.length > displayThreshold;\n  const shouldAllowEditingMetadata = !isNil(onEditVersionMetadata);\n\n  const editButton =\n    tags.length > 0 ? (\n      <Button\n        componentId=\"mlflow.prompts.details.version.edit_tags\"\n        size=\"small\"\n        icon={<PencilIcon />}\n        onClick={onEditVersionMetadata}\n      />\n    ) : (\n      <Button\n        componentId=\"mlflow.prompts.details.version.add_tags\"\n        size=\"small\"\n        type=\"link\"\n        onClick={onEditVersionMetadata}\n      >\n        <FormattedMessage\n          defaultMessage=\"Add\"\n          description=\"Model registry > model version table > metadata column > 'add' button label\"\n        />\n      </Button>\n    );\n\n  return (\n    <>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Metadata:\"\n          description=\"A key-value pair for the metadata in the prompt details page\"\n        />\n      </Typography.Text>\n      <div>\n        <>\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.xs }}>\n            {tags.slice(0, visibleCount).map((tag) => (\n              <KeyValueTag css={{ margin: 0 }} key={tag.key} tag={tag} />\n            ))}\n            {shouldAllowEditingMetadata && editButton}\n            {!shouldAllowEditingMetadata && tags.length === 0 && <Typography.Hint>—</Typography.Hint>}\n            {hasMore && (\n              <Button\n                componentId=\"mlflow.prompts.details.version.tags.show_more\"\n                size=\"small\"\n                type=\"link\"\n                onClick={() => setShowAll(!showAll)}\n              >\n                {showAll ? (\n                  <FormattedMessage\n                    defaultMessage=\"Show less\"\n                    description=\"Label for a link that shows less tags when clicked\"\n                  />\n                ) : (\n                  <FormattedMessage\n                    defaultMessage={'{count} more...'}\n                    description=\"Label for a link that renders the remaining tags when clicked\"\n                    values={{ count: tags.length - visibleCount }}\n                  />\n                )}\n              </Button>\n            )}\n          </div>\n        </>\n      </div>\n    </>\n  );\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ModelVersionTableAliasesCell } from '../../../../model-registry/components/aliases/ModelVersionTableAliasesCell';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport Utils from '../../../../common/utils/Utils';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { usePromptRunsInfo } from '../hooks/usePromptRunsInfo';\nimport { REGISTERED_PROMPT_SOURCE_RUN_IDS } from '../utils';\nimport { useCallback, useMemo } from 'react';\nimport { PromptVersionRuns } from './PromptVersionRuns';\nimport { isUserFacingTag } from '@mlflow/mlflow/src/common/utils/TagUtils';\nimport { KeyValueTag } from '@mlflow/mlflow/src/common/components/KeyValueTag';\nimport { PromptVersionTags } from './PromptVersionTags';\n\nconst MAX_VISIBLE_TAGS = 3;\n\nexport const PromptVersionMetadata = ({\n  registeredPromptVersion,\n  registeredPrompt,\n  showEditAliasesModal,\n  onEditVersion,\n  showEditPromptVersionMetadataModal,\n  aliasesByVersion,\n  isBaseline,\n}: {\n  registeredPrompt?: RegisteredPrompt;\n  registeredPromptVersion?: RegisteredPromptVersion;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  onEditVersion?: (vesrion: RegisteredPromptVersion) => void;\n  showEditPromptVersionMetadataModal?: (version: RegisteredPromptVersion) => void;\n  aliasesByVersion: Record<string, string[]>;\n  isBaseline?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const runIds = useMemo(() => {\n    const tagValue = registeredPromptVersion?.tags?.find((tag) => tag.key === REGISTERED_PROMPT_SOURCE_RUN_IDS)?.value;\n    if (!tagValue) {\n      return [];\n    }\n    return tagValue.split(',').map((runId) => runId.trim());\n  }, [registeredPromptVersion]);\n\n  const { isLoading: isLoadingRuns, runInfoMap } = usePromptRunsInfo(runIds ? runIds : []);\n\n  if (!registeredPrompt || !registeredPromptVersion) {\n    return null;\n  }\n\n  const visibleTagList = registeredPromptVersion?.tags?.filter((tag) => isUserFacingTag(tag.key)) || [];\n\n  const versionElement = (\n    <FormattedMessage\n      defaultMessage=\"Version {version}\"\n      values={{ version: registeredPromptVersion.version }}\n      description=\"A label for the version number in the prompt details page\"\n    />\n  );\n\n  const onEditVersionMetadata = showEditPromptVersionMetadataModal\n    ? () => {\n        showEditPromptVersionMetadataModal(registeredPromptVersion);\n      }\n    : undefined;\n\n  return (\n    <div\n      css={{\n        display: 'grid',\n        gridTemplateColumns: '120px 1fr',\n        gridAutoRows: `minmax(${theme.typography.lineHeightLg}, auto)`,\n        alignItems: 'flex-start',\n        rowGap: theme.spacing.xs,\n        columnGap: theme.spacing.sm,\n      }}\n    >\n      {onEditVersion && (\n        <>\n          <Typography.Text bold>Version:</Typography.Text>\n          <Typography.Text>\n            <Typography.Link\n              componentId=\"mlflow.prompts.details.version.goto\"\n              onClick={() => onEditVersion(registeredPromptVersion)}\n            >\n              {versionElement}\n            </Typography.Link>{' '}\n            {isBaseline && (\n              <FormattedMessage\n                defaultMessage=\"(baseline)\"\n                description=\"A label displayed next to baseline version in the prompt versions comparison view\"\n              />\n            )}\n          </Typography.Text>\n        </>\n      )}\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Registered at:\"\n          description=\"A label for the registration timestamp in the prompt details page\"\n        />\n      </Typography.Text>\n      <Typography.Text>{Utils.formatTimestamp(registeredPromptVersion.creation_timestamp)}</Typography.Text>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Aliases:\"\n          description=\"A label for the aliases list in the prompt details page\"\n        />\n      </Typography.Text>\n      <div>\n        <ModelVersionTableAliasesCell\n          css={{ maxWidth: 'none' }}\n          modelName={registeredPrompt.name}\n          version={registeredPromptVersion.version}\n          aliases={aliasesByVersion[registeredPromptVersion.version] || []}\n          onAddEdit={() => {\n            showEditAliasesModal?.(registeredPromptVersion.version);\n          }}\n        />\n      </div>\n      {registeredPromptVersion.description && (\n        <>\n          <Typography.Text bold>\n            <FormattedMessage\n              defaultMessage=\"Commit message:\"\n              description=\"A label for the commit message in the prompt details page\"\n            />\n          </Typography.Text>\n          <Typography.Text>{registeredPromptVersion.description}</Typography.Text>\n        </>\n      )}\n      <PromptVersionTags onEditVersionMetadata={onEditVersionMetadata} tags={visibleTagList} />\n      {(isLoadingRuns || runIds.length > 0) && (\n        <PromptVersionRuns isLoadingRuns={isLoadingRuns} runIds={runIds} runInfoMap={runInfoMap} />\n      )}\n    </div>\n  );\n};\n","import { QueryFunctionContext, useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { transformGetRunResponse } from '../../../sdk/FieldNameTransformers';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { GetRunApiResponse } from '../../../types';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['prompt_associated_runs', string];\n\nexport const usePromptRunsInfo = (runUuids: string[] = []) => {\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: ['prompt_associated_runs', runUuid] as UseRegisteredModelRelatedRunNamesQueryKey,\n      queryFn: async ({\n        queryKey: [, runUuid],\n      }: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<GetRunApiResponse | null> => {\n        try {\n          const data = await MlflowService.getRun({ run_id: runUuid });\n          return transformGetRunResponse(data);\n        } catch (e) {\n          return null;\n        }\n      },\n    })),\n  });\n\n  // Create a map of run_id to run info\n  const runInfoMap: Record<string, any | undefined> = {};\n\n  queryResults.forEach((queryResult, index) => {\n    const runUuid = runUuids[index];\n    runInfoMap[runUuid] = queryResult.data?.run?.info;\n  });\n\n  return {\n    isLoading: runUuids.length > 0 && queryResults.some((queryResult) => queryResult.isLoading),\n    runInfoMap,\n  };\n};\n","import {\n  Button,\n  CopyIcon,\n  Modal,\n  PlayIcon,\n  Spacer,\n  TrashIcon,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { getPromptContentTagValue } from '../utils';\nimport { PromptVersionMetadata } from './PromptVersionMetadata';\nimport { FormattedMessage } from 'react-intl';\nimport { uniq } from 'lodash';\nimport { useDeletePromptVersionModal } from '../hooks/useDeletePromptVersionModal';\nimport { ShowArtifactCodeSnippet } from '../../../components/artifact-view-components/ShowArtifactCodeSnippet';\n\nconst PROMPT_VARIABLE_REGEX = /\\{\\{\\s*(.*?)\\s*\\}\\}/g;\n\nexport const PromptContentPreview = ({\n  promptVersion,\n  onUpdatedContent,\n  onDeletedVersion,\n  aliasesByVersion,\n  registeredPrompt,\n  showEditAliasesModal,\n  showEditPromptVersionMetadataModal,\n}: {\n  promptVersion?: RegisteredPromptVersion;\n  onUpdatedContent?: () => Promise<any>;\n  onDeletedVersion?: () => Promise<any>;\n  aliasesByVersion: Record<string, string[]>;\n  registeredPrompt?: RegisteredPrompt;\n  showEditAliasesModal?: (versionNumber: string) => void;\n  showEditPromptVersionMetadataModal: (promptVersion: RegisteredPromptVersion) => void;\n}) => {\n  const value = useMemo(() => (promptVersion ? getPromptContentTagValue(promptVersion) : ''), [promptVersion]);\n\n  const { DeletePromptModal, openModal: openDeleteModal } = useDeletePromptVersionModal({\n    promptVersion,\n    onSuccess: () => onDeletedVersion?.(),\n  });\n\n  const [showUsageExample, setShowUsageExample] = useState(false);\n\n  // Find all variables in the prompt content\n  const variableNames = useMemo(() => {\n    if (!value) {\n      return [];\n    }\n\n    const variables: string[] = [];\n    let match;\n\n    while ((match = PROMPT_VARIABLE_REGEX.exec(value)) !== null) {\n      variables.push(match[1]);\n    }\n\n    // Sanity check for tricky cases like nested brackets. If the variable name contains\n    // a bracket, we consider it as a parsing error and render a placeholder instead.\n    if (variables.some((variable) => variable.includes('{') || variable.includes('}'))) {\n      return null;\n    }\n\n    return uniq(variables);\n  }, [value]);\n  const codeSnippetContent = buildCodeSnippetContent(promptVersion, variableNames);\n\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        padding: theme.spacing.md,\n        paddingTop: 0,\n        borderRadius: theme.borders.borderRadiusSm,\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Typography.Title level={3}>Viewing version {promptVersion?.version}</Typography.Title>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <Button\n            componentId=\"mlflow.prompts.details.delete_version\"\n            icon={<TrashIcon />}\n            type=\"primary\"\n            danger\n            onClick={openDeleteModal}\n          >\n            <FormattedMessage\n              defaultMessage=\"Delete version\"\n              description=\"A label for a button to delete prompt version on the prompt details page\"\n            />\n          </Button>\n          <Button\n            componentId=\"mlflow.prompts.details.preview.use\"\n            icon={<PlayIcon />}\n            onClick={() => setShowUsageExample(true)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Use\"\n              description=\"A label for a button to display the modal with the usage example of the prompt\"\n            />\n          </Button>\n        </div>\n      </div>\n      <Spacer shrinks={false} />\n      <PromptVersionMetadata\n        aliasesByVersion={aliasesByVersion}\n        registeredPrompt={registeredPrompt}\n        registeredPromptVersion={promptVersion}\n        showEditAliasesModal={showEditAliasesModal}\n        showEditPromptVersionMetadataModal={showEditPromptVersionMetadataModal}\n      />\n      <Spacer shrinks={false} />\n      <div\n        css={{\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n          overflow: 'auto',\n        }}\n      >\n        <Typography.Text\n          css={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {value || 'Empty'}\n        </Typography.Text>\n      </div>\n      <Modal\n        componentId=\"mlflow.prompts.details.preview.usage_example_modal\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Usage example\"\n            description=\"A title of the modal showing the usage example of the prompt\"\n          />\n        }\n        visible={showUsageExample}\n        onCancel={() => setShowUsageExample(false)}\n        cancelText={\n          <FormattedMessage\n            defaultMessage=\"Dismiss\"\n            description=\"A label for the button to dismiss the modal with the usage example of the prompt\"\n          />\n        }\n      >\n        <ShowArtifactCodeSnippet code={buildCodeSnippetContent(promptVersion, variableNames)} />\n      </Modal>\n      {DeletePromptModal}\n    </div>\n  );\n};\n\nconst buildCodeSnippetContent = (promptVersion: RegisteredPromptVersion | undefined, variables: string[] | null) => {\n  let codeSnippetContent = `from openai import OpenAI\nimport mlflow\nclient = OpenAI(api_key=\"<YOUR_API_KEY>\")\n\n# Set MLflow tracking URI\nmlflow.set_tracking_uri(\"<YOUR_TRACKING_URI>\")\n\n# Example of loading and using the prompt\nprompt = mlflow.load_prompt(\"prompts:/${promptVersion?.name}/${promptVersion?.version}\")`;\n\n  // Null variables mean that there was a parsing error\n  if (variables === null) {\n    codeSnippetContent += `\n\n# Replace the variables with the actual values\nvariables = {\n   \"key\": \"value\",\n   ...\n}\n\nresponse = client.chat.completions.create(\n    messages=[{\n        \"role\": \"user\",\n        \"content\": prompt.format(**variables),\n    }],\n    model=\"gpt-4o-mini\",\n)`;\n  } else {\n    codeSnippetContent += `\nresponse = client.chat.completions.create(\n    messages=[{\n        \"role\": \"user\",\n        \"content\": prompt.format(${variables.map((name) => `${name}=\"<${name}>\"`).join(', ')}),\n    }],\n    model=\"gpt-4o-mini\",\n)`;\n  }\n\n  codeSnippetContent += `\\n\\nprint(response.choices[0].message.content)`;\n  return codeSnippetContent;\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Modal } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nexport const useDeletePromptVersionModal = ({\n  promptVersion,\n  onSuccess,\n}: {\n  promptVersion?: RegisteredPromptVersion;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const { mutate } = useMutation<\n    unknown,\n    Error,\n    {\n      promptName: string;\n      version: string;\n    }\n  >({\n    mutationFn: async ({ promptName, version }) => {\n      await RegisteredPromptsApi.deleteRegisteredPromptVersion(promptName, version);\n    },\n  });\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.delete_version_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Delete prompt version\"\n          description=\"A header for the delete prompt version modal\"\n        />\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A label for the confirm button in the delete prompt version modal\"\n        />\n      }\n      okButtonProps={{ danger: true }}\n      onOk={async () => {\n        if (!promptVersion?.name) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            promptName: promptVersion.name,\n            version: promptVersion.version,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n        setOpen(false);\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the delete prompt version modal\"\n        />\n      }\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete the prompt version?\"\n        description=\"A content for the delete prompt version confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => setOpen(true);\n\n  return { DeletePromptModal: modalElement, openModal };\n};\n","import { Button, ExpandMoreIcon, Spacer, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { RegisteredPrompt, RegisteredPromptVersion } from '../types';\nimport { getPromptContentTagValue } from '../utils';\nimport { PromptVersionMetadata } from './PromptVersionMetadata';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { diffWords } from '../diff';\n\nexport const PromptContentCompare = ({\n  baselineVersion,\n  comparedVersion,\n  onSwitchSides,\n  onEditVersion,\n  registeredPrompt,\n  aliasesByVersion,\n  showEditAliasesModal,\n}: {\n  baselineVersion?: RegisteredPromptVersion;\n  comparedVersion?: RegisteredPromptVersion;\n  onSwitchSides: () => void;\n  onEditVersion: (version?: RegisteredPromptVersion) => void;\n  registeredPrompt?: RegisteredPrompt;\n  aliasesByVersion: Record<string, string[]>;\n  showEditAliasesModal?: (versionNumber: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const baselineValue = useMemo(\n    () => (baselineVersion ? getPromptContentTagValue(baselineVersion) : ''),\n    [baselineVersion],\n  );\n  const comparedValue = useMemo(\n    () => (comparedVersion ? getPromptContentTagValue(comparedVersion) : ''),\n    [comparedVersion],\n  );\n\n  const diff = useMemo(() => diffWords(baselineValue ?? '', comparedValue ?? '') ?? [], [baselineValue, comparedValue]);\n\n  const colors = useMemo(\n    () => ({\n      addedBackground: theme.isDarkMode ? theme.colors.green700 : theme.colors.green300,\n      removedBackground: theme.isDarkMode ? theme.colors.red700 : theme.colors.red300,\n    }),\n    [theme],\n  );\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        padding: theme.spacing.md,\n        paddingTop: 0,\n        borderRadius: theme.borders.borderRadiusSm,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Typography.Title level={3}>\n          <FormattedMessage\n            defaultMessage=\"Comparing version {baseline} with version {compared}\"\n            description=\"Label for comparing prompt versions in the prompt comparison view. Variables {baseline} and {compared} are numeric version numbers being compared.\"\n            values={{\n              baseline: baselineVersion?.version,\n              compared: comparedVersion?.version,\n            }}\n          />\n        </Typography.Title>\n      </div>\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex' }}>\n        <div css={{ flex: 1 }}>\n          <PromptVersionMetadata\n            aliasesByVersion={aliasesByVersion}\n            onEditVersion={onEditVersion}\n            registeredPrompt={registeredPrompt}\n            registeredPromptVersion={baselineVersion}\n            showEditAliasesModal={showEditAliasesModal}\n            isBaseline\n          />\n        </div>\n        <div css={{ paddingLeft: theme.spacing.sm, paddingRight: theme.spacing.sm }}>\n          <div css={{ width: theme.general.heightSm }} />\n        </div>\n        <div css={{ flex: 1 }}>\n          <PromptVersionMetadata\n            aliasesByVersion={aliasesByVersion}\n            onEditVersion={onEditVersion}\n            registeredPrompt={registeredPrompt}\n            registeredPromptVersion={comparedVersion}\n            showEditAliasesModal={showEditAliasesModal}\n          />\n        </div>\n      </div>\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex', flex: 1, overflow: 'auto', alignItems: 'flex-start' }}>\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            flex: 1,\n          }}\n        >\n          <Typography.Text\n            css={{\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {baselineValue || 'Empty'}\n          </Typography.Text>\n        </div>\n        <div css={{ paddingLeft: theme.spacing.sm, paddingRight: theme.spacing.sm }}>\n          <Tooltip\n            componentId=\"mlflow.prompts.details.switch_sides.tooltip\"\n            content={\n              <FormattedMessage\n                defaultMessage=\"Switch sides\"\n                description=\"A label for button used to switch prompt versions when in side-by-side comparison view\"\n              />\n            }\n            side=\"top\"\n          >\n            <Button\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Switch sides',\n                description: 'A label for button used to switch prompt versions when in side-by-side comparison view',\n              })}\n              componentId=\"mlflow.prompts.details.switch_sides\"\n              icon={<ExpandMoreIcon css={{ svg: { rotate: '90deg' } }} />}\n              onClick={onSwitchSides}\n            />\n          </Tooltip>\n        </div>\n\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            flex: 1,\n          }}\n        >\n          <Typography.Text\n            css={{\n              whiteSpace: 'pre-wrap',\n            }}\n          >\n            {diff.map((part, index) => (\n              <span\n                key={index}\n                css={{\n                  backgroundColor: part.added\n                    ? colors.addedBackground\n                    : part.removed\n                    ? colors.removedBackground\n                    : undefined,\n                  textDecoration: part.removed ? 'line-through' : 'none',\n                }}\n              >\n                {part.value}\n              </span>\n            ))}\n          </Typography.Text>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { RegisteredPrompt } from '../types';\nimport { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useUpdateRegisteredPromptTags } from '../hooks/useUpdateRegisteredPromptTags';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\n\nexport const PromptsListTableTagsBox = ({\n  promptEntity,\n  onTagsUpdated,\n}: {\n  promptEntity?: RegisteredPrompt;\n  onTagsUpdated?: () => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const { EditTagsModal, showEditPromptTagsModal } = useUpdateRegisteredPromptTags({ onSuccess: onTagsUpdated });\n\n  const visibleTagList = promptEntity?.tags.filter((tag) => isUserFacingTag(tag.key)) || [];\n  const containsTags = visibleTagList.length > 0;\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagList?.map((tag) => (\n        <KeyValueTag key={tag.key} tag={tag} />\n      ))}\n      <Button\n        componentId=\"mlflow.prompts.details.tags.edit\"\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={() => promptEntity && showEditPromptTagsModal(promptEntity)}\n        aria-label={intl.formatMessage({\n          defaultMessage: 'Edit tags',\n          description: 'Label for the edit tags button on the registered prompt details page\"',\n        })}\n        children={\n          !containsTags ? (\n            <FormattedMessage\n              defaultMessage=\"Add tags\"\n              description=\"Label for the add tags button on the registered prompt details page\"\n            />\n          ) : undefined\n        }\n        type=\"tertiary\"\n      />\n      {EditTagsModal}\n    </div>\n  );\n};\n","import { ErrorView } from '@mlflow/mlflow/src/common/components/ErrorView';\nimport Routes from '../../../routes';\n\ninterface Props {\n  promptName: string;\n}\n\nexport function PromptNotFoundView({ promptName }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Prompt name '${promptName}' does not exist`}\n      fallbackHomePageReactRoute={Routes.promptsPageRoute}\n    />\n  );\n}\n","import invariant from 'invariant';\nimport { usePromptDetailsQuery } from './hooks/usePromptDetailsQuery';\nimport { Link, useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport { ScrollablePageWrapper } from '../../../common/components/ScrollablePageWrapper';\nimport {\n  Breadcrumb,\n  Button,\n  ColumnsIcon,\n  DropdownMenu,\n  GenericSkeleton,\n  Header,\n  OverflowIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  Spacer,\n  TableIcon,\n  TableSkeleton,\n  useDesignSystemTheme,\n  ZoomMarqueeSelection,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PromptVersionsTableMode } from './utils';\nimport { useMemo } from 'react';\nimport Routes from '../../routes';\nimport { CreatePromptModalMode, useCreatePromptModal } from './hooks/useCreatePromptModal';\nimport { useDeletePromptModal } from './hooks/useDeletePromptModal';\nimport { PromptVersionsTable } from './components/PromptVersionsTable';\nimport { useEditRegisteredModelAliasesModal } from '../../../model-registry/hooks/useEditRegisteredModelAliasesModal';\nimport { usePromptDetailsPageViewState } from './hooks/usePromptDetailsPageViewState';\nimport { PromptContentPreview } from './components/PromptContentPreview';\nimport { PromptContentCompare } from './components/PromptContentCompare';\nimport { withErrorBoundary } from '../../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../../common/utils/ErrorUtils';\nimport { PromptPageErrorHandler } from './components/PromptPageErrorHandler';\nimport { first, isEmpty } from 'lodash';\nimport { PromptsListTableTagsBox } from './components/PromptDetailsTagsBox';\nimport { PromptNotFoundView } from './components/PromptNotFoundView';\nimport { useUpdatePromptVersionMetadataModal } from './hooks/useUpdatePromptVersionMetadataModal';\n\nconst getAliasesModalTitle = (version: string) => (\n  <FormattedMessage\n    defaultMessage=\"Add/edit alias for prompt version {version}\"\n    description=\"Title for the edit aliases modal on the registered prompt details page\"\n    values={{ version }}\n  />\n);\n\nconst PromptsDetailsPage = () => {\n  const { promptName } = useParams<{ promptName: string }>();\n  const { theme } = useDesignSystemTheme();\n  const navigate = useNavigate();\n\n  invariant(promptName, 'Prompt name should be defined');\n\n  const { data: promptDetailsData, refetch, isLoading, error: promptLoadError } = usePromptDetailsQuery({ promptName });\n\n  const { CreatePromptModal, openModal: openCreateVersionModal } = useCreatePromptModal({\n    mode: CreatePromptModalMode.CreatePromptVersion,\n    registeredPrompt: promptDetailsData?.prompt,\n    latestVersion: first(promptDetailsData?.versions),\n    onSuccess: async ({ promptVersion }) => {\n      await refetch();\n      if (promptVersion) {\n        setPreviewMode({ version: promptVersion });\n      }\n    },\n  });\n\n  const { DeletePromptModal, openModal: openDeleteModal } = useDeletePromptModal({\n    registeredPrompt: promptDetailsData?.prompt,\n    onSuccess: () => navigate(Routes.promptsPageRoute),\n  });\n\n  const { EditPromptVersionMetadataModal, showEditPromptVersionMetadataModal } = useUpdatePromptVersionMetadataModal({\n    onSuccess: refetch,\n  });\n\n  const {\n    setCompareMode,\n    setPreviewMode,\n    setTableMode,\n    switchSides,\n    viewState,\n    setSelectedVersion,\n    setComparedVersion,\n  } = usePromptDetailsPageViewState(promptDetailsData);\n\n  const { mode } = viewState;\n\n  const isEmptyVersions = !isLoading && !promptDetailsData?.versions.length;\n\n  const showPreviewPane =\n    !isLoading && !isEmptyVersions && [PromptVersionsTableMode.PREVIEW, PromptVersionsTableMode.COMPARE].includes(mode);\n\n  const selectedVersionEntity = promptDetailsData?.versions.find(\n    ({ version }) => version === viewState.selectedVersion,\n  );\n\n  const comparedVersionEntity = promptDetailsData?.versions.find(\n    ({ version }) => version === viewState.comparedVersion,\n  );\n\n  const aliasesByVersion = useMemo(() => {\n    const result: Record<string, string[]> = {};\n    promptDetailsData?.prompt?.aliases?.forEach(({ alias, version }) => {\n      if (!result[version]) {\n        result[version] = [];\n      }\n      result[version].push(alias);\n    });\n    return result;\n  }, [promptDetailsData]);\n\n  const { EditAliasesModal, showEditAliasesModal } = useEditRegisteredModelAliasesModal({\n    model: promptDetailsData?.prompt || null,\n    onSuccess: refetch,\n    modalTitle: getAliasesModalTitle,\n    modalDescription: (\n      <FormattedMessage\n        // TODO: add a documentation link (\"Learn more\")\n        defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular prompt version.\"\n        description=\"Description for the edit aliases modal on the registered prompt details page\"\n      />\n    ),\n  });\n\n  // If the load error occurs, show not found page\n  if (promptLoadError) {\n    return <PromptNotFoundView promptName={promptName} />;\n  }\n\n  const breadcrumbs = (\n    <Breadcrumb>\n      <Breadcrumb.Item>\n        <Link to={Routes.promptsPageRoute}>Prompts</Link>\n      </Breadcrumb.Item>\n    </Breadcrumb>\n  );\n\n  if (isLoading) {\n    return (\n      <ScrollablePageWrapper>\n        <PromptsDetailsPage.Skeleton breadcrumbs={breadcrumbs} />\n      </ScrollablePageWrapper>\n    );\n  }\n\n  return (\n    <ScrollablePageWrapper css={{ overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n      <Spacer shrinks={false} />\n      <Header\n        breadcrumbs={breadcrumbs}\n        title={promptDetailsData?.prompt?.name}\n        buttons={\n          <>\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId=\"mlflow.prompts.details.actions\"\n                  icon={<OverflowIcon />}\n                  aria-label=\"More actions\"\n                />\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content>\n                <DropdownMenu.Item componentId=\"mlflow.prompts.details.actions.delete\" onClick={openDeleteModal}>\n                  <FormattedMessage\n                    defaultMessage=\"Delete\"\n                    description=\"Label for the delete prompt action on the registered prompt details page\"\n                  />\n                </DropdownMenu.Item>\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n            <Button componentId=\"mlflow.prompts.details.create\" type=\"primary\" onClick={openCreateVersionModal}>\n              <FormattedMessage\n                defaultMessage=\"Create prompt version\"\n                description=\"Label for the create prompt action on the registered prompt details page\"\n              />\n            </Button>\n          </>\n        }\n      />\n      <PromptsListTableTagsBox onTagsUpdated={refetch} promptEntity={promptDetailsData?.prompt} />\n      <Spacer shrinks={false} />\n      <div css={{ flex: 1, display: 'flex', overflow: 'hidden' }}>\n        <div css={{ flex: showPreviewPane ? '0 0 320px' : 1, display: 'flex', flexDirection: 'column' }}>\n          <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n            <SegmentedControlGroup\n              name=\"mlflow.prompts.details.mode\"\n              componentId=\"mlflow.prompts.details.mode\"\n              value={mode}\n              disabled={isLoading}\n            >\n              <SegmentedControlButton value={PromptVersionsTableMode.PREVIEW} onClick={() => setPreviewMode()}>\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <ZoomMarqueeSelection />\n                  <FormattedMessage\n                    defaultMessage=\"Preview\"\n                    description=\"Label for the preview mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n              <SegmentedControlButton value={PromptVersionsTableMode.TABLE} onClick={setTableMode}>\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <TableIcon />{' '}\n                  <FormattedMessage\n                    defaultMessage=\"List\"\n                    description=\"Label for the list mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n              <SegmentedControlButton\n                disabled={Boolean(!promptDetailsData?.versions.length || promptDetailsData?.versions.length < 2)}\n                value={PromptVersionsTableMode.COMPARE}\n                onClick={setCompareMode}\n              >\n                <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                  <ColumnsIcon />{' '}\n                  <FormattedMessage\n                    defaultMessage=\"Compare\"\n                    description=\"Label for the compare mode on the registered prompt details page\"\n                  />\n                </div>\n              </SegmentedControlButton>\n            </SegmentedControlGroup>\n          </div>\n          <Spacer shrinks={false} size=\"sm\" />\n          <PromptVersionsTable\n            isLoading={isLoading}\n            registeredPrompt={promptDetailsData?.prompt}\n            promptVersions={promptDetailsData?.versions}\n            selectedVersion={viewState.selectedVersion}\n            comparedVersion={viewState.comparedVersion}\n            showEditAliasesModal={showEditAliasesModal}\n            aliasesByVersion={aliasesByVersion}\n            onUpdateSelectedVersion={setSelectedVersion}\n            onUpdateComparedVersion={setComparedVersion}\n            mode={mode}\n          />\n        </div>\n        {showPreviewPane && (\n          <div css={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n            <div css={{ borderLeft: `1px solid ${theme.colors.border}`, flex: 1, overflow: 'hidden', display: 'flex' }}>\n              {mode === PromptVersionsTableMode.PREVIEW && (\n                <PromptContentPreview\n                  promptVersion={selectedVersionEntity}\n                  onUpdatedContent={refetch}\n                  onDeletedVersion={async () => {\n                    await refetch().then(({ data }) => {\n                      if (!isEmpty(data?.versions) && data?.versions[0].version) {\n                        setSelectedVersion(data?.versions[0].version);\n                      } else {\n                        setTableMode();\n                      }\n                    });\n                  }}\n                  aliasesByVersion={aliasesByVersion}\n                  showEditAliasesModal={showEditAliasesModal}\n                  registeredPrompt={promptDetailsData?.prompt}\n                  showEditPromptVersionMetadataModal={showEditPromptVersionMetadataModal}\n                />\n              )}\n              {mode === PromptVersionsTableMode.COMPARE && (\n                <PromptContentCompare\n                  baselineVersion={selectedVersionEntity}\n                  comparedVersion={comparedVersionEntity}\n                  onSwitchSides={switchSides}\n                  onEditVersion={setPreviewMode}\n                  showEditAliasesModal={showEditAliasesModal}\n                  registeredPrompt={promptDetailsData?.prompt}\n                  aliasesByVersion={aliasesByVersion}\n                />\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      <Spacer shrinks={false} />\n      {EditAliasesModal}\n      {CreatePromptModal}\n      {DeletePromptModal}\n      {EditPromptVersionMetadataModal}\n    </ScrollablePageWrapper>\n  );\n};\n\nPromptsDetailsPage.Skeleton = function PromptsDetailsPageSkeleton({ breadcrumbs }: { breadcrumbs?: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <>\n      <Spacer shrinks={false} />\n      <Header\n        breadcrumbs={breadcrumbs}\n        title={<GenericSkeleton css={{ height: theme.general.heightBase, width: 200 }} />}\n        buttons={<GenericSkeleton css={{ height: theme.general.heightBase, width: 120 }} />}\n      />\n      <Spacer shrinks={false} />\n      <TableSkeleton lines={4} />\n      <Spacer shrinks={false} />\n      <div css={{ display: 'flex', gap: theme.spacing.lg }}>\n        <div css={{ flex: '0 0 320px' }}>\n          <TableSkeleton lines={6} />\n        </div>\n        <div css={{ flex: 1 }}>\n          <TableSkeleton lines={4} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default withErrorBoundary(\n  ErrorUtils.mlflowServices.EXPERIMENTS,\n  PromptsDetailsPage,\n  undefined,\n  PromptPageErrorHandler,\n);\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Modal } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RegisteredPrompt } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nexport const useDeletePromptModal = ({\n  registeredPrompt,\n  onSuccess,\n}: {\n  registeredPrompt?: RegisteredPrompt;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const { mutate } = useMutation<\n    unknown,\n    Error,\n    {\n      promptName: string;\n    }\n  >({\n    mutationFn: async ({ promptName }) => {\n      await RegisteredPromptsApi.deleteRegisteredPrompt(promptName);\n    },\n  });\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.prompts.delete_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={<FormattedMessage defaultMessage=\"Delete prompt\" description=\"A header for the delete prompt modal\" />}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A label for the confirm button in the delete prompt modal\"\n        />\n      }\n      okButtonProps={{ danger: true }}\n      onOk={async () => {\n        if (!registeredPrompt?.name) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            promptName: registeredPrompt.name,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n        setOpen(false);\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A label for the cancel button in the delete prompt modal\"\n        />\n      }\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete the prompt?\"\n        description=\"A content for the delete prompt confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = () => setOpen(true);\n\n  return { DeletePromptModal: modalElement, openModal };\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport { RegisteredPromptVersion } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport { FormattedMessage } from 'react-intl';\n\ntype UpdatePromptVersionMetadataPayload = {\n  promptName: string;\n  promptVersion: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdatePromptVersionMetadataModal = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdatePromptVersionMetadataPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptName, promptVersion }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) =>\n          RegisteredPromptsApi.setRegisteredPromptVersionTag(promptName, promptVersion, key, value),\n        ),\n        ...toDelete.map(({ key }) =>\n          RegisteredPromptsApi.deleteRegisteredPromptVersionTag(promptName, promptVersion, key),\n        ),\n      ]);\n    },\n  });\n\n  const {\n    EditTagsModal: EditPromptVersionMetadataModal,\n    showEditTagsModal,\n    isLoading,\n  } = useEditKeyValueTagsModal<Pick<RegisteredPromptVersion, 'name' | 'version' | 'tags'>>({\n    title: (\n      <FormattedMessage\n        defaultMessage=\"Add/Edit Prompt Version Metadata\"\n        description=\"Title for a modal that allows the user to add or edit metadata tags on prompt versions.\"\n      />\n    ),\n    valueRequired: true,\n    saveTagsHandler: (promptVersion, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!promptVersion.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptName: promptVersion.name,\n            promptVersion: promptVersion.version,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptVersionMetadataModal = useCallback(\n    (promptVersion: RegisteredPromptVersion) =>\n      showEditTagsModal({\n        name: promptVersion.name,\n        version: promptVersion.version,\n        tags: promptVersion.tags?.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditPromptVersionMetadataModal, showEditPromptVersionMetadataModal, isLoading };\n};\n","import { Tag } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ReadyIcon } from './utils';\n\nexport const Stages = {\n  NONE: 'None',\n  STAGING: 'Staging',\n  PRODUCTION: 'Production',\n  ARCHIVED: 'Archived',\n};\n\nexport const ACTIVE_STAGES = [Stages.STAGING, Stages.PRODUCTION];\n\nexport const StageLabels = {\n  [Stages.NONE]: 'None',\n  [Stages.STAGING]: 'Staging',\n  [Stages.PRODUCTION]: 'Production',\n  [Stages.ARCHIVED]: 'Archived',\n};\n\nexport const StageTagComponents = {\n  [Stages.NONE]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_37\">{StageLabels[Stages.NONE]}</Tag>\n  ),\n  [Stages.STAGING]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_38\" color=\"lemon\">\n      {StageLabels[Stages.STAGING]}\n    </Tag>\n  ),\n  [Stages.PRODUCTION]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_39\" color=\"lime\">\n      {StageLabels[Stages.PRODUCTION]}\n    </Tag>\n  ),\n  [Stages.ARCHIVED]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_40\" color=\"charcoal\">\n      {StageLabels[Stages.ARCHIVED]}\n    </Tag>\n  ),\n};\n\nexport interface ModelVersionActivity {\n  creation_timestamp?: number;\n  user_id?: string;\n  activity_type: ActivityTypes;\n  comment?: string;\n  last_updated_timestamp?: number;\n  from_stage?: string;\n  to_stage?: string;\n  system_comment?: string;\n  id?: string;\n}\n\nexport enum ActivityTypes {\n  APPLIED_TRANSITION = 'APPLIED_TRANSITION',\n  REQUESTED_TRANSITION = 'REQUESTED_TRANSITION',\n  SYSTEM_TRANSITION = 'SYSTEM_TRANSITION',\n  CANCELLED_REQUEST = 'CANCELLED_REQUEST',\n  APPROVED_REQUEST = 'APPROVED_REQUEST',\n  REJECTED_REQUEST = 'REJECTED_REQUEST',\n  NEW_COMMENT = 'NEW_COMMENT',\n}\n\nexport interface PendingModelVersionActivity {\n  type: ActivityTypes;\n  to_stage: string;\n}\n\nexport const EMPTY_CELL_PLACEHOLDER = <div style={{ marginTop: -12 }}>_</div>;\n\nexport const ModelVersionStatus = {\n  READY: 'READY',\n};\n\nexport const DefaultModelVersionStatusMessages = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage defaultMessage=\"Ready.\" description=\"Default status message for model versions that are ready\" />\n  ),\n};\n\nexport const modelVersionStatusIconTooltips = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage\n      defaultMessage=\"Ready\"\n      description=\"Tooltip text for ready model version status icon in model view page\"\n    />\n  ),\n};\n\nexport const ModelVersionStatusIcons = {\n  [ModelVersionStatus.READY]: <ReadyIcon />,\n};\n\nexport const MODEL_VERSION_STATUS_POLL_INTERVAL = 10000;\n\n// Number of registered models initially shown on the model registry list page\nconst REGISTERED_MODELS_PER_PAGE = 10;\n\n// Variant for compact tables (unified list pattern), this is\n// going to become a default soon\nexport const REGISTERED_MODELS_PER_PAGE_COMPACT = 25;\n\nexport const MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER = 75; // request size has a limit of 4KB\n\nexport const REGISTERED_MODELS_SEARCH_NAME_FIELD = 'name';\n\nexport const REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD = 'timestamp';\n\nexport const AntdTableSortOrder = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const archiveExistingVersionToolTipText = (currentStage: string) => (\n  <FormattedMessage\n    defaultMessage=\"Model versions in the `{currentStage}` stage will be moved to the\n     `Archived` stage.\"\n    description=\"Tooltip text for transitioning existing model versions in stage to archived\n     in the model versions page\"\n    values={{ currentStage: currentStage }}\n  />\n);\n\nexport const mlflowAliasesLearnMoreLink =\n  'https://mlflow.org/docs/latest/model-registry.html#using-registered-model-aliases';\n","import { matchPredefinedError, UnknownError } from '@databricks/web-shared/errors';\nimport { fetchEndpoint } from '../../../common/utils/FetchUtils';\nimport { RegisteredPrompt, RegisteredPromptsListResponse, RegisteredPromptVersion } from './types';\nimport { IS_PROMPT_TAG_NAME, IS_PROMPT_TAG_VALUE, REGISTERED_PROMPT_SOURCE_RUN_IDS } from './utils';\n\nconst defaultErrorHandler = async ({\n  reject,\n  response,\n  err: originalError,\n}: {\n  reject: (cause: any) => void;\n  response: Response;\n  err: Error;\n}) => {\n  // Try to match the error to one of the predefined errors\n  const predefinedError = matchPredefinedError(response);\n  const error = predefinedError instanceof UnknownError ? originalError : predefinedError;\n  if (response) {\n    try {\n      // Try to extract exact error message from the response\n      const messageFromResponse = (await response.json())?.message;\n      if (messageFromResponse) {\n        error.message = messageFromResponse;\n      }\n    } catch {\n      // If we fail to extract the message, we will keep the original error message\n    }\n  }\n\n  reject(error);\n};\n\nexport const RegisteredPromptsApi = {\n  listRegisteredPrompts: (searchFilter?: string, pageToken?: string) => {\n    const params = new URLSearchParams();\n    let filter = `tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}'`;\n\n    if (searchFilter) {\n      filter = `${filter} AND name ILIKE '%${searchFilter}%'`;\n    }\n\n    if (pageToken) {\n      params.append('page_token', pageToken);\n    }\n\n    params.append('filter', filter);\n\n    const relativeUrl = ['ajax-api/2.0/mlflow/registered-models/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<RegisteredPromptsListResponse>;\n  },\n  setRegisteredPromptTag: (promptName: string, key: string, value: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/set-tag',\n      method: 'POST',\n      body: JSON.stringify({ key, value, name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptTag: (promptName: string, key: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/delete-tag',\n      method: 'DELETE',\n      body: JSON.stringify({ key, name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  createRegisteredPrompt: (promptName: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/create',\n      method: 'POST',\n      body: JSON.stringify({\n        name: promptName,\n        tags: [\n          {\n            key: IS_PROMPT_TAG_NAME,\n            value: IS_PROMPT_TAG_VALUE,\n          },\n        ],\n      }),\n      error: defaultErrorHandler,\n    }) as Promise<{\n      registered_model?: RegisteredPrompt;\n    }>;\n  },\n  createRegisteredPromptVersion: (\n    promptName: string,\n    tags: { key: string; value: string }[] = [],\n    description?: string,\n  ) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/create',\n      method: 'POST',\n      body: JSON.stringify({\n        name: promptName,\n        description,\n        // Put a placeholder source here for now to satisfy the API validation\n        // TODO: remove source after it's no longer needed\n        source: 'dummy-source',\n        tags: [\n          {\n            key: IS_PROMPT_TAG_NAME,\n            value: IS_PROMPT_TAG_VALUE,\n          },\n          ...tags,\n        ],\n      }),\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_version?: RegisteredPromptVersion;\n    }>;\n  },\n  setRegisteredPromptVersionTag: (promptName: string, promptVersion: string, key: string, value: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/set-tag',\n      method: 'POST',\n      body: JSON.stringify({ key, value, name: promptName, version: promptVersion }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptVersionTag: (promptName: string, promptVersion: string, key: string) => {\n    fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/delete-tag',\n      method: 'DELETE',\n      body: JSON.stringify({ key, name: promptName, version: promptVersion }),\n      error: defaultErrorHandler,\n    });\n  },\n  getPromptDetails: (promptName: string) => {\n    const params = new URLSearchParams();\n    params.append('name', promptName);\n    const relativeUrl = ['ajax-api/2.0/mlflow/registered-models/get', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      registered_model: RegisteredPrompt;\n    }>;\n  },\n  getPromptVersions: (promptName: string) => {\n    const params = new URLSearchParams();\n    params.append('filter', `name='${promptName}' AND tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}'`);\n    const relativeUrl = ['ajax-api/2.0/mlflow/model-versions/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_versions?: RegisteredPromptVersion[];\n    }>;\n  },\n  getPromptVersionsForRun: (runUuid: string) => {\n    const params = new URLSearchParams();\n    params.append(\n      'filter',\n      `tags.\\`${IS_PROMPT_TAG_NAME}\\` = '${IS_PROMPT_TAG_VALUE}' AND tags.\\`${REGISTERED_PROMPT_SOURCE_RUN_IDS}\\` ILIKE \"%${runUuid}%\"`,\n    );\n    const relativeUrl = ['ajax-api/2.0/mlflow/model-versions/search', params.toString()].join('?');\n    return fetchEndpoint({\n      relativeUrl,\n      error: defaultErrorHandler,\n    }) as Promise<{\n      model_versions?: RegisteredPromptVersion[];\n    }>;\n  },\n  deleteRegisteredPrompt: (promptName: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/registered-models/delete',\n      method: 'DELETE',\n      body: JSON.stringify({ name: promptName }),\n      error: defaultErrorHandler,\n    });\n  },\n  deleteRegisteredPromptVersion: (promptName: string, version: string) => {\n    return fetchEndpoint({\n      relativeUrl: 'ajax-api/2.0/mlflow/model-versions/delete',\n      method: 'DELETE',\n      body: JSON.stringify({ name: promptName, version }),\n      error: defaultErrorHandler,\n    });\n  },\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport { RegisteredPrompt } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\n\ntype UpdateTagsPayload = {\n  promptId: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdateRegisteredPromptTags = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdateTagsPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptId }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) => RegisteredPromptsApi.setRegisteredPromptTag(promptId, key, value)),\n        ...toDelete.map(({ key }) => RegisteredPromptsApi.deleteRegisteredPromptTag(promptId, key)),\n      ]);\n    },\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal<\n    Pick<RegisteredPrompt, 'name' | 'tags'>\n  >({\n    valueRequired: true,\n    saveTagsHandler: (prompt, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!prompt.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptId: prompt.name,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptTagsModal = useCallback(\n    (prompt: RegisteredPrompt) =>\n      showEditTagsModal({\n        name: prompt.name,\n        tags: prompt.tags.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditTagsModal, showEditPromptTagsModal, isLoading };\n};\n","import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper\n      // Subtract header height\n      css={{ height: 'calc(100% - 60px)' }}\n      className={className}\n    >\n      {children}\n    </PageWrapper>\n  );\n};\n","import type { RegisteredPrompt, RegisteredPromptVersion } from './types';\n\nexport const REGISTERED_PROMPT_CONTENT_TAG_KEY = 'mlflow.prompt.text';\n// Tag key used to store the run ID associated with a single prompt version\nexport const REGISTERED_PROMPT_SOURCE_RUN_ID = 'mlflow.prompt.run_id';\n// Tak key used to store comma-separated run IDs associated with a prompt\nexport const REGISTERED_PROMPT_SOURCE_RUN_IDS = 'mlflow.prompt.run_ids';\nexport const IS_PROMPT_TAG_NAME = 'mlflow.prompt.is_prompt';\nexport const IS_PROMPT_TAG_VALUE = 'true';\n\nexport type PromptsTableMetadata = { onEditTags: (editedEntity: RegisteredPrompt) => void };\nexport type PromptsVersionsTableMetadata = {\n  showEditAliasesModal: (versionNumber: string) => void;\n  aliasesByVersion: Record<string, string[]>;\n  registeredPrompt: RegisteredPrompt;\n};\n\nexport enum PromptVersionsTableMode {\n  TABLE = 'table',\n  PREVIEW = 'preview',\n  COMPARE = 'compare',\n}\n\nexport const getPromptContentTagValue = (promptVersion: RegisteredPromptVersion) => {\n  return promptVersion?.tags?.find((tag) => tag.key === REGISTERED_PROMPT_CONTENT_TAG_KEY)?.value;\n};\n","import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { ModelVersionAliasTag } from './ModelVersionAliasTag';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ModelVersionTableAliasesCellProps {\n  aliases?: string[];\n  modelName: string;\n  version: string;\n  onAddEdit: () => void;\n  className?: string;\n}\n\nexport const ModelVersionTableAliasesCell = ({\n  aliases = [],\n  onAddEdit,\n  className,\n}: ModelVersionTableAliasesCellProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        maxWidth: 300,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        rowGap: theme.spacing.xs / 2,\n        columnGap: theme.spacing.xs,\n      }}\n      className={className}\n    >\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_30\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add\"\n            description=\"Model registry > model version table > aliases column > 'add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {aliases.map((alias) => (\n            <ModelVersionAliasTag value={alias} key={alias} css={{ marginTop: theme.spacing.xs / 2 }} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_41\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n"],"names":["ErrorFallback","_jsx","Empty","title","FormattedMessage","id","defaultMessage","description","image","DangerIcon","CustomErrorBoundary","_ref","children","customFallbackComponent","logErrorToConsole","error","info","console","componentStack","ErrorBoundary","onError","FallbackComponent","fallback","withErrorBoundary","service","Component","errorMessage","props","_ref2","name","styles","_ref4","_ref5","_ref8","ModelVersionAliasSelect","renderKey","setDraftAliases","existingAliases","draftAliases","version","aliasToVersionMap","disabled","intl","useIntl","dropdownVisible","setDropdownVisible","useState","theme","useDesignSystemTheme","removeFromEditedAliases","useCallback","alias","aliases","filter","existingAlias","updateEditedAliases","sanitizedAliases","map","replace","toLowerCase","substring","length","uniqueAliases","Array","from","Set","_jsxs","LegacySelect","filterOption","val","opt","value","startsWith","placeholder","formatMessage","allowClear","css","mode","onChange","dangerouslySetAntdProps","dropdownMatchSelectWidth","tagRender","_ref3","ModelVersionAliasTag","compact","closable","onClose","toString","onDropdownVisibleChange","open","Option","_css","display","marginRight","spacing","xs","Object","entries","_ref6","otherVersion","_ref7","aliasedVersion","values","JSON","stringify","useEditRegisteredModelAliasesModal","model","onSuccess","modalTitle","modalDescription","showModal","setShowModal","form","LegacyForm","useForm","setErrorMessage","setExistingAliases","currentlyEditedVersion","setCurrentlyEditedVersion","dispatch","useDispatch","showEditAliasesModal","versionNumber","_model$aliases","modelVersionAliases","conflictedAliases","useMemo","versionsWithAliases","reduce","aliasMap","aliasEntry","_aliasMap$find","some","find","push","otherVersionMappings","_version$aliases","alias_name","_model$aliases2","result","isPristine","isEqual","slice","sort","isExceedingLimit","isInvalid","EditAliasesModal","Modal","componentId","visible","footer","Button","onClick","loading","type","save","setModelVersionAliasesApi","then","catch","e","extractedErrorMessage","getMessageField","getUserVisibleError","text","destroyOnClose","onCancel","confirmLoading","Typography","Paragraph","link","chunks","href","mlflowAliasesLearnMoreLink","rel","target","layout","Item","flexDirection","gap","Alert","role","message","limit","_ref9","PromptsListTableVersionCell","row","original","getValue","Text","ShowArtifactCodeSnippet","code","CopyButton","zIndex","position","top","right","showLabel","copyText","icon","CopyIcon","CodeSnippet","language","showLineNumbers","style","padding","sm","color","colors","textPrimary","backgroundColor","backgroundSecondary","whiteSpace","wrapLongLines","ErrorUtils","mlflowServices","MODEL_REGISTRY","EXPERIMENTS","MODEL_SERVING","RUN_TRACKING","className","Tag","fontWeight","typography","typographyBoldFontWeight","maxWidth","textOverflow","overflow","CreatePromptModalMode","useCreatePromptModal","CreatePromptVersion","registeredPrompt","latestVersion","setOpen","defaultValues","draftName","draftValue","commitMessage","tags","isCreatingNewPrompt","CreatePrompt","isCreatingPromptVersion","mutate","mutateCreateVersion","reset","errorsReset","isLoading","useMutation","mutationFn","async","_version$model_versio","promptName","createPromptEntity","content","RegisteredPromptsApi","createRegisteredPrompt","createRegisteredPromptVersion","key","REGISTERED_PROMPT_CONTENT_TAG_KEY","newVersionNumber","model_version","Error","CreatePromptModal","okText","okButtonProps","onOk","handleSubmit","data","promptVersion","cancelText","size","_Fragment","Spacer","FormUI","Label","htmlFor","RHFControlledComponents","Input","control","rules","required","pattern","validationState","formState","errors","undefined","Message","TextArea","autoSize","minRows","maxRows","openModal","_getPromptContentTagV","getPromptContentTagValue","PromptPageErrorHandler","_error$message","ScrollablePageWrapper","queryFn","_versionsResponse$mod","queryKey","detailsResponse","versionsResponse","Promise","all","getPromptDetails","getPromptVersions","prompt","registered_model","versions","model_versions","PromptVersionsTableAliasesCell","table","options","meta","aliasesByVersion","mvAliases","ModelVersionTableAliasesCell","modelName","onAddEdit","PromptVersionsDiffSelectorButton","isSelectedFirstToCompare","isSelectedSecondToCompare","onSelectFirst","onSelectSecond","width","general","buttonHeight","alignItems","paddingRight","height","buttonInnerHeight","flex","Tooltip","delayDuration","side","border","actionDefaultBorderFocus","actionDefaultBorderDefault","borderRight","marginLeft","borderTopLeftRadius","borders","borderRadiusMd","borderBottomLeftRadius","actionDefaultBackgroundPress","actionDefaultBackgroundDefault","cursor","actionDefaultBackgroundHover","borderLeft","borderTopRightRadius","borderBottomRightRadius","PromptVersionsTable","promptVersions","onUpdateComparedVersion","onUpdateSelectedVersion","comparedVersion","selectedVersion","columns","resultColumns","header","accessorKey","cell","PromptVersionsTableMode","TABLE","accessorFn","creation_timestamp","Utils","formatTimestamp","useReactTable","getRowId","getCoreRowModel","Table","scrollable","empty","TableRow","isHeader","getLeafHeaders","TableHeader","flexRender","column","columnDef","getContext","TableSkeletonRows","getRowModel","rows","isSelectedSingle","PREVIEW","includes","COMPARE","showCursorForEntireRow","heightBase","getAllCells","TableCell","md","ChevronRightIcon","promptDetailsViewStateReducer","state","action","PromptVersionRuns","isLoadingRuns","runIds","runInfoMap","showAll","setShowAll","visibleCount","Math","min","hasMore","bold","ParagraphSkeleton","flexWrap","runId","index","runInfo","isNil","experimentId","runUuid","runName","Link","to","Routes","getRunPageRoute","count","PromptVersionTags","onEditVersionMetadata","shouldAllowEditingMetadata","editButton","PencilIcon","tag","KeyValueTag","Hint","PromptVersionMetadata","_registeredPromptVers3","registeredPromptVersion","onEditVersion","showEditPromptVersionMetadataModal","isBaseline","_registeredPromptVers","_registeredPromptVers2","tagValue","REGISTERED_PROMPT_SOURCE_RUN_IDS","split","trim","runUuids","arguments","queryResults","useQueries","queries","MlflowService","getRun","run_id","transformGetRunResponse","forEach","queryResult","_queryResult$data","_queryResult$data$run","run","usePromptRunsInfo","visibleTagList","isUserFacingTag","versionElement","gridTemplateColumns","gridAutoRows","lineHeightLg","rowGap","columnGap","PROMPT_VARIABLE_REGEX","PromptContentPreview","onUpdatedContent","onDeletedVersion","DeletePromptModal","openDeleteModal","deleteRegisteredPromptVersion","danger","useDeletePromptVersionModal","showUsageExample","setShowUsageExample","variableNames","variables","match","exec","variable","uniq","buildCodeSnippetContent","paddingTop","borderRadius","borderRadiusSm","Title","level","TrashIcon","PlayIcon","shrinks","codeSnippetContent","join","PromptContentCompare","baselineVersion","onSwitchSides","baselineValue","comparedValue","diff","_diffWords","diffWords","addedBackground","isDarkMode","green700","green300","removedBackground","red700","red300","baseline","compared","paddingLeft","heightSm","ExpandMoreIcon","part","added","removed","textDecoration","PromptsListTableTagsBox","promptEntity","onTagsUpdated","EditTagsModal","showEditPromptTagsModal","useUpdateRegisteredPromptTags","containsTags","paddingBottom","PromptNotFoundView","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","promptsPageRoute","getAliasesModalTitle","PromptsDetailsPage","_promptDetailsData$pr3","useParams","navigate","useNavigate","invariant","promptDetailsData","refetch","promptLoadError","_queryResult$error","useQuery","retry","usePromptDetailsQuery","openCreateVersionModal","first","setPreviewMode","deleteRegisteredPrompt","useDeletePromptModal","EditPromptVersionMetadataModal","updateMutation","toAdd","toDelete","setRegisteredPromptVersionTag","deleteRegisteredPromptVersionTag","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","saveTagsHandler","currentTags","newTags","addedOrModifiedTags","deletedTags","diffCurrentAndNewTags","resolve","reject","_promptVersion$tags","useUpdatePromptVersionMetadataModal","setCompareMode","setTableMode","switchSides","viewState","setSelectedVersion","setComparedVersion","dispatchViewMode","useReducer","versionEntity","firstVersion","_first","_promptDetailsData$ve","usePromptDetailsPageViewState","isEmptyVersions","showPreviewPane","selectedVersionEntity","comparedVersionEntity","_promptDetailsData$pr","_promptDetailsData$pr2","breadcrumbs","Breadcrumb","Skeleton","Header","buttons","DropdownMenu","Root","Trigger","asChild","OverflowIcon","Content","SegmentedControlGroup","SegmentedControlButton","ZoomMarqueeSelection","TableIcon","Boolean","ColumnsIcon","isEmpty","_ref10","_ref11","GenericSkeleton","TableSkeleton","lines","lg","Stages","NONE","STAGING","PRODUCTION","ARCHIVED","ACTIVE_STAGES","StageLabels","StageTagComponents","ActivityTypes","marginTop","ModelVersionStatus","READY","DefaultModelVersionStatusMessages","modelVersionStatusIconTooltips","ModelVersionStatusIcons","ReadyIcon","MODEL_VERSION_STATUS_POLL_INTERVAL","REGISTERED_MODELS_PER_PAGE_COMPACT","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","REGISTERED_MODELS_SEARCH_NAME_FIELD","REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD","AntdTableSortOrder","ASC","DESC","archiveExistingVersionToolTipText","currentStage","defaultErrorHandler","response","err","originalError","predefinedError","matchPredefinedError","UnknownError","_await$response$json","messageFromResponse","json","listRegisteredPrompts","searchFilter","pageToken","params","URLSearchParams","IS_PROMPT_TAG_NAME","IS_PROMPT_TAG_VALUE","append","relativeUrl","fetchEndpoint","setRegisteredPromptTag","method","body","deleteRegisteredPromptTag","source","getPromptVersionsForRun","promptId","PageWrapper","_promptVersion$tags$f"],"sourceRoot":""}