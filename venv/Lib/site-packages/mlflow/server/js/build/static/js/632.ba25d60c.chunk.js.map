{"version":3,"file":"static/js/632.ba25d60c.chunk.js","mappings":"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","sources":["experiment-tracking/components/LazyPlot.tsx","experiment-tracking/components/LineSmoothSlider.tsx","common/components/Progress.tsx","experiment-tracking/components/MetricsPlotControls.tsx","experiment-tracking/components/HtmlTableView.tsx","experiment-tracking/components/MetricsSummaryTable.tsx","common/components/IconButton.tsx","experiment-tracking/components/RunLinksPopover.tsx","experiment-tracking/components/MetricsPlotPanel.tsx","experiment-tracking/components/MetricsPlotView.tsx","experiment-tracking/components/NotFoundPage.tsx"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport { SectionErrorBoundary } from '../../common/components/error-boundaries/SectionErrorBoundary';\n\nconst Plot = React.lazy(() => import('react-plotly.js'));\n\nexport const LazyPlot = ({ fallback, ...props }: any) => (\n  <SectionErrorBoundary>\n    <React.Suspense fallback={fallback ?? <LegacySkeleton active />}>\n      <Plot {...props} />\n    </React.Suspense>\n  </SectionErrorBoundary>\n);\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Input, Slider } from '@databricks/design-system';\nimport { clamp, isEmpty, isUndefined, keys } from 'lodash';\nimport { useState } from 'react';\n\nconst TRACK_SIZE = 20;\nconst THUMB_SIZE = 14;\nconst MARK_SIZE = 8;\nconst MARK_OFFSET_X = (THUMB_SIZE - MARK_SIZE) / 2;\nconst MARK_OFFSET_Y = (TRACK_SIZE - MARK_SIZE) / 2;\n\nconst ZINDEX_MARK = 1;\nconst ZINDEX_THUMB = 2;\n\nconst STEP_MARKS_DISPLAY_THRESHOLD = 10;\n\ninterface LineSmoothSliderProps {\n  max?: number;\n  min?: number;\n  step?: number;\n  marks?: Record<number, any>;\n  value: number | undefined;\n  onChange: (value: number) => void;\n  disabled?: boolean;\n  componentId?: string;\n  onAfterChange?: (value: number) => void;\n}\n\n// Internal helper function: finds the closest value to the given value from the marks\nconst getClosestValue = (marks: Record<number, string>, value: number, defaultValue: number) =>\n  keys(marks).reduce(\n    (prev, curr) => (Math.abs(Number(curr) - value) < Math.abs(prev - value) ? Number(curr) : Number(prev)),\n    defaultValue,\n  );\n\n// Internal helper function: finds the next value based on direction (down or up) from the marks\nconst getNextValue = (marks: Record<number, string>, currentValue: number, direction: 'down' | 'up') =>\n  direction === 'down'\n    ? Math.max(\n        ...Object.keys(marks)\n          .filter((mark) => Number(mark) < currentValue)\n          .map(Number),\n      )\n    : Math.min(\n        ...Object.keys(marks)\n          .filter((mark) => Number(mark) > currentValue)\n          .map(Number),\n      );\n\nexport const LineSmoothSlider = ({\n  max = 1,\n  min = 0,\n  step,\n  marks,\n  value,\n  onChange,\n  disabled,\n  onAfterChange,\n  componentId,\n}: LineSmoothSliderProps) => {\n  const { theme } = useDesignSystemTheme();\n  const shouldUseMarks = !isEmpty(marks);\n  const shouldDisplayMarks = shouldUseMarks && Object.keys(marks).length < STEP_MARKS_DISPLAY_THRESHOLD;\n\n  // Temporary value is used to store the value of the input field before it is committed\n  const [temporaryValue, setTemporaryValue] = useState<number | undefined>(undefined);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        height: theme.general.heightSm,\n        gap: theme.spacing.md,\n        alignItems: 'center',\n      }}\n    >\n      <Slider.Root\n        disabled={disabled}\n        css={{ flex: 1, position: 'relative', 'span:last-child': { zIndex: ZINDEX_THUMB } }}\n        min={min}\n        max={max}\n        value={[value ?? 0]}\n        onValueCommit={([newValue]) => onAfterChange?.(newValue)}\n        onKeyDown={(e) => {\n          // If marks are used, we want to find the next value based on direction (arrow left/down or arrow right/up)\n          if (shouldUseMarks) {\n            e.preventDefault();\n\n            if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n              const nextValue = getNextValue(\n                marks,\n                value ?? 0,\n                e.key === 'ArrowLeft' || e.key === 'ArrowDown' ? 'down' : 'up',\n              );\n\n              onAfterChange?.(nextValue);\n              onChange(nextValue);\n            }\n          }\n        }}\n        onValueChange={([newValue]) => {\n          if (shouldUseMarks) {\n            onChange(getClosestValue(marks, newValue, value ?? 0));\n            return;\n          }\n          onChange(newValue);\n        }}\n        step={step ?? undefined}\n      >\n        {/* Render marks if needed */}\n        {shouldDisplayMarks && (\n          <div css={{ position: 'absolute', inset: 0, marginRight: THUMB_SIZE }}>\n            {keys(marks).map((markPosition) => (\n              <div\n                key={markPosition}\n                css={{\n                  position: 'absolute',\n                  zIndex: ZINDEX_MARK,\n                  top: 0,\n                  right: 0,\n                  bottom: 0,\n                  marginLeft: -MARK_OFFSET_X / 2,\n                  marginTop: MARK_OFFSET_Y,\n                  pointerEvents: 'none',\n                  borderRadius: '100%',\n                  backgroundColor: theme.colors.actionPrimaryBackgroundDefault,\n                  height: MARK_SIZE,\n                  width: MARK_SIZE,\n                  opacity: 0.5,\n                }}\n                style={{\n                  left: `${(Number(markPosition) / (max - min)) * 100}%`,\n                }}\n              />\n            ))}\n          </div>\n        )}\n        <Slider.Track className=\"TRACK\">\n          <Slider.Range />\n        </Slider.Track>\n        <Slider.Thumb css={{ position: 'relative', height: THUMB_SIZE, width: THUMB_SIZE }} />\n      </Slider.Root>\n      <Input\n        componentId={componentId ?? 'mlflow.experiment_tracking.common.line_smooth_slider'}\n        type=\"number\"\n        disabled={disabled}\n        min={min}\n        max={max}\n        css={{ width: 'min-content' }}\n        step={step}\n        value={temporaryValue ?? value}\n        onBlur={() => {\n          // If temporary value is set, we want to commit it to the value\n          if (!isUndefined(temporaryValue)) {\n            if (shouldUseMarks) {\n              onAfterChange?.(getClosestValue(marks, temporaryValue, value ?? 0));\n              onChange(getClosestValue(marks, temporaryValue, value ?? 0));\n            } else {\n              onAfterChange?.(clamp(temporaryValue, min, max));\n              onChange(clamp(temporaryValue, min, max));\n            }\n            setTemporaryValue(undefined);\n          }\n        }}\n        onChange={({ target, nativeEvent }) => {\n          // If the input event is an input event, we want to set the temporary value\n          // to be commited on blur instead of directly setting the value\n          if (nativeEvent instanceof InputEvent) {\n            setTemporaryValue(Number(target.value));\n            return;\n          }\n\n          // If using marks, find the next value based on the direction of the change\n          if (shouldUseMarks) {\n            const nextValue = getNextValue(marks, value ?? 0, Number(target.value) < Number(value) ? 'down' : 'up');\n\n            onChange(nextValue);\n            return;\n          }\n\n          // If not using marks, clamp the value to the min and max\n          onChange(clamp(Number(target.value), min, max));\n        }}\n      />\n    </div>\n  );\n};\n","import { Theme } from '@emotion/react';\n\nexport interface ProgressProps {\n  percent: number;\n  format: (percent: number) => string;\n  className?: string;\n}\n\n/**\n * Recreates basic features of antd's <Progress /> component.\n * Temporary solution, waiting for this component to be included in DuBois.\n */\nexport const Progress = (props: ProgressProps) => {\n  return (\n    <div css={styles.wrapper} className={props.className}>\n      <div css={styles.track}>\n        <div css={styles.progressTrack} style={{ width: `${props.percent}%` }} />\n      </div>\n      {props.format(props.percent)}\n    </div>\n  );\n};\n\nconst styles = {\n  wrapper: (theme: Theme) => ({ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }),\n  track: (theme: Theme) => ({\n    backgroundColor: theme.colors.backgroundSecondary,\n    height: theme.spacing.sm,\n    flex: 1,\n    borderRadius: theme.spacing.sm,\n  }),\n  progressTrack: (theme: Theme) => ({\n    backgroundColor: theme.colors.primary,\n    height: theme.spacing.sm,\n    borderRadius: theme.spacing.sm,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport _ from 'lodash';\nimport { Button, LegacySelect, Switch, LegacyTooltip, Radio, QuestionMarkIcon } from '@databricks/design-system';\nimport { Progress } from '../../common/components/Progress';\nimport { CHART_TYPE_LINE, METRICS_PLOT_POLLING_INTERVAL_MS } from './MetricsPlotPanel';\n\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { LineSmoothSlider } from './LineSmoothSlider';\n\nconst RadioGroup = Radio.Group;\nexport const X_AXIS_WALL = 'wall';\nexport const X_AXIS_STEP = 'step';\nexport const X_AXIS_RELATIVE = 'relative';\nexport const MAX_LINE_SMOOTHNESS = 100;\n\ntype Props = {\n  distinctMetricKeys: string[];\n  selectedMetricKeys: string[];\n  selectedXAxis: string;\n  handleXAxisChange: (...args: any[]) => any;\n  handleShowPointChange: (...args: any[]) => any;\n  handleMetricsSelectChange: (...args: any[]) => any;\n  handleYAxisLogScaleChange: (...args: any[]) => any;\n  handleLineSmoothChange: (value: number) => void;\n  chartType: string;\n  lineSmoothness: number;\n  yAxisLogScale: boolean;\n  showPoint: boolean;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n  numRuns: number;\n  numCompletedRuns: number;\n  handleDownloadCsv: (...args: any[]) => any;\n  disableSmoothnessControl: boolean;\n};\n\nclass MetricsPlotControlsImpl extends React.Component<Props> {\n  static defaultProps = {\n    disableSmoothnessControl: false,\n  };\n\n  handleMetricsSelectFilterChange = (text: any, option: any) =>\n    option.props.title.toUpperCase().includes(text.toUpperCase());\n\n  getAllMetricKeys = () => {\n    const { distinctMetricKeys } = this.props;\n    return distinctMetricKeys.map((metricKey) => ({\n      title: metricKey,\n      value: metricKey,\n      key: metricKey,\n    }));\n  };\n\n  render() {\n    const { chartType, yAxisLogScale, lineSmoothness, showPoint, numRuns, numCompletedRuns, disableSmoothnessControl } =\n      this.props;\n\n    const lineSmoothnessTooltipText = (\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage='Make the line between points \"smoother\" based on Exponential Moving Average. Smoothing can be useful for displaying the overall trend when the logging frequency is high.'\n        description=\"Helpful tooltip message to help with line smoothness for the metrics plot\"\n      />\n    );\n    const completedRunsTooltipText = (\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage=\"MLflow UI automatically fetches metric histories for active runs and updates the metrics plot with a {interval} second interval.\"\n        description=\"Helpful tooltip message to explain the automatic metrics plot update\"\n        values={{ interval: Math.round(METRICS_PLOT_POLLING_INTERVAL_MS / 1000) }}\n      />\n    );\n    return (\n      <div\n        className=\"plot-controls\"\n        css={[styles.controlsWrapper, chartType === CHART_TYPE_LINE && styles.centeredControlsWrapper]}\n      >\n        {chartType === CHART_TYPE_LINE ? (\n          <div>\n            <div className=\"inline-control\">\n              <div className=\"control-label\">\n                <FormattedMessage\n                  defaultMessage=\"Completed Runs\"\n                  description=\"Label for the progress bar to show the number of completed runs\"\n                />{' '}\n                <LegacyTooltip title={completedRunsTooltipText}>\n                  <QuestionMarkIcon />\n                </LegacyTooltip>\n                <Progress\n                  percent={Math.round((100 * numCompletedRuns) / numRuns)}\n                  format={() => `${numCompletedRuns}/${numRuns}`}\n                />\n              </div>\n            </div>\n            <div className=\"inline-control\">\n              <div className=\"control-label\">\n                <FormattedMessage\n                  defaultMessage=\"Points:\"\n                  // eslint-disable-next-line max-len\n                  description=\"Label for the toggle button to toggle to show points or not for the metric experiment run\"\n                />\n              </div>\n              <Switch\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_120\"\n                data-testid=\"show-point-toggle\"\n                defaultChecked={showPoint}\n                onChange={this.props.handleShowPointChange}\n              />\n            </div>\n            {!disableSmoothnessControl && (\n              <div className=\"block-control\">\n                <div className=\"control-label\">\n                  <FormattedMessage\n                    defaultMessage=\"Line Smoothness\"\n                    description=\"Label for the smoothness slider for the graph plot for metrics\"\n                  />{' '}\n                  <LegacyTooltip title={lineSmoothnessTooltipText}>\n                    <QuestionMarkIcon />\n                  </LegacyTooltip>\n                </div>\n                <LineSmoothSlider\n                  data-testid=\"smoothness-toggle\"\n                  min={1}\n                  max={MAX_LINE_SMOOTHNESS}\n                  onChange={this.props.handleLineSmoothChange}\n                  value={lineSmoothness}\n                />\n              </div>\n            )}\n            <div className=\"block-control\">\n              <div className=\"control-label\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  // eslint-disable-next-line max-len\n                  description=\"Label for the radio button to toggle the control on the X-axis of the metric graph for the experiment\"\n                />\n              </div>\n              <RadioGroup\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_154\"\n                name=\"metrics-plot-x-axis-radio-group\"\n                css={styles.xAxisControls}\n                onChange={this.props.handleXAxisChange}\n                value={this.props.selectedXAxis}\n              >\n                <Radio value={X_AXIS_STEP} data-testid=\"x-axis-radio\">\n                  <FormattedMessage\n                    defaultMessage=\"Step\"\n                    // eslint-disable-next-line max-len\n                    description=\"Radio button option to choose the step control option for the X-axis for metric graph on the experiment runs\"\n                  />\n                </Radio>\n                <Radio value={X_AXIS_WALL} data-testid=\"x-axis-radio\">\n                  <FormattedMessage\n                    defaultMessage=\"Time (Wall)\"\n                    // eslint-disable-next-line max-len\n                    description=\"Radio button option to choose the time wall control option for the X-axis for metric graph on the experiment runs\"\n                  />\n                </Radio>\n                <Radio value={X_AXIS_RELATIVE} data-testid=\"x-axis-radio\">\n                  <FormattedMessage\n                    defaultMessage=\"Time (Relative)\"\n                    // eslint-disable-next-line max-len\n                    description=\"Radio button option to choose the time relative control option for the X-axis for metric graph on the experiment runs\"\n                  />\n                </Radio>\n              </RadioGroup>\n            </div>\n          </div>\n        ) : null}\n        <div className=\"block-control\">\n          <div className=\"control-label\">\n            <FormattedMessage\n              defaultMessage=\"Y-axis:\"\n              // eslint-disable-next-line max-len\n              description=\"Label where the users can choose the metric of the experiment run to be plotted on the Y-axis\"\n            />\n          </div>\n          <LegacySelect\n            placeholder={this.props.intl.formatMessage({\n              defaultMessage: 'Please select metric',\n              description:\n                // eslint-disable-next-line max-len\n                'Placeholder text where one can select metrics from the list of available metrics to render on the graph',\n            })}\n            value={this.props.selectedMetricKeys}\n            onChange={this.props.handleMetricsSelectChange}\n            mode=\"multiple\"\n            css={styles.axisSelector}\n          >\n            {this.getAllMetricKeys().map((key) => (\n              <LegacySelect.Option value={key.value} key={key.key}>\n                {key.title}\n              </LegacySelect.Option>\n            ))}\n          </LegacySelect>\n        </div>\n        <div className=\"inline-control\">\n          <div className=\"control-label\">\n            <FormattedMessage\n              defaultMessage=\"Y-axis Log Scale:\"\n              // eslint-disable-next-line max-len\n              description=\"Label for the radio button to toggle the Log scale on the Y-axis of the metric graph for the experiment\"\n            />\n          </div>\n          <Switch\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_220\"\n            defaultChecked={yAxisLogScale}\n            onChange={this.props.handleYAxisLogScaleChange}\n          />\n        </div>\n        <div className=\"inline-control\">\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_222\"\n            css={{\n              textAlign: 'justify',\n              textAlignLast: 'left',\n            }}\n            onClick={this.props.handleDownloadCsv}\n          >\n            <FormattedMessage\n              defaultMessage=\"Download data\"\n              // eslint-disable-next-line max-len\n              description=\"String for the download csv button to download metrics from this run offline in a CSV format\"\n            />\n            <i className=\"fas fa-download\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  xAxisControls: (theme: any) => ({\n    label: { marginTop: theme.spacing.xs, marginBottom: theme.spacing.xs },\n  }),\n  controlsWrapper: { minWidth: '20%', maxWidth: '30%' },\n  axisSelector: { width: '100%' },\n  centeredControlsWrapper: {\n    // Make controls aligned to plotly line chart\n    justifyContent: 'center',\n  },\n};\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const MetricsPlotControls = injectIntl(MetricsPlotControlsImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { LegacyTable } from '@databricks/design-system';\nimport './HtmlTableView.css';\n\ntype Props = {\n  columns: any[];\n  values: any[];\n  styles?: any;\n  testId?: string;\n  scroll?: any;\n};\n\nexport class HtmlTableView extends Component<Props> {\n  render() {\n    const styles = this.props.styles || {};\n\n    return (\n      <LegacyTable\n        className=\"html-table-view\"\n        data-test-id={this.props.testId}\n        dataSource={this.props.values}\n        columns={this.props.columns}\n        scroll={this.props.scroll}\n        size=\"middle\"\n        pagination={false}\n        style={styles}\n      />\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { HtmlTableView } from './HtmlTableView';\nimport { getRunInfo } from '../reducers/Reducers';\nimport { getLatestMetrics, getMinMetrics, getMaxMetrics } from '../reducers/MetricReducer';\nimport Utils from '../../common/utils/Utils';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport Routes from '../routes';\nimport type { RunInfoEntity } from '../types';\n\nconst maxTableHeight = 300;\n// Because we make the table body scrollable, column widths must be fixed\n// so that the header widths match the table body column widths.\nconst headerColWidth = 350;\nconst dataColWidth = 200;\n\ntype MetricsSummaryTableProps = {\n  runUuids: string[];\n  runExperimentIds: any;\n  runDisplayNames: string[];\n  metricKeys: string[];\n  latestMetrics: any;\n  minMetrics: any;\n  maxMetrics: any;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n};\n\nclass MetricsSummaryTable extends React.Component<MetricsSummaryTableProps> {\n  render() {\n    const { runUuids } = this.props;\n    return (\n      <div className=\"metrics-summary\">\n        {runUuids.length > 1 ? this.renderMetricTables() : this.renderRunTable(runUuids[0])}\n      </div>\n    );\n  }\n\n  renderRunTable(runUuid: any) {\n    const { metricKeys, latestMetrics, minMetrics, maxMetrics, intl } = this.props;\n    const columns = [\n      {\n        title: intl.formatMessage({\n          defaultMessage: 'Metric',\n          description:\n            // eslint-disable-next-line max-len\n            'Column title for the column displaying the metric names for a run',\n        }),\n        dataIndex: 'metricKey',\n        sorter: (a: any, b: any) => (a.metricKey < b.metricKey ? -1 : a.metricKey > b.metricKey ? 1 : 0),\n        width: headerColWidth,\n      },\n      ...this.dataColumns(),\n    ];\n    return metricKeys.length === 0 ? null : (\n      <HtmlTableView\n        columns={columns}\n        values={getRunValuesByMetric(runUuid, metricKeys, latestMetrics, minMetrics, maxMetrics, intl)}\n        scroll={{ y: maxTableHeight }}\n      />\n    );\n  }\n\n  renderMetricTables() {\n    const { runExperimentIds, runUuids, runDisplayNames, metricKeys, latestMetrics, minMetrics, maxMetrics, intl } =\n      this.props;\n    const columns = [\n      {\n        title: intl.formatMessage({\n          defaultMessage: 'Run',\n          description:\n            // eslint-disable-next-line max-len\n            'Column title for the column displaying the run names for a metric',\n        }),\n        dataIndex: 'runLink',\n        sorter: (a: any, b: any) => (a.runName < b.runName ? -1 : a.runName > b.runName ? 1 : 0),\n        width: headerColWidth,\n      },\n      ...this.dataColumns(),\n    ];\n    return metricKeys.map((metricKey) => {\n      return (\n        <Fragment key={metricKey}>\n          <h1>{metricKey}</h1>\n          <HtmlTableView\n            columns={columns}\n            values={getMetricValuesByRun(\n              metricKey,\n              runExperimentIds,\n              runUuids,\n              runDisplayNames,\n              latestMetrics,\n              minMetrics,\n              maxMetrics,\n              intl,\n            )}\n            scroll={{ y: maxTableHeight }}\n          />\n        </Fragment>\n      );\n    });\n  }\n\n  dataColumns() {\n    return [\n      {\n        title: this.props.intl.formatMessage({\n          defaultMessage: 'Latest',\n          description: 'Column title for the column displaying the latest metric values for a metric',\n        }),\n        dataIndex: 'latestFormatted',\n        sorter: (a: any, b: any) => a.latestValue - b.latestValue,\n        width: dataColWidth,\n        ellipsis: true,\n      },\n      {\n        title: this.props.intl.formatMessage({\n          defaultMessage: 'Min',\n          description: 'Column title for the column displaying the minimum metric values for a metric',\n        }),\n        dataIndex: 'minFormatted',\n        sorter: (a: any, b: any) => a.minValue - b.minValue,\n        width: dataColWidth,\n        ellipsis: true,\n      },\n      {\n        title: this.props.intl.formatMessage({\n          defaultMessage: 'Max',\n          description: 'Column title for the column displaying the maximum metric values for a metric',\n        }),\n        dataIndex: 'maxFormatted',\n        sorter: (a: any, b: any) => a.maxValue - b.maxValue,\n        width: dataColWidth,\n        ellipsis: true,\n      },\n    ];\n  }\n}\n\nconst getMetricValuesByRun = (\n  metricKey: any,\n  runExperimentIds: any,\n  runUuids: any,\n  runDisplayNames: any,\n  latestMetrics: any,\n  minMetrics: any,\n  maxMetrics: any,\n  intl: any,\n) => {\n  return runUuids.map((runUuid: any, runIdx: any) => {\n    const runName = runDisplayNames[runIdx];\n    return {\n      runName: runName,\n      runLink: <Link to={Routes.getRunPageRoute(runExperimentIds[runUuid] || '', runUuid)}>{runName}</Link>,\n      key: runUuid,\n      ...rowData(runUuid, metricKey, latestMetrics, minMetrics, maxMetrics, intl),\n    };\n  });\n};\n\nconst getRunValuesByMetric = (\n  runUuid: any,\n  metricKeys: any,\n  latestMetrics: any,\n  minMetrics: any,\n  maxMetrics: any,\n  intl: any,\n) => {\n  return metricKeys.map((metricKey: any) => {\n    return {\n      metricKey,\n      key: metricKey,\n      ...rowData(runUuid, metricKey, latestMetrics, minMetrics, maxMetrics, intl),\n    };\n  });\n};\n\nconst rowData = (runUuid: any, metricKey: any, latestMetrics: any, minMetrics: any, maxMetrics: any, intl: any) => {\n  const latestMetric = getMetric(latestMetrics, runUuid, metricKey);\n  const minMetric = getMetric(minMetrics, runUuid, metricKey);\n  const maxMetric = getMetric(maxMetrics, runUuid, metricKey);\n  const latestValue = getValue(latestMetric);\n  const minValue = getValue(minMetric);\n  const maxValue = getValue(maxMetric);\n  return {\n    latestFormatted: (\n      <span title={latestValue} css={{ marginRight: 10 }}>\n        {formatMetric(latestMetric, intl)}\n      </span>\n    ),\n    minFormatted: (\n      <span title={minValue} css={{ marginRight: 10 }}>\n        {formatMetric(minMetric, intl)}\n      </span>\n    ),\n    maxFormatted: (\n      <span title={maxValue} css={{ marginRight: 10 }}>\n        {formatMetric(maxMetric, intl)}\n      </span>\n    ),\n    latestValue,\n    minValue,\n    maxValue,\n  };\n};\n\nconst getMetric = (valuesMap: any, runUuid: any, metricKey: any) => valuesMap[runUuid] && valuesMap[runUuid][metricKey];\n\nconst getValue = (metric: any) => metric && metric.value;\n\nconst formatMetric = (metric: any, intl: any) =>\n  metric === undefined\n    ? ''\n    : intl.formatMessage(\n        {\n          defaultMessage: '{value} (step={step})',\n          description: 'Formats a metric value along with the step number it corresponds to',\n        },\n        {\n          value: metric.value,\n          step: metric.step,\n        },\n      );\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids } = ownProps;\n  const runExperimentIds = {};\n  const latestMetrics = {};\n  const minMetrics = {};\n  const maxMetrics = {};\n  runUuids.forEach((runUuid: any) => {\n    const runInfo = getRunInfo(runUuid, state) as RunInfoEntity;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    runExperimentIds[runUuid] = runInfo && runInfo.experimentId;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    latestMetrics[runUuid] = getLatestMetrics(runUuid, state);\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    minMetrics[runUuid] = getMinMetrics(runUuid, state);\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    maxMetrics[runUuid] = getMaxMetrics(runUuid, state);\n  });\n  return { runExperimentIds, latestMetrics, minMetrics, maxMetrics };\n};\n\n// @ts-expect-error TS(2769): No overload matches this call.\nconst MetricsSummaryTableWithIntl = injectIntl(MetricsSummaryTable);\n\nexport default connect(mapStateToProps)(MetricsSummaryTableWithIntl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Button } from '@databricks/design-system';\n\ntype Props = {\n  icon: React.ReactNode;\n  style?: any;\n  className?: string;\n  restProps?: any;\n};\n\nexport const IconButton = ({ icon, className, style, ...restProps }: Props) => {\n  return (\n    <Button\n      componentId=\"codegen_mlflow_app_src_common_components_iconbutton.tsx_20\"\n      type=\"link\"\n      className={className}\n      style={{ padding: 0, ...style }}\n      {...restProps}\n    >\n      {icon}\n    </Button>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport Routes from '../routes';\nimport { IconButton } from '../../common/components/IconButton';\nimport Utils from '../../common/utils/Utils';\nimport { LegacyPopover } from '@databricks/design-system';\n\ntype Props = {\n  experimentId: string;\n  visible: boolean;\n  x: number;\n  y: number;\n  runItems: any[];\n  handleClose: (...args: any[]) => any;\n  handleKeyDown: (...args: any[]) => any;\n  handleVisibleChange: (...args: any[]) => any;\n};\n\nexport class RunLinksPopover extends React.Component<Props> {\n  componentDidMount() {\n    document.addEventListener('keydown', this.props.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.props.handleKeyDown);\n  }\n\n  renderContent = () => {\n    const { experimentId, runItems } = this.props;\n    return (\n      <div>\n        {runItems.map(({ name, runId, color, y }, index) => {\n          const key = `${runId}-${index}`;\n          const to = Routes.getRunPageRoute(experimentId, runId);\n          return (\n            <Link key={key} to={to}>\n              <p style={{ color }}>\n                <i className=\"fas fa-external-link-o\" style={{ marginRight: 5 }} />\n                {`${name}, ${Utils.formatMetric(y)}`}\n              </p>\n            </Link>\n          );\n        })}\n      </div>\n    );\n  };\n\n  renderTitle = () => {\n    const { handleClose } = this.props;\n    return (\n      <div>\n        <span>Jump to individual runs</span>\n        <IconButton\n          icon={<i className=\"fas fa-times\" />}\n          // @ts-expect-error TS(2322): Type '{ icon: Element; onClick: (...args: any[]) =... Remove this comment to see the full error message\n          onClick={handleClose}\n          style={{ float: 'right', marginLeft: '7px' }}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    const { visible, x, y, handleVisibleChange } = this.props;\n    return (\n      <LegacyPopover\n        content={this.renderContent()}\n        title={this.renderTitle()}\n        placement=\"left\"\n        visible={visible}\n        onVisibleChange={handleVisibleChange}\n      >\n        <div\n          style={{\n            left: x,\n            top: y,\n            position: 'absolute',\n          }}\n        />\n      </LegacyPopover>\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport { getMetricHistoryApi, getRunApi } from '../actions';\nimport _ from 'lodash';\nimport { MetricsPlotView } from './MetricsPlotView';\nimport { getRunInfo } from '../reducers/Reducers';\nimport { MetricsPlotControls, X_AXIS_WALL, X_AXIS_RELATIVE, X_AXIS_STEP } from './MetricsPlotControls';\nimport MetricsSummaryTable from './MetricsSummaryTable';\nimport qs from 'qs';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport Routes from '../routes';\nimport { RunLinksPopover } from './RunLinksPopover';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { saveAs } from 'file-saver';\nimport { Spinner } from '@databricks/design-system';\nimport { normalizeMetricsHistoryEntry } from '../utils/MetricsUtils';\nimport type { Location, NavigateFunction } from '../../common/utils/RoutingUtils';\n\nexport const CHART_TYPE_LINE = 'line';\nexport const CHART_TYPE_BAR = 'bar';\n\nexport const METRICS_PLOT_POLLING_INTERVAL_MS = 10 * 1000; // 10 seconds\n// A run is considered as 'hanging' if its status is 'RUNNING' but its latest metric was logged\n// prior to this threshold. The metrics plot doesn't automatically update hanging runs.\nexport const METRICS_PLOT_HANGING_RUN_THRESHOLD_MS = 3600 * 24 * 7 * 1000; // 1 week\nconst MAXIMUM_METRIC_DATA_POINTS = 100_000;\nconst GET_METRIC_HISTORY_MAX_RESULTS = 25000;\n\nexport const convertMetricsToCsv = (metrics: any) => {\n  const header = ['run_id', ...Object.keys(metrics[0].history[0])];\n  const rows = metrics.flatMap(({ runUuid, history }: any) =>\n    history.map((metric: any) => [runUuid, ...Object.values(metric)]),\n  );\n  return [header]\n    .concat(rows)\n    .map((row) => row.join(','))\n    .join('\\n');\n};\n\ntype OwnMetricsPlotPanelProps = {\n  experimentIds: string[];\n  runUuids: string[];\n  completedRunUuids: string[];\n  metricKey: string;\n  latestMetricsByRunUuid: any;\n  distinctMetricKeys: string[];\n  metricsWithRunInfoAndHistory: any[];\n  getMetricHistoryApi: (...args: any[]) => any;\n  getRunApi: (...args: any[]) => any;\n  location: Location;\n  navigate: NavigateFunction;\n  runDisplayNames: string[];\n  containsInfinities: boolean;\n};\n\ntype MetricsPlotPanelState = any;\n\ntype MetricsPlotPanelProps = OwnMetricsPlotPanelProps & typeof MetricsPlotPanel.defaultProps;\n\nexport class MetricsPlotPanel extends React.Component<MetricsPlotPanelProps, MetricsPlotPanelState> {\n  _isMounted = false;\n\n  static defaultProps = {\n    containsInfinities: false,\n  };\n\n  displayPopover: any;\n  intervalId: any;\n\n  // The fields below are exposed as instance attributes rather than component state so that they\n  // can be updated without triggering a rerender.\n  //\n  // ID of Javascript future (created via setTimeout()) used to trigger legend-click events after a\n  // delay, to allow time for double-click events to occur\n  legendClickTimeout = null;\n  // Time (millis after Unix epoch) since last legend click - if two clicks occur in short\n  // succession, we trigger a double-click event & cancel the pending single-click.\n  prevLegendClickTime = (Math as any).inf;\n\n  // Last curve ID clicked in the legend, used to determine if we're double-clicking on a specific\n  // legend curve\n  lastClickedLegendCurveId = null;\n\n  // Max time interval (in milliseconds) between two successive clicks on the metric plot legend\n  // that constitutes a double-click\n  MAX_DOUBLE_CLICK_INTERVAL_MS = 300;\n\n  // Delay (in ms) between when a user clicks on the metric plot legend & when event-handler logic\n  // (to toggle display of the selected curve on or off) actually fires. Set to a larger value than\n  // MAX_DOUBLE_CLICK_INTERVAL_MS to allow time for the double-click handler to fire before firing\n  // a single-click event.\n  SINGLE_CLICK_EVENT_DELAY_MS = this.MAX_DOUBLE_CLICK_INTERVAL_MS + 10;\n\n  constructor(props: MetricsPlotPanelProps) {\n    super(props);\n    this.state = {\n      historyRequestIds: [],\n      popoverVisible: false,\n      popoverX: 0,\n      popoverY: 0,\n      popoverRunItems: [],\n      focused: true,\n      loading: false,\n    };\n    this.displayPopover = false;\n    this.intervalId = null;\n  }\n\n  hasMultipleExperiments() {\n    return this.props.experimentIds && this.props.experimentIds.length > 1;\n  }\n\n  onFocus = () => {\n    this.setState({ focused: true });\n  };\n\n  onBlur = () => {\n    this.setState({ focused: false });\n  };\n\n  clearEventListeners = () => {\n    // `window.removeEventListener` does nothing when called with an unregistered event listener:\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n    window.removeEventListener('focus', this.onFocus);\n    window.removeEventListener('blur', this.onBlur);\n  };\n\n  clearInterval = () => {\n    // `clearInterval` does nothing when called with `null` or `undefine`:\n    // https://www.w3.org/TR/2011/WD-html5-20110525/timers.html#dom-windowtimers-cleartimeout\n    clearInterval(this.intervalId);\n    this.intervalId = null;\n  };\n\n  allRunsCompleted = () => {\n    return this.props.completedRunUuids.length === this.props.runUuids.length;\n  };\n\n  isHangingRunUuid = (activeRunUuid: any) => {\n    const metrics = this.props.latestMetricsByRunUuid[activeRunUuid];\n    if (!metrics) {\n      return false;\n    }\n    // @ts-expect-error TS(2345): Argument of type '({ timestamp }: { timestamp: any... Remove this comment to see the full error message\n    const timestamps = Object.values(metrics).map(({ timestamp }) => timestamp);\n    // @ts-expect-error TS(2345): Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n    const latestTimestamp = Math.max(...timestamps);\n    return new Date().getTime() - latestTimestamp > METRICS_PLOT_HANGING_RUN_THRESHOLD_MS;\n  };\n\n  getActiveRunUuids = () => {\n    const { completedRunUuids, runUuids } = this.props;\n    const activeRunUuids = _.difference(runUuids, completedRunUuids);\n    return activeRunUuids.filter(_.negate(this.isHangingRunUuid)); // Exclude hanging runs\n  };\n\n  shouldPoll = () => {\n    return !(this.allRunsCompleted() || this.getActiveRunUuids().length === 0);\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.loadMetricHistory(this.props.runUuids, this.getUrlState().selectedMetricKeys);\n    if (this.shouldPoll()) {\n      // Set event listeners to detect when this component gains/loses focus,\n      // e.g., a user switches to a different browser tab or app.\n      window.addEventListener('blur', this.onBlur);\n      window.addEventListener('focus', this.onFocus);\n      this.intervalId = setInterval(() => {\n        // Skip polling if this component is out of focus.\n        // @ts-expect-error TS(4111): Property 'focused' comes from an index signature, ... Remove this comment to see the full error message\n        if (this.state.focused) {\n          const activeRunUuids = this.getActiveRunUuids();\n          this.loadMetricHistory(activeRunUuids, this.getUrlState().selectedMetricKeys);\n          this.loadRuns(activeRunUuids);\n\n          if (!this.shouldPoll()) {\n            this.clearEventListeners();\n            this.clearInterval();\n          }\n        }\n      }, METRICS_PLOT_POLLING_INTERVAL_MS);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.clearEventListeners();\n    this.clearInterval();\n  }\n\n  getUrlState() {\n    return Utils.getMetricPlotStateFromUrl(this.props.location.search);\n  }\n\n  static predictChartType(metrics: any) {\n    // Show bar chart when every metric has exactly 1 metric history\n    if (metrics && metrics.length && _.every(metrics, (metric) => metric.history && metric.history.length === 1)) {\n      return CHART_TYPE_BAR;\n    }\n    return CHART_TYPE_LINE;\n  }\n\n  static isComparing(search: any) {\n    const params = qs.parse(search);\n    const runs = params && params['?runs'];\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    return runs ? JSON.parse(runs).length > 1 : false;\n  }\n\n  // Update page URL from component state. Intended to be called after React applies component\n  // state updates, e.g. in a setState callback\n  updateUrlState = (updatedState: any) => {\n    const { runUuids, metricKey, location, navigate } = this.props;\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    const experimentIds = JSON.parse(qs.parse(location.search)['experiments']);\n    const newState = {\n      ...this.getUrlState(),\n      ...updatedState,\n    };\n    const {\n      selectedXAxis,\n      selectedMetricKeys,\n      showPoint,\n      yAxisLogScale,\n      lineSmoothness,\n      layout,\n      deselectedCurves,\n      lastLinearYAxisRange,\n    } = newState;\n    navigate(\n      Routes.getMetricPageRoute(\n        runUuids,\n        metricKey,\n        experimentIds,\n        selectedMetricKeys,\n        layout,\n        selectedXAxis,\n        yAxisLogScale,\n        lineSmoothness,\n        showPoint,\n        deselectedCurves,\n        lastLinearYAxisRange,\n      ),\n      {\n        replace: true,\n      },\n    );\n  };\n\n  getNumTotalMetrics = () => {\n    return this.props.metricsWithRunInfoAndHistory.map(({ history }) => history.length).reduce((a, b) => a + b, 0);\n  };\n\n  loadMetricHistory = (runUuids: any, metricKeys: any) => {\n    if (this.getNumTotalMetrics() >= MAXIMUM_METRIC_DATA_POINTS) {\n      Utils.logErrorAndNotifyUser(\n        'The total number of metric data points exceeded 100,000. Cannot fetch more metrics.',\n      );\n      return Promise.resolve([]);\n    }\n    this.setState({ loading: true });\n    const promises = runUuids\n      .flatMap((id: any) =>\n        metricKeys.map((key: any) => ({\n          runUuid: id,\n          metricKey: key,\n        })),\n      )\n      // Avoid fetching non existing metrics\n      .filter(({ runUuid, metricKey }: any) => this.props.latestMetricsByRunUuid[runUuid].hasOwnProperty(metricKey))\n      .map(async ({ runUuid, metricKey }: any) => {\n        const requestIds = [];\n        const id = getUUID();\n        requestIds.push(id);\n        const firstPageResp = await this.props.getMetricHistoryApi(\n          runUuid,\n          metricKey,\n          GET_METRIC_HISTORY_MAX_RESULTS,\n          undefined,\n          id,\n        );\n\n        let nextPageToken = firstPageResp.value.next_page_token;\n        while (nextPageToken) {\n          if (this.getNumTotalMetrics() >= MAXIMUM_METRIC_DATA_POINTS) {\n            return { requestIds, success: false };\n          }\n\n          const uid = getUUID();\n          requestIds.push(uid);\n          /* eslint-disable no-await-in-loop */\n          const nextPageResp = await this.props.getMetricHistoryApi(\n            runUuid,\n            metricKey,\n            GET_METRIC_HISTORY_MAX_RESULTS,\n            nextPageToken,\n            uid,\n          );\n          nextPageToken = nextPageResp.value.next_page_token;\n        }\n        return { requestIds, success: true };\n      });\n    return Promise.all(promises).then((results) => {\n      // Ensure we don't set state if component is unmounted\n      if (this._isMounted) {\n        this.setState({ loading: false });\n      }\n      if (!results.every(({ success }) => success)) {\n        Utils.logErrorAndNotifyUser(\n          'The total number of metric data points exceeded 100,000. Aborted fetching metrics.',\n        );\n      }\n      return results.flatMap(({ requestIds }) => requestIds);\n    });\n  };\n\n  loadRuns = (runUuids: any) => {\n    const requestIds: any = [];\n    runUuids.forEach((runUuid: any) => {\n      const id = getUUID();\n      this.props.getRunApi(runUuid);\n      requestIds.push(id);\n    });\n    return requestIds;\n  };\n\n  getMetrics = () => {\n    /* eslint-disable no-param-reassign */\n    const state = this.getUrlState();\n    const selectedMetricsSet = new Set(state.selectedMetricKeys);\n    const { selectedXAxis } = state;\n    const { metricsWithRunInfoAndHistory } = this.props;\n\n    // Take only selected metrics\n    const metrics = metricsWithRunInfoAndHistory.filter((m) => selectedMetricsSet.has(m.metricKey));\n\n    // Sort metric history based on selected x-axis\n    metrics.forEach((metric) => {\n      const isStep = selectedXAxis === X_AXIS_STEP && metric.history[0] && _.isNumber(metric.history[0].step);\n      // Metric history can be large. Doing an in-place here to save memory\n      metric.history.sort(isStep ? Utils.compareByStepAndTimestamp : Utils.compareByTimestamp);\n    });\n\n    return metrics;\n  };\n\n  /**\n   * Handle changes in the scale type of the y-axis\n   * @param yAxisLogScale: Boolean - if true, y-axis should be converted to log scale, and if false,\n   * y-axis scale should be converted to a linear scale.\n   */\n  handleYAxisLogScaleChange = (yAxisLogScale: any) => {\n    const state = this.getUrlState();\n    const newLayout = _.cloneDeep(state.layout);\n    const newAxisType = yAxisLogScale ? 'log' : 'linear';\n\n    // Handle special case of a linear y-axis scale with negative values converted to log scale &\n    // now being restored to linear scale, by restoring the old linear-axis range from\n    // state.linearYAxisRange. In particular, we assume that if state.linearYAxisRange\n    // is non-empty, it contains a linear y axis range with negative values.\n    if (!yAxisLogScale && (state as any).lastLinearYAxisRange && (state as any).lastLinearYAxisRange.length > 0) {\n      newLayout.yaxis = {\n        type: 'linear',\n        range: (state as any).lastLinearYAxisRange,\n      };\n      this.updateUrlState({ layout: newLayout, lastLinearYAxisRange: [] });\n      return;\n    }\n\n    // Otherwise, if plot previously had no y axis range configured, simply set the axis type to\n    // log or linear scale appropriately\n    if (!state.layout.yaxis || !state.layout.yaxis.range) {\n      newLayout.yaxis = {\n        type: newAxisType,\n        autorange: true,\n        ...(newAxisType === 'log' ? { exponentformat: 'e' } : {}),\n      };\n      this.updateUrlState({ layout: newLayout, lastLinearYAxisRange: [] });\n      return;\n    }\n\n    // lastLinearYAxisRange contains the last range used for a linear-scale y-axis. We set\n    // this state attribute if and only if we're converting from a linear-scale y-axis with\n    // negative bounds to a log scale axis, so that we can restore the negative bounds if we\n    // subsequently convert back to a linear scale axis. Otherwise, we reset this attribute to an\n    // empty array\n    let lastLinearYAxisRange = [];\n\n    // At this point, we know the plot previously had a y axis specified with range bounds\n    // Convert the range to/from log scale as appropriate\n    const oldLayout = state.layout;\n    const oldYRange = oldLayout.yaxis.range;\n    if (yAxisLogScale) {\n      if (oldYRange[0] <= 0) {\n        lastLinearYAxisRange = oldYRange;\n        // When converting to log scale, handle negative values (which have no log-scale\n        // representation as taking the log of a negative number is not possible) as follows:\n        // If bottom of old Y range is negative, then tell plotly to infer the log y-axis scale\n        // (set 'autorange' to true), and preserve the old range in the lastLinearYAxisRange\n        // state attribute so that we can restore it if the user converts back to a linear-scale\n        // y axis. We defer to Plotly's autorange here under the assumption that it will produce\n        // a reasonable y-axis log scale for plots containing negative values.\n        newLayout.yaxis = {\n          type: 'log',\n          autorange: true,\n          exponentformat: 'e',\n        };\n      } else {\n        newLayout.yaxis = {\n          type: 'log',\n          range: [Math.log(oldYRange[0]) / Math.log(10), Math.log(oldYRange[1]) / Math.log(10)],\n          exponentformat: 'e',\n        };\n      }\n    } else {\n      // Otherwise, convert from log to linear scale normally\n      newLayout.yaxis = {\n        type: 'linear',\n        range: [Math.pow(10, oldYRange[0]), Math.pow(10, oldYRange[1])],\n      };\n    }\n    this.updateUrlState({ layout: newLayout, lastLinearYAxisRange });\n  };\n\n  /**\n   * Handle changes in the type of the metric plot's X axis (e.g. changes from wall-clock\n   * scale to relative-time scale to step-based scale).\n   * @param e: Selection event such that e.target.value is a string containing the new X axis type\n   */\n  handleXAxisChange = (e: any) => {\n    // Set axis value type, & reset axis scaling via autorange\n    const state = this.getUrlState();\n    const axisEnumToPlotlyType = {\n      [X_AXIS_WALL]: 'date',\n      [X_AXIS_RELATIVE]: 'linear',\n      [X_AXIS_STEP]: 'linear',\n    };\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const axisType = axisEnumToPlotlyType[e.target.value] || 'linear';\n    const newLayout = {\n      ...state.layout,\n      xaxis: {\n        autorange: true,\n        type: axisType,\n      },\n    };\n    this.updateUrlState({ selectedXAxis: e.target.value, layout: newLayout });\n  };\n\n  getAxisType() {\n    const state = this.getUrlState();\n    return state.layout && state.layout.yaxis && state.layout.yaxis.type === 'log' ? 'log' : 'linear';\n  }\n\n  /**\n   * Handle changes to metric plot layout (x & y axis ranges), e.g. specifically if the user\n   * zooms in or out on the plot.\n   *\n   * @param newLayout: Object containing the new Plot layout. See\n   * https://plot.ly/javascript/plotlyjs-events/#update-data for details on the object's fields\n   * and schema.\n   */\n  handleLayoutChange = (newLayout: any) => {\n    this.displayPopover = false;\n    const state = this.getUrlState();\n    // Unfortunately, we need to parse out the x & y axis range changes from the onLayout event...\n    // see https://plot.ly/javascript/plotlyjs-events/#update-data\n    const {\n      'xaxis.range[0]': newXRange0,\n      'xaxis.range[1]': newXRange1,\n      'yaxis.range[0]': newYRange0,\n      'yaxis.range[1]': newYRange1,\n      'xaxis.autorange': xAxisAutorange,\n      'yaxis.autorange': yAxisAutorange,\n      'yaxis.showspikes': yAxisShowSpikes,\n      'xaxis.showspikes': xAxisShowSpikes,\n      ...restFields\n    } = newLayout;\n\n    let mergedLayout = {\n      ...state.layout,\n      ...restFields,\n    };\n    let lastLinearYAxisRange = [...(state as any).lastLinearYAxisRange];\n\n    // Set fields for x axis\n    const newXAxis = mergedLayout.xaxis || {};\n    if (newXRange0 !== undefined && newXRange1 !== undefined) {\n      newXAxis.range = [newXRange0, newXRange1];\n      newXAxis.autorange = false;\n    }\n    if (xAxisShowSpikes) {\n      newXAxis.showspikes = true;\n    }\n    if (xAxisAutorange) {\n      newXAxis.autorange = true;\n    }\n    // Set fields for y axis\n    const newYAxis = mergedLayout.yaxis || {};\n    if (newYRange0 !== undefined && newYRange1 !== undefined) {\n      newYAxis.range = [newYRange0, newYRange1];\n      newYAxis.autorange = false;\n    }\n    if (yAxisShowSpikes) {\n      newYAxis.showspikes = true;\n    }\n    if (yAxisAutorange) {\n      lastLinearYAxisRange = [];\n      const axisType = state.layout && state.layout.yaxis && state.layout.yaxis.type === 'log' ? 'log' : 'linear';\n      newYAxis.autorange = true;\n      newYAxis.type = axisType;\n    }\n    if (newYAxis.type === 'log') {\n      newYAxis.exponentformat = 'e';\n    }\n    // Merge new X & Y axis info into layout\n    mergedLayout = {\n      ...mergedLayout,\n      xaxis: newXAxis,\n      yaxis: newYAxis,\n    };\n    this.updateUrlState({ layout: mergedLayout, lastLinearYAxisRange });\n  };\n\n  handleDownloadCsv = () => {\n    const csv = convertMetricsToCsv(this.props.metricsWithRunInfoAndHistory);\n    const blob = new Blob([csv], { type: 'application/csv;charset=utf-8' });\n    saveAs(blob, 'metrics.csv');\n  };\n\n  // Return unique key identifying the curve or bar chart corresponding to the specified\n  // Plotly plot data element\n  static getCurveKey(plotDataElem: any) {\n    // In bar charts, each legend item consists of a single run ID (all bars for that run are\n    // associated with & toggled by that legend item)\n    if (plotDataElem.type === 'bar') {\n      return plotDataElem.runId;\n    } else {\n      // In line charts, each (run, metricKey) tuple has its own legend item, so construct\n      // a unique legend item identifier by concatenating the run id & metric key\n      return Utils.getCurveKey(plotDataElem.runId, plotDataElem.metricName);\n    }\n  }\n\n  /**\n   * Handle clicking on a single curve within the plot legend in order to toggle its display\n   * on/off.\n   */\n  handleLegendClick = ({ curveNumber, data }: any) => {\n    // If two clicks in short succession, trigger double-click event\n    const state = this.getUrlState();\n    const currentTime = Date.now();\n    if (\n      currentTime - this.prevLegendClickTime < this.MAX_DOUBLE_CLICK_INTERVAL_MS &&\n      curveNumber === this.lastClickedLegendCurveId\n    ) {\n      this.handleLegendDoubleClick({ curveNumber, data });\n      this.prevLegendClickTime = (Math as any).inf;\n    } else {\n      // Otherwise, record time of current click & trigger click event\n      // Wait full double-click window to trigger setting state, and only if there was no\n      // double-click do we run the single-click logic (we wait a little extra to be safe)\n      const curveKey = MetricsPlotPanel.getCurveKey(data[curveNumber]);\n      // @ts-expect-error TS(2322): Type 'number' is not assignable to type 'null'.\n      this.legendClickTimeout = window.setTimeout(() => {\n        const existingDeselectedCurves = new Set((state as any).deselectedCurves);\n        if (existingDeselectedCurves.has(curveKey)) {\n          existingDeselectedCurves.delete(curveKey);\n        } else {\n          existingDeselectedCurves.add(curveKey);\n        }\n        this.updateUrlState({ deselectedCurves: Array.from(existingDeselectedCurves) });\n      }, this.SINGLE_CLICK_EVENT_DELAY_MS);\n      this.prevLegendClickTime = currentTime;\n    }\n    this.lastClickedLegendCurveId = curveNumber;\n    // Return false to disable plotly event handler\n    return false;\n  };\n\n  /**\n   * Handle double-clicking on a single curve within the plot legend in order to toggle display\n   * of the selected curve on (and disable display of all other curves).\n   */\n  handleLegendDoubleClick = ({ curveNumber, data }: any) => {\n    // @ts-expect-error TS(2769): No overload matches this call.\n    window.clearTimeout(this.legendClickTimeout);\n    // Exclude everything besides the current curve key\n    const curveKey = MetricsPlotPanel.getCurveKey(data[curveNumber]);\n    const allCurveKeys = data.map((elem: any) => MetricsPlotPanel.getCurveKey(elem));\n    const newDeselectedCurves = allCurveKeys.filter((curvePair: any) => curvePair !== curveKey);\n    this.updateUrlState({ deselectedCurves: newDeselectedCurves });\n    return false;\n  };\n\n  handleMetricsSelectChange = (metricKeys: any) => {\n    const existingMetricKeys = this.getUrlState().selectedMetricKeys || [];\n    const newMetricKeys = metricKeys.filter((k: any) => !existingMetricKeys.includes(k));\n    this.updateUrlState({ selectedMetricKeys: metricKeys });\n    this.loadMetricHistory(this.props.runUuids, newMetricKeys).then((requestIds) => {\n      this.setState({ loading: false });\n      this.setState((prevState: any) => ({\n        historyRequestIds: [...prevState.historyRequestIds, ...requestIds],\n      }));\n    });\n  };\n\n  handleShowPointChange = (showPoint: any) => this.updateUrlState({ showPoint });\n\n  handleLineSmoothChange = (lineSmoothness: any) => this.updateUrlState({ lineSmoothness });\n\n  handleKeyDownOnPopover = ({ key }: any) => {\n    if (key === 'Escape') {\n      this.setState({ popoverVisible: false });\n    }\n  };\n\n  updatePopover = (data: any) => {\n    this.displayPopover = !this.displayPopover;\n\n    // Ignore double click.\n    setTimeout(() => {\n      if (this.displayPopover) {\n        this.displayPopover = false;\n        const { popoverVisible, popoverX, popoverY } = this.state;\n        const {\n          points,\n          event: { clientX, clientY },\n        } = data;\n        const samePointClicked = popoverX === clientX && popoverY === clientY;\n        const runItems = points\n          .sort((a: any, b: any) => b.y - a.y)\n          .map((point: any) => ({\n            runId: point.data.runId,\n            name: point.data.name,\n            color: point.fullData.marker.color,\n            y: point.y,\n          }));\n\n        this.setState({\n          popoverVisible: !popoverVisible || !samePointClicked,\n          popoverX: clientX,\n          popoverY: clientY,\n          popoverRunItems: runItems,\n        });\n      }\n    }, 300);\n  };\n\n  render() {\n    const { experimentIds, runUuids, runDisplayNames, distinctMetricKeys, location } = this.props;\n    const { popoverVisible, popoverX, popoverY, popoverRunItems, loading } = this.state;\n    const state = this.getUrlState();\n    const { showPoint, selectedXAxis, selectedMetricKeys, lineSmoothness } = state;\n    const yAxisLogScale = this.getAxisType() === 'log';\n    const { historyRequestIds } = this.state;\n    const metrics = this.getMetrics();\n    const chartType = MetricsPlotPanel.predictChartType(metrics);\n    return (\n      <div className=\"metrics-plot-container\">\n        <MetricsPlotControls\n          // @ts-expect-error TS(2322): Type '{ numRuns: number; numCompletedRuns: number;... Remove this comment to see the full error message\n          numRuns={this.props.runUuids.length}\n          numCompletedRuns={this.props.completedRunUuids.length}\n          distinctMetricKeys={distinctMetricKeys}\n          selectedXAxis={selectedXAxis}\n          selectedMetricKeys={selectedMetricKeys}\n          handleXAxisChange={this.handleXAxisChange}\n          handleMetricsSelectChange={this.handleMetricsSelectChange}\n          handleShowPointChange={this.handleShowPointChange}\n          handleYAxisLogScaleChange={this.handleYAxisLogScaleChange}\n          handleLineSmoothChange={this.handleLineSmoothChange}\n          chartType={chartType}\n          lineSmoothness={lineSmoothness}\n          yAxisLogScale={yAxisLogScale}\n          showPoint={showPoint}\n          handleDownloadCsv={this.handleDownloadCsv}\n          disableSmoothnessControl={this.props.containsInfinities}\n        />\n        <div className=\"metrics-plot-data\">\n          <RequestStateWrapper\n            requestIds={historyRequestIds}\n            // In this case where there are no history request IDs (e.g. on the\n            // initial page load / before we try to load additional metrics),\n            // optimistically render the children\n            shouldOptimisticallyRender={historyRequestIds.length === 0}\n          >\n            {this.hasMultipleExperiments() ? null : (\n              <RunLinksPopover\n                experimentId={experimentIds[0]}\n                visible={popoverVisible}\n                x={popoverX}\n                y={popoverY}\n                runItems={popoverRunItems}\n                handleKeyDown={this.handleKeyDownOnPopover}\n                handleClose={() => this.setState({ popoverVisible: false })}\n                handleVisibleChange={(visible) => this.setState({ popoverVisible: visible })}\n              />\n            )}\n            <Spinner size=\"large\" css={{ visibility: loading ? 'visible' : 'hidden' }} />\n            <MetricsPlotView\n              // @ts-expect-error TS(2322): Type '{ runUuids: string[]; runDisplayNames: strin... Remove this comment to see the full error message\n              runUuids={runUuids}\n              runDisplayNames={runDisplayNames}\n              xAxis={selectedXAxis}\n              metrics={this.getMetrics()}\n              metricKeys={selectedMetricKeys}\n              showPoint={showPoint}\n              chartType={chartType}\n              isComparing={MetricsPlotPanel.isComparing(location.search)}\n              lineSmoothness={lineSmoothness}\n              extraLayout={state.layout}\n              deselectedCurves={(state as any).deselectedCurves}\n              onLayoutChange={this.handleLayoutChange}\n              onClick={this.updatePopover}\n              onLegendClick={this.handleLegendClick}\n              onLegendDoubleClick={this.handleLegendDoubleClick}\n            />\n            <MetricsSummaryTable\n              runUuids={runUuids}\n              runDisplayNames={runDisplayNames}\n              metricKeys={selectedMetricKeys}\n            />\n          </RequestStateWrapper>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids } = ownProps;\n  const completedRunUuids = runUuids.filter((runUuid: any) => getRunInfo(runUuid, state).status !== 'RUNNING');\n  const { latestMetricsByRunUuid, metricsByRunUuid } = state.entities;\n\n  // All metric keys from all runUuids, non-distinct\n  const metricKeys = _.flatMap(runUuids, (runUuid) => {\n    const latestMetrics = latestMetricsByRunUuid[runUuid];\n    return latestMetrics ? Object.keys(latestMetrics) : [];\n  });\n  const distinctMetricKeys = [...new Set(metricKeys)].sort();\n  const runDisplayNames: any = [];\n\n  let containsInfinities = false;\n\n  // Flat array of all metrics, with history and information of the run it belongs to\n  // This is used for underlying MetricsPlotView & predicting chartType for MetricsPlotControls\n  const metricsWithRunInfoAndHistory = _.flatMap(runUuids, (runUuid) => {\n    const runDisplayName = Utils.getRunDisplayName(getRunInfo(runUuid, state), runUuid);\n    runDisplayNames.push(runDisplayName);\n    const metricsHistory = metricsByRunUuid[runUuid];\n    return metricsHistory\n      ? Object.keys(metricsHistory).map((metricKey) => {\n          const history = metricsHistory[metricKey].map((entry: any) => normalizeMetricsHistoryEntry(entry));\n          if (history.some(({ value }: any) => typeof value === 'number' && !isNaN(value) && !isFinite(value))) {\n            containsInfinities = true;\n          }\n          return { metricKey, history, runUuid, runDisplayName };\n        })\n      : [];\n  });\n\n  return {\n    runDisplayNames,\n    latestMetricsByRunUuid,\n    distinctMetricKeys,\n    metricsWithRunInfoAndHistory,\n    completedRunUuids,\n    containsInfinities,\n  };\n};\n\nconst mapDispatchToProps = { getMetricHistoryApi, getRunApi };\n\nexport default withRouterNext(connect(mapStateToProps, mapDispatchToProps)(MetricsPlotPanel));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../common/utils/Utils';\nimport _ from 'lodash';\nimport { saveAs } from 'file-saver';\nimport { X_AXIS_STEP, X_AXIS_RELATIVE, MAX_LINE_SMOOTHNESS } from './MetricsPlotControls';\nimport { CHART_TYPE_BAR, convertMetricsToCsv } from './MetricsPlotPanel';\nimport { LazyPlot } from './LazyPlot';\nimport { generateInfinityAnnotations } from '../utils/MetricsUtils';\nimport { injectIntl, IntlShape } from 'react-intl';\n\nconst MAX_RUN_NAME_DISPLAY_LENGTH = 24;\nconst EMA_THRESHOLD = 1;\n\nexport const EMA = (mArray: any, smoothingWeight: any) => {\n  // If all elements in the set of metric values are constant, or if\n  // the degree of smoothing is set to the minimum value, return the\n  // original set of metric values\n  if (smoothingWeight <= 1 || !mArray || mArray.length <= EMA_THRESHOLD || mArray.every((v: any) => v === mArray[0])) {\n    return mArray;\n  }\n\n  const smoothness = smoothingWeight / (MAX_LINE_SMOOTHNESS + 1);\n  const smoothedArray = [];\n  let biasedElement = 0;\n  for (let i = 0; i < mArray.length; i++) {\n    if (!isNaN(mArray[i])) {\n      biasedElement = biasedElement * smoothness + (1 - smoothness) * mArray[i];\n      // To avoid biasing earlier elements toward smaller-than-accurate values, we divide\n      // all elements by a `debiasedWeight` that asymptotically increases and approaches\n      // 1 as the element index increases\n      const debiasWeight = 1.0 - Math.pow(smoothness, i + 1);\n      const debiasedElement = biasedElement / debiasWeight;\n      smoothedArray.push(debiasedElement);\n    } else {\n      smoothedArray.push(mArray[i]);\n    }\n  }\n  return smoothedArray;\n};\n\n// To avoid pulling in plotly.js (unlazily) and / or using a separate package, just duplicating here\n// Copied from https://github.com/plotly/plotly.js/blob/v2.5.1/src/fonts/ploticon.js#L100\nconst DISK_ICON = {\n  width: 857.1,\n  height: 1000,\n  // eslint-disable-next-line max-len\n  path: 'm214-7h429v214h-429v-214z m500 0h72v500q0 8-6 21t-11 20l-157 156q-5 6-19 12t-22 5v-232q0-22-15-38t-38-16h-322q-22 0-37 16t-16 38v232h-72v-714h72v232q0 22 16 38t37 16h465q22 0 38-16t15-38v-232z m-214 518v178q0 8-5 13t-13 5h-107q-7 0-13-5t-5-13v-178q0-8 5-13t13-5h107q7 0 13 5t5 13z m357-18v-518q0-22-15-38t-38-16h-750q-23 0-38 16t-16 38v750q0 22 16 38t38 16h517q23 0 50-12t42-26l156-157q16-15 27-42t11-49z',\n  transform: 'matrix(1 0 0 -1 0 850)',\n};\n\ntype MetricsPlotViewImplProps = {\n  runUuids: string[];\n  runDisplayNames: string[];\n  metrics: any[];\n  xAxis: string;\n  metricKeys: string[];\n  showPoint: boolean;\n  chartType: string;\n  isComparing: boolean;\n  lineSmoothness?: number;\n  extraLayout?: any;\n  onLayoutChange: (...args: any[]) => any;\n  onClick: (...args: any[]) => any;\n  onLegendClick: (...args: any[]) => any;\n  onLegendDoubleClick: (...args: any[]) => any;\n  deselectedCurves: string[];\n  intl?: any;\n};\n\nexport class MetricsPlotViewImpl extends React.Component<MetricsPlotViewImplProps> {\n  static getLineLegend = (metricKey: any, runDisplayName: any, isComparing: any) => {\n    let legend = metricKey;\n    if (isComparing) {\n      legend += `, ${Utils.truncateString(runDisplayName, MAX_RUN_NAME_DISPLAY_LENGTH)}`;\n    }\n    return legend;\n  };\n\n  static getXValuesForLineChart(history: any, xAxisType: any, intl?: IntlShape) {\n    if (history.length === 0) {\n      return [];\n    }\n    switch (xAxisType) {\n      case X_AXIS_STEP:\n        return history.map(({ step }: any) => step);\n      case X_AXIS_RELATIVE: {\n        // @ts-expect-error TS(2339): Property 'timestamp' does not exist on type '{ toS... Remove this comment to see the full error message\n        const { timestamp: minTimestamp } = _.minBy(history, 'timestamp');\n        return history.map(({ timestamp }: any) => (timestamp - minTimestamp) / 1000);\n      }\n      default: // X_AXIS_WALL\n        return history.map(({ timestamp }: any) => timestamp);\n    }\n  }\n\n  /**\n   * Regenerates annotations and shapes for infinity and NaN values.\n   * Best called infrequently. Ideally should be called only when data input changes.\n   */\n  regenerateInfinityAnnotations = () => {\n    const { metrics, xAxis, extraLayout } = this.props;\n    const isYAxisLog = extraLayout?.yaxis?.type === 'log';\n    const annotationData = {};\n\n    metrics.forEach((metric) => {\n      const { metricKey, history } = metric;\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      annotationData[metricKey] = generateInfinityAnnotations({\n        xValues: (MetricsPlotView as any).getXValuesForLineChart(history, xAxis, this.props.intl),\n        yValues: history.map((entry: any) => (typeof entry.value === 'number' ? entry.value : Number(entry.value))),\n        isLogScale: isYAxisLog,\n        stringFormatter: (value) => this.props.intl.formatMessage(value, { metricKey }),\n      });\n    });\n\n    this.#annotationData = annotationData;\n  };\n\n  #annotationData = {};\n\n  getPlotPropsForLineChart = () => {\n    const { metrics, xAxis, showPoint, lineSmoothness, isComparing, deselectedCurves } = this.props;\n\n    const deselectedCurvesSet = new Set(deselectedCurves);\n    const shapes: any = [];\n    const annotations: any = [];\n\n    const data = metrics.map((metric) => {\n      const { metricKey, runDisplayName, history, runUuid } = metric;\n      const historyValues = history.map((entry: any) =>\n        typeof entry.value === 'number' ? entry.value : Number(entry.value),\n      );\n      // For metrics with exactly one non-NaN item, we set `isSingleHistory` to `true` in order\n      // to display the item as a point. For metrics with zero non-NaN items (i.e., empty metrics),\n      // we also set `isSingleHistory` to `true` in order to populate the plot legend with a\n      // point-style entry for each empty metric, although no data will be plotted for empty\n      // metrics\n      const isSingleHistory = historyValues.filter((value: any) => !isNaN(value)).length <= 1;\n\n      const visible = !deselectedCurvesSet.has(Utils.getCurveKey(runUuid, metricKey)) ? true : 'legendonly';\n\n      if (this.#annotationData && metricKey in this.#annotationData && visible === true) {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        shapes.push(...this.#annotationData[metricKey].shapes);\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        annotations.push(...this.#annotationData[metricKey].annotations);\n      }\n\n      return {\n        name: (MetricsPlotView as any).getLineLegend(metricKey, runDisplayName, isComparing),\n        x: (MetricsPlotView as any).getXValuesForLineChart(history, xAxis),\n        y: (isSingleHistory ? historyValues : EMA(historyValues, lineSmoothness)).map((entry: any) =>\n          !isFinite(entry) ? NaN : entry,\n        ),\n        text: historyValues.map((value: any) => (isNaN(value) ? value : value.toFixed(5))),\n        type: 'scattergl',\n        mode: isSingleHistory ? 'markers' : 'lines+markers',\n        marker: { opacity: isSingleHistory || showPoint ? 1 : 0 },\n        hovertemplate: isSingleHistory || lineSmoothness === 1 ? '%{y}' : 'Value: %{text}<br>Smoothed: %{y}',\n        visible: visible,\n        runId: runUuid,\n        metricName: metricKey,\n      };\n    });\n    const props = { data };\n\n    (props as any).layout = {\n      ...(props as any).layout,\n      ...this.props.extraLayout,\n      shapes,\n      annotations,\n    };\n\n    return props;\n  };\n\n  getPlotPropsForBarChart = () => {\n    /* eslint-disable no-param-reassign */\n    const { runUuids, runDisplayNames, deselectedCurves } = this.props;\n\n    // A reverse lookup of `metricKey: { runUuid: value, metricKey }`\n    const historyByMetricKey = this.props.metrics.reduce((map, metric) => {\n      const { runUuid, metricKey, history } = metric;\n      const value = history[0] && history[0].value;\n      if (!map[metricKey]) {\n        map[metricKey] = { metricKey, [runUuid]: value };\n      } else {\n        map[metricKey][runUuid] = value;\n      }\n      return map;\n    }, {});\n\n    const arrayOfHistorySortedByMetricKey = _.sortBy(Object.values(historyByMetricKey), 'metricKey');\n\n    const sortedMetricKeys = arrayOfHistorySortedByMetricKey.map((history) => (history as any).metricKey);\n    const deselectedCurvesSet = new Set(deselectedCurves);\n    const data = runUuids.map((runUuid, i) => {\n      const visibility = deselectedCurvesSet.has(runUuid) ? { visible: 'legendonly' } : {};\n      return {\n        name: Utils.truncateString(runDisplayNames[i], MAX_RUN_NAME_DISPLAY_LENGTH),\n        x: sortedMetricKeys,\n        y: arrayOfHistorySortedByMetricKey.map((history) => (history as any)[runUuid]),\n        type: 'bar',\n        runId: runUuid,\n        ...visibility,\n      };\n    });\n\n    const layout = { barmode: 'group' };\n    const props = { data, layout };\n    props.layout = {\n      ...props.layout,\n      ...this.props.extraLayout,\n    };\n    return props;\n  };\n\n  componentDidMount() {\n    this.regenerateInfinityAnnotations();\n  }\n\n  componentDidUpdate() {\n    /**\n     * TODO: make sure that annotations are regenereated only when data changes.\n     * In fact, all internal recalculations should be done only then.\n     */\n    this.regenerateInfinityAnnotations();\n  }\n\n  render() {\n    const { onLayoutChange, onClick, onLegendClick, onLegendDoubleClick } = this.props;\n    const plotProps =\n      this.props.chartType === CHART_TYPE_BAR ? this.getPlotPropsForBarChart() : this.getPlotPropsForLineChart();\n\n    return (\n      <div className=\"metrics-plot-view-container\">\n        <LazyPlot\n          {...plotProps}\n          useResizeHandler\n          onRelayout={onLayoutChange}\n          onClick={onClick}\n          onLegendClick={onLegendClick}\n          onLegendDoubleClick={onLegendDoubleClick}\n          style={{ width: '100%', height: '100%' }}\n          layout={_.cloneDeep((plotProps as any).layout)}\n          config={{\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: ['sendDataToCloud'],\n            modeBarButtonsToAdd: [\n              {\n                name: 'Download plot data as CSV',\n                icon: DISK_ICON,\n                click: () => {\n                  const csv = convertMetricsToCsv(this.props.metrics);\n                  const blob = new Blob([csv], { type: 'application/csv;charset=utf-8' });\n                  saveAs(blob, 'metrics.csv');\n                },\n              },\n            ],\n          }}\n        />\n      </div>\n    );\n  }\n}\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const MetricsPlotView = injectIntl(MetricsPlotViewImpl);\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n"],"names":["Plot","React","LazyPlot","_ref","fallback","props","_jsx","SectionErrorBoundary","children","LegacySkeleton","active","getClosestValue","marks","value","defaultValue","keys","reduce","prev","curr","Math","abs","Number","getNextValue","currentValue","direction","max","Object","filter","mark","map","min","_ref4","name","styles","LineSmoothSlider","step","onChange","disabled","onAfterChange","componentId","theme","useDesignSystemTheme","shouldUseMarks","isEmpty","shouldDisplayMarks","length","temporaryValue","setTemporaryValue","useState","undefined","_jsxs","css","_css","display","height","general","heightSm","gap","spacing","md","alignItems","Slider","Root","flex","position","zIndex","onValueCommit","_ref2","newValue","onKeyDown","e","preventDefault","includes","key","nextValue","onValueChange","_ref3","inset","marginRight","markPosition","top","right","bottom","marginLeft","marginTop","pointerEvents","borderRadius","backgroundColor","colors","actionPrimaryBackgroundDefault","width","opacity","style","left","Track","className","Range","Thumb","Input","type","onBlur","isUndefined","clamp","_ref5","target","nativeEvent","InputEvent","Progress","wrapper","track","progressTrack","percent","format","sm","backgroundSecondary","primary","RadioGroup","Radio","Group","X_AXIS_WALL","X_AXIS_STEP","X_AXIS_RELATIVE","MAX_LINE_SMOOTHNESS","MetricsPlotControlsImpl","constructor","arguments","handleMetricsSelectFilterChange","text","option","title","toUpperCase","getAllMetricKeys","distinctMetricKeys","this","metricKey","render","chartType","yAxisLogScale","lineSmoothness","showPoint","numRuns","numCompletedRuns","disableSmoothnessControl","lineSmoothnessTooltipText","FormattedMessage","id","defaultMessage","completedRunsTooltipText","values","interval","round","METRICS_PLOT_POLLING_INTERVAL_MS","controlsWrapper","CHART_TYPE_LINE","centeredControlsWrapper","LegacyTooltip","QuestionMarkIcon","Switch","defaultChecked","handleShowPointChange","handleLineSmoothChange","xAxisControls","handleXAxisChange","selectedXAxis","LegacySelect","placeholder","intl","formatMessage","selectedMetricKeys","handleMetricsSelectChange","mode","axisSelector","Option","handleYAxisLogScaleChange","Button","onClick","handleDownloadCsv","defaultProps","label","xs","marginBottom","minWidth","maxWidth","justifyContent","MetricsPlotControls","injectIntl","HtmlTableView","Component","LegacyTable","testId","dataSource","columns","scroll","size","pagination","MetricsSummaryTable","runUuids","renderMetricTables","renderRunTable","runUuid","metricKeys","latestMetrics","minMetrics","maxMetrics","dataIndex","sorter","a","b","dataColumns","getRunValuesByMetric","y","runExperimentIds","runDisplayNames","runName","Fragment","getMetricValuesByRun","latestValue","ellipsis","minValue","maxValue","runIdx","runLink","Link","to","Routes","getRunPageRoute","rowData","latestMetric","getMetric","minMetric","maxMetric","getValue","latestFormatted","formatMetric","minFormatted","maxFormatted","valuesMap","metric","MetricsSummaryTableWithIntl","connect","mapStateToProps","state","ownProps","forEach","runInfo","getRunInfo","experimentId","getLatestMetrics","getMinMetrics","getMaxMetrics","IconButton","icon","restProps","padding","RunLinksPopover","renderContent","runItems","index","runId","color","Utils","renderTitle","handleClose","float","componentDidMount","document","addEventListener","handleKeyDown","componentWillUnmount","removeEventListener","visible","x","handleVisibleChange","LegacyPopover","content","placement","onVisibleChange","CHART_TYPE_BAR","MAXIMUM_METRIC_DATA_POINTS","convertMetricsToCsv","metrics","header","history","rows","flatMap","concat","row","join","MetricsPlotPanel","super","_isMounted","displayPopover","intervalId","legendClickTimeout","prevLegendClickTime","inf","lastClickedLegendCurveId","MAX_DOUBLE_CLICK_INTERVAL_MS","SINGLE_CLICK_EVENT_DELAY_MS","onFocus","setState","focused","clearEventListeners","window","clearInterval","allRunsCompleted","completedRunUuids","isHangingRunUuid","activeRunUuid","latestMetricsByRunUuid","timestamps","timestamp","latestTimestamp","Date","getTime","getActiveRunUuids","_","shouldPoll","updateUrlState","updatedState","location","navigate","experimentIds","JSON","parse","qs","search","newState","getUrlState","layout","deselectedCurves","lastLinearYAxisRange","getMetricPageRoute","replace","getNumTotalMetrics","metricsWithRunInfoAndHistory","loadMetricHistory","logErrorAndNotifyUser","Promise","resolve","loading","promises","hasOwnProperty","async","requestIds","getUUID","push","nextPageToken","getMetricHistoryApi","next_page_token","success","uid","all","then","results","every","_ref6","_ref7","loadRuns","getRunApi","getMetrics","selectedMetricsSet","Set","m","has","isStep","sort","compareByStepAndTimestamp","compareByTimestamp","newLayout","newAxisType","yaxis","range","autorange","exponentformat","oldYRange","log","pow","axisType","xaxis","handleLayoutChange","newXRange0","newXRange1","newYRange0","newYRange1","xAxisAutorange","yAxisAutorange","yAxisShowSpikes","xAxisShowSpikes","restFields","mergedLayout","newXAxis","showspikes","newYAxis","csv","blob","Blob","saveAs","handleLegendClick","_ref8","curveNumber","data","currentTime","now","handleLegendDoubleClick","curveKey","getCurveKey","setTimeout","existingDeselectedCurves","delete","add","Array","from","_ref9","clearTimeout","newDeselectedCurves","elem","curvePair","existingMetricKeys","newMetricKeys","k","prevState","historyRequestIds","handleKeyDownOnPopover","_ref10","popoverVisible","updatePopover","popoverX","popoverY","points","event","clientX","clientY","samePointClicked","point","fullData","marker","popoverRunItems","hasMultipleExperiments","setInterval","activeRunUuids","getMetricPlotStateFromUrl","predictChartType","isComparing","params","runs","getAxisType","plotDataElem","metricName","containsInfinities","RequestStateWrapper","shouldOptimisticallyRender","Spinner","visibility","MetricsPlotView","xAxis","extraLayout","onLayoutChange","onLegendClick","onLegendDoubleClick","mapDispatchToProps","withRouterNext","status","metricsByRunUuid","entities","runDisplayName","getRunDisplayName","metricsHistory","entry","normalizeMetricsHistoryEntry","some","_ref11","isNaN","isFinite","EMA","mArray","smoothingWeight","v","smoothness","smoothedArray","biasedElement","i","debiasedElement","DISK_ICON","path","transform","_annotationData","_classPrivateFieldLooseKey","MetricsPlotViewImpl","regenerateInfinityAnnotations","_extraLayout$yaxis","isYAxisLog","annotationData","generateInfinityAnnotations","xValues","getXValuesForLineChart","yValues","isLogScale","stringFormatter","_classPrivateFieldLooseBase","defineProperty","writable","getPlotPropsForLineChart","deselectedCurvesSet","shapes","annotations","historyValues","isSingleHistory","getLineLegend","NaN","toFixed","hovertemplate","getPlotPropsForBarChart","historyByMetricKey","arrayOfHistorySortedByMetricKey","sortedMetricKeys","truncateString","barmode","xAxisType","minTimestamp","componentDidUpdate","plotProps","useResizeHandler","onRelayout","config","displaylogo","scrollZoom","modeBarButtonsToRemove","modeBarButtonsToAdd","click","legend","NotFoundPage"],"sourceRoot":""}